
EXTI_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00004332  000043c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800150  00800150  000044b6  2**0
                  ALLOC
  3 .stab         000040ec  00000000  00000000  000044b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017a3  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000a036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000c07b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000e100  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000e280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000e542  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000edd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__vector_1>
       8:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__vector_2>
       c:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e5       	ldi	r26, 0x50	; 80
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 0c 	call	0x1968	; 0x1968 <main>
      8a:	0c 94 97 21 	jmp	0x432e	; 0x432e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e1       	ldi	r26, 0x1F	; 31
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 21 	jmp	0x42f8	; 0x42f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 21 	jmp	0x42c0	; 0x42c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e1       	ldi	r24, 0x1F	; 31
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 21 	jmp	0x42f8	; 0x42f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e1       	ldi	r22, 0x1F	; 31
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 21 	jmp	0x4308	; 0x4308 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 21 	jmp	0x4310	; 0x4310 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <displayOptionsPage>:
#define delay				1000 //ms
/*********************Set your own password************* */
#define PasswordLength      5
#define Password          "51120"

void displayOptionsPage(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     ca6:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
	LCD_enu_SendString("1-DCMotor 3-Exit");
     caa:	80 e6       	ldi	r24, 0x60	; 96
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Stepper Motor");
     cba:	81 e7       	ldi	r24, 0x71	; 113
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <takeUserOption>:
void takeUserOption(u8 *option){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <takeUserOption+0x6>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Keypad_enu_getKey(option);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Keypad_enu_getKey>
		if(*option == '1' || *option == '2' || *option == '3')break;
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	80 81       	ld	r24, Z
     ce4:	81 33       	cpi	r24, 0x31	; 49
     ce6:	51 f0       	breq	.+20     	; 0xcfc <takeUserOption+0x34>
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	80 81       	ld	r24, Z
     cee:	82 33       	cpi	r24, 0x32	; 50
     cf0:	29 f0       	breq	.+10     	; 0xcfc <takeUserOption+0x34>
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	80 81       	ld	r24, Z
     cf8:	83 33       	cpi	r24, 0x33	; 51
     cfa:	69 f7       	brne	.-38     	; 0xcd6 <takeUserOption+0xe>
	}
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <displayRotationOptions>:

void displayRotationOptions(){
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     d0e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
	LCD_enu_SendString("1-Rotate CW ");
     d12:	81 e8       	ldi	r24, 0x81	; 129
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Rotate CCW");
     d22:	8e e8       	ldi	r24, 0x8E	; 142
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <returnAngle>:

u16 returnAngle(u8 * array){
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <returnAngle+0x6>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <returnAngle+0x8>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	9d 83       	std	Y+5, r25	; 0x05
     d40:	8c 83       	std	Y+4, r24	; 0x04
	u16 k = 0;
     d42:	1b 82       	std	Y+3, r1	; 0x03
     d44:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i = 0 ; i<3 ; i++){
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	2b c0       	rjmp	.+86     	; 0xda0 <returnAngle+0x70>
		// ignore non entered digits
		if(array[i] == 'a') break;
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	8c 81       	ldd	r24, Y+4	; 0x04
     d52:	9d 81       	ldd	r25, Y+5	; 0x05
     d54:	fc 01       	movw	r30, r24
     d56:	e2 0f       	add	r30, r18
     d58:	f3 1f       	adc	r31, r19
     d5a:	80 81       	ld	r24, Z
     d5c:	81 36       	cpi	r24, 0x61	; 97
     d5e:	19 f1       	breq	.+70     	; 0xda6 <returnAngle+0x76>
		k = k*10 + (array[i] - '0');
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	9b 81       	ldd	r25, Y+3	; 0x03
     d64:	9c 01       	movw	r18, r24
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	c9 01       	movw	r24, r18
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	a9 01       	movw	r20, r18
     d76:	48 0f       	add	r20, r24
     d78:	59 1f       	adc	r21, r25
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	fc 01       	movw	r30, r24
     d86:	e2 0f       	add	r30, r18
     d88:	f3 1f       	adc	r31, r19
     d8a:	80 81       	ld	r24, Z
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	84 0f       	add	r24, r20
     d92:	95 1f       	adc	r25, r21
     d94:	c0 97       	sbiw	r24, 0x30	; 48
     d96:	9b 83       	std	Y+3, r25	; 0x03
     d98:	8a 83       	std	Y+2, r24	; 0x02
	LCD_enu_SendString("2-Rotate CCW");
}

u16 returnAngle(u8 * array){
	u16 k = 0;
	for(u8 i = 0 ; i<3 ; i++){
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	8f 5f       	subi	r24, 0xFF	; 255
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	90 f2       	brcs	.-92     	; 0xd4a <returnAngle+0x1a>
		// ignore non entered digits
		if(array[i] == 'a') break;
		k = k*10 + (array[i] - '0');
	}
	return k;
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <loginSystem>:
void loginSystem(void){
     dba:	0f 93       	push	r16
     dbc:	1f 93       	push	r17
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	ce 57       	subi	r28, 0x7E	; 126
     dc8:	d0 40       	sbci	r29, 0x00	; 0
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
	Keypad_enu_Init();
     dd4:	0e 94 2c 18 	call	0x3058	; 0x3058 <Keypad_enu_Init>
	LCD_enu_Init();
     dd8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <LCD_enu_Init>
	DC_Motor_enu_Init(1, 1);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	0e 94 7e 19 	call	0x32fc	; 0x32fc <DC_Motor_enu_Init>
	STEP_Motor_enu_Init();
     de4:	0e 94 c4 0c 	call	0x1988	; 0x1988 <STEP_Motor_enu_Init>
	u8 savedPass[] = Password , pass[PasswordLength], Index=0, checkCounter = 0,homeFlag = 0,inputFlag = 0;
     de8:	ce 01       	movw	r24, r28
     dea:	86 59       	subi	r24, 0x96	; 150
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	ec 96       	adiw	r28, 0x3c	; 60
     df0:	9f af       	std	Y+63, r25	; 0x3f
     df2:	8e af       	std	Y+62, r24	; 0x3e
     df4:	ec 97       	sbiw	r28, 0x3c	; 60
     df6:	89 e1       	ldi	r24, 0x19	; 25
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	ee 96       	adiw	r28, 0x3e	; 62
     dfc:	9f af       	std	Y+63, r25	; 0x3f
     dfe:	8e af       	std	Y+62, r24	; 0x3e
     e00:	ee 97       	sbiw	r28, 0x3e	; 62
     e02:	96 e0       	ldi	r25, 0x06	; 6
     e04:	ef 96       	adiw	r28, 0x3f	; 63
     e06:	9f af       	std	Y+63, r25	; 0x3f
     e08:	ef 97       	sbiw	r28, 0x3f	; 63
     e0a:	ee 96       	adiw	r28, 0x3e	; 62
     e0c:	ee ad       	ldd	r30, Y+62	; 0x3e
     e0e:	ff ad       	ldd	r31, Y+63	; 0x3f
     e10:	ee 97       	sbiw	r28, 0x3e	; 62
     e12:	00 80       	ld	r0, Z
     e14:	ee 96       	adiw	r28, 0x3e	; 62
     e16:	8e ad       	ldd	r24, Y+62	; 0x3e
     e18:	9f ad       	ldd	r25, Y+63	; 0x3f
     e1a:	ee 97       	sbiw	r28, 0x3e	; 62
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	ee 96       	adiw	r28, 0x3e	; 62
     e20:	9f af       	std	Y+63, r25	; 0x3f
     e22:	8e af       	std	Y+62, r24	; 0x3e
     e24:	ee 97       	sbiw	r28, 0x3e	; 62
     e26:	ec 96       	adiw	r28, 0x3c	; 60
     e28:	ee ad       	ldd	r30, Y+62	; 0x3e
     e2a:	ff ad       	ldd	r31, Y+63	; 0x3f
     e2c:	ec 97       	sbiw	r28, 0x3c	; 60
     e2e:	00 82       	st	Z, r0
     e30:	ec 96       	adiw	r28, 0x3c	; 60
     e32:	8e ad       	ldd	r24, Y+62	; 0x3e
     e34:	9f ad       	ldd	r25, Y+63	; 0x3f
     e36:	ec 97       	sbiw	r28, 0x3c	; 60
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	ec 96       	adiw	r28, 0x3c	; 60
     e3c:	9f af       	std	Y+63, r25	; 0x3f
     e3e:	8e af       	std	Y+62, r24	; 0x3e
     e40:	ec 97       	sbiw	r28, 0x3c	; 60
     e42:	ef 96       	adiw	r28, 0x3f	; 63
     e44:	9f ad       	ldd	r25, Y+63	; 0x3f
     e46:	ef 97       	sbiw	r28, 0x3f	; 63
     e48:	91 50       	subi	r25, 0x01	; 1
     e4a:	ef 96       	adiw	r28, 0x3f	; 63
     e4c:	9f af       	std	Y+63, r25	; 0x3f
     e4e:	ef 97       	sbiw	r28, 0x3f	; 63
     e50:	ef 96       	adiw	r28, 0x3f	; 63
     e52:	ef ad       	ldd	r30, Y+63	; 0x3f
     e54:	ef 97       	sbiw	r28, 0x3f	; 63
     e56:	ee 23       	and	r30, r30
     e58:	c1 f6       	brne	.-80     	; 0xe0a <loginSystem+0x50>
     e5a:	fe 01       	movw	r30, r28
     e5c:	e7 59       	subi	r30, 0x97	; 151
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	10 82       	st	Z, r1
     e62:	fe 01       	movw	r30, r28
     e64:	e8 59       	subi	r30, 0x98	; 152
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	10 82       	st	Z, r1
     e6a:	fe 01       	movw	r30, r28
     e6c:	e9 59       	subi	r30, 0x99	; 153
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	10 82       	st	Z, r1
     e72:	fe 01       	movw	r30, r28
     e74:	ea 59       	subi	r30, 0x9A	; 154
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	10 82       	st	Z, r1
	LCD_enu_SendString("Hello, User :)");
     e7a:	8b e9       	ldi	r24, 0x9B	; 155
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
     e82:	fe 01       	movw	r30, r28
     e84:	e1 5a       	subi	r30, 0xA1	; 161
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	aa e7       	ldi	r26, 0x7A	; 122
     e8e:	b4 e4       	ldi	r27, 0x44	; 68
     e90:	80 83       	st	Z, r24
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	a2 83       	std	Z+2, r26	; 0x02
     e96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e98:	8e 01       	movw	r16, r28
     e9a:	05 5a       	subi	r16, 0xA5	; 165
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
     e9e:	fe 01       	movw	r30, r28
     ea0:	e1 5a       	subi	r30, 0xA1	; 161
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a e7       	ldi	r20, 0x7A	; 122
     eb2:	55 e4       	ldi	r21, 0x45	; 69
     eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 83       	st	Z, r24
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	a2 83       	std	Z+2, r26	; 0x02
     ec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec6:	fe 01       	movw	r30, r28
     ec8:	e5 5a       	subi	r30, 0xA5	; 165
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5f e3       	ldi	r21, 0x3F	; 63
     edc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ee0:	88 23       	and	r24, r24
     ee2:	44 f4       	brge	.+16     	; 0xef4 <loginSystem+0x13a>
		__ticks = 1;
     ee4:	fe 01       	movw	r30, r28
     ee6:	e7 5a       	subi	r30, 0xA7	; 167
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	80 83       	st	Z, r24
     ef2:	64 c0       	rjmp	.+200    	; 0xfbc <loginSystem+0x202>
	else if (__tmp > 65535)
     ef4:	fe 01       	movw	r30, r28
     ef6:	e5 5a       	subi	r30, 0xA5	; 165
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	60 81       	ld	r22, Z
     efc:	71 81       	ldd	r23, Z+1	; 0x01
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	0c f0       	brlt	.+2      	; 0xf14 <loginSystem+0x15a>
     f12:	43 c0       	rjmp	.+134    	; 0xf9a <loginSystem+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f14:	fe 01       	movw	r30, r28
     f16:	e1 5a       	subi	r30, 0xA1	; 161
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	8e 01       	movw	r16, r28
     f34:	07 5a       	subi	r16, 0xA7	; 167
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	f8 01       	movw	r30, r16
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
     f4a:	1f c0       	rjmp	.+62     	; 0xf8a <loginSystem+0x1d0>
     f4c:	fe 01       	movw	r30, r28
     f4e:	e9 5a       	subi	r30, 0xA9	; 169
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	80 e9       	ldi	r24, 0x90	; 144
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	91 83       	std	Z+1, r25	; 0x01
     f58:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f5a:	fe 01       	movw	r30, r28
     f5c:	e9 5a       	subi	r30, 0xA9	; 169
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <loginSystem+0x1aa>
     f68:	fe 01       	movw	r30, r28
     f6a:	e9 5a       	subi	r30, 0xA9	; 169
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f72:	de 01       	movw	r26, r28
     f74:	a7 5a       	subi	r26, 0xA7	; 167
     f76:	bf 4f       	sbci	r27, 0xFF	; 255
     f78:	fe 01       	movw	r30, r28
     f7a:	e7 5a       	subi	r30, 0xA7	; 167
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f8a:	fe 01       	movw	r30, r28
     f8c:	e7 5a       	subi	r30, 0xA7	; 167
     f8e:	ff 4f       	sbci	r31, 0xFF	; 255
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	d1 f6       	brne	.-76     	; 0xf4c <loginSystem+0x192>
     f98:	27 c0       	rjmp	.+78     	; 0xfe8 <loginSystem+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	8e 01       	movw	r16, r28
     f9c:	07 5a       	subi	r16, 0xA7	; 167
     f9e:	1f 4f       	sbci	r17, 0xFF	; 255
     fa0:	fe 01       	movw	r30, r28
     fa2:	e5 5a       	subi	r30, 0xA5	; 165
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	f8 01       	movw	r30, r16
     fb8:	91 83       	std	Z+1, r25	; 0x01
     fba:	80 83       	st	Z, r24
     fbc:	de 01       	movw	r26, r28
     fbe:	ab 5a       	subi	r26, 0xAB	; 171
     fc0:	bf 4f       	sbci	r27, 0xFF	; 255
     fc2:	fe 01       	movw	r30, r28
     fc4:	e7 5a       	subi	r30, 0xA7	; 167
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	8d 93       	st	X+, r24
     fce:	9c 93       	st	X, r25
     fd0:	fe 01       	movw	r30, r28
     fd2:	eb 5a       	subi	r30, 0xAB	; 171
     fd4:	ff 4f       	sbci	r31, 0xFF	; 255
     fd6:	80 81       	ld	r24, Z
     fd8:	91 81       	ldd	r25, Z+1	; 0x01
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <loginSystem+0x220>
     fde:	fe 01       	movw	r30, r28
     fe0:	eb 5a       	subi	r30, 0xAB	; 171
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24
	_delay_ms(delay);
	LCD_enu_Clear();
     fe8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     fec:	8a ea       	ldi	r24, 0xAA	; 170
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
	while(1){
	/************************************ Taking Password Section*************************************/
			u8 key=0,order = 0;
     ffc:	fe 01       	movw	r30, r28
     ffe:	eb 58       	subi	r30, 0x8B	; 139
    1000:	ff 4f       	sbci	r31, 0xFF	; 255
    1002:	10 82       	st	Z, r1
    1004:	fe 01       	movw	r30, r28
    1006:	ea 58       	subi	r30, 0x8A	; 138
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	10 82       	st	Z, r1
			Keypad_enu_getKey(&key);
    100c:	ce 01       	movw	r24, r28
    100e:	8b 58       	subi	r24, 0x8B	; 139
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Keypad_enu_getKey>
			if(key != KEYPAD_U8_NO_KEY_PRESSED){
    1016:	fe 01       	movw	r30, r28
    1018:	eb 58       	subi	r30, 0x8B	; 139
    101a:	ff 4f       	sbci	r31, 0xFF	; 255
    101c:	80 81       	ld	r24, Z
    101e:	8f 3f       	cpi	r24, 0xFF	; 255
    1020:	31 f1       	breq	.+76     	; 0x106e <loginSystem+0x2b4>
				LCD_enu_SendChar('*');
    1022:	8a e2       	ldi	r24, 0x2A	; 42
    1024:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_enu_SendChar>
				pass[Index] = key;
    1028:	fe 01       	movw	r30, r28
    102a:	e7 59       	subi	r30, 0x97	; 151
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	80 81       	ld	r24, Z
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	fe 01       	movw	r30, r28
    1036:	eb 58       	subi	r30, 0x8B	; 139
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	40 81       	ld	r20, Z
    103c:	ce 01       	movw	r24, r28
    103e:	80 59       	subi	r24, 0x90	; 144
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	40 83       	st	Z, r20
				Index++;
    104a:	de 01       	movw	r26, r28
    104c:	a7 59       	subi	r26, 0x97	; 151
    104e:	bf 4f       	sbci	r27, 0xFF	; 255
    1050:	fe 01       	movw	r30, r28
    1052:	e7 59       	subi	r30, 0x97	; 151
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	8f 5f       	subi	r24, 0xFF	; 255
    105a:	8c 93       	st	X, r24
				checkCounter++;
    105c:	de 01       	movw	r26, r28
    105e:	a8 59       	subi	r26, 0x98	; 152
    1060:	bf 4f       	sbci	r27, 0xFF	; 255
    1062:	fe 01       	movw	r30, r28
    1064:	e8 59       	subi	r30, 0x98	; 152
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	8c 93       	st	X, r24
			}
			if(checkCounter == PasswordLength){
    106e:	fe 01       	movw	r30, r28
    1070:	e8 59       	subi	r30, 0x98	; 152
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 81       	ld	r24, Z
    1076:	85 30       	cpi	r24, 0x05	; 5
    1078:	09 f6       	brne	.-126    	; 0xffc <loginSystem+0x242>
				for(int j =0 ;j<PasswordLength ; j++){
    107a:	fe 01       	movw	r30, r28
    107c:	ec 59       	subi	r30, 0x9C	; 156
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	11 82       	std	Z+1, r1	; 0x01
    1082:	10 82       	st	Z, r1
    1084:	2c c0       	rjmp	.+88     	; 0x10de <loginSystem+0x324>
					if(pass[j] != savedPass[j]){
    1086:	fe 01       	movw	r30, r28
    1088:	ec 59       	subi	r30, 0x9C	; 156
    108a:	ff 4f       	sbci	r31, 0xFF	; 255
    108c:	20 81       	ld	r18, Z
    108e:	31 81       	ldd	r19, Z+1	; 0x01
    1090:	ce 01       	movw	r24, r28
    1092:	80 59       	subi	r24, 0x90	; 144
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	fc 01       	movw	r30, r24
    1098:	e2 0f       	add	r30, r18
    109a:	f3 1f       	adc	r31, r19
    109c:	40 81       	ld	r20, Z
    109e:	fe 01       	movw	r30, r28
    10a0:	ec 59       	subi	r30, 0x9C	; 156
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	ce 01       	movw	r24, r28
    10aa:	86 59       	subi	r24, 0x96	; 150
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	fc 01       	movw	r30, r24
    10b0:	e2 0f       	add	r30, r18
    10b2:	f3 1f       	adc	r31, r19
    10b4:	80 81       	ld	r24, Z
    10b6:	48 17       	cp	r20, r24
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <loginSystem+0x30c>
						inputFlag = 1;
    10ba:	fe 01       	movw	r30, r28
    10bc:	ea 59       	subi	r30, 0x9A	; 154
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 83       	st	Z, r24
    10c4:	14 c0       	rjmp	.+40     	; 0x10ee <loginSystem+0x334>
				pass[Index] = key;
				Index++;
				checkCounter++;
			}
			if(checkCounter == PasswordLength){
				for(int j =0 ;j<PasswordLength ; j++){
    10c6:	de 01       	movw	r26, r28
    10c8:	ac 59       	subi	r26, 0x9C	; 156
    10ca:	bf 4f       	sbci	r27, 0xFF	; 255
    10cc:	fe 01       	movw	r30, r28
    10ce:	ec 59       	subi	r30, 0x9C	; 156
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	11 96       	adiw	r26, 0x01	; 1
    10da:	9c 93       	st	X, r25
    10dc:	8e 93       	st	-X, r24
    10de:	fe 01       	movw	r30, r28
    10e0:	ec 59       	subi	r30, 0x9C	; 156
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	85 30       	cpi	r24, 0x05	; 5
    10ea:	91 05       	cpc	r25, r1
    10ec:	64 f2       	brlt	.-104    	; 0x1086 <loginSystem+0x2cc>
					if(pass[j] != savedPass[j]){
						inputFlag = 1;
						break;
					}
				}
				if (inputFlag){
    10ee:	fe 01       	movw	r30, r28
    10f0:	ea 59       	subi	r30, 0x9A	; 154
    10f2:	ff 4f       	sbci	r31, 0xFF	; 255
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	09 f4       	brne	.+2      	; 0x10fc <loginSystem+0x342>
    10fa:	d8 c0       	rjmp	.+432    	; 0x12ac <loginSystem+0x4f2>
					Index =0;
    10fc:	fe 01       	movw	r30, r28
    10fe:	e7 59       	subi	r30, 0x97	; 151
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	10 82       	st	Z, r1
					checkCounter =0;
    1104:	fe 01       	movw	r30, r28
    1106:	e8 59       	subi	r30, 0x98	; 152
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	10 82       	st	Z, r1
					inputFlag = 0;
    110c:	fe 01       	movw	r30, r28
    110e:	ea 59       	subi	r30, 0x9A	; 154
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	10 82       	st	Z, r1
					LCD_enu_Clear();
    1114:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
					LCD_enu_SendString("Wrong Password");
    1118:	8a eb       	ldi	r24, 0xBA	; 186
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
					LCD_enu_SendString("Try Again!");
    1128:	89 ec       	ldi	r24, 0xC9	; 201
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
    1130:	fe 01       	movw	r30, r28
    1132:	ef 5a       	subi	r30, 0xAF	; 175
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	aa e7       	ldi	r26, 0x7A	; 122
    113c:	b4 e4       	ldi	r27, 0x44	; 68
    113e:	80 83       	st	Z, r24
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	a2 83       	std	Z+2, r26	; 0x02
    1144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1146:	8e 01       	movw	r16, r28
    1148:	03 5b       	subi	r16, 0xB3	; 179
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	fe 01       	movw	r30, r28
    114e:	ef 5a       	subi	r30, 0xAF	; 175
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4a e7       	ldi	r20, 0x7A	; 122
    1160:	55 e4       	ldi	r21, 0x45	; 69
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	f8 01       	movw	r30, r16
    116c:	80 83       	st	Z, r24
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	a2 83       	std	Z+2, r26	; 0x02
    1172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1174:	fe 01       	movw	r30, r28
    1176:	e3 5b       	subi	r30, 0xB3	; 179
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	44 f4       	brge	.+16     	; 0x11a2 <loginSystem+0x3e8>
		__ticks = 1;
    1192:	fe 01       	movw	r30, r28
    1194:	e5 5b       	subi	r30, 0xB5	; 181
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	80 83       	st	Z, r24
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <loginSystem+0x4b0>
	else if (__tmp > 65535)
    11a2:	fe 01       	movw	r30, r28
    11a4:	e3 5b       	subi	r30, 0xB3	; 179
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	60 81       	ld	r22, Z
    11aa:	71 81       	ldd	r23, Z+1	; 0x01
    11ac:	82 81       	ldd	r24, Z+2	; 0x02
    11ae:	93 81       	ldd	r25, Z+3	; 0x03
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	3f ef       	ldi	r19, 0xFF	; 255
    11b4:	4f e7       	ldi	r20, 0x7F	; 127
    11b6:	57 e4       	ldi	r21, 0x47	; 71
    11b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11bc:	18 16       	cp	r1, r24
    11be:	0c f0       	brlt	.+2      	; 0x11c2 <loginSystem+0x408>
    11c0:	43 c0       	rjmp	.+134    	; 0x1248 <loginSystem+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c2:	fe 01       	movw	r30, r28
    11c4:	ef 5a       	subi	r30, 0xAF	; 175
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	60 81       	ld	r22, Z
    11ca:	71 81       	ldd	r23, Z+1	; 0x01
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	8e 01       	movw	r16, r28
    11e2:	05 5b       	subi	r16, 0xB5	; 181
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	f8 01       	movw	r30, r16
    11f4:	91 83       	std	Z+1, r25	; 0x01
    11f6:	80 83       	st	Z, r24
    11f8:	1f c0       	rjmp	.+62     	; 0x1238 <loginSystem+0x47e>
    11fa:	fe 01       	movw	r30, r28
    11fc:	e7 5b       	subi	r30, 0xB7	; 183
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 e9       	ldi	r24, 0x90	; 144
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	91 83       	std	Z+1, r25	; 0x01
    1206:	80 83       	st	Z, r24
    1208:	fe 01       	movw	r30, r28
    120a:	e7 5b       	subi	r30, 0xB7	; 183
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <loginSystem+0x458>
    1216:	fe 01       	movw	r30, r28
    1218:	e7 5b       	subi	r30, 0xB7	; 183
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	de 01       	movw	r26, r28
    1222:	a5 5b       	subi	r26, 0xB5	; 181
    1224:	bf 4f       	sbci	r27, 0xFF	; 255
    1226:	fe 01       	movw	r30, r28
    1228:	e5 5b       	subi	r30, 0xB5	; 181
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	91 81       	ldd	r25, Z+1	; 0x01
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	9c 93       	st	X, r25
    1236:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	fe 01       	movw	r30, r28
    123a:	e5 5b       	subi	r30, 0xB5	; 181
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	d1 f6       	brne	.-76     	; 0x11fa <loginSystem+0x440>
    1246:	27 c0       	rjmp	.+78     	; 0x1296 <loginSystem+0x4dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1248:	8e 01       	movw	r16, r28
    124a:	05 5b       	subi	r16, 0xB5	; 181
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
    124e:	fe 01       	movw	r30, r28
    1250:	e3 5b       	subi	r30, 0xB3	; 179
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	f8 01       	movw	r30, r16
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
    126a:	de 01       	movw	r26, r28
    126c:	a9 5b       	subi	r26, 0xB9	; 185
    126e:	bf 4f       	sbci	r27, 0xFF	; 255
    1270:	fe 01       	movw	r30, r28
    1272:	e5 5b       	subi	r30, 0xB5	; 181
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	80 81       	ld	r24, Z
    1278:	91 81       	ldd	r25, Z+1	; 0x01
    127a:	8d 93       	st	X+, r24
    127c:	9c 93       	st	X, r25
    127e:	fe 01       	movw	r30, r28
    1280:	e9 5b       	subi	r30, 0xB9	; 185
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	80 81       	ld	r24, Z
    1286:	91 81       	ldd	r25, Z+1	; 0x01
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <loginSystem+0x4ce>
    128c:	fe 01       	movw	r30, r28
    128e:	e9 5b       	subi	r30, 0xB9	; 185
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	80 83       	st	Z, r24
					_delay_ms(delay);
					LCD_enu_Clear();
    1296:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
					LCD_enu_SendString("Enter Password:");
    129a:	8a ea       	ldi	r24, 0xAA	; 170
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
    12aa:	a8 ce       	rjmp	.-688    	; 0xffc <loginSystem+0x242>
				}else{
					//To display this message only once
					if(!homeFlag){
    12ac:	fe 01       	movw	r30, r28
    12ae:	e9 59       	subi	r30, 0x99	; 153
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 81       	ld	r24, Z
    12b4:	88 23       	and	r24, r24
    12b6:	09 f0       	breq	.+2      	; 0x12ba <loginSystem+0x500>
    12b8:	98 c0       	rjmp	.+304    	; 0x13ea <loginSystem+0x630>
						LCD_enu_Clear();
    12ba:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
						LCD_enu_SendString("Welcome :)");
    12be:	84 ed       	ldi	r24, 0xD4	; 212
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
						LCD_enu_SetCursor(1, 0);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
						LCD_enu_SendString("Choose Option ..");
    12ce:	8f ed       	ldi	r24, 0xDF	; 223
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
						homeFlag = 1;
    12d6:	fe 01       	movw	r30, r28
    12d8:	e9 59       	subi	r30, 0x99	; 153
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	80 83       	st	Z, r24
    12e0:	fe 01       	movw	r30, r28
    12e2:	ed 5b       	subi	r30, 0xBD	; 189
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	aa e7       	ldi	r26, 0x7A	; 122
    12ec:	b4 e4       	ldi	r27, 0x44	; 68
    12ee:	80 83       	st	Z, r24
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	a2 83       	std	Z+2, r26	; 0x02
    12f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f6:	8e 01       	movw	r16, r28
    12f8:	01 5c       	subi	r16, 0xC1	; 193
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	fe 01       	movw	r30, r28
    12fe:	ed 5b       	subi	r30, 0xBD	; 189
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	4a e7       	ldi	r20, 0x7A	; 122
    1310:	55 e4       	ldi	r21, 0x45	; 69
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	f8 01       	movw	r30, r16
    131c:	80 83       	st	Z, r24
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	a2 83       	std	Z+2, r26	; 0x02
    1322:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1324:	fe 01       	movw	r30, r28
    1326:	ff 96       	adiw	r30, 0x3f	; 63
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <loginSystem+0x590>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e af       	std	Y+62, r25	; 0x3e
    1346:	8d af       	std	Y+61, r24	; 0x3d
    1348:	46 c0       	rjmp	.+140    	; 0x13d6 <loginSystem+0x61c>
	else if (__tmp > 65535)
    134a:	fe 01       	movw	r30, r28
    134c:	ff 96       	adiw	r30, 0x3f	; 63
    134e:	60 81       	ld	r22, Z
    1350:	71 81       	ldd	r23, Z+1	; 0x01
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	4f e7       	ldi	r20, 0x7F	; 127
    135c:	57 e4       	ldi	r21, 0x47	; 71
    135e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1362:	18 16       	cp	r1, r24
    1364:	64 f5       	brge	.+88     	; 0x13be <loginSystem+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1366:	fe 01       	movw	r30, r28
    1368:	ed 5b       	subi	r30, 0xBD	; 189
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	82 81       	ldd	r24, Z+2	; 0x02
    1372:	93 81       	ldd	r25, Z+3	; 0x03
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e2       	ldi	r20, 0x20	; 32
    137a:	51 e4       	ldi	r21, 0x41	; 65
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9e af       	std	Y+62, r25	; 0x3e
    1392:	8d af       	std	Y+61, r24	; 0x3d
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <loginSystem+0x5fa>
    1396:	80 e9       	ldi	r24, 0x90	; 144
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	9c af       	std	Y+60, r25	; 0x3c
    139c:	8b af       	std	Y+59, r24	; 0x3b
    139e:	8b ad       	ldd	r24, Y+59	; 0x3b
    13a0:	9c ad       	ldd	r25, Y+60	; 0x3c
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <loginSystem+0x5e8>
    13a6:	9c af       	std	Y+60, r25	; 0x3c
    13a8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    13ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	9e af       	std	Y+62, r25	; 0x3e
    13b2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	69 f7       	brne	.-38     	; 0x1396 <loginSystem+0x5dc>
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <loginSystem+0x630>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13be:	fe 01       	movw	r30, r28
    13c0:	ff 96       	adiw	r30, 0x3f	; 63
    13c2:	60 81       	ld	r22, Z
    13c4:	71 81       	ldd	r23, Z+1	; 0x01
    13c6:	82 81       	ldd	r24, Z+2	; 0x02
    13c8:	93 81       	ldd	r25, Z+3	; 0x03
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9e af       	std	Y+62, r25	; 0x3e
    13d4:	8d af       	std	Y+61, r24	; 0x3d
    13d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    13d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    13da:	9a af       	std	Y+58, r25	; 0x3a
    13dc:	89 af       	std	Y+57, r24	; 0x39
    13de:	89 ad       	ldd	r24, Y+57	; 0x39
    13e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <loginSystem+0x628>
    13e6:	9a af       	std	Y+58, r25	; 0x3a
    13e8:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(delay);
					}
					displayOptionsPage();
    13ea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <displayOptionsPage>
					takeUserOption(&order);
    13ee:	ce 01       	movw	r24, r28
    13f0:	8a 58       	subi	r24, 0x8A	; 138
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
	/************************************DC Motor Section*************************************/
					if(order == '1'){
    13f8:	fe 01       	movw	r30, r28
    13fa:	ea 58       	subi	r30, 0x8A	; 138
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	81 33       	cpi	r24, 0x31	; 49
    1402:	31 f5       	brne	.+76     	; 0x1450 <loginSystem+0x696>
						displayRotationOptions();
    1404:	0e 94 83 06 	call	0xd06	; 0xd06 <displayRotationOptions>
						takeUserOption(&order);
    1408:	ce 01       	movw	r24, r28
    140a:	8a 58       	subi	r24, 0x8A	; 138
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
						// Rotate DC Motors CW
						if(order == '1'){
    1412:	fe 01       	movw	r30, r28
    1414:	ea 58       	subi	r30, 0x8A	; 138
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	80 81       	ld	r24, Z
    141a:	81 33       	cpi	r24, 0x31	; 49
    141c:	49 f4       	brne	.+18     	; 0x1430 <loginSystem+0x676>
							DC_Motor_enu_Rotate(MOTOR1, CW);
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	0e 94 c1 19 	call	0x3382	; 0x3382 <DC_Motor_enu_Rotate>
							DC_Motor_enu_Rotate(MOTOR2, CW);
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	0e 94 c1 19 	call	0x3382	; 0x3382 <DC_Motor_enu_Rotate>
    142e:	e6 cd       	rjmp	.-1076   	; 0xffc <loginSystem+0x242>
						}
						// Rotate DC Motors CCW
						else if (order == '2'){
    1430:	fe 01       	movw	r30, r28
    1432:	ea 58       	subi	r30, 0x8A	; 138
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	80 81       	ld	r24, Z
    1438:	82 33       	cpi	r24, 0x32	; 50
    143a:	09 f0       	breq	.+2      	; 0x143e <loginSystem+0x684>
    143c:	df cd       	rjmp	.-1090   	; 0xffc <loginSystem+0x242>
							DC_Motor_enu_Rotate(MOTOR1, CCW);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	0e 94 c1 19 	call	0x3382	; 0x3382 <DC_Motor_enu_Rotate>
							DC_Motor_enu_Rotate(MOTOR2, CCW);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	0e 94 c1 19 	call	0x3382	; 0x3382 <DC_Motor_enu_Rotate>
    144e:	d6 cd       	rjmp	.-1108   	; 0xffc <loginSystem+0x242>
						}
	/****************************** Stepper Motor Section **************************************/
					}else if(order == '2'){
    1450:	fe 01       	movw	r30, r28
    1452:	ea 58       	subi	r30, 0x8A	; 138
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	82 33       	cpi	r24, 0x32	; 50
    145a:	09 f0       	breq	.+2      	; 0x145e <loginSystem+0x6a4>
    145c:	e5 c1       	rjmp	.+970    	; 0x1828 <loginSystem+0xa6e>
						// Take Stepper Motor Angle
						LCD_enu_Clear();
    145e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
						LCD_enu_SendString("Enter Angle:");
    1462:	80 ef       	ldi	r24, 0xF0	; 240
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
						u8 stepperMotorAngle[3],angleCounter = 0 ;
    146a:	fe 01       	movw	r30, r28
    146c:	ed 59       	subi	r30, 0x9D	; 157
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	10 82       	st	Z, r1
    1472:	c4 c0       	rjmp	.+392    	; 0x15fc <loginSystem+0x842>
						// Display and Storing Angle
						while(angleCounter!=3){
							Keypad_enu_getKey(&key);
    1474:	ce 01       	movw	r24, r28
    1476:	8b 58       	subi	r24, 0x8B	; 139
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Keypad_enu_getKey>
							if(key != KEYPAD_U8_NO_KEY_PRESSED && key != '='){
    147e:	fe 01       	movw	r30, r28
    1480:	eb 58       	subi	r30, 0x8B	; 139
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	8f 3f       	cpi	r24, 0xFF	; 255
    1488:	09 f4       	brne	.+2      	; 0x148c <loginSystem+0x6d2>
    148a:	9a c0       	rjmp	.+308    	; 0x15c0 <loginSystem+0x806>
    148c:	fe 01       	movw	r30, r28
    148e:	eb 58       	subi	r30, 0x8B	; 139
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	80 81       	ld	r24, Z
    1494:	8d 33       	cpi	r24, 0x3D	; 61
    1496:	09 f4       	brne	.+2      	; 0x149a <loginSystem+0x6e0>
    1498:	93 c0       	rjmp	.+294    	; 0x15c0 <loginSystem+0x806>
								LCD_enu_SendChar(key);
    149a:	fe 01       	movw	r30, r28
    149c:	eb 58       	subi	r30, 0x8B	; 139
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_enu_SendChar>

								stepperMotorAngle[angleCounter] = key;
    14a6:	fe 01       	movw	r30, r28
    14a8:	ed 59       	subi	r30, 0x9D	; 157
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 81       	ld	r24, Z
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	fe 01       	movw	r30, r28
    14b4:	eb 58       	subi	r30, 0x8B	; 139
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	40 81       	ld	r20, Z
    14ba:	ce 01       	movw	r24, r28
    14bc:	89 58       	subi	r24, 0x89	; 137
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	40 83       	st	Z, r20
								angleCounter++;
    14c8:	de 01       	movw	r26, r28
    14ca:	ad 59       	subi	r26, 0x9D	; 157
    14cc:	bf 4f       	sbci	r27, 0xFF	; 255
    14ce:	fe 01       	movw	r30, r28
    14d0:	ed 59       	subi	r30, 0x9D	; 157
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 81       	ld	r24, Z
    14d6:	8f 5f       	subi	r24, 0xFF	; 255
    14d8:	8c 93       	st	X, r24
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	aa ef       	ldi	r26, 0xFA	; 250
    14e0:	b3 e4       	ldi	r27, 0x43	; 67
    14e2:	8d ab       	std	Y+53, r24	; 0x35
    14e4:	9e ab       	std	Y+54, r25	; 0x36
    14e6:	af ab       	std	Y+55, r26	; 0x37
    14e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ea:	6d a9       	ldd	r22, Y+53	; 0x35
    14ec:	7e a9       	ldd	r23, Y+54	; 0x36
    14ee:	8f a9       	ldd	r24, Y+55	; 0x37
    14f0:	98 ad       	ldd	r25, Y+56	; 0x38
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	4a e7       	ldi	r20, 0x7A	; 122
    14f8:	55 e4       	ldi	r21, 0x45	; 69
    14fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	89 ab       	std	Y+49, r24	; 0x31
    1504:	9a ab       	std	Y+50, r25	; 0x32
    1506:	ab ab       	std	Y+51, r26	; 0x33
    1508:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    150a:	69 a9       	ldd	r22, Y+49	; 0x31
    150c:	7a a9       	ldd	r23, Y+50	; 0x32
    150e:	8b a9       	ldd	r24, Y+51	; 0x33
    1510:	9c a9       	ldd	r25, Y+52	; 0x34
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    151e:	88 23       	and	r24, r24
    1520:	2c f4       	brge	.+10     	; 0x152c <loginSystem+0x772>
		__ticks = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	98 ab       	std	Y+48, r25	; 0x30
    1528:	8f a7       	std	Y+47, r24	; 0x2f
    152a:	3f c0       	rjmp	.+126    	; 0x15aa <loginSystem+0x7f0>
	else if (__tmp > 65535)
    152c:	69 a9       	ldd	r22, Y+49	; 0x31
    152e:	7a a9       	ldd	r23, Y+50	; 0x32
    1530:	8b a9       	ldd	r24, Y+51	; 0x33
    1532:	9c a9       	ldd	r25, Y+52	; 0x34
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	3f ef       	ldi	r19, 0xFF	; 255
    1538:	4f e7       	ldi	r20, 0x7F	; 127
    153a:	57 e4       	ldi	r21, 0x47	; 71
    153c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1540:	18 16       	cp	r1, r24
    1542:	4c f5       	brge	.+82     	; 0x1596 <loginSystem+0x7dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1544:	6d a9       	ldd	r22, Y+53	; 0x35
    1546:	7e a9       	ldd	r23, Y+54	; 0x36
    1548:	8f a9       	ldd	r24, Y+55	; 0x37
    154a:	98 ad       	ldd	r25, Y+56	; 0x38
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e2       	ldi	r20, 0x20	; 32
    1552:	51 e4       	ldi	r21, 0x41	; 65
    1554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	bc 01       	movw	r22, r24
    155e:	cd 01       	movw	r24, r26
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	98 ab       	std	Y+48, r25	; 0x30
    156a:	8f a7       	std	Y+47, r24	; 0x2f
    156c:	0f c0       	rjmp	.+30     	; 0x158c <loginSystem+0x7d2>
    156e:	80 e9       	ldi	r24, 0x90	; 144
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	9e a7       	std	Y+46, r25	; 0x2e
    1574:	8d a7       	std	Y+45, r24	; 0x2d
    1576:	8d a5       	ldd	r24, Y+45	; 0x2d
    1578:	9e a5       	ldd	r25, Y+46	; 0x2e
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	f1 f7       	brne	.-4      	; 0x157a <loginSystem+0x7c0>
    157e:	9e a7       	std	Y+46, r25	; 0x2e
    1580:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1582:	8f a5       	ldd	r24, Y+47	; 0x2f
    1584:	98 a9       	ldd	r25, Y+48	; 0x30
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	98 ab       	std	Y+48, r25	; 0x30
    158a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158c:	8f a5       	ldd	r24, Y+47	; 0x2f
    158e:	98 a9       	ldd	r25, Y+48	; 0x30
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	69 f7       	brne	.-38     	; 0x156e <loginSystem+0x7b4>
    1594:	33 c0       	rjmp	.+102    	; 0x15fc <loginSystem+0x842>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1596:	69 a9       	ldd	r22, Y+49	; 0x31
    1598:	7a a9       	ldd	r23, Y+50	; 0x32
    159a:	8b a9       	ldd	r24, Y+51	; 0x33
    159c:	9c a9       	ldd	r25, Y+52	; 0x34
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
    15aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ac:	98 a9       	ldd	r25, Y+48	; 0x30
    15ae:	9c a7       	std	Y+44, r25	; 0x2c
    15b0:	8b a7       	std	Y+43, r24	; 0x2b
    15b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <loginSystem+0x7fc>
    15ba:	9c a7       	std	Y+44, r25	; 0x2c
    15bc:	8b a7       	std	Y+43, r24	; 0x2b
    15be:	1e c0       	rjmp	.+60     	; 0x15fc <loginSystem+0x842>
								_delay_ms(500);
							}else if(key == '=') {
    15c0:	fe 01       	movw	r30, r28
    15c2:	eb 58       	subi	r30, 0x8B	; 139
    15c4:	ff 4f       	sbci	r31, 0xFF	; 255
    15c6:	80 81       	ld	r24, Z
    15c8:	8d 33       	cpi	r24, 0x3D	; 61
    15ca:	c1 f4       	brne	.+48     	; 0x15fc <loginSystem+0x842>
							// if user entered angle of one or two digits
							if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
    15cc:	fe 01       	movw	r30, r28
    15ce:	ed 59       	subi	r30, 0x9D	; 157
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	80 81       	ld	r24, Z
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	31 f4       	brne	.+12     	; 0x15e4 <loginSystem+0x82a>
    15d8:	fe 01       	movw	r30, r28
    15da:	e9 58       	subi	r30, 0x89	; 137
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	81 e6       	ldi	r24, 0x61	; 97
    15e0:	81 83       	std	Z+1, r24	; 0x01
    15e2:	13 c0       	rjmp	.+38     	; 0x160a <loginSystem+0x850>
							if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
    15e4:	fe 01       	movw	r30, r28
    15e6:	ed 59       	subi	r30, 0x9D	; 157
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	31 f4       	brne	.+12     	; 0x15fc <loginSystem+0x842>
    15f0:	fe 01       	movw	r30, r28
    15f2:	e9 58       	subi	r30, 0x89	; 137
    15f4:	ff 4f       	sbci	r31, 0xFF	; 255
    15f6:	81 e6       	ldi	r24, 0x61	; 97
    15f8:	82 83       	std	Z+2, r24	; 0x02
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <loginSystem+0x850>
						// Take Stepper Motor Angle
						LCD_enu_Clear();
						LCD_enu_SendString("Enter Angle:");
						u8 stepperMotorAngle[3],angleCounter = 0 ;
						// Display and Storing Angle
						while(angleCounter!=3){
    15fc:	fe 01       	movw	r30, r28
    15fe:	ed 59       	subi	r30, 0x9D	; 157
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	09 f0       	breq	.+2      	; 0x160a <loginSystem+0x850>
    1608:	35 cf       	rjmp	.-406    	; 0x1474 <loginSystem+0x6ba>
							// if user entered angle of one or two digits
							if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
							if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
							}
						}
						displayRotationOptions();
    160a:	0e 94 83 06 	call	0xd06	; 0xd06 <displayRotationOptions>
						takeUserOption(&order);
    160e:	ce 01       	movw	r24, r28
    1610:	8a 58       	subi	r24, 0x8A	; 138
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
						// Rotate Stepper Motor CW With Entered Angle
						if(order == '1'){
    1618:	fe 01       	movw	r30, r28
    161a:	ea 58       	subi	r30, 0x8A	; 138
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 81       	ld	r24, Z
    1620:	81 33       	cpi	r24, 0x31	; 49
    1622:	09 f0       	breq	.+2      	; 0x1626 <loginSystem+0x86c>
    1624:	7d c0       	rjmp	.+250    	; 0x1720 <loginSystem+0x966>
							STEP_Motor_enu_Rotate(CW, returnAngle(stepperMotorAngle) );
    1626:	ce 01       	movw	r24, r28
    1628:	89 58       	subi	r24, 0x89	; 137
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	0e 94 98 06 	call	0xd30	; 0xd30 <returnAngle>
    1630:	9c 01       	movw	r18, r24
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	b9 01       	movw	r22, r18
    1636:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <STEP_Motor_enu_Rotate>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	aa e7       	ldi	r26, 0x7A	; 122
    1640:	b4 e4       	ldi	r27, 0x44	; 68
    1642:	8f a3       	std	Y+39, r24	; 0x27
    1644:	98 a7       	std	Y+40, r25	; 0x28
    1646:	a9 a7       	std	Y+41, r26	; 0x29
    1648:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	6f a1       	ldd	r22, Y+39	; 0x27
    164c:	78 a5       	ldd	r23, Y+40	; 0x28
    164e:	89 a5       	ldd	r24, Y+41	; 0x29
    1650:	9a a5       	ldd	r25, Y+42	; 0x2a
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	55 e4       	ldi	r21, 0x45	; 69
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8b a3       	std	Y+35, r24	; 0x23
    1664:	9c a3       	std	Y+36, r25	; 0x24
    1666:	ad a3       	std	Y+37, r26	; 0x25
    1668:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    166a:	6b a1       	ldd	r22, Y+35	; 0x23
    166c:	7c a1       	ldd	r23, Y+36	; 0x24
    166e:	8d a1       	ldd	r24, Y+37	; 0x25
    1670:	9e a1       	ldd	r25, Y+38	; 0x26
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <loginSystem+0x8d2>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9a a3       	std	Y+34, r25	; 0x22
    1688:	89 a3       	std	Y+33, r24	; 0x21
    168a:	3f c0       	rjmp	.+126    	; 0x170a <loginSystem+0x950>
	else if (__tmp > 65535)
    168c:	6b a1       	ldd	r22, Y+35	; 0x23
    168e:	7c a1       	ldd	r23, Y+36	; 0x24
    1690:	8d a1       	ldd	r24, Y+37	; 0x25
    1692:	9e a1       	ldd	r25, Y+38	; 0x26
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	4c f5       	brge	.+82     	; 0x16f6 <loginSystem+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	6f a1       	ldd	r22, Y+39	; 0x27
    16a6:	78 a5       	ldd	r23, Y+40	; 0x28
    16a8:	89 a5       	ldd	r24, Y+41	; 0x29
    16aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9a a3       	std	Y+34, r25	; 0x22
    16ca:	89 a3       	std	Y+33, r24	; 0x21
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <loginSystem+0x932>
    16ce:	80 e9       	ldi	r24, 0x90	; 144
    16d0:	91 e0       	ldi	r25, 0x01	; 1
    16d2:	98 a3       	std	Y+32, r25	; 0x20
    16d4:	8f 8f       	std	Y+31, r24	; 0x1f
    16d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16d8:	98 a1       	ldd	r25, Y+32	; 0x20
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <loginSystem+0x920>
    16de:	98 a3       	std	Y+32, r25	; 0x20
    16e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	89 a1       	ldd	r24, Y+33	; 0x21
    16e4:	9a a1       	ldd	r25, Y+34	; 0x22
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9a a3       	std	Y+34, r25	; 0x22
    16ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	89 a1       	ldd	r24, Y+33	; 0x21
    16ee:	9a a1       	ldd	r25, Y+34	; 0x22
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <loginSystem+0x914>
    16f4:	83 cc       	rjmp	.-1786   	; 0xffc <loginSystem+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6b a1       	ldd	r22, Y+35	; 0x23
    16f8:	7c a1       	ldd	r23, Y+36	; 0x24
    16fa:	8d a1       	ldd	r24, Y+37	; 0x25
    16fc:	9e a1       	ldd	r25, Y+38	; 0x26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9a a3       	std	Y+34, r25	; 0x22
    1708:	89 a3       	std	Y+33, r24	; 0x21
    170a:	89 a1       	ldd	r24, Y+33	; 0x21
    170c:	9a a1       	ldd	r25, Y+34	; 0x22
    170e:	9e 8f       	std	Y+30, r25	; 0x1e
    1710:	8d 8f       	std	Y+29, r24	; 0x1d
    1712:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1714:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <loginSystem+0x95c>
    171a:	9e 8f       	std	Y+30, r25	; 0x1e
    171c:	8d 8f       	std	Y+29, r24	; 0x1d
    171e:	6e cc       	rjmp	.-1828   	; 0xffc <loginSystem+0x242>
							_delay_ms(delay);
						}
						// Rotate Stepper Motor CCW With Entered Angle
						else if (order == '2'){
    1720:	fe 01       	movw	r30, r28
    1722:	ea 58       	subi	r30, 0x8A	; 138
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	82 33       	cpi	r24, 0x32	; 50
    172a:	09 f0       	breq	.+2      	; 0x172e <loginSystem+0x974>
    172c:	67 cc       	rjmp	.-1842   	; 0xffc <loginSystem+0x242>
							STEP_Motor_enu_Rotate(CCW, returnAngle(stepperMotorAngle) );
    172e:	ce 01       	movw	r24, r28
    1730:	89 58       	subi	r24, 0x89	; 137
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	0e 94 98 06 	call	0xd30	; 0xd30 <returnAngle>
    1738:	9c 01       	movw	r18, r24
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	b9 01       	movw	r22, r18
    173e:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <STEP_Motor_enu_Rotate>
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	aa e7       	ldi	r26, 0x7A	; 122
    1748:	b4 e4       	ldi	r27, 0x44	; 68
    174a:	89 8f       	std	Y+25, r24	; 0x19
    174c:	9a 8f       	std	Y+26, r25	; 0x1a
    174e:	ab 8f       	std	Y+27, r26	; 0x1b
    1750:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1752:	69 8d       	ldd	r22, Y+25	; 0x19
    1754:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	55 e4       	ldi	r21, 0x45	; 69
    1762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8d 8b       	std	Y+21, r24	; 0x15
    176c:	9e 8b       	std	Y+22, r25	; 0x16
    176e:	af 8b       	std	Y+23, r26	; 0x17
    1770:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1772:	6d 89       	ldd	r22, Y+21	; 0x15
    1774:	7e 89       	ldd	r23, Y+22	; 0x16
    1776:	8f 89       	ldd	r24, Y+23	; 0x17
    1778:	98 8d       	ldd	r25, Y+24	; 0x18
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	2c f4       	brge	.+10     	; 0x1794 <loginSystem+0x9da>
		__ticks = 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	9c 8b       	std	Y+20, r25	; 0x14
    1790:	8b 8b       	std	Y+19, r24	; 0x13
    1792:	3f c0       	rjmp	.+126    	; 0x1812 <loginSystem+0xa58>
	else if (__tmp > 65535)
    1794:	6d 89       	ldd	r22, Y+21	; 0x15
    1796:	7e 89       	ldd	r23, Y+22	; 0x16
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	4c f5       	brge	.+82     	; 0x17fe <loginSystem+0xa44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	69 8d       	ldd	r22, Y+25	; 0x19
    17ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e2       	ldi	r20, 0x20	; 32
    17ba:	51 e4       	ldi	r21, 0x41	; 65
    17bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9c 8b       	std	Y+20, r25	; 0x14
    17d2:	8b 8b       	std	Y+19, r24	; 0x13
    17d4:	0f c0       	rjmp	.+30     	; 0x17f4 <loginSystem+0xa3a>
    17d6:	80 e9       	ldi	r24, 0x90	; 144
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	9a 8b       	std	Y+18, r25	; 0x12
    17dc:	89 8b       	std	Y+17, r24	; 0x11
    17de:	89 89       	ldd	r24, Y+17	; 0x11
    17e0:	9a 89       	ldd	r25, Y+18	; 0x12
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f1 f7       	brne	.-4      	; 0x17e2 <loginSystem+0xa28>
    17e6:	9a 8b       	std	Y+18, r25	; 0x12
    17e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ea:	8b 89       	ldd	r24, Y+19	; 0x13
    17ec:	9c 89       	ldd	r25, Y+20	; 0x14
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	9c 8b       	std	Y+20, r25	; 0x14
    17f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f4:	8b 89       	ldd	r24, Y+19	; 0x13
    17f6:	9c 89       	ldd	r25, Y+20	; 0x14
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	69 f7       	brne	.-38     	; 0x17d6 <loginSystem+0xa1c>
    17fc:	ff cb       	rjmp	.-2050   	; 0xffc <loginSystem+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1800:	7e 89       	ldd	r23, Y+22	; 0x16
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9c 8b       	std	Y+20, r25	; 0x14
    1810:	8b 8b       	std	Y+19, r24	; 0x13
    1812:	8b 89       	ldd	r24, Y+19	; 0x13
    1814:	9c 89       	ldd	r25, Y+20	; 0x14
    1816:	98 8b       	std	Y+16, r25	; 0x10
    1818:	8f 87       	std	Y+15, r24	; 0x0f
    181a:	8f 85       	ldd	r24, Y+15	; 0x0f
    181c:	98 89       	ldd	r25, Y+16	; 0x10
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	f1 f7       	brne	.-4      	; 0x181e <loginSystem+0xa64>
    1822:	98 8b       	std	Y+16, r25	; 0x10
    1824:	8f 87       	std	Y+15, r24	; 0x0f
    1826:	ea cb       	rjmp	.-2092   	; 0xffc <loginSystem+0x242>
							_delay_ms(delay);
						}
	/********************************************* Exit Section *****************************************/
					}else if (order == '3'){
    1828:	fe 01       	movw	r30, r28
    182a:	ea 58       	subi	r30, 0x8A	; 138
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	83 33       	cpi	r24, 0x33	; 51
    1832:	09 f0       	breq	.+2      	; 0x1836 <loginSystem+0xa7c>
    1834:	e3 cb       	rjmp	.-2106   	; 0xffc <loginSystem+0x242>
						LCD_enu_Clear();
    1836:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
						LCD_enu_SendString("Exiting .. ");
    183a:	8d ef       	ldi	r24, 0xFD	; 253
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
						LCD_enu_SetCursor(1, 0);
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
						LCD_enu_SendString("Stopping Motors");
    184a:	89 e0       	ldi	r24, 0x09	; 9
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	0e 94 a0 13 	call	0x2740	; 0x2740 <LCD_enu_SendString>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	aa e7       	ldi	r26, 0x7A	; 122
    1858:	b4 e4       	ldi	r27, 0x44	; 68
    185a:	8b 87       	std	Y+11, r24	; 0x0b
    185c:	9c 87       	std	Y+12, r25	; 0x0c
    185e:	ad 87       	std	Y+13, r26	; 0x0d
    1860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1862:	6b 85       	ldd	r22, Y+11	; 0x0b
    1864:	7c 85       	ldd	r23, Y+12	; 0x0c
    1866:	8d 85       	ldd	r24, Y+13	; 0x0d
    1868:	9e 85       	ldd	r25, Y+14	; 0x0e
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	4a e7       	ldi	r20, 0x7A	; 122
    1870:	55 e4       	ldi	r21, 0x45	; 69
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	8f 83       	std	Y+7, r24	; 0x07
    187c:	98 87       	std	Y+8, r25	; 0x08
    187e:	a9 87       	std	Y+9, r26	; 0x09
    1880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1882:	6f 81       	ldd	r22, Y+7	; 0x07
    1884:	78 85       	ldd	r23, Y+8	; 0x08
    1886:	89 85       	ldd	r24, Y+9	; 0x09
    1888:	9a 85       	ldd	r25, Y+10	; 0x0a
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	5f e3       	ldi	r21, 0x3F	; 63
    1892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1896:	88 23       	and	r24, r24
    1898:	2c f4       	brge	.+10     	; 0x18a4 <loginSystem+0xaea>
		__ticks = 1;
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	9e 83       	std	Y+6, r25	; 0x06
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	3f c0       	rjmp	.+126    	; 0x1922 <loginSystem+0xb68>
	else if (__tmp > 65535)
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	3f ef       	ldi	r19, 0xFF	; 255
    18b0:	4f e7       	ldi	r20, 0x7F	; 127
    18b2:	57 e4       	ldi	r21, 0x47	; 71
    18b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18b8:	18 16       	cp	r1, r24
    18ba:	4c f5       	brge	.+82     	; 0x190e <loginSystem+0xb54>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18be:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e2       	ldi	r20, 0x20	; 32
    18ca:	51 e4       	ldi	r21, 0x41	; 65
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	bc 01       	movw	r22, r24
    18d6:	cd 01       	movw	r24, r26
    18d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	0f c0       	rjmp	.+30     	; 0x1904 <loginSystem+0xb4a>
    18e6:	80 e9       	ldi	r24, 0x90	; 144
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	8b 83       	std	Y+3, r24	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <loginSystem+0xb38>
    18f6:	9c 83       	std	Y+4, r25	; 0x04
    18f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	01 97       	sbiw	r24, 0x01	; 1
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f7       	brne	.-38     	; 0x18e6 <loginSystem+0xb2c>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <loginSystem+0xb7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    190e:	6f 81       	ldd	r22, Y+7	; 0x07
    1910:	78 85       	ldd	r23, Y+8	; 0x08
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	9a 85       	ldd	r25, Y+10	; 0x0a
    1916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	9e 83       	std	Y+6, r25	; 0x06
    1920:	8d 83       	std	Y+5, r24	; 0x05
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
    1924:	9e 81       	ldd	r25, Y+6	; 0x06
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <loginSystem+0xb74>
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(delay);
						LCD_enu_Clear();
    1936:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_enu_Clear>
						/*Stop All Motors*/
						DC_Motor_enu_Stop(MOTOR1);
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	0e 94 49 1a 	call	0x3492	; 0x3492 <DC_Motor_enu_Stop>
						DC_Motor_enu_Stop(MOTOR2);
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	0e 94 49 1a 	call	0x3492	; 0x3492 <DC_Motor_enu_Stop>
						STEP_Motor_enu_Rotate(CW,0);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <STEP_Motor_enu_Rotate>
						break;
					}
				}
			}

		}
    1950:	c2 58       	subi	r28, 0x82	; 130
    1952:	df 4f       	sbci	r29, 0xFF	; 255
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	08 95       	ret

00001968 <main>:
}
int main(){
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62

	GI_enu_Enable();
    1970:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <GI_enu_Enable>
	EXTI_enu_EXTI_Enable(EXTI0,RISING_EDGE);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	0e 94 88 1a 	call	0x3510	; 0x3510 <EXTI_enu_EXTI_Enable>
	EXTI_enu_setCallBack(&loginSystem,EXTI0);
    197c:	8d ed       	ldi	r24, 0xDD	; 221
    197e:	96 e0       	ldi	r25, 0x06	; 6
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <EXTI_enu_setCallBack>
    1986:	ff cf       	rjmp	.-2      	; 0x1986 <main+0x1e>

00001988 <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	61 e0       	ldi	r22, 0x01	; 1
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	62 e0       	ldi	r22, 0x02	; 2
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	63 e0       	ldi	r22, 0x03	; 3
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	61 e0       	ldi	r22, 0x01	; 1
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	63 e0       	ldi	r22, 0x03	; 3
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>

    return STATE_OK;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	a5 97       	sbiw	r28, 0x25	; 37
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	8b a3       	std	Y+35, r24	; 0x23
    19fe:	7d a3       	std	Y+37, r23	; 0x25
    1a00:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1a06:	8b a1       	ldd	r24, Y+35	; 0x23
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	21 f0       	breq	.+8      	; 0x1a14 <STEP_Motor_enu_Rotate+0x2c>
    1a0c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a0e:	88 23       	and	r24, r24
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <STEP_Motor_enu_Rotate+0x2c>
    1a12:	a5 c1       	rjmp	.+842    	; 0x1d5e <STEP_Motor_enu_Rotate+0x376>
    1a14:	8c a1       	ldd	r24, Y+36	; 0x24
    1a16:	9d a1       	ldd	r25, Y+37	; 0x25
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	89 36       	cpi	r24, 0x69	; 105
    1a1c:	92 07       	cpc	r25, r18
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <STEP_Motor_enu_Rotate+0x3a>
    1a20:	9e c1       	rjmp	.+828    	; 0x1d5e <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    1a22:	8f e0       	ldi	r24, 0x0F	; 15
    1a24:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1a26:	8c a1       	ldd	r24, Y+36	; 0x24
    1a28:	9d a1       	ldd	r25, Y+37	; 0x25
    1a2a:	2a e5       	ldi	r18, 0x5A	; 90
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	b9 01       	movw	r22, r18
    1a30:	0e 94 2a 21 	call	0x4254	; 0x4254 <__udivmodhi4>
    1a34:	cb 01       	movw	r24, r22
    1a36:	98 a3       	std	Y+32, r25	; 0x20
    1a38:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    1a3a:	8b a1       	ldd	r24, Y+35	; 0x23
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <STEP_Motor_enu_Rotate+0x5a>
    1a40:	c5 c0       	rjmp	.+394    	; 0x1bcc <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1a42:	1e 8e       	std	Y+30, r1	; 0x1e
    1a44:	b9 c0       	rjmp	.+370    	; 0x1bb8 <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1a46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	23 70       	andi	r18, 0x03	; 3
    1a50:	30 70       	andi	r19, 0x00	; 0
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <STEP_Motor_enu_Rotate+0x76>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <STEP_Motor_enu_Rotate+0x72>
    1a62:	98 2f       	mov	r25, r24
    1a64:	89 a1       	ldd	r24, Y+33	; 0x21
    1a66:	89 23       	and	r24, r25
    1a68:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1a6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a6c:	88 2f       	mov	r24, r24
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	83 70       	andi	r24, 0x03	; 3
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	91 05       	cpc	r25, r1
    1a78:	11 f4       	brne	.+4      	; 0x1a7e <STEP_Motor_enu_Rotate+0x96>
    1a7a:	89 e0       	ldi	r24, 0x09	; 9
    1a7c:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    1a7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a80:	98 2f       	mov	r25, r24
    1a82:	91 70       	andi	r25, 0x01	; 1
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	63 e0       	ldi	r22, 0x03	; 3
    1a88:	49 2f       	mov	r20, r25
    1a8a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    1a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a90:	86 95       	lsr	r24
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	49 2f       	mov	r20, r25
    1a9c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    1aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa2:	86 95       	lsr	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	98 2f       	mov	r25, r24
    1aa8:	91 70       	andi	r25, 0x01	; 1
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	61 e0       	ldi	r22, 0x01	; 1
    1aae:	49 2f       	mov	r20, r25
    1ab0:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    1ab4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab6:	86 95       	lsr	r24
    1ab8:	86 95       	lsr	r24
    1aba:	86 95       	lsr	r24
    1abc:	98 2f       	mov	r25, r24
    1abe:	91 70       	andi	r25, 0x01	; 1
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	60 e0       	ldi	r22, 0x00	; 0
    1ac4:	49 2f       	mov	r20, r25
    1ac6:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	aa ef       	ldi	r26, 0xFA	; 250
    1ad0:	b2 e4       	ldi	r27, 0x42	; 66
    1ad2:	89 8f       	std	Y+25, r24	; 0x19
    1ad4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ad8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	69 8d       	ldd	r22, Y+25	; 0x19
    1adc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ade:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a e7       	ldi	r20, 0x7A	; 122
    1ae8:	55 e4       	ldi	r21, 0x45	; 69
    1aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	8d 8b       	std	Y+21, r24	; 0x15
    1af4:	9e 8b       	std	Y+22, r25	; 0x16
    1af6:	af 8b       	std	Y+23, r26	; 0x17
    1af8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1afa:	6d 89       	ldd	r22, Y+21	; 0x15
    1afc:	7e 89       	ldd	r23, Y+22	; 0x16
    1afe:	8f 89       	ldd	r24, Y+23	; 0x17
    1b00:	98 8d       	ldd	r25, Y+24	; 0x18
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9c 8b       	std	Y+20, r25	; 0x14
    1b18:	8b 8b       	std	Y+19, r24	; 0x13
    1b1a:	3f c0       	rjmp	.+126    	; 0x1b9a <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	4c f5       	brge	.+82     	; 0x1b86 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b34:	69 8d       	ldd	r22, Y+25	; 0x19
    1b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e2       	ldi	r20, 0x20	; 32
    1b42:	51 e4       	ldi	r21, 0x41	; 65
    1b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
    1b5c:	0f c0       	rjmp	.+30     	; 0x1b7c <STEP_Motor_enu_Rotate+0x194>
    1b5e:	80 e9       	ldi	r24, 0x90	; 144
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	9a 8b       	std	Y+18, r25	; 0x12
    1b64:	89 8b       	std	Y+17, r24	; 0x11
    1b66:	89 89       	ldd	r24, Y+17	; 0x11
    1b68:	9a 89       	ldd	r25, Y+18	; 0x12
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <STEP_Motor_enu_Rotate+0x182>
    1b6e:	9a 8b       	std	Y+18, r25	; 0x12
    1b70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b72:	8b 89       	ldd	r24, Y+19	; 0x13
    1b74:	9c 89       	ldd	r25, Y+20	; 0x14
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	9c 8b       	std	Y+20, r25	; 0x14
    1b7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	69 f7       	brne	.-38     	; 0x1b5e <STEP_Motor_enu_Rotate+0x176>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9e:	98 8b       	std	Y+16, r25	; 0x10
    1ba0:	8f 87       	std	Y+15, r24	; 0x0f
    1ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba4:	98 89       	ldd	r25, Y+16	; 0x10
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <STEP_Motor_enu_Rotate+0x1be>
    1baa:	98 8b       	std	Y+16, r25	; 0x10
    1bac:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    1bae:	8f e0       	ldi	r24, 0x0F	; 15
    1bb0:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <STEP_Motor_enu_Rotate+0x1e2>
    1bc8:	3e cf       	rjmp	.-388    	; 0x1a46 <STEP_Motor_enu_Rotate+0x5e>
    1bca:	ca c0       	rjmp	.+404    	; 0x1d60 <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    1bcc:	8b a1       	ldd	r24, Y+35	; 0x23
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f0       	breq	.+2      	; 0x1bd4 <STEP_Motor_enu_Rotate+0x1ec>
    1bd2:	c6 c0       	rjmp	.+396    	; 0x1d60 <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1bd4:	1d 8e       	std	Y+29, r1	; 0x1d
    1bd6:	b9 c0       	rjmp	.+370    	; 0x1d4a <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	9c 01       	movw	r18, r24
    1be0:	23 70       	andi	r18, 0x03	; 3
    1be2:	30 70       	andi	r19, 0x00	; 0
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <STEP_Motor_enu_Rotate+0x208>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <STEP_Motor_enu_Rotate+0x204>
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf8:	89 23       	and	r24, r25
    1bfa:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1bfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfe:	88 2f       	mov	r24, r24
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	83 70       	andi	r24, 0x03	; 3
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	83 30       	cpi	r24, 0x03	; 3
    1c08:	91 05       	cpc	r25, r1
    1c0a:	11 f4       	brne	.+4      	; 0x1c10 <STEP_Motor_enu_Rotate+0x228>
    1c0c:	89 e0       	ldi	r24, 0x09	; 9
    1c0e:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    1c10:	89 a1       	ldd	r24, Y+33	; 0x21
    1c12:	98 2f       	mov	r25, r24
    1c14:	91 70       	andi	r25, 0x01	; 1
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	49 2f       	mov	r20, r25
    1c1c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    1c20:	89 a1       	ldd	r24, Y+33	; 0x21
    1c22:	86 95       	lsr	r24
    1c24:	98 2f       	mov	r25, r24
    1c26:	91 70       	andi	r25, 0x01	; 1
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	49 2f       	mov	r20, r25
    1c2e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	86 95       	lsr	r24
    1c36:	86 95       	lsr	r24
    1c38:	98 2f       	mov	r25, r24
    1c3a:	91 70       	andi	r25, 0x01	; 1
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	49 2f       	mov	r20, r25
    1c42:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	86 95       	lsr	r24
    1c4a:	86 95       	lsr	r24
    1c4c:	86 95       	lsr	r24
    1c4e:	98 2f       	mov	r25, r24
    1c50:	91 70       	andi	r25, 0x01	; 1
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	63 e0       	ldi	r22, 0x03	; 3
    1c56:	49 2f       	mov	r20, r25
    1c58:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	aa ef       	ldi	r26, 0xFA	; 250
    1c62:	b2 e4       	ldi	r27, 0x42	; 66
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
    1c66:	9c 87       	std	Y+12, r25	; 0x0c
    1c68:	ad 87       	std	Y+13, r26	; 0x0d
    1c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e7       	ldi	r20, 0x7A	; 122
    1c7a:	55 e4       	ldi	r21, 0x45	; 69
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8f 83       	std	Y+7, r24	; 0x07
    1c86:	98 87       	std	Y+8, r25	; 0x08
    1c88:	a9 87       	std	Y+9, r26	; 0x09
    1c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <STEP_Motor_enu_Rotate+0x326>
    1cf0:	80 e9       	ldi	r24, 0x90	; 144
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <STEP_Motor_enu_Rotate+0x314>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <STEP_Motor_enu_Rotate+0x308>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <STEP_Motor_enu_Rotate+0x350>
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    1d40:	8f e0       	ldi	r24, 0x0F	; 15
    1d42:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1d44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
    1d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4c:	28 2f       	mov	r18, r24
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d52:	98 a1       	ldd	r25, Y+32	; 0x20
    1d54:	28 17       	cp	r18, r24
    1d56:	39 07       	cpc	r19, r25
    1d58:	08 f4       	brcc	.+2      	; 0x1d5c <STEP_Motor_enu_Rotate+0x374>
    1d5a:	3e cf       	rjmp	.-388    	; 0x1bd8 <STEP_Motor_enu_Rotate+0x1f0>
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1d5e:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    1d60:	8a a1       	ldd	r24, Y+34	; 0x22
}
    1d62:	a5 96       	adiw	r28, 0x25	; 37
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	40 e0       	ldi	r20, 0x00	; 0
    1d8e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	62 e0       	ldi	r22, 0x02	; 2
    1da0:	40 e0       	ldi	r20, 0x00	; 0
    1da2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	63 e0       	ldi	r22, 0x03	; 3
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	aa ef       	ldi	r26, 0xFA	; 250
    1db6:	b2 e4       	ldi	r27, 0x42	; 66
    1db8:	8b 87       	std	Y+11, r24	; 0x0b
    1dba:	9c 87       	std	Y+12, r25	; 0x0c
    1dbc:	ad 87       	std	Y+13, r26	; 0x0d
    1dbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	4a e7       	ldi	r20, 0x7A	; 122
    1dce:	55 e4       	ldi	r21, 0x45	; 69
    1dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	8f 83       	std	Y+7, r24	; 0x07
    1dda:	98 87       	std	Y+8, r25	; 0x08
    1ddc:	a9 87       	std	Y+9, r26	; 0x09
    1dde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	2c f4       	brge	.+10     	; 0x1e02 <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	3f c0       	rjmp	.+126    	; 0x1e80 <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	4c f5       	brge	.+82     	; 0x1e6c <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	0f c0       	rjmp	.+30     	; 0x1e62 <STEP_Motor_enu_Stop+0xee>
    1e44:	80 e9       	ldi	r24, 0x90	; 144
    1e46:	91 e0       	ldi	r25, 0x01	; 1
    1e48:	9c 83       	std	Y+4, r25	; 0x04
    1e4a:	8b 83       	std	Y+3, r24	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	f1 f7       	brne	.-4      	; 0x1e50 <STEP_Motor_enu_Stop+0xdc>
    1e54:	9c 83       	std	Y+4, r25	; 0x04
    1e56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e58:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	69 f7       	brne	.-38     	; 0x1e44 <STEP_Motor_enu_Stop+0xd0>
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	9e 83       	std	Y+6, r25	; 0x06
    1e7e:	8d 83       	std	Y+5, r24	; 0x05
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	9a 83       	std	Y+2, r25	; 0x02
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <STEP_Motor_enu_Stop+0x118>
    1e90:	9a 83       	std	Y+2, r25	; 0x02
    1e92:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
}
    1e96:	2e 96       	adiw	r28, 0x0e	; 14
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <sevenSeg_enu_displayNum+0x6>
    1eae:	0f 92       	push	r0
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    1eb6:	82 e0       	ldi	r24, 0x02	; 2
    1eb8:	66 e0       	ldi	r22, 0x06	; 6
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	8a 30       	cpi	r24, 0x0A	; 10
    1ed0:	78 f5       	brcc	.+94     	; 0x1f30 <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	66 e0       	ldi	r22, 0x06	; 6
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1edc:	19 82       	std	Y+1, r1	; 0x01
    1ede:	24 c0       	rjmp	.+72     	; 0x1f28 <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	ef 5c       	subi	r30, 0xCF	; 207
    1eea:	fe 4f       	sbci	r31, 0xFE	; 254
    1eec:	40 81       	ld	r20, Z
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 2f       	mov	r24, r24
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e9 5d       	subi	r30, 0xD9	; 217
    1ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    1efa:	80 81       	ld	r24, Z
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	b9 01       	movw	r22, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <sevenSeg_enu_displayNum+0x66>
    1f0a:	75 95       	asr	r23
    1f0c:	67 95       	ror	r22
    1f0e:	8a 95       	dec	r24
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <sevenSeg_enu_displayNum+0x62>
    1f12:	cb 01       	movw	r24, r22
    1f14:	98 2f       	mov	r25, r24
    1f16:	91 70       	andi	r25, 0x01	; 1
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	64 2f       	mov	r22, r20
    1f1c:	49 2f       	mov	r20, r25
    1f1e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	87 30       	cpi	r24, 0x07	; 7
    1f2c:	c8 f2       	brcs	.-78     	; 0x1ee0 <sevenSeg_enu_displayNum+0x38>
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1f30:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	08 95       	ret

00001f40 <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
    1f40:	df 93       	push	r29
    1f42:	cf 93       	push	r28
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	e1 97       	sbiw	r28, 0x31	; 49
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	f8 94       	cli
    1f4e:	de bf       	out	0x3e, r29	; 62
    1f50:	0f be       	out	0x3f, r0	; 63
    1f52:	cd bf       	out	0x3d, r28	; 61
    1f54:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	61 e0       	ldi	r22, 0x01	; 1
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	40 e0       	ldi	r20, 0x00	; 0
    1f66:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
    1f6a:	89 a9       	ldd	r24, Y+49	; 0x31
    1f6c:	98 2f       	mov	r25, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	99 27       	eor	r25, r25
    1f72:	99 1f       	adc	r25, r25
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	66 e0       	ldi	r22, 0x06	; 6
    1f78:	49 2f       	mov	r20, r25
    1f7a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
    1f7e:	89 a9       	ldd	r24, Y+49	; 0x31
    1f80:	82 95       	swap	r24
    1f82:	86 95       	lsr	r24
    1f84:	86 95       	lsr	r24
    1f86:	83 70       	andi	r24, 0x03	; 3
    1f88:	98 2f       	mov	r25, r24
    1f8a:	91 70       	andi	r25, 0x01	; 1
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	65 e0       	ldi	r22, 0x05	; 5
    1f90:	49 2f       	mov	r20, r25
    1f92:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
    1f96:	89 a9       	ldd	r24, Y+49	; 0x31
    1f98:	82 95       	swap	r24
    1f9a:	86 95       	lsr	r24
    1f9c:	87 70       	andi	r24, 0x07	; 7
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	91 70       	andi	r25, 0x01	; 1
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	64 e0       	ldi	r22, 0x04	; 4
    1fa6:	49 2f       	mov	r20, r25
    1fa8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
    1fac:	89 a9       	ldd	r24, Y+49	; 0x31
    1fae:	82 95       	swap	r24
    1fb0:	8f 70       	andi	r24, 0x0F	; 15
    1fb2:	98 2f       	mov	r25, r24
    1fb4:	91 70       	andi	r25, 0x01	; 1
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	63 e0       	ldi	r22, 0x03	; 3
    1fba:	49 2f       	mov	r20, r25
    1fbc:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	62 e0       	ldi	r22, 0x02	; 2
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e8       	ldi	r26, 0x80	; 128
    1fd0:	bf e3       	ldi	r27, 0x3F	; 63
    1fd2:	8d a7       	std	Y+45, r24	; 0x2d
    1fd4:	9e a7       	std	Y+46, r25	; 0x2e
    1fd6:	af a7       	std	Y+47, r26	; 0x2f
    1fd8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fda:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fdc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe2:	2b ea       	ldi	r18, 0xAB	; 171
    1fe4:	3a ea       	ldi	r19, 0xAA	; 170
    1fe6:	4a ea       	ldi	r20, 0xAA	; 170
    1fe8:	50 e4       	ldi	r21, 0x40	; 64
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	89 a7       	std	Y+41, r24	; 0x29
    1ff4:	9a a7       	std	Y+42, r25	; 0x2a
    1ff6:	ab a7       	std	Y+43, r26	; 0x2b
    1ff8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ffa:	69 a5       	ldd	r22, Y+41	; 0x29
    1ffc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ffe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2000:	9c a5       	ldd	r25, Y+44	; 0x2c
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	1c f4       	brge	.+6      	; 0x2018 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	88 a7       	std	Y+40, r24	; 0x28
    2016:	91 c0       	rjmp	.+290    	; 0x213a <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    2018:	69 a5       	ldd	r22, Y+41	; 0x29
    201a:	7a a5       	ldd	r23, Y+42	; 0x2a
    201c:	8b a5       	ldd	r24, Y+43	; 0x2b
    201e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	53 e4       	ldi	r21, 0x43	; 67
    2028:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	0c f0       	brlt	.+2      	; 0x2032 <LCD_enu_SendCmnd+0xf2>
    2030:	7b c0       	rjmp	.+246    	; 0x2128 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    2032:	6d a5       	ldd	r22, Y+45	; 0x2d
    2034:	7e a5       	ldd	r23, Y+46	; 0x2e
    2036:	8f a5       	ldd	r24, Y+47	; 0x2f
    2038:	98 a9       	ldd	r25, Y+48	; 0x30
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	4a e7       	ldi	r20, 0x7A	; 122
    2040:	54 e4       	ldi	r21, 0x44	; 68
    2042:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8c a3       	std	Y+36, r24	; 0x24
    204c:	9d a3       	std	Y+37, r25	; 0x25
    204e:	ae a3       	std	Y+38, r26	; 0x26
    2050:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2052:	6c a1       	ldd	r22, Y+36	; 0x24
    2054:	7d a1       	ldd	r23, Y+37	; 0x25
    2056:	8e a1       	ldd	r24, Y+38	; 0x26
    2058:	9f a1       	ldd	r25, Y+39	; 0x27
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a e7       	ldi	r20, 0x7A	; 122
    2060:	55 e4       	ldi	r21, 0x45	; 69
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	88 a3       	std	Y+32, r24	; 0x20
    206c:	99 a3       	std	Y+33, r25	; 0x21
    206e:	aa a3       	std	Y+34, r26	; 0x22
    2070:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2072:	68 a1       	ldd	r22, Y+32	; 0x20
    2074:	79 a1       	ldd	r23, Y+33	; 0x21
    2076:	8a a1       	ldd	r24, Y+34	; 0x22
    2078:	9b a1       	ldd	r25, Y+35	; 0x23
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e8       	ldi	r20, 0x80	; 128
    2080:	5f e3       	ldi	r21, 0x3F	; 63
    2082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2086:	88 23       	and	r24, r24
    2088:	2c f4       	brge	.+10     	; 0x2094 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9f 8f       	std	Y+31, r25	; 0x1f
    2090:	8e 8f       	std	Y+30, r24	; 0x1e
    2092:	3f c0       	rjmp	.+126    	; 0x2112 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    2094:	68 a1       	ldd	r22, Y+32	; 0x20
    2096:	79 a1       	ldd	r23, Y+33	; 0x21
    2098:	8a a1       	ldd	r24, Y+34	; 0x22
    209a:	9b a1       	ldd	r25, Y+35	; 0x23
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	3f ef       	ldi	r19, 0xFF	; 255
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	57 e4       	ldi	r21, 0x47	; 71
    20a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	4c f5       	brge	.+82     	; 0x20fe <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ac:	6c a1       	ldd	r22, Y+36	; 0x24
    20ae:	7d a1       	ldd	r23, Y+37	; 0x25
    20b0:	8e a1       	ldd	r24, Y+38	; 0x26
    20b2:	9f a1       	ldd	r25, Y+39	; 0x27
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	bc 01       	movw	r22, r24
    20c6:	cd 01       	movw	r24, r26
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9f 8f       	std	Y+31, r25	; 0x1f
    20d2:	8e 8f       	std	Y+30, r24	; 0x1e
    20d4:	0f c0       	rjmp	.+30     	; 0x20f4 <LCD_enu_SendCmnd+0x1b4>
    20d6:	80 e9       	ldi	r24, 0x90	; 144
    20d8:	91 e0       	ldi	r25, 0x01	; 1
    20da:	9d 8f       	std	Y+29, r25	; 0x1d
    20dc:	8c 8f       	std	Y+28, r24	; 0x1c
    20de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_enu_SendCmnd+0x1a2>
    20e6:	9d 8f       	std	Y+29, r25	; 0x1d
    20e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	9f 8f       	std	Y+31, r25	; 0x1f
    20f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	69 f7       	brne	.-38     	; 0x20d6 <LCD_enu_SendCmnd+0x196>
    20fc:	24 c0       	rjmp	.+72     	; 0x2146 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2100:	79 a1       	ldd	r23, Y+33	; 0x21
    2102:	8a a1       	ldd	r24, Y+34	; 0x22
    2104:	9b a1       	ldd	r25, Y+35	; 0x23
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9f 8f       	std	Y+31, r25	; 0x1f
    2110:	8e 8f       	std	Y+30, r24	; 0x1e
    2112:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2114:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2116:	9b 8f       	std	Y+27, r25	; 0x1b
    2118:	8a 8f       	std	Y+26, r24	; 0x1a
    211a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    211c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	f1 f7       	brne	.-4      	; 0x211e <LCD_enu_SendCmnd+0x1de>
    2122:	9b 8f       	std	Y+27, r25	; 0x1b
    2124:	8a 8f       	std	Y+26, r24	; 0x1a
    2126:	0f c0       	rjmp	.+30     	; 0x2146 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2128:	69 a5       	ldd	r22, Y+41	; 0x29
    212a:	7a a5       	ldd	r23, Y+42	; 0x2a
    212c:	8b a5       	ldd	r24, Y+43	; 0x2b
    212e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	88 a7       	std	Y+40, r24	; 0x28
    213a:	88 a5       	ldd	r24, Y+40	; 0x28
    213c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    213e:	89 8d       	ldd	r24, Y+25	; 0x19
    2140:	8a 95       	dec	r24
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_enu_SendCmnd+0x200>
    2144:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	62 e0       	ldi	r22, 0x02	; 2
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    2150:	89 a9       	ldd	r24, Y+49	; 0x31
    2152:	86 95       	lsr	r24
    2154:	86 95       	lsr	r24
    2156:	86 95       	lsr	r24
    2158:	98 2f       	mov	r25, r24
    215a:	91 70       	andi	r25, 0x01	; 1
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	66 e0       	ldi	r22, 0x06	; 6
    2160:	49 2f       	mov	r20, r25
    2162:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    2166:	89 a9       	ldd	r24, Y+49	; 0x31
    2168:	86 95       	lsr	r24
    216a:	86 95       	lsr	r24
    216c:	98 2f       	mov	r25, r24
    216e:	91 70       	andi	r25, 0x01	; 1
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	65 e0       	ldi	r22, 0x05	; 5
    2174:	49 2f       	mov	r20, r25
    2176:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    217a:	89 a9       	ldd	r24, Y+49	; 0x31
    217c:	86 95       	lsr	r24
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	64 e0       	ldi	r22, 0x04	; 4
    2186:	49 2f       	mov	r20, r25
    2188:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    218c:	89 a9       	ldd	r24, Y+49	; 0x31
    218e:	98 2f       	mov	r25, r24
    2190:	91 70       	andi	r25, 0x01	; 1
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	63 e0       	ldi	r22, 0x03	; 3
    2196:	49 2f       	mov	r20, r25
    2198:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	62 e0       	ldi	r22, 0x02	; 2
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e8       	ldi	r26, 0x80	; 128
    21ac:	bf e3       	ldi	r27, 0x3F	; 63
    21ae:	8d 8b       	std	Y+21, r24	; 0x15
    21b0:	9e 8b       	std	Y+22, r25	; 0x16
    21b2:	af 8b       	std	Y+23, r26	; 0x17
    21b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	2b ea       	ldi	r18, 0xAB	; 171
    21c0:	3a ea       	ldi	r19, 0xAA	; 170
    21c2:	4a ea       	ldi	r20, 0xAA	; 170
    21c4:	50 e4       	ldi	r21, 0x40	; 64
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	89 8b       	std	Y+17, r24	; 0x11
    21d0:	9a 8b       	std	Y+18, r25	; 0x12
    21d2:	ab 8b       	std	Y+19, r26	; 0x13
    21d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21d6:	69 89       	ldd	r22, Y+17	; 0x11
    21d8:	7a 89       	ldd	r23, Y+18	; 0x12
    21da:	8b 89       	ldd	r24, Y+19	; 0x13
    21dc:	9c 89       	ldd	r25, Y+20	; 0x14
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	1c f4       	brge	.+6      	; 0x21f4 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	88 8b       	std	Y+16, r24	; 0x10
    21f2:	91 c0       	rjmp	.+290    	; 0x2316 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    21f4:	69 89       	ldd	r22, Y+17	; 0x11
    21f6:	7a 89       	ldd	r23, Y+18	; 0x12
    21f8:	8b 89       	ldd	r24, Y+19	; 0x13
    21fa:	9c 89       	ldd	r25, Y+20	; 0x14
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	53 e4       	ldi	r21, 0x43	; 67
    2204:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	0c f0       	brlt	.+2      	; 0x220e <LCD_enu_SendCmnd+0x2ce>
    220c:	7b c0       	rjmp	.+246    	; 0x2304 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    220e:	6d 89       	ldd	r22, Y+21	; 0x15
    2210:	7e 89       	ldd	r23, Y+22	; 0x16
    2212:	8f 89       	ldd	r24, Y+23	; 0x17
    2214:	98 8d       	ldd	r25, Y+24	; 0x18
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	54 e4       	ldi	r21, 0x44	; 68
    221e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8c 87       	std	Y+12, r24	; 0x0c
    2228:	9d 87       	std	Y+13, r25	; 0x0d
    222a:	ae 87       	std	Y+14, r26	; 0x0e
    222c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2230:	7d 85       	ldd	r23, Y+13	; 0x0d
    2232:	8e 85       	ldd	r24, Y+14	; 0x0e
    2234:	9f 85       	ldd	r25, Y+15	; 0x0f
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a e7       	ldi	r20, 0x7A	; 122
    223c:	55 e4       	ldi	r21, 0x45	; 69
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	88 87       	std	Y+8, r24	; 0x08
    2248:	99 87       	std	Y+9, r25	; 0x09
    224a:	aa 87       	std	Y+10, r26	; 0x0a
    224c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    224e:	68 85       	ldd	r22, Y+8	; 0x08
    2250:	79 85       	ldd	r23, Y+9	; 0x09
    2252:	8a 85       	ldd	r24, Y+10	; 0x0a
    2254:	9b 85       	ldd	r25, Y+11	; 0x0b
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e8       	ldi	r20, 0x80	; 128
    225c:	5f e3       	ldi	r21, 0x3F	; 63
    225e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2262:	88 23       	and	r24, r24
    2264:	2c f4       	brge	.+10     	; 0x2270 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	9f 83       	std	Y+7, r25	; 0x07
    226c:	8e 83       	std	Y+6, r24	; 0x06
    226e:	3f c0       	rjmp	.+126    	; 0x22ee <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    2270:	68 85       	ldd	r22, Y+8	; 0x08
    2272:	79 85       	ldd	r23, Y+9	; 0x09
    2274:	8a 85       	ldd	r24, Y+10	; 0x0a
    2276:	9b 85       	ldd	r25, Y+11	; 0x0b
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	4c f5       	brge	.+82     	; 0x22da <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2288:	6c 85       	ldd	r22, Y+12	; 0x0c
    228a:	7d 85       	ldd	r23, Y+13	; 0x0d
    228c:	8e 85       	ldd	r24, Y+14	; 0x0e
    228e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	40 e2       	ldi	r20, 0x20	; 32
    2296:	51 e4       	ldi	r21, 0x41	; 65
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	9f 83       	std	Y+7, r25	; 0x07
    22ae:	8e 83       	std	Y+6, r24	; 0x06
    22b0:	0f c0       	rjmp	.+30     	; 0x22d0 <LCD_enu_SendCmnd+0x390>
    22b2:	80 e9       	ldi	r24, 0x90	; 144
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	9d 83       	std	Y+5, r25	; 0x05
    22b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ba:	8c 81       	ldd	r24, Y+4	; 0x04
    22bc:	9d 81       	ldd	r25, Y+5	; 0x05
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_enu_SendCmnd+0x37e>
    22c2:	9d 83       	std	Y+5, r25	; 0x05
    22c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c6:	8e 81       	ldd	r24, Y+6	; 0x06
    22c8:	9f 81       	ldd	r25, Y+7	; 0x07
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	9f 83       	std	Y+7, r25	; 0x07
    22ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d0:	8e 81       	ldd	r24, Y+6	; 0x06
    22d2:	9f 81       	ldd	r25, Y+7	; 0x07
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <LCD_enu_SendCmnd+0x372>
    22d8:	24 c0       	rjmp	.+72     	; 0x2322 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	68 85       	ldd	r22, Y+8	; 0x08
    22dc:	79 85       	ldd	r23, Y+9	; 0x09
    22de:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	9f 83       	std	Y+7, r25	; 0x07
    22ec:	8e 83       	std	Y+6, r24	; 0x06
    22ee:	8e 81       	ldd	r24, Y+6	; 0x06
    22f0:	9f 81       	ldd	r25, Y+7	; 0x07
    22f2:	9b 83       	std	Y+3, r25	; 0x03
    22f4:	8a 83       	std	Y+2, r24	; 0x02
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <LCD_enu_SendCmnd+0x3ba>
    22fe:	9b 83       	std	Y+3, r25	; 0x03
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2304:	69 89       	ldd	r22, Y+17	; 0x11
    2306:	7a 89       	ldd	r23, Y+18	; 0x12
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	88 8b       	std	Y+16, r24	; 0x10
    2316:	88 89       	ldd	r24, Y+16	; 0x10
    2318:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	8a 95       	dec	r24
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_enu_SendCmnd+0x3dc>
    2320:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	62 e0       	ldi	r22, 0x02	; 2
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
         return STATE_OK;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    232e:	e1 96       	adiw	r28, 0x31	; 49
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	e1 97       	sbiw	r28, 0x31	; 49
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	61 e0       	ldi	r22, 0x01	; 1
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    236a:	89 a9       	ldd	r24, Y+49	; 0x31
    236c:	98 2f       	mov	r25, r24
    236e:	99 1f       	adc	r25, r25
    2370:	99 27       	eor	r25, r25
    2372:	99 1f       	adc	r25, r25
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	66 e0       	ldi	r22, 0x06	; 6
    2378:	49 2f       	mov	r20, r25
    237a:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    237e:	89 a9       	ldd	r24, Y+49	; 0x31
    2380:	82 95       	swap	r24
    2382:	86 95       	lsr	r24
    2384:	86 95       	lsr	r24
    2386:	83 70       	andi	r24, 0x03	; 3
    2388:	98 2f       	mov	r25, r24
    238a:	91 70       	andi	r25, 0x01	; 1
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	65 e0       	ldi	r22, 0x05	; 5
    2390:	49 2f       	mov	r20, r25
    2392:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    2396:	89 a9       	ldd	r24, Y+49	; 0x31
    2398:	82 95       	swap	r24
    239a:	86 95       	lsr	r24
    239c:	87 70       	andi	r24, 0x07	; 7
    239e:	98 2f       	mov	r25, r24
    23a0:	91 70       	andi	r25, 0x01	; 1
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	64 e0       	ldi	r22, 0x04	; 4
    23a6:	49 2f       	mov	r20, r25
    23a8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    23ac:	89 a9       	ldd	r24, Y+49	; 0x31
    23ae:	82 95       	swap	r24
    23b0:	8f 70       	andi	r24, 0x0F	; 15
    23b2:	98 2f       	mov	r25, r24
    23b4:	91 70       	andi	r25, 0x01	; 1
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	63 e0       	ldi	r22, 0x03	; 3
    23ba:	49 2f       	mov	r20, r25
    23bc:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	41 e0       	ldi	r20, 0x01	; 1
    23c6:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e8       	ldi	r26, 0x80	; 128
    23d0:	bf e3       	ldi	r27, 0x3F	; 63
    23d2:	8d a7       	std	Y+45, r24	; 0x2d
    23d4:	9e a7       	std	Y+46, r25	; 0x2e
    23d6:	af a7       	std	Y+47, r26	; 0x2f
    23d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23da:	6d a5       	ldd	r22, Y+45	; 0x2d
    23dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    23de:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e0:	98 a9       	ldd	r25, Y+48	; 0x30
    23e2:	2b ea       	ldi	r18, 0xAB	; 171
    23e4:	3a ea       	ldi	r19, 0xAA	; 170
    23e6:	4a ea       	ldi	r20, 0xAA	; 170
    23e8:	50 e4       	ldi	r21, 0x40	; 64
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	89 a7       	std	Y+41, r24	; 0x29
    23f4:	9a a7       	std	Y+42, r25	; 0x2a
    23f6:	ab a7       	std	Y+43, r26	; 0x2b
    23f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23fa:	69 a5       	ldd	r22, Y+41	; 0x29
    23fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    23fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2400:	9c a5       	ldd	r25, Y+44	; 0x2c
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	1c f4       	brge	.+6      	; 0x2418 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	88 a7       	std	Y+40, r24	; 0x28
    2416:	91 c0       	rjmp	.+290    	; 0x253a <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    2418:	69 a5       	ldd	r22, Y+41	; 0x29
    241a:	7a a5       	ldd	r23, Y+42	; 0x2a
    241c:	8b a5       	ldd	r24, Y+43	; 0x2b
    241e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	53 e4       	ldi	r21, 0x43	; 67
    2428:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	0c f0       	brlt	.+2      	; 0x2432 <LCD_enu_SendChar+0xf2>
    2430:	7b c0       	rjmp	.+246    	; 0x2528 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    2432:	6d a5       	ldd	r22, Y+45	; 0x2d
    2434:	7e a5       	ldd	r23, Y+46	; 0x2e
    2436:	8f a5       	ldd	r24, Y+47	; 0x2f
    2438:	98 a9       	ldd	r25, Y+48	; 0x30
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a e7       	ldi	r20, 0x7A	; 122
    2440:	54 e4       	ldi	r21, 0x44	; 68
    2442:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8c a3       	std	Y+36, r24	; 0x24
    244c:	9d a3       	std	Y+37, r25	; 0x25
    244e:	ae a3       	std	Y+38, r26	; 0x26
    2450:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6c a1       	ldd	r22, Y+36	; 0x24
    2454:	7d a1       	ldd	r23, Y+37	; 0x25
    2456:	8e a1       	ldd	r24, Y+38	; 0x26
    2458:	9f a1       	ldd	r25, Y+39	; 0x27
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a e7       	ldi	r20, 0x7A	; 122
    2460:	55 e4       	ldi	r21, 0x45	; 69
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	88 a3       	std	Y+32, r24	; 0x20
    246c:	99 a3       	std	Y+33, r25	; 0x21
    246e:	aa a3       	std	Y+34, r26	; 0x22
    2470:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2472:	68 a1       	ldd	r22, Y+32	; 0x20
    2474:	79 a1       	ldd	r23, Y+33	; 0x21
    2476:	8a a1       	ldd	r24, Y+34	; 0x22
    2478:	9b a1       	ldd	r25, Y+35	; 0x23
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9f 8f       	std	Y+31, r25	; 0x1f
    2490:	8e 8f       	std	Y+30, r24	; 0x1e
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    2494:	68 a1       	ldd	r22, Y+32	; 0x20
    2496:	79 a1       	ldd	r23, Y+33	; 0x21
    2498:	8a a1       	ldd	r24, Y+34	; 0x22
    249a:	9b a1       	ldd	r25, Y+35	; 0x23
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6c a1       	ldd	r22, Y+36	; 0x24
    24ae:	7d a1       	ldd	r23, Y+37	; 0x25
    24b0:	8e a1       	ldd	r24, Y+38	; 0x26
    24b2:	9f a1       	ldd	r25, Y+39	; 0x27
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9f 8f       	std	Y+31, r25	; 0x1f
    24d2:	8e 8f       	std	Y+30, r24	; 0x1e
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <LCD_enu_SendChar+0x1b4>
    24d6:	80 e9       	ldi	r24, 0x90	; 144
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	9d 8f       	std	Y+29, r25	; 0x1d
    24dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_enu_SendChar+0x1a2>
    24e6:	9d 8f       	std	Y+29, r25	; 0x1d
    24e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9f 8f       	std	Y+31, r25	; 0x1f
    24f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <LCD_enu_SendChar+0x196>
    24fc:	24 c0       	rjmp	.+72     	; 0x2546 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2500:	79 a1       	ldd	r23, Y+33	; 0x21
    2502:	8a a1       	ldd	r24, Y+34	; 0x22
    2504:	9b a1       	ldd	r25, Y+35	; 0x23
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9f 8f       	std	Y+31, r25	; 0x1f
    2510:	8e 8f       	std	Y+30, r24	; 0x1e
    2512:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2514:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2516:	9b 8f       	std	Y+27, r25	; 0x1b
    2518:	8a 8f       	std	Y+26, r24	; 0x1a
    251a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    251c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <LCD_enu_SendChar+0x1de>
    2522:	9b 8f       	std	Y+27, r25	; 0x1b
    2524:	8a 8f       	std	Y+26, r24	; 0x1a
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2528:	69 a5       	ldd	r22, Y+41	; 0x29
    252a:	7a a5       	ldd	r23, Y+42	; 0x2a
    252c:	8b a5       	ldd	r24, Y+43	; 0x2b
    252e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	88 a7       	std	Y+40, r24	; 0x28
    253a:	88 a5       	ldd	r24, Y+40	; 0x28
    253c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    253e:	89 8d       	ldd	r24, Y+25	; 0x19
    2540:	8a 95       	dec	r24
    2542:	f1 f7       	brne	.-4      	; 0x2540 <LCD_enu_SendChar+0x200>
    2544:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	62 e0       	ldi	r22, 0x02	; 2
    254a:	40 e0       	ldi	r20, 0x00	; 0
    254c:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    2550:	89 a9       	ldd	r24, Y+49	; 0x31
    2552:	86 95       	lsr	r24
    2554:	86 95       	lsr	r24
    2556:	86 95       	lsr	r24
    2558:	98 2f       	mov	r25, r24
    255a:	91 70       	andi	r25, 0x01	; 1
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	66 e0       	ldi	r22, 0x06	; 6
    2560:	49 2f       	mov	r20, r25
    2562:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    2566:	89 a9       	ldd	r24, Y+49	; 0x31
    2568:	86 95       	lsr	r24
    256a:	86 95       	lsr	r24
    256c:	98 2f       	mov	r25, r24
    256e:	91 70       	andi	r25, 0x01	; 1
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	65 e0       	ldi	r22, 0x05	; 5
    2574:	49 2f       	mov	r20, r25
    2576:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    257a:	89 a9       	ldd	r24, Y+49	; 0x31
    257c:	86 95       	lsr	r24
    257e:	98 2f       	mov	r25, r24
    2580:	91 70       	andi	r25, 0x01	; 1
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	49 2f       	mov	r20, r25
    2588:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    258c:	89 a9       	ldd	r24, Y+49	; 0x31
    258e:	98 2f       	mov	r25, r24
    2590:	91 70       	andi	r25, 0x01	; 1
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	63 e0       	ldi	r22, 0x03	; 3
    2596:	49 2f       	mov	r20, r25
    2598:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	62 e0       	ldi	r22, 0x02	; 2
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a0 e8       	ldi	r26, 0x80	; 128
    25ac:	bf e3       	ldi	r27, 0x3F	; 63
    25ae:	8d 8b       	std	Y+21, r24	; 0x15
    25b0:	9e 8b       	std	Y+22, r25	; 0x16
    25b2:	af 8b       	std	Y+23, r26	; 0x17
    25b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25b6:	6d 89       	ldd	r22, Y+21	; 0x15
    25b8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ba:	8f 89       	ldd	r24, Y+23	; 0x17
    25bc:	98 8d       	ldd	r25, Y+24	; 0x18
    25be:	2b ea       	ldi	r18, 0xAB	; 171
    25c0:	3a ea       	ldi	r19, 0xAA	; 170
    25c2:	4a ea       	ldi	r20, 0xAA	; 170
    25c4:	50 e4       	ldi	r21, 0x40	; 64
    25c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	89 8b       	std	Y+17, r24	; 0x11
    25d0:	9a 8b       	std	Y+18, r25	; 0x12
    25d2:	ab 8b       	std	Y+19, r26	; 0x13
    25d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25d6:	69 89       	ldd	r22, Y+17	; 0x11
    25d8:	7a 89       	ldd	r23, Y+18	; 0x12
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	1c f4       	brge	.+6      	; 0x25f4 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	88 8b       	std	Y+16, r24	; 0x10
    25f2:	91 c0       	rjmp	.+290    	; 0x2716 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    25f4:	69 89       	ldd	r22, Y+17	; 0x11
    25f6:	7a 89       	ldd	r23, Y+18	; 0x12
    25f8:	8b 89       	ldd	r24, Y+19	; 0x13
    25fa:	9c 89       	ldd	r25, Y+20	; 0x14
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	53 e4       	ldi	r21, 0x43	; 67
    2604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	0c f0       	brlt	.+2      	; 0x260e <LCD_enu_SendChar+0x2ce>
    260c:	7b c0       	rjmp	.+246    	; 0x2704 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    260e:	6d 89       	ldd	r22, Y+21	; 0x15
    2610:	7e 89       	ldd	r23, Y+22	; 0x16
    2612:	8f 89       	ldd	r24, Y+23	; 0x17
    2614:	98 8d       	ldd	r25, Y+24	; 0x18
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a e7       	ldi	r20, 0x7A	; 122
    261c:	54 e4       	ldi	r21, 0x44	; 68
    261e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	8c 87       	std	Y+12, r24	; 0x0c
    2628:	9d 87       	std	Y+13, r25	; 0x0d
    262a:	ae 87       	std	Y+14, r26	; 0x0e
    262c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    262e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2630:	7d 85       	ldd	r23, Y+13	; 0x0d
    2632:	8e 85       	ldd	r24, Y+14	; 0x0e
    2634:	9f 85       	ldd	r25, Y+15	; 0x0f
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4a e7       	ldi	r20, 0x7A	; 122
    263c:	55 e4       	ldi	r21, 0x45	; 69
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	88 87       	std	Y+8, r24	; 0x08
    2648:	99 87       	std	Y+9, r25	; 0x09
    264a:	aa 87       	std	Y+10, r26	; 0x0a
    264c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    264e:	68 85       	ldd	r22, Y+8	; 0x08
    2650:	79 85       	ldd	r23, Y+9	; 0x09
    2652:	8a 85       	ldd	r24, Y+10	; 0x0a
    2654:	9b 85       	ldd	r25, Y+11	; 0x0b
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e8       	ldi	r20, 0x80	; 128
    265c:	5f e3       	ldi	r21, 0x3F	; 63
    265e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2662:	88 23       	and	r24, r24
    2664:	2c f4       	brge	.+10     	; 0x2670 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9f 83       	std	Y+7, r25	; 0x07
    266c:	8e 83       	std	Y+6, r24	; 0x06
    266e:	3f c0       	rjmp	.+126    	; 0x26ee <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    2670:	68 85       	ldd	r22, Y+8	; 0x08
    2672:	79 85       	ldd	r23, Y+9	; 0x09
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	9b 85       	ldd	r25, Y+11	; 0x0b
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	3f ef       	ldi	r19, 0xFF	; 255
    267c:	4f e7       	ldi	r20, 0x7F	; 127
    267e:	57 e4       	ldi	r21, 0x47	; 71
    2680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2684:	18 16       	cp	r1, r24
    2686:	4c f5       	brge	.+82     	; 0x26da <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2688:	6c 85       	ldd	r22, Y+12	; 0x0c
    268a:	7d 85       	ldd	r23, Y+13	; 0x0d
    268c:	8e 85       	ldd	r24, Y+14	; 0x0e
    268e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e2       	ldi	r20, 0x20	; 32
    2696:	51 e4       	ldi	r21, 0x41	; 65
    2698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	bc 01       	movw	r22, r24
    26a2:	cd 01       	movw	r24, r26
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	9f 83       	std	Y+7, r25	; 0x07
    26ae:	8e 83       	std	Y+6, r24	; 0x06
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <LCD_enu_SendChar+0x390>
    26b2:	80 e9       	ldi	r24, 0x90	; 144
    26b4:	91 e0       	ldi	r25, 0x01	; 1
    26b6:	9d 83       	std	Y+5, r25	; 0x05
    26b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26ba:	8c 81       	ldd	r24, Y+4	; 0x04
    26bc:	9d 81       	ldd	r25, Y+5	; 0x05
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	f1 f7       	brne	.-4      	; 0x26be <LCD_enu_SendChar+0x37e>
    26c2:	9d 83       	std	Y+5, r25	; 0x05
    26c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	9f 83       	std	Y+7, r25	; 0x07
    26ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d0:	8e 81       	ldd	r24, Y+6	; 0x06
    26d2:	9f 81       	ldd	r25, Y+7	; 0x07
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	69 f7       	brne	.-38     	; 0x26b2 <LCD_enu_SendChar+0x372>
    26d8:	24 c0       	rjmp	.+72     	; 0x2722 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	68 85       	ldd	r22, Y+8	; 0x08
    26dc:	79 85       	ldd	r23, Y+9	; 0x09
    26de:	8a 85       	ldd	r24, Y+10	; 0x0a
    26e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	9f 83       	std	Y+7, r25	; 0x07
    26ec:	8e 83       	std	Y+6, r24	; 0x06
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	9f 81       	ldd	r25, Y+7	; 0x07
    26f2:	9b 83       	std	Y+3, r25	; 0x03
    26f4:	8a 83       	std	Y+2, r24	; 0x02
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <LCD_enu_SendChar+0x3ba>
    26fe:	9b 83       	std	Y+3, r25	; 0x03
    2700:	8a 83       	std	Y+2, r24	; 0x02
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2704:	69 89       	ldd	r22, Y+17	; 0x11
    2706:	7a 89       	ldd	r23, Y+18	; 0x12
    2708:	8b 89       	ldd	r24, Y+19	; 0x13
    270a:	9c 89       	ldd	r25, Y+20	; 0x14
    270c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	88 8b       	std	Y+16, r24	; 0x10
    2716:	88 89       	ldd	r24, Y+16	; 0x10
    2718:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	8a 95       	dec	r24
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_enu_SendChar+0x3dc>
    2720:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    return STATE_OK;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    272e:	e1 96       	adiw	r28, 0x31	; 49
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <LCD_enu_SendString+0x6>
    2746:	0f 92       	push	r0
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
    2750:	0e c0       	rjmp	.+28     	; 0x276e <LCD_enu_SendString+0x2e>
    for(u8 i ; Copy_pu8_String[i] != '\0' ; i++ ){
        LCD_enu_SendChar(Copy_pu8_String[i]);
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i ; Copy_pu8_String[i] != '\0' ; i++ ){
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	fc 01       	movw	r30, r24
    277a:	e2 0f       	add	r30, r18
    277c:	f3 1f       	adc	r31, r19
    277e:	80 81       	ld	r24, Z
    2780:	88 23       	and	r24, r24
    2782:	39 f7       	brne	.-50     	; 0x2752 <LCD_enu_SendString+0x12>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    2784:	81 e0       	ldi	r24, 0x01	; 1
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	08 95       	ret

00002792 <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	60 97       	sbiw	r28, 0x10	; 16
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	6d 87       	std	Y+13, r22	; 0x0d
    27ac:	7e 87       	std	Y+14, r23	; 0x0e
    27ae:	8f 87       	std	Y+15, r24	; 0x0f
    27b0:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    27b2:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    27b4:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	af 85       	ldd	r26, Y+15	; 0x0f
    27bc:	b8 89       	ldd	r27, Y+16	; 0x10
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	a1 05       	cpc	r26, r1
    27c2:	b1 05       	cpc	r27, r1
    27c4:	89 f5       	brne	.+98     	; 0x2828 <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    27c6:	80 e3       	ldi	r24, 0x30	; 48
    27c8:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_enu_SendChar>
    27cc:	4d c0       	rjmp	.+154    	; 0x2868 <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    27ce:	8a 81       	ldd	r24, Y+2	; 0x02
    27d0:	08 2f       	mov	r16, r24
    27d2:	10 e0       	ldi	r17, 0x00	; 0
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	af 85       	ldd	r26, Y+15	; 0x0f
    27da:	b8 89       	ldd	r27, Y+16	; 0x10
    27dc:	2a e0       	ldi	r18, 0x0A	; 10
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodsi4>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	28 2f       	mov	r18, r24
    27f2:	ce 01       	movw	r24, r28
    27f4:	03 96       	adiw	r24, 0x03	; 3
    27f6:	fc 01       	movw	r30, r24
    27f8:	e0 0f       	add	r30, r16
    27fa:	f1 1f       	adc	r31, r17
    27fc:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    27fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2800:	9e 85       	ldd	r25, Y+14	; 0x0e
    2802:	af 85       	ldd	r26, Y+15	; 0x0f
    2804:	b8 89       	ldd	r27, Y+16	; 0x10
    2806:	2a e0       	ldi	r18, 0x0A	; 10
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	50 e0       	ldi	r21, 0x00	; 0
    280e:	bc 01       	movw	r22, r24
    2810:	cd 01       	movw	r24, r26
    2812:	0e 94 3e 21 	call	0x427c	; 0x427c <__udivmodsi4>
    2816:	da 01       	movw	r26, r20
    2818:	c9 01       	movw	r24, r18
    281a:	8d 87       	std	Y+13, r24	; 0x0d
    281c:	9e 87       	std	Y+14, r25	; 0x0e
    281e:	af 87       	std	Y+15, r26	; 0x0f
    2820:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    2828:	8d 85       	ldd	r24, Y+13	; 0x0d
    282a:	9e 85       	ldd	r25, Y+14	; 0x0e
    282c:	af 85       	ldd	r26, Y+15	; 0x0f
    282e:	b8 89       	ldd	r27, Y+16	; 0x10
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	a1 05       	cpc	r26, r1
    2834:	b1 05       	cpc	r27, r1
    2836:	59 f6       	brne	.-106    	; 0x27ce <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	81 50       	subi	r24, 0x01	; 1
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	11 c0       	rjmp	.+34     	; 0x2862 <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	28 2f       	mov	r18, r24
    2844:	33 27       	eor	r19, r19
    2846:	27 fd       	sbrc	r18, 7
    2848:	30 95       	com	r19
    284a:	ce 01       	movw	r24, r28
    284c:	03 96       	adiw	r24, 0x03	; 3
    284e:	fc 01       	movw	r30, r24
    2850:	e2 0f       	add	r30, r18
    2852:	f3 1f       	adc	r31, r19
    2854:	80 81       	ld	r24, Z
    2856:	80 5d       	subi	r24, 0xD0	; 208
    2858:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	81 50       	subi	r24, 0x01	; 1
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	88 23       	and	r24, r24
    2866:	64 f7       	brge	.-40     	; 0x2840 <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    2868:	81 e0       	ldi	r24, 0x01	; 1
}
    286a:	60 96       	adiw	r28, 0x10	; 16
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	1f 91       	pop	r17
    287c:	0f 91       	pop	r16
    287e:	08 95       	ret

00002880 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	00 d0       	rcall	.+0      	; 0x2886 <LCD_enu_SetCursor+0x6>
    2886:	00 d0       	rcall	.+0      	; 0x2888 <LCD_enu_SetCursor+0x8>
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	88 32       	cpi	r24, 0x28	; 40
    2896:	f0 f4       	brcc	.+60     	; 0x28d4 <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	3d 83       	std	Y+5, r19	; 0x05
    28a0:	2c 83       	std	Y+4, r18	; 0x04
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	9d 81       	ldd	r25, Y+5	; 0x05
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	31 f0       	breq	.+12     	; 0x28b6 <LCD_enu_SetCursor+0x36>
    28aa:	2c 81       	ldd	r18, Y+4	; 0x04
    28ac:	3d 81       	ldd	r19, Y+5	; 0x05
    28ae:	21 30       	cpi	r18, 0x01	; 1
    28b0:	31 05       	cpc	r19, r1
    28b2:	31 f0       	breq	.+12     	; 0x28c0 <LCD_enu_SetCursor+0x40>
    28b4:	0a c0       	rjmp	.+20     	; 0x28ca <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	80 58       	subi	r24, 0x80	; 128
    28ba:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    28be:	07 c0       	rjmp	.+14     	; 0x28ce <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	80 54       	subi	r24, 0x40	; 64
    28c4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    28c8:	02 c0       	rjmp	.+4      	; 0x28ce <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    28ca:	1b 82       	std	Y+3, r1	; 0x03
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    28ce:	31 e0       	ldi	r19, 0x01	; 1
    28d0:	3b 83       	std	Y+3, r19	; 0x03
    28d2:	01 c0       	rjmp	.+2      	; 0x28d6 <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    28d4:	1b 82       	std	Y+3, r1	; 0x03
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	08 95       	ret

000028e8 <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	cc 54       	subi	r28, 0x4C	; 76
    28f6:	d0 40       	sbci	r29, 0x00	; 0
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	61 e0       	ldi	r22, 0x01	; 1
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	62 e0       	ldi	r22, 0x02	; 2
    291a:	41 e0       	ldi	r20, 0x01	; 1
    291c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	66 e0       	ldi	r22, 0x06	; 6
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	65 e0       	ldi	r22, 0x05	; 5
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	64 e0       	ldi	r22, 0x04	; 4
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	63 e0       	ldi	r22, 0x03	; 3
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    2948:	fe 01       	movw	r30, r28
    294a:	e7 5b       	subi	r30, 0xB7	; 183
    294c:	ff 4f       	sbci	r31, 0xFF	; 255
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	ac e0       	ldi	r26, 0x0C	; 12
    2954:	b2 e4       	ldi	r27, 0x42	; 66
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	a2 83       	std	Z+2, r26	; 0x02
    295c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	8e 01       	movw	r16, r28
    2960:	0b 5b       	subi	r16, 0xBB	; 187
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	fe 01       	movw	r30, r28
    2966:	e7 5b       	subi	r30, 0xB7	; 183
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	4a e7       	ldi	r20, 0x7A	; 122
    2978:	55 e4       	ldi	r21, 0x45	; 69
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	f8 01       	movw	r30, r16
    2984:	80 83       	st	Z, r24
    2986:	91 83       	std	Z+1, r25	; 0x01
    2988:	a2 83       	std	Z+2, r26	; 0x02
    298a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    298c:	fe 01       	movw	r30, r28
    298e:	eb 5b       	subi	r30, 0xBB	; 187
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	44 f4       	brge	.+16     	; 0x29ba <LCD_enu_Init+0xd2>
		__ticks = 1;
    29aa:	fe 01       	movw	r30, r28
    29ac:	ed 5b       	subi	r30, 0xBD	; 189
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
    29b8:	64 c0       	rjmp	.+200    	; 0x2a82 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    29ba:	fe 01       	movw	r30, r28
    29bc:	eb 5b       	subi	r30, 0xBB	; 187
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	60 81       	ld	r22, Z
    29c2:	71 81       	ldd	r23, Z+1	; 0x01
    29c4:	82 81       	ldd	r24, Z+2	; 0x02
    29c6:	93 81       	ldd	r25, Z+3	; 0x03
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	0c f0       	brlt	.+2      	; 0x29da <LCD_enu_Init+0xf2>
    29d8:	43 c0       	rjmp	.+134    	; 0x2a60 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	fe 01       	movw	r30, r28
    29dc:	e7 5b       	subi	r30, 0xB7	; 183
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e2       	ldi	r20, 0x20	; 32
    29ee:	51 e4       	ldi	r21, 0x41	; 65
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	8e 01       	movw	r16, r28
    29fa:	0d 5b       	subi	r16, 0xBD	; 189
    29fc:	1f 4f       	sbci	r17, 0xFF	; 255
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
    2a10:	1f c0       	rjmp	.+62     	; 0x2a50 <LCD_enu_Init+0x168>
    2a12:	fe 01       	movw	r30, r28
    2a14:	ef 5b       	subi	r30, 0xBF	; 191
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	80 e9       	ldi	r24, 0x90	; 144
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a20:	fe 01       	movw	r30, r28
    2a22:	ef 5b       	subi	r30, 0xBF	; 191
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <LCD_enu_Init+0x142>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 5b       	subi	r30, 0xBF	; 191
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	91 83       	std	Z+1, r25	; 0x01
    2a36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	de 01       	movw	r26, r28
    2a3a:	ad 5b       	subi	r26, 0xBD	; 189
    2a3c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3e:	fe 01       	movw	r30, r28
    2a40:	ed 5b       	subi	r30, 0xBD	; 189
    2a42:	ff 4f       	sbci	r31, 0xFF	; 255
    2a44:	80 81       	ld	r24, Z
    2a46:	91 81       	ldd	r25, Z+1	; 0x01
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	11 96       	adiw	r26, 0x01	; 1
    2a4c:	9c 93       	st	X, r25
    2a4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a50:	fe 01       	movw	r30, r28
    2a52:	ed 5b       	subi	r30, 0xBD	; 189
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	d1 f6       	brne	.-76     	; 0x2a12 <LCD_enu_Init+0x12a>
    2a5e:	24 c0       	rjmp	.+72     	; 0x2aa8 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a60:	8e 01       	movw	r16, r28
    2a62:	0d 5b       	subi	r16, 0xBD	; 189
    2a64:	1f 4f       	sbci	r17, 0xFF	; 255
    2a66:	fe 01       	movw	r30, r28
    2a68:	eb 5b       	subi	r30, 0xBB	; 187
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	60 81       	ld	r22, Z
    2a6e:	71 81       	ldd	r23, Z+1	; 0x01
    2a70:	82 81       	ldd	r24, Z+2	; 0x02
    2a72:	93 81       	ldd	r25, Z+3	; 0x03
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	91 83       	std	Z+1, r25	; 0x01
    2a80:	80 83       	st	Z, r24
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 5b       	subi	r30, 0xBD	; 189
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ff 96       	adiw	r30, 0x3f	; 63
    2a90:	91 83       	std	Z+1, r25	; 0x01
    2a92:	80 83       	st	Z, r24
    2a94:	fe 01       	movw	r30, r28
    2a96:	ff 96       	adiw	r30, 0x3f	; 63
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <LCD_enu_Init+0x1b4>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ff 96       	adiw	r30, 0x3f	; 63
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    2aa8:	83 e3       	ldi	r24, 0x33	; 51
    2aaa:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    2aae:	82 e3       	ldi	r24, 0x32	; 50
    2ab0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    2ab4:	88 e2       	ldi	r24, 0x28	; 40
    2ab6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	a0 e2       	ldi	r26, 0x20	; 32
    2ac0:	b2 e4       	ldi	r27, 0x42	; 66
    2ac2:	8b af       	std	Y+59, r24	; 0x3b
    2ac4:	9c af       	std	Y+60, r25	; 0x3c
    2ac6:	ad af       	std	Y+61, r26	; 0x3d
    2ac8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aca:	6b ad       	ldd	r22, Y+59	; 0x3b
    2acc:	7c ad       	ldd	r23, Y+60	; 0x3c
    2ace:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ad0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ad2:	2b ea       	ldi	r18, 0xAB	; 171
    2ad4:	3a ea       	ldi	r19, 0xAA	; 170
    2ad6:	4a ea       	ldi	r20, 0xAA	; 170
    2ad8:	50 e4       	ldi	r21, 0x40	; 64
    2ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	8f ab       	std	Y+55, r24	; 0x37
    2ae4:	98 af       	std	Y+56, r25	; 0x38
    2ae6:	a9 af       	std	Y+57, r26	; 0x39
    2ae8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2aea:	6f a9       	ldd	r22, Y+55	; 0x37
    2aec:	78 ad       	ldd	r23, Y+56	; 0x38
    2aee:	89 ad       	ldd	r24, Y+57	; 0x39
    2af0:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	1c f4       	brge	.+6      	; 0x2b08 <LCD_enu_Init+0x220>
		__ticks = 1;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	8e ab       	std	Y+54, r24	; 0x36
    2b06:	91 c0       	rjmp	.+290    	; 0x2c2a <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    2b08:	6f a9       	ldd	r22, Y+55	; 0x37
    2b0a:	78 ad       	ldd	r23, Y+56	; 0x38
    2b0c:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	4f e7       	ldi	r20, 0x7F	; 127
    2b16:	53 e4       	ldi	r21, 0x43	; 67
    2b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b1c:	18 16       	cp	r1, r24
    2b1e:	0c f0       	brlt	.+2      	; 0x2b22 <LCD_enu_Init+0x23a>
    2b20:	7b c0       	rjmp	.+246    	; 0x2c18 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    2b22:	6b ad       	ldd	r22, Y+59	; 0x3b
    2b24:	7c ad       	ldd	r23, Y+60	; 0x3c
    2b26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a e7       	ldi	r20, 0x7A	; 122
    2b30:	54 e4       	ldi	r21, 0x44	; 68
    2b32:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8a ab       	std	Y+50, r24	; 0x32
    2b3c:	9b ab       	std	Y+51, r25	; 0x33
    2b3e:	ac ab       	std	Y+52, r26	; 0x34
    2b40:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	6a a9       	ldd	r22, Y+50	; 0x32
    2b44:	7b a9       	ldd	r23, Y+51	; 0x33
    2b46:	8c a9       	ldd	r24, Y+52	; 0x34
    2b48:	9d a9       	ldd	r25, Y+53	; 0x35
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a e7       	ldi	r20, 0x7A	; 122
    2b50:	55 e4       	ldi	r21, 0x45	; 69
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8e a7       	std	Y+46, r24	; 0x2e
    2b5c:	9f a7       	std	Y+47, r25	; 0x2f
    2b5e:	a8 ab       	std	Y+48, r26	; 0x30
    2b60:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2b62:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b64:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b66:	88 a9       	ldd	r24, Y+48	; 0x30
    2b68:	99 a9       	ldd	r25, Y+49	; 0x31
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <LCD_enu_Init+0x29c>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9d a7       	std	Y+45, r25	; 0x2d
    2b80:	8c a7       	std	Y+44, r24	; 0x2c
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    2b84:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b86:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b88:	88 a9       	ldd	r24, Y+48	; 0x30
    2b8a:	99 a9       	ldd	r25, Y+49	; 0x31
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	6a a9       	ldd	r22, Y+50	; 0x32
    2b9e:	7b a9       	ldd	r23, Y+51	; 0x33
    2ba0:	8c a9       	ldd	r24, Y+52	; 0x34
    2ba2:	9d a9       	ldd	r25, Y+53	; 0x35
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9d a7       	std	Y+45, r25	; 0x2d
    2bc2:	8c a7       	std	Y+44, r24	; 0x2c
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <LCD_enu_Init+0x2fc>
    2bc6:	80 e9       	ldi	r24, 0x90	; 144
    2bc8:	91 e0       	ldi	r25, 0x01	; 1
    2bca:	9b a7       	std	Y+43, r25	; 0x2b
    2bcc:	8a a7       	std	Y+42, r24	; 0x2a
    2bce:	8a a5       	ldd	r24, Y+42	; 0x2a
    2bd0:	9b a5       	ldd	r25, Y+43	; 0x2b
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_enu_Init+0x2ea>
    2bd6:	9b a7       	std	Y+43, r25	; 0x2b
    2bd8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bdc:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9d a7       	std	Y+45, r25	; 0x2d
    2be2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	8c a5       	ldd	r24, Y+44	; 0x2c
    2be6:	9d a5       	ldd	r25, Y+45	; 0x2d
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <LCD_enu_Init+0x2de>
    2bec:	24 c0       	rjmp	.+72     	; 0x2c36 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bf0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bf2:	88 a9       	ldd	r24, Y+48	; 0x30
    2bf4:	99 a9       	ldd	r25, Y+49	; 0x31
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9d a7       	std	Y+45, r25	; 0x2d
    2c00:	8c a7       	std	Y+44, r24	; 0x2c
    2c02:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c04:	9d a5       	ldd	r25, Y+45	; 0x2d
    2c06:	99 a7       	std	Y+41, r25	; 0x29
    2c08:	88 a7       	std	Y+40, r24	; 0x28
    2c0a:	88 a5       	ldd	r24, Y+40	; 0x28
    2c0c:	99 a5       	ldd	r25, Y+41	; 0x29
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <LCD_enu_Init+0x326>
    2c12:	99 a7       	std	Y+41, r25	; 0x29
    2c14:	88 a7       	std	Y+40, r24	; 0x28
    2c16:	0f c0       	rjmp	.+30     	; 0x2c36 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c18:	6f a9       	ldd	r22, Y+55	; 0x37
    2c1a:	78 ad       	ldd	r23, Y+56	; 0x38
    2c1c:	89 ad       	ldd	r24, Y+57	; 0x39
    2c1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	8e ab       	std	Y+54, r24	; 0x36
    2c2a:	8e a9       	ldd	r24, Y+54	; 0x36
    2c2c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c2e:	8f a1       	ldd	r24, Y+39	; 0x27
    2c30:	8a 95       	dec	r24
    2c32:	f1 f7       	brne	.-4      	; 0x2c30 <LCD_enu_Init+0x348>
    2c34:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    2c36:	8f e0       	ldi	r24, 0x0F	; 15
    2c38:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    2c3c:	80 e0       	ldi	r24, 0x00	; 0
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	a0 e2       	ldi	r26, 0x20	; 32
    2c42:	b2 e4       	ldi	r27, 0x42	; 66
    2c44:	8b a3       	std	Y+35, r24	; 0x23
    2c46:	9c a3       	std	Y+36, r25	; 0x24
    2c48:	ad a3       	std	Y+37, r26	; 0x25
    2c4a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2c4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c50:	8d a1       	ldd	r24, Y+37	; 0x25
    2c52:	9e a1       	ldd	r25, Y+38	; 0x26
    2c54:	2b ea       	ldi	r18, 0xAB	; 171
    2c56:	3a ea       	ldi	r19, 0xAA	; 170
    2c58:	4a ea       	ldi	r20, 0xAA	; 170
    2c5a:	50 e4       	ldi	r21, 0x40	; 64
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8f 8f       	std	Y+31, r24	; 0x1f
    2c66:	98 a3       	std	Y+32, r25	; 0x20
    2c68:	a9 a3       	std	Y+33, r26	; 0x21
    2c6a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2c6c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c6e:	78 a1       	ldd	r23, Y+32	; 0x20
    2c70:	89 a1       	ldd	r24, Y+33	; 0x21
    2c72:	9a a1       	ldd	r25, Y+34	; 0x22
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	1c f4       	brge	.+6      	; 0x2c8a <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	8e 8f       	std	Y+30, r24	; 0x1e
    2c88:	91 c0       	rjmp	.+290    	; 0x2dac <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2c8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c8c:	78 a1       	ldd	r23, Y+32	; 0x20
    2c8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c90:	9a a1       	ldd	r25, Y+34	; 0x22
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	53 e4       	ldi	r21, 0x43	; 67
    2c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	0c f0       	brlt	.+2      	; 0x2ca4 <LCD_enu_Init+0x3bc>
    2ca2:	7b c0       	rjmp	.+246    	; 0x2d9a <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    2ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    2caa:	9e a1       	ldd	r25, Y+38	; 0x26
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	4a e7       	ldi	r20, 0x7A	; 122
    2cb2:	54 e4       	ldi	r21, 0x44	; 68
    2cb4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	8a 8f       	std	Y+26, r24	; 0x1a
    2cbe:	9b 8f       	std	Y+27, r25	; 0x1b
    2cc0:	ac 8f       	std	Y+28, r26	; 0x1c
    2cc2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2cc6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2cc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a e7       	ldi	r20, 0x7A	; 122
    2cd2:	55 e4       	ldi	r21, 0x45	; 69
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8e 8b       	std	Y+22, r24	; 0x16
    2cde:	9f 8b       	std	Y+23, r25	; 0x17
    2ce0:	a8 8f       	std	Y+24, r26	; 0x18
    2ce2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2ce4:	6e 89       	ldd	r22, Y+22	; 0x16
    2ce6:	7f 89       	ldd	r23, Y+23	; 0x17
    2ce8:	88 8d       	ldd	r24, Y+24	; 0x18
    2cea:	99 8d       	ldd	r25, Y+25	; 0x19
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf8:	88 23       	and	r24, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <LCD_enu_Init+0x41e>
		__ticks = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9d 8b       	std	Y+21, r25	; 0x15
    2d02:	8c 8b       	std	Y+20, r24	; 0x14
    2d04:	3f c0       	rjmp	.+126    	; 0x2d84 <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    2d06:	6e 89       	ldd	r22, Y+22	; 0x16
    2d08:	7f 89       	ldd	r23, Y+23	; 0x17
    2d0a:	88 8d       	ldd	r24, Y+24	; 0x18
    2d0c:	99 8d       	ldd	r25, Y+25	; 0x19
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	4c f5       	brge	.+82     	; 0x2d70 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2d20:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2d22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d24:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e2       	ldi	r20, 0x20	; 32
    2d2c:	51 e4       	ldi	r21, 0x41	; 65
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9d 8b       	std	Y+21, r25	; 0x15
    2d44:	8c 8b       	std	Y+20, r24	; 0x14
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <LCD_enu_Init+0x47e>
    2d48:	80 e9       	ldi	r24, 0x90	; 144
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	9b 8b       	std	Y+19, r25	; 0x13
    2d4e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d50:	8a 89       	ldd	r24, Y+18	; 0x12
    2d52:	9b 89       	ldd	r25, Y+19	; 0x13
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_enu_Init+0x46c>
    2d58:	9b 8b       	std	Y+19, r25	; 0x13
    2d5a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	8c 89       	ldd	r24, Y+20	; 0x14
    2d5e:	9d 89       	ldd	r25, Y+21	; 0x15
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9d 8b       	std	Y+21, r25	; 0x15
    2d64:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	8c 89       	ldd	r24, Y+20	; 0x14
    2d68:	9d 89       	ldd	r25, Y+21	; 0x15
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f7       	brne	.-38     	; 0x2d48 <LCD_enu_Init+0x460>
    2d6e:	24 c0       	rjmp	.+72     	; 0x2db8 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	6e 89       	ldd	r22, Y+22	; 0x16
    2d72:	7f 89       	ldd	r23, Y+23	; 0x17
    2d74:	88 8d       	ldd	r24, Y+24	; 0x18
    2d76:	99 8d       	ldd	r25, Y+25	; 0x19
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9d 8b       	std	Y+21, r25	; 0x15
    2d82:	8c 8b       	std	Y+20, r24	; 0x14
    2d84:	8c 89       	ldd	r24, Y+20	; 0x14
    2d86:	9d 89       	ldd	r25, Y+21	; 0x15
    2d88:	99 8b       	std	Y+17, r25	; 0x11
    2d8a:	88 8b       	std	Y+16, r24	; 0x10
    2d8c:	88 89       	ldd	r24, Y+16	; 0x10
    2d8e:	99 89       	ldd	r25, Y+17	; 0x11
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <LCD_enu_Init+0x4a8>
    2d94:	99 8b       	std	Y+17, r25	; 0x11
    2d96:	88 8b       	std	Y+16, r24	; 0x10
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d9a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d9c:	78 a1       	ldd	r23, Y+32	; 0x20
    2d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2da0:	9a a1       	ldd	r25, Y+34	; 0x22
    2da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8e 8f       	std	Y+30, r24	; 0x1e
    2dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dae:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db2:	8a 95       	dec	r24
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <LCD_enu_Init+0x4ca>
    2db6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	a0 e0       	ldi	r26, 0x00	; 0
    2dc4:	b0 e4       	ldi	r27, 0x40	; 64
    2dc6:	8b 87       	std	Y+11, r24	; 0x0b
    2dc8:	9c 87       	std	Y+12, r25	; 0x0c
    2dca:	ad 87       	std	Y+13, r26	; 0x0d
    2dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	4a e7       	ldi	r20, 0x7A	; 122
    2ddc:	55 e4       	ldi	r21, 0x45	; 69
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	8f 83       	std	Y+7, r24	; 0x07
    2de8:	98 87       	std	Y+8, r25	; 0x08
    2dea:	a9 87       	std	Y+9, r26	; 0x09
    2dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	5f e3       	ldi	r21, 0x3F	; 63
    2dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e02:	88 23       	and	r24, r24
    2e04:	2c f4       	brge	.+10     	; 0x2e10 <LCD_enu_Init+0x528>
		__ticks = 1;
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
    2e0e:	3f c0       	rjmp	.+126    	; 0x2e8e <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	4c f5       	brge	.+82     	; 0x2e7a <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e2       	ldi	r20, 0x20	; 32
    2e36:	51 e4       	ldi	r21, 0x41	; 65
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	bc 01       	movw	r22, r24
    2e42:	cd 01       	movw	r24, r26
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
    2e50:	0f c0       	rjmp	.+30     	; 0x2e70 <LCD_enu_Init+0x588>
    2e52:	80 e9       	ldi	r24, 0x90	; 144
    2e54:	91 e0       	ldi	r25, 0x01	; 1
    2e56:	9c 83       	std	Y+4, r25	; 0x04
    2e58:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <LCD_enu_Init+0x576>
    2e62:	9c 83       	std	Y+4, r25	; 0x04
    2e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e66:	8d 81       	ldd	r24, Y+5	; 0x05
    2e68:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	69 f7       	brne	.-38     	; 0x2e52 <LCD_enu_Init+0x56a>
    2e78:	14 c0       	rjmp	.+40     	; 0x2ea2 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7c:	78 85       	ldd	r23, Y+8	; 0x08
    2e7e:	89 85       	ldd	r24, Y+9	; 0x09
    2e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	9a 81       	ldd	r25, Y+2	; 0x02
    2e9a:	01 97       	sbiw	r24, 0x01	; 1
    2e9c:	f1 f7       	brne	.-4      	; 0x2e9a <LCD_enu_Init+0x5b2>
    2e9e:	9a 83       	std	Y+2, r25	; 0x02
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2ea2:	86 e0       	ldi	r24, 0x06	; 6
    2ea4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    return STATE_OK;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    2eaa:	c4 5b       	subi	r28, 0xB4	; 180
    2eac:	df 4f       	sbci	r29, 0xFF	; 255
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	08 95       	ret

00002ec2 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	2e 97       	sbiw	r28, 0x0e	; 14
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	a0 e0       	ldi	r26, 0x00	; 0
    2ee2:	b0 e4       	ldi	r27, 0x40	; 64
    2ee4:	8b 87       	std	Y+11, r24	; 0x0b
    2ee6:	9c 87       	std	Y+12, r25	; 0x0c
    2ee8:	ad 87       	std	Y+13, r26	; 0x0d
    2eea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	4a e7       	ldi	r20, 0x7A	; 122
    2efa:	55 e4       	ldi	r21, 0x45	; 69
    2efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	8f 83       	std	Y+7, r24	; 0x07
    2f06:	98 87       	std	Y+8, r25	; 0x08
    2f08:	a9 87       	std	Y+9, r26	; 0x09
    2f0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <LCD_enu_Clear+0x6c>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9e 83       	std	Y+6, r25	; 0x06
    2f2a:	8d 83       	std	Y+5, r24	; 0x05
    2f2c:	3f c0       	rjmp	.+126    	; 0x2fac <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    2f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f30:	78 85       	ldd	r23, Y+8	; 0x08
    2f32:	89 85       	ldd	r24, Y+9	; 0x09
    2f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	3f ef       	ldi	r19, 0xFF	; 255
    2f3a:	4f e7       	ldi	r20, 0x7F	; 127
    2f3c:	57 e4       	ldi	r21, 0x47	; 71
    2f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f42:	18 16       	cp	r1, r24
    2f44:	4c f5       	brge	.+82     	; 0x2f98 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f4e:	20 e0       	ldi	r18, 0x00	; 0
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	40 e2       	ldi	r20, 0x20	; 32
    2f54:	51 e4       	ldi	r21, 0x41	; 65
    2f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	0f c0       	rjmp	.+30     	; 0x2f8e <LCD_enu_Clear+0xcc>
    2f70:	80 e9       	ldi	r24, 0x90	; 144
    2f72:	91 e0       	ldi	r25, 0x01	; 1
    2f74:	9c 83       	std	Y+4, r25	; 0x04
    2f76:	8b 83       	std	Y+3, r24	; 0x03
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <LCD_enu_Clear+0xba>
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	9e 83       	std	Y+6, r25	; 0x06
    2f8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f90:	9e 81       	ldd	r25, Y+6	; 0x06
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	69 f7       	brne	.-38     	; 0x2f70 <LCD_enu_Clear+0xae>
    2f96:	14 c0       	rjmp	.+40     	; 0x2fc0 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f98:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9a:	78 85       	ldd	r23, Y+8	; 0x08
    2f9c:	89 85       	ldd	r24, Y+9	; 0x09
    2f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	8d 81       	ldd	r24, Y+5	; 0x05
    2fae:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_enu_Clear+0xf6>
    2fbc:	9a 83       	std	Y+2, r25	; 0x02
    2fbe:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
}
    2fc2:	2e 96       	adiw	r28, 0x0e	; 14
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	00 d0       	rcall	.+0      	; 0x2fda <LCD_enu_CreateCustomChar+0x6>
    2fda:	00 d0       	rcall	.+0      	; 0x2fdc <LCD_enu_CreateCustomChar+0x8>
    2fdc:	0f 92       	push	r0
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	7c 83       	std	Y+4, r23	; 0x04
    2fe6:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	49 f1       	breq	.+82     	; 0x3042 <LCD_enu_CreateCustomChar+0x6e>
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	88 30       	cpi	r24, 0x08	; 8
    2ff4:	30 f5       	brcc	.+76     	; 0x3042 <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	88 2f       	mov	r24, r24
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	08 96       	adiw	r24, 0x08	; 8
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    300e:	19 82       	std	Y+1, r1	; 0x01
    3010:	0e c0       	rjmp	.+28     	; 0x302e <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    3012:	89 81       	ldd	r24, Y+1	; 0x01
    3014:	28 2f       	mov	r18, r24
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	8b 81       	ldd	r24, Y+3	; 0x03
    301a:	9c 81       	ldd	r25, Y+4	; 0x04
    301c:	fc 01       	movw	r30, r24
    301e:	e2 0f       	add	r30, r18
    3020:	f3 1f       	adc	r31, r19
    3022:	80 81       	ld	r24, Z
    3024:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	8f 5f       	subi	r24, 0xFF	; 255
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	88 30       	cpi	r24, 0x08	; 8
    3032:	78 f3       	brcs	.-34     	; 0x3012 <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	0e 94 40 14 	call	0x2880	; 0x2880 <LCD_enu_SetCursor>
        return STATE_OK;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	8d 83       	std	Y+5, r24	; 0x05
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	0f 92       	push	r0
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    3062:	19 82       	std	Y+1, r1	; 0x01
    3064:	33 c0       	rjmp	.+102    	; 0x30cc <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    3066:	89 81       	ldd	r24, Y+1	; 0x01
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	fc 01       	movw	r30, r24
    306e:	e8 5b       	subi	r30, 0xB8	; 184
    3070:	fe 4f       	sbci	r31, 0xFE	; 254
    3072:	90 81       	ld	r25, Z
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	69 2f       	mov	r22, r25
    3078:	41 e0       	ldi	r20, 0x01	; 1
    307a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	88 2f       	mov	r24, r24
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	fc 01       	movw	r30, r24
    3086:	e8 5b       	subi	r30, 0xB8	; 184
    3088:	fe 4f       	sbci	r31, 0xFE	; 254
    308a:	90 81       	ld	r25, Z
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	69 2f       	mov	r22, r25
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	fc 01       	movw	r30, r24
    309e:	e4 5b       	subi	r30, 0xB4	; 180
    30a0:	fe 4f       	sbci	r31, 0xFE	; 254
    30a2:	90 81       	ld	r25, Z
    30a4:	83 e0       	ldi	r24, 0x03	; 3
    30a6:	69 2f       	mov	r22, r25
    30a8:	40 e0       	ldi	r20, 0x00	; 0
    30aa:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	fc 01       	movw	r30, r24
    30b6:	e4 5b       	subi	r30, 0xB4	; 180
    30b8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ba:	90 81       	ld	r25, Z
    30bc:	83 e0       	ldi	r24, 0x03	; 3
    30be:	69 2f       	mov	r22, r25
    30c0:	41 e0       	ldi	r20, 0x01	; 1
    30c2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	8f 5f       	subi	r24, 0xFF	; 255
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	84 30       	cpi	r24, 0x04	; 4
    30d0:	50 f2       	brcs	.-108    	; 0x3066 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
}
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	65 97       	sbiw	r28, 0x15	; 21
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	9d 8b       	std	Y+21, r25	; 0x15
    30f2:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	8a 8b       	std	Y+18, r24	; 0x12
    30f8:	1b 8a       	std	Y+19, r1	; 0x13
    30fa:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    30fc:	8c 89       	ldd	r24, Y+20	; 0x14
    30fe:	9d 89       	ldd	r25, Y+21	; 0x15
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	09 f4       	brne	.+2      	; 0x3106 <Keypad_enu_getKey+0x2a>
    3104:	f0 c0       	rjmp	.+480    	; 0x32e6 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    3106:	ec 89       	ldd	r30, Y+20	; 0x14
    3108:	fd 89       	ldd	r31, Y+21	; 0x15
    310a:	8f ef       	ldi	r24, 0xFF	; 255
    310c:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    310e:	19 8a       	std	Y+17, r1	; 0x11
    3110:	e5 c0       	rjmp	.+458    	; 0x32dc <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    3112:	89 89       	ldd	r24, Y+17	; 0x11
    3114:	88 2f       	mov	r24, r24
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	fc 01       	movw	r30, r24
    311a:	e8 5b       	subi	r30, 0xB8	; 184
    311c:	fe 4f       	sbci	r31, 0xFE	; 254
    311e:	90 81       	ld	r25, Z
    3120:	81 e0       	ldi	r24, 0x01	; 1
    3122:	69 2f       	mov	r22, r25
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    312a:	18 8a       	std	Y+16, r1	; 0x10
    312c:	c1 c0       	rjmp	.+386    	; 0x32b0 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    312e:	88 89       	ldd	r24, Y+16	; 0x10
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	fc 01       	movw	r30, r24
    3136:	e4 5b       	subi	r30, 0xB4	; 180
    3138:	fe 4f       	sbci	r31, 0xFE	; 254
    313a:	90 81       	ld	r25, Z
    313c:	9e 01       	movw	r18, r28
    313e:	2d 5e       	subi	r18, 0xED	; 237
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	83 e0       	ldi	r24, 0x03	; 3
    3144:	69 2f       	mov	r22, r25
    3146:	a9 01       	movw	r20, r18
    3148:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    314c:	8b 89       	ldd	r24, Y+19	; 0x13
    314e:	88 23       	and	r24, r24
    3150:	09 f0       	breq	.+2      	; 0x3154 <Keypad_enu_getKey+0x78>
    3152:	ab c0       	rjmp	.+342    	; 0x32aa <Keypad_enu_getKey+0x1ce>
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a0 ea       	ldi	r26, 0xA0	; 160
    315a:	b1 e4       	ldi	r27, 0x41	; 65
    315c:	8b 87       	std	Y+11, r24	; 0x0b
    315e:	9c 87       	std	Y+12, r25	; 0x0c
    3160:	ad 87       	std	Y+13, r26	; 0x0d
    3162:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3164:	6b 85       	ldd	r22, Y+11	; 0x0b
    3166:	7c 85       	ldd	r23, Y+12	; 0x0c
    3168:	8d 85       	ldd	r24, Y+13	; 0x0d
    316a:	9e 85       	ldd	r25, Y+14	; 0x0e
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	4a e7       	ldi	r20, 0x7A	; 122
    3172:	55 e4       	ldi	r21, 0x45	; 69
    3174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	8f 83       	std	Y+7, r24	; 0x07
    317e:	98 87       	std	Y+8, r25	; 0x08
    3180:	a9 87       	std	Y+9, r26	; 0x09
    3182:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	40 e8       	ldi	r20, 0x80	; 128
    3192:	5f e3       	ldi	r21, 0x3F	; 63
    3194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3198:	88 23       	and	r24, r24
    319a:	2c f4       	brge	.+10     	; 0x31a6 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	9e 83       	std	Y+6, r25	; 0x06
    31a2:	8d 83       	std	Y+5, r24	; 0x05
    31a4:	3f c0       	rjmp	.+126    	; 0x3224 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    31a6:	6f 81       	ldd	r22, Y+7	; 0x07
    31a8:	78 85       	ldd	r23, Y+8	; 0x08
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	4f e7       	ldi	r20, 0x7F	; 127
    31b4:	57 e4       	ldi	r21, 0x47	; 71
    31b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ba:	18 16       	cp	r1, r24
    31bc:	4c f5       	brge	.+82     	; 0x3210 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31be:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	40 e2       	ldi	r20, 0x20	; 32
    31cc:	51 e4       	ldi	r21, 0x41	; 65
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	9e 83       	std	Y+6, r25	; 0x06
    31e4:	8d 83       	std	Y+5, r24	; 0x05
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <Keypad_enu_getKey+0x12a>
    31e8:	80 e9       	ldi	r24, 0x90	; 144
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	9c 83       	std	Y+4, r25	; 0x04
    31ee:	8b 83       	std	Y+3, r24	; 0x03
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	9c 81       	ldd	r25, Y+4	; 0x04
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <Keypad_enu_getKey+0x118>
    31f8:	9c 83       	std	Y+4, r25	; 0x04
    31fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31fc:	8d 81       	ldd	r24, Y+5	; 0x05
    31fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	9e 83       	std	Y+6, r25	; 0x06
    3204:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	8d 81       	ldd	r24, Y+5	; 0x05
    3208:	9e 81       	ldd	r25, Y+6	; 0x06
    320a:	00 97       	sbiw	r24, 0x00	; 0
    320c:	69 f7       	brne	.-38     	; 0x31e8 <Keypad_enu_getKey+0x10c>
    320e:	14 c0       	rjmp	.+40     	; 0x3238 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3210:	6f 81       	ldd	r22, Y+7	; 0x07
    3212:	78 85       	ldd	r23, Y+8	; 0x08
    3214:	89 85       	ldd	r24, Y+9	; 0x09
    3216:	9a 85       	ldd	r25, Y+10	; 0x0a
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	9e 81       	ldd	r25, Y+6	; 0x06
    3228:	9a 83       	std	Y+2, r25	; 0x02
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <Keypad_enu_getKey+0x154>
    3234:	9a 83       	std	Y+2, r25	; 0x02
    3236:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    3238:	88 89       	ldd	r24, Y+16	; 0x10
    323a:	88 2f       	mov	r24, r24
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	fc 01       	movw	r30, r24
    3240:	e4 5b       	subi	r30, 0xB4	; 180
    3242:	fe 4f       	sbci	r31, 0xFE	; 254
    3244:	90 81       	ld	r25, Z
    3246:	9e 01       	movw	r18, r28
    3248:	2d 5e       	subi	r18, 0xED	; 237
    324a:	3f 4f       	sbci	r19, 0xFF	; 255
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	69 2f       	mov	r22, r25
    3250:	a9 01       	movw	r20, r18
    3252:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <DIO_enu_GetPinValue>
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    3258:	88 89       	ldd	r24, Y+16	; 0x10
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	fc 01       	movw	r30, r24
    3260:	e4 5b       	subi	r30, 0xB4	; 180
    3262:	fe 4f       	sbci	r31, 0xFE	; 254
    3264:	90 81       	ld	r25, Z
    3266:	9e 01       	movw	r18, r28
    3268:	2d 5e       	subi	r18, 0xED	; 237
    326a:	3f 4f       	sbci	r19, 0xFF	; 255
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	69 2f       	mov	r22, r25
    3270:	a9 01       	movw	r20, r18
    3272:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	88 23       	and	r24, r24
    327a:	71 f3       	breq	.-36     	; 0x3258 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    327c:	89 89       	ldd	r24, Y+17	; 0x11
    327e:	48 2f       	mov	r20, r24
    3280:	50 e0       	ldi	r21, 0x00	; 0
    3282:	88 89       	ldd	r24, Y+16	; 0x10
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	ca 01       	movw	r24, r20
    328a:	88 0f       	add	r24, r24
    328c:	99 1f       	adc	r25, r25
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	82 0f       	add	r24, r18
    3294:	93 1f       	adc	r25, r19
    3296:	fc 01       	movw	r30, r24
    3298:	e8 5c       	subi	r30, 0xC8	; 200
    329a:	fe 4f       	sbci	r31, 0xFE	; 254
    329c:	80 81       	ld	r24, Z
    329e:	ec 89       	ldd	r30, Y+20	; 0x14
    32a0:	fd 89       	ldd	r31, Y+21	; 0x15
    32a2:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
    32a8:	07 c0       	rjmp	.+14     	; 0x32b8 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    32aa:	88 89       	ldd	r24, Y+16	; 0x10
    32ac:	8f 5f       	subi	r24, 0xFF	; 255
    32ae:	88 8b       	std	Y+16, r24	; 0x10
    32b0:	88 89       	ldd	r24, Y+16	; 0x10
    32b2:	84 30       	cpi	r24, 0x04	; 4
    32b4:	08 f4       	brcc	.+2      	; 0x32b8 <Keypad_enu_getKey+0x1dc>
    32b6:	3b cf       	rjmp	.-394    	; 0x312e <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    32b8:	89 89       	ldd	r24, Y+17	; 0x11
    32ba:	88 2f       	mov	r24, r24
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	fc 01       	movw	r30, r24
    32c0:	e8 5b       	subi	r30, 0xB8	; 184
    32c2:	fe 4f       	sbci	r31, 0xFE	; 254
    32c4:	90 81       	ld	r25, Z
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	69 2f       	mov	r22, r25
    32ca:	41 e0       	ldi	r20, 0x01	; 1
    32cc:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    32d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32d2:	88 23       	and	r24, r24
    32d4:	49 f4       	brne	.+18     	; 0x32e8 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    32d6:	89 89       	ldd	r24, Y+17	; 0x11
    32d8:	8f 5f       	subi	r24, 0xFF	; 255
    32da:	89 8b       	std	Y+17, r24	; 0x11
    32dc:	89 89       	ldd	r24, Y+17	; 0x11
    32de:	84 30       	cpi	r24, 0x04	; 4
    32e0:	08 f4       	brcc	.+2      	; 0x32e4 <Keypad_enu_getKey+0x208>
    32e2:	17 cf       	rjmp	.-466    	; 0x3112 <Keypad_enu_getKey+0x36>
    32e4:	01 c0       	rjmp	.+2      	; 0x32e8 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    32e6:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    32e8:	8a 89       	ldd	r24, Y+18	; 0x12
}
    32ea:	65 96       	adiw	r28, 0x15	; 21
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	00 d0       	rcall	.+0      	; 0x3302 <DC_Motor_enu_Init+0x6>
    3302:	0f 92       	push	r0
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	8a 83       	std	Y+2, r24	; 0x02
    330a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    3310:	8a 81       	ldd	r24, Y+2	; 0x02
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	19 f0       	breq	.+6      	; 0x331c <DC_Motor_enu_Init+0x20>
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	88 23       	and	r24, r24
    331a:	59 f5       	brne	.+86     	; 0x3372 <DC_Motor_enu_Init+0x76>
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	19 f0       	breq	.+6      	; 0x3328 <DC_Motor_enu_Init+0x2c>
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	88 23       	and	r24, r24
    3326:	29 f5       	brne	.+74     	; 0x3372 <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	79 f4       	brne	.+30     	; 0x334c <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	64 e0       	ldi	r22, 0x04	; 4
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	41 e0       	ldi	r20, 0x01	; 1
    333e:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	61 e0       	ldi	r22, 0x01	; 1
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	81 30       	cpi	r24, 0x01	; 1
    3350:	89 f4       	brne	.+34     	; 0x3374 <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	65 e0       	ldi	r22, 0x05	; 5
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    335c:	82 e0       	ldi	r24, 0x02	; 2
    335e:	62 e0       	ldi	r22, 0x02	; 2
    3360:	41 e0       	ldi	r20, 0x01	; 1
    3362:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    3366:	82 e0       	ldi	r24, 0x02	; 2
    3368:	63 e0       	ldi	r22, 0x03	; 3
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <DIO_enu_SetPinDirection>
    3370:	01 c0       	rjmp	.+2      	; 0x3374 <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3372:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3374:	89 81       	ldd	r24, Y+1	; 0x01
}
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	08 95       	ret

00003382 <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    3382:	df 93       	push	r29
    3384:	cf 93       	push	r28
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	29 97       	sbiw	r28, 0x09	; 9
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	8a 83       	std	Y+2, r24	; 0x02
    3398:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	39 87       	std	Y+9, r19	; 0x09
    33a6:	28 87       	std	Y+8, r18	; 0x08
    33a8:	88 85       	ldd	r24, Y+8	; 0x08
    33aa:	99 85       	ldd	r25, Y+9	; 0x09
    33ac:	00 97       	sbiw	r24, 0x00	; 0
    33ae:	31 f0       	breq	.+12     	; 0x33bc <DC_Motor_enu_Rotate+0x3a>
    33b0:	28 85       	ldd	r18, Y+8	; 0x08
    33b2:	39 85       	ldd	r19, Y+9	; 0x09
    33b4:	21 30       	cpi	r18, 0x01	; 1
    33b6:	31 05       	cpc	r19, r1
    33b8:	89 f1       	breq	.+98     	; 0x341c <DC_Motor_enu_Rotate+0x9a>
    33ba:	60 c0       	rjmp	.+192    	; 0x347c <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	3f 83       	std	Y+7, r19	; 0x07
    33c4:	2e 83       	std	Y+6, r18	; 0x06
    33c6:	8e 81       	ldd	r24, Y+6	; 0x06
    33c8:	9f 81       	ldd	r25, Y+7	; 0x07
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	a9 f0       	breq	.+42     	; 0x33f8 <DC_Motor_enu_Rotate+0x76>
    33ce:	2e 81       	ldd	r18, Y+6	; 0x06
    33d0:	3f 81       	ldd	r19, Y+7	; 0x07
    33d2:	21 30       	cpi	r18, 0x01	; 1
    33d4:	31 05       	cpc	r19, r1
    33d6:	01 f5       	brne	.+64     	; 0x3418 <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	64 e0       	ldi	r22, 0x04	; 4
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    33e2:	82 e0       	ldi	r24, 0x02	; 2
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    33ec:	82 e0       	ldi	r24, 0x02	; 2
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    33f6:	43 c0       	rjmp	.+134    	; 0x347e <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	64 e0       	ldi	r22, 0x04	; 4
    33fc:	41 e0       	ldi	r20, 0x01	; 1
    33fe:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	61 e0       	ldi	r22, 0x01	; 1
    3410:	41 e0       	ldi	r20, 0x01	; 1
    3412:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    3416:	33 c0       	rjmp	.+102    	; 0x347e <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    3418:	19 82       	std	Y+1, r1	; 0x01
    341a:	31 c0       	rjmp	.+98     	; 0x347e <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	28 2f       	mov	r18, r24
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	3d 83       	std	Y+5, r19	; 0x05
    3424:	2c 83       	std	Y+4, r18	; 0x04
    3426:	8c 81       	ldd	r24, Y+4	; 0x04
    3428:	9d 81       	ldd	r25, Y+5	; 0x05
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	a9 f0       	breq	.+42     	; 0x3458 <DC_Motor_enu_Rotate+0xd6>
    342e:	2c 81       	ldd	r18, Y+4	; 0x04
    3430:	3d 81       	ldd	r19, Y+5	; 0x05
    3432:	21 30       	cpi	r18, 0x01	; 1
    3434:	31 05       	cpc	r19, r1
    3436:	01 f5       	brne	.+64     	; 0x3478 <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	65 e0       	ldi	r22, 0x05	; 5
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    3442:	82 e0       	ldi	r24, 0x02	; 2
    3444:	62 e0       	ldi	r22, 0x02	; 2
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    344c:	82 e0       	ldi	r24, 0x02	; 2
    344e:	63 e0       	ldi	r22, 0x03	; 3
    3450:	40 e0       	ldi	r20, 0x00	; 0
    3452:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    3456:	13 c0       	rjmp	.+38     	; 0x347e <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    3458:	82 e0       	ldi	r24, 0x02	; 2
    345a:	65 e0       	ldi	r22, 0x05	; 5
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    3462:	82 e0       	ldi	r24, 0x02	; 2
    3464:	62 e0       	ldi	r22, 0x02	; 2
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	63 e0       	ldi	r22, 0x03	; 3
    3470:	41 e0       	ldi	r20, 0x01	; 1
    3472:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    3476:	03 c0       	rjmp	.+6      	; 0x347e <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    3478:	19 82       	std	Y+1, r1	; 0x01
    347a:	01 c0       	rjmp	.+2      	; 0x347e <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    347c:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3480:	29 96       	adiw	r28, 0x09	; 9
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	de bf       	out	0x3e, r29	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	cd bf       	out	0x3d, r28	; 61
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	08 95       	ret

00003492 <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    3492:	df 93       	push	r29
    3494:	cf 93       	push	r28
    3496:	00 d0       	rcall	.+0      	; 0x3498 <DC_Motor_enu_Stop+0x6>
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	88 23       	and	r24, r24
    34a6:	31 f4       	brne	.+12     	; 0x34b4 <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	64 e0       	ldi	r22, 0x04	; 4
    34ac:	40 e0       	ldi	r20, 0x00	; 0
    34ae:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    34b2:	0a c0       	rjmp	.+20     	; 0x34c8 <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    34b4:	8a 81       	ldd	r24, Y+2	; 0x02
    34b6:	81 30       	cpi	r24, 0x01	; 1
    34b8:	31 f4       	brne	.+12     	; 0x34c6 <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	65 e0       	ldi	r22, 0x05	; 5
    34be:	40 e0       	ldi	r20, 0x00	; 0
    34c0:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <DIO_enu_SetPinValue>
    34c4:	01 c0       	rjmp	.+2      	; 0x34c8 <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    34c6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ca:	0f 90       	pop	r0
    34cc:	0f 90       	pop	r0
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    34dc:	af e5       	ldi	r26, 0x5F	; 95
    34de:	b0 e0       	ldi	r27, 0x00	; 0
    34e0:	ef e5       	ldi	r30, 0x5F	; 95
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	80 81       	ld	r24, Z
    34e6:	80 68       	ori	r24, 0x80	; 128
    34e8:	8c 93       	st	X, r24
    return STATE_OK;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
}
    34ec:	cf 91       	pop	r28
    34ee:	df 91       	pop	r29
    34f0:	08 95       	ret

000034f2 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    34f2:	df 93       	push	r29
    34f4:	cf 93       	push	r28
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    34fa:	af e5       	ldi	r26, 0x5F	; 95
    34fc:	b0 e0       	ldi	r27, 0x00	; 0
    34fe:	ef e5       	ldi	r30, 0x5F	; 95
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
    3504:	8f 77       	andi	r24, 0x7F	; 127
    3506:	8c 93       	st	X, r24
    return STATE_OK;
    3508:	81 e0       	ldi	r24, 0x01	; 1
}
    350a:	cf 91       	pop	r28
    350c:	df 91       	pop	r29
    350e:	08 95       	ret

00003510 <EXTI_enu_EXTI_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_EXTI_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	2b 97       	sbiw	r28, 0x0b	; 11
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	8a 83       	std	Y+2, r24	; 0x02
    3526:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    352c:	8a 81       	ldd	r24, Y+2	; 0x02
    352e:	83 30       	cpi	r24, 0x03	; 3
    3530:	08 f0       	brcs	.+2      	; 0x3534 <EXTI_enu_EXTI_Enable+0x24>
    3532:	07 c1       	rjmp	.+526    	; 0x3742 <EXTI_enu_EXTI_Enable+0x232>
    3534:	8b 81       	ldd	r24, Y+3	; 0x03
    3536:	84 30       	cpi	r24, 0x04	; 4
    3538:	08 f0       	brcs	.+2      	; 0x353c <EXTI_enu_EXTI_Enable+0x2c>
    353a:	03 c1       	rjmp	.+518    	; 0x3742 <EXTI_enu_EXTI_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	3b 87       	std	Y+11, r19	; 0x0b
    3544:	2a 87       	std	Y+10, r18	; 0x0a
    3546:	8a 85       	ldd	r24, Y+10	; 0x0a
    3548:	9b 85       	ldd	r25, Y+11	; 0x0b
    354a:	81 30       	cpi	r24, 0x01	; 1
    354c:	91 05       	cpc	r25, r1
    354e:	09 f4       	brne	.+2      	; 0x3552 <EXTI_enu_EXTI_Enable+0x42>
    3550:	6d c0       	rjmp	.+218    	; 0x362c <EXTI_enu_EXTI_Enable+0x11c>
    3552:	2a 85       	ldd	r18, Y+10	; 0x0a
    3554:	3b 85       	ldd	r19, Y+11	; 0x0b
    3556:	22 30       	cpi	r18, 0x02	; 2
    3558:	31 05       	cpc	r19, r1
    355a:	09 f4       	brne	.+2      	; 0x355e <EXTI_enu_EXTI_Enable+0x4e>
    355c:	c9 c0       	rjmp	.+402    	; 0x36f0 <EXTI_enu_EXTI_Enable+0x1e0>
    355e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3560:	9b 85       	ldd	r25, Y+11	; 0x0b
    3562:	00 97       	sbiw	r24, 0x00	; 0
    3564:	09 f0       	breq	.+2      	; 0x3568 <EXTI_enu_EXTI_Enable+0x58>
    3566:	ee c0       	rjmp	.+476    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    3568:	ab e5       	ldi	r26, 0x5B	; 91
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	eb e5       	ldi	r30, 0x5B	; 91
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	80 64       	ori	r24, 0x40	; 64
    3574:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	39 87       	std	Y+9, r19	; 0x09
    357e:	28 87       	std	Y+8, r18	; 0x08
    3580:	88 85       	ldd	r24, Y+8	; 0x08
    3582:	99 85       	ldd	r25, Y+9	; 0x09
    3584:	81 30       	cpi	r24, 0x01	; 1
    3586:	91 05       	cpc	r25, r1
    3588:	21 f1       	breq	.+72     	; 0x35d2 <EXTI_enu_EXTI_Enable+0xc2>
    358a:	28 85       	ldd	r18, Y+8	; 0x08
    358c:	39 85       	ldd	r19, Y+9	; 0x09
    358e:	22 30       	cpi	r18, 0x02	; 2
    3590:	31 05       	cpc	r19, r1
    3592:	2c f4       	brge	.+10     	; 0x359e <EXTI_enu_EXTI_Enable+0x8e>
    3594:	88 85       	ldd	r24, Y+8	; 0x08
    3596:	99 85       	ldd	r25, Y+9	; 0x09
    3598:	00 97       	sbiw	r24, 0x00	; 0
    359a:	61 f0       	breq	.+24     	; 0x35b4 <EXTI_enu_EXTI_Enable+0xa4>
    359c:	d3 c0       	rjmp	.+422    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
    359e:	28 85       	ldd	r18, Y+8	; 0x08
    35a0:	39 85       	ldd	r19, Y+9	; 0x09
    35a2:	22 30       	cpi	r18, 0x02	; 2
    35a4:	31 05       	cpc	r19, r1
    35a6:	21 f1       	breq	.+72     	; 0x35f0 <EXTI_enu_EXTI_Enable+0xe0>
    35a8:	88 85       	ldd	r24, Y+8	; 0x08
    35aa:	99 85       	ldd	r25, Y+9	; 0x09
    35ac:	83 30       	cpi	r24, 0x03	; 3
    35ae:	91 05       	cpc	r25, r1
    35b0:	71 f1       	breq	.+92     	; 0x360e <EXTI_enu_EXTI_Enable+0xfe>
    35b2:	c8 c0       	rjmp	.+400    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    35b4:	a5 e5       	ldi	r26, 0x55	; 85
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	e5 e5       	ldi	r30, 0x55	; 85
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	8e 7f       	andi	r24, 0xFE	; 254
    35c0:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    35c2:	a5 e5       	ldi	r26, 0x55	; 85
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e5 e5       	ldi	r30, 0x55	; 85
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	8d 7f       	andi	r24, 0xFD	; 253
    35ce:	8c 93       	st	X, r24
    35d0:	b9 c0       	rjmp	.+370    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    35d2:	a5 e5       	ldi	r26, 0x55	; 85
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e5 e5       	ldi	r30, 0x55	; 85
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	81 60       	ori	r24, 0x01	; 1
    35de:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    35e0:	a5 e5       	ldi	r26, 0x55	; 85
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e5 e5       	ldi	r30, 0x55	; 85
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	8d 7f       	andi	r24, 0xFD	; 253
    35ec:	8c 93       	st	X, r24
    35ee:	aa c0       	rjmp	.+340    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    35f0:	a5 e5       	ldi	r26, 0x55	; 85
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e5 e5       	ldi	r30, 0x55	; 85
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	8e 7f       	andi	r24, 0xFE	; 254
    35fc:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    35fe:	a5 e5       	ldi	r26, 0x55	; 85
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	e5 e5       	ldi	r30, 0x55	; 85
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	82 60       	ori	r24, 0x02	; 2
    360a:	8c 93       	st	X, r24
    360c:	9b c0       	rjmp	.+310    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    360e:	a5 e5       	ldi	r26, 0x55	; 85
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e5 e5       	ldi	r30, 0x55	; 85
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	81 60       	ori	r24, 0x01	; 1
    361a:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    361c:	a5 e5       	ldi	r26, 0x55	; 85
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e5 e5       	ldi	r30, 0x55	; 85
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	82 60       	ori	r24, 0x02	; 2
    3628:	8c 93       	st	X, r24
    362a:	8c c0       	rjmp	.+280    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    362c:	ab e5       	ldi	r26, 0x5B	; 91
    362e:	b0 e0       	ldi	r27, 0x00	; 0
    3630:	eb e5       	ldi	r30, 0x5B	; 91
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	80 68       	ori	r24, 0x80	; 128
    3638:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    363a:	8b 81       	ldd	r24, Y+3	; 0x03
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	3f 83       	std	Y+7, r19	; 0x07
    3642:	2e 83       	std	Y+6, r18	; 0x06
    3644:	8e 81       	ldd	r24, Y+6	; 0x06
    3646:	9f 81       	ldd	r25, Y+7	; 0x07
    3648:	81 30       	cpi	r24, 0x01	; 1
    364a:	91 05       	cpc	r25, r1
    364c:	21 f1       	breq	.+72     	; 0x3696 <EXTI_enu_EXTI_Enable+0x186>
    364e:	2e 81       	ldd	r18, Y+6	; 0x06
    3650:	3f 81       	ldd	r19, Y+7	; 0x07
    3652:	22 30       	cpi	r18, 0x02	; 2
    3654:	31 05       	cpc	r19, r1
    3656:	2c f4       	brge	.+10     	; 0x3662 <EXTI_enu_EXTI_Enable+0x152>
    3658:	8e 81       	ldd	r24, Y+6	; 0x06
    365a:	9f 81       	ldd	r25, Y+7	; 0x07
    365c:	00 97       	sbiw	r24, 0x00	; 0
    365e:	61 f0       	breq	.+24     	; 0x3678 <EXTI_enu_EXTI_Enable+0x168>
    3660:	71 c0       	rjmp	.+226    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
    3662:	2e 81       	ldd	r18, Y+6	; 0x06
    3664:	3f 81       	ldd	r19, Y+7	; 0x07
    3666:	22 30       	cpi	r18, 0x02	; 2
    3668:	31 05       	cpc	r19, r1
    366a:	21 f1       	breq	.+72     	; 0x36b4 <EXTI_enu_EXTI_Enable+0x1a4>
    366c:	8e 81       	ldd	r24, Y+6	; 0x06
    366e:	9f 81       	ldd	r25, Y+7	; 0x07
    3670:	83 30       	cpi	r24, 0x03	; 3
    3672:	91 05       	cpc	r25, r1
    3674:	71 f1       	breq	.+92     	; 0x36d2 <EXTI_enu_EXTI_Enable+0x1c2>
    3676:	66 c0       	rjmp	.+204    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3678:	a5 e5       	ldi	r26, 0x55	; 85
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e5 e5       	ldi	r30, 0x55	; 85
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	8b 7f       	andi	r24, 0xFB	; 251
    3684:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3686:	a5 e5       	ldi	r26, 0x55	; 85
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e5 e5       	ldi	r30, 0x55	; 85
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	87 7f       	andi	r24, 0xF7	; 247
    3692:	8c 93       	st	X, r24
    3694:	57 c0       	rjmp	.+174    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3696:	a5 e5       	ldi	r26, 0x55	; 85
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e5 e5       	ldi	r30, 0x55	; 85
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	84 60       	ori	r24, 0x04	; 4
    36a2:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    36a4:	a5 e5       	ldi	r26, 0x55	; 85
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	e5 e5       	ldi	r30, 0x55	; 85
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	87 7f       	andi	r24, 0xF7	; 247
    36b0:	8c 93       	st	X, r24
    36b2:	48 c0       	rjmp	.+144    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    36b4:	a5 e5       	ldi	r26, 0x55	; 85
    36b6:	b0 e0       	ldi	r27, 0x00	; 0
    36b8:	e5 e5       	ldi	r30, 0x55	; 85
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	80 81       	ld	r24, Z
    36be:	8b 7f       	andi	r24, 0xFB	; 251
    36c0:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    36c2:	a5 e5       	ldi	r26, 0x55	; 85
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	e5 e5       	ldi	r30, 0x55	; 85
    36c8:	f0 e0       	ldi	r31, 0x00	; 0
    36ca:	80 81       	ld	r24, Z
    36cc:	88 60       	ori	r24, 0x08	; 8
    36ce:	8c 93       	st	X, r24
    36d0:	39 c0       	rjmp	.+114    	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    36d2:	a5 e5       	ldi	r26, 0x55	; 85
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e5 e5       	ldi	r30, 0x55	; 85
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	84 60       	ori	r24, 0x04	; 4
    36de:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    36e0:	a5 e5       	ldi	r26, 0x55	; 85
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e5 e5       	ldi	r30, 0x55	; 85
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	88 60       	ori	r24, 0x08	; 8
    36ec:	8c 93       	st	X, r24
    36ee:	2a c0       	rjmp	.+84     	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    36f0:	ab e5       	ldi	r26, 0x5B	; 91
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	eb e5       	ldi	r30, 0x5B	; 91
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	80 62       	ori	r24, 0x20	; 32
    36fc:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	28 2f       	mov	r18, r24
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	3d 83       	std	Y+5, r19	; 0x05
    3706:	2c 83       	std	Y+4, r18	; 0x04
    3708:	8c 81       	ldd	r24, Y+4	; 0x04
    370a:	9d 81       	ldd	r25, Y+5	; 0x05
    370c:	82 30       	cpi	r24, 0x02	; 2
    370e:	91 05       	cpc	r25, r1
    3710:	31 f0       	breq	.+12     	; 0x371e <EXTI_enu_EXTI_Enable+0x20e>
    3712:	2c 81       	ldd	r18, Y+4	; 0x04
    3714:	3d 81       	ldd	r19, Y+5	; 0x05
    3716:	23 30       	cpi	r18, 0x03	; 3
    3718:	31 05       	cpc	r19, r1
    371a:	49 f0       	breq	.+18     	; 0x372e <EXTI_enu_EXTI_Enable+0x21e>
    371c:	10 c0       	rjmp	.+32     	; 0x373e <EXTI_enu_EXTI_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    371e:	a4 e5       	ldi	r26, 0x54	; 84
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e4 e5       	ldi	r30, 0x54	; 84
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	8f 7b       	andi	r24, 0xBF	; 191
    372a:	8c 93       	st	X, r24
    372c:	0b c0       	rjmp	.+22     	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    372e:	a4 e5       	ldi	r26, 0x54	; 84
    3730:	b0 e0       	ldi	r27, 0x00	; 0
    3732:	e4 e5       	ldi	r30, 0x54	; 84
    3734:	f0 e0       	ldi	r31, 0x00	; 0
    3736:	80 81       	ld	r24, Z
    3738:	80 64       	ori	r24, 0x40	; 64
    373a:	8c 93       	st	X, r24
    373c:	03 c0       	rjmp	.+6      	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    373e:	19 82       	std	Y+1, r1	; 0x01
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <EXTI_enu_EXTI_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3742:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3744:	89 81       	ldd	r24, Y+1	; 0x01
}
    3746:	2b 96       	adiw	r28, 0x0b	; 11
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	cf 91       	pop	r28
    3754:	df 91       	pop	r29
    3756:	08 95       	ret

00003758 <EXTI_enu_EXTI_Disable>:

ES_t EXTI_enu_EXTI_Disable(u8 Copy_u8_EXTI_Index)
{
    3758:	df 93       	push	r29
    375a:	cf 93       	push	r28
    375c:	00 d0       	rcall	.+0      	; 0x375e <EXTI_enu_EXTI_Disable+0x6>
    375e:	00 d0       	rcall	.+0      	; 0x3760 <EXTI_enu_EXTI_Disable+0x8>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
    3764:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	83 30       	cpi	r24, 0x03	; 3
    376e:	58 f5       	brcc	.+86     	; 0x37c6 <EXTI_enu_EXTI_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	28 2f       	mov	r18, r24
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	3c 83       	std	Y+4, r19	; 0x04
    3778:	2b 83       	std	Y+3, r18	; 0x03
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	9c 81       	ldd	r25, Y+4	; 0x04
    377e:	81 30       	cpi	r24, 0x01	; 1
    3780:	91 05       	cpc	r25, r1
    3782:	89 f0       	breq	.+34     	; 0x37a6 <EXTI_enu_EXTI_Disable+0x4e>
    3784:	2b 81       	ldd	r18, Y+3	; 0x03
    3786:	3c 81       	ldd	r19, Y+4	; 0x04
    3788:	22 30       	cpi	r18, 0x02	; 2
    378a:	31 05       	cpc	r19, r1
    378c:	a1 f0       	breq	.+40     	; 0x37b6 <EXTI_enu_EXTI_Disable+0x5e>
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	c9 f4       	brne	.+50     	; 0x37c8 <EXTI_enu_EXTI_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    3796:	ab e5       	ldi	r26, 0x5B	; 91
    3798:	b0 e0       	ldi	r27, 0x00	; 0
    379a:	eb e5       	ldi	r30, 0x5B	; 91
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	80 81       	ld	r24, Z
    37a0:	8f 7b       	andi	r24, 0xBF	; 191
    37a2:	8c 93       	st	X, r24
    37a4:	11 c0       	rjmp	.+34     	; 0x37c8 <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    37a6:	ab e5       	ldi	r26, 0x5B	; 91
    37a8:	b0 e0       	ldi	r27, 0x00	; 0
    37aa:	eb e5       	ldi	r30, 0x5B	; 91
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 81       	ld	r24, Z
    37b0:	8f 77       	andi	r24, 0x7F	; 127
    37b2:	8c 93       	st	X, r24
    37b4:	09 c0       	rjmp	.+18     	; 0x37c8 <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    37b6:	ab e5       	ldi	r26, 0x5B	; 91
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	eb e5       	ldi	r30, 0x5B	; 91
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	8f 7d       	andi	r24, 0xDF	; 223
    37c2:	8c 93       	st	X, r24
    37c4:	01 c0       	rjmp	.+2      	; 0x37c8 <EXTI_enu_EXTI_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    37c6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <EXTI_enu_setCallBack>:

ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	00 d0       	rcall	.+0      	; 0x37de <EXTI_enu_setCallBack+0x6>
    37de:	00 d0       	rcall	.+0      	; 0x37e0 <EXTI_enu_setCallBack+0x8>
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	9b 83       	std	Y+3, r25	; 0x03
    37e6:	8a 83       	std	Y+2, r24	; 0x02
    37e8:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	9b 81       	ldd	r25, Y+3	; 0x03
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	81 f0       	breq	.+32     	; 0x3816 <EXTI_enu_setCallBack+0x3e>
    37f6:	8c 81       	ldd	r24, Y+4	; 0x04
    37f8:	83 30       	cpi	r24, 0x03	; 3
    37fa:	68 f4       	brcc	.+26     	; 0x3816 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    37fc:	8c 81       	ldd	r24, Y+4	; 0x04
    37fe:	88 2f       	mov	r24, r24
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	88 0f       	add	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	fc 01       	movw	r30, r24
    3808:	e0 5b       	subi	r30, 0xB0	; 176
    380a:	fe 4f       	sbci	r31, 0xFE	; 254
    380c:	8a 81       	ldd	r24, Y+2	; 0x02
    380e:	9b 81       	ldd	r25, Y+3	; 0x03
    3810:	91 83       	std	Z+1, r25	; 0x01
    3812:	80 83       	st	Z, r24
    3814:	01 c0       	rjmp	.+2      	; 0x3818 <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3816:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3818:	89 81       	ldd	r24, Y+1	; 0x01
}
    381a:	0f 90       	pop	r0
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    3828:	1f 92       	push	r1
    382a:	0f 92       	push	r0
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	0f 92       	push	r0
    3830:	11 24       	eor	r1, r1
    3832:	2f 93       	push	r18
    3834:	3f 93       	push	r19
    3836:	4f 93       	push	r20
    3838:	5f 93       	push	r21
    383a:	6f 93       	push	r22
    383c:	7f 93       	push	r23
    383e:	8f 93       	push	r24
    3840:	9f 93       	push	r25
    3842:	af 93       	push	r26
    3844:	bf 93       	push	r27
    3846:	ef 93       	push	r30
    3848:	ff 93       	push	r31
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    3852:	80 91 50 01 	lds	r24, 0x0150
    3856:	90 91 51 01 	lds	r25, 0x0151
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	29 f0       	breq	.+10     	; 0x3868 <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    385e:	e0 91 50 01 	lds	r30, 0x0150
    3862:	f0 91 51 01 	lds	r31, 0x0151
    3866:	09 95       	icall
}
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	ff 91       	pop	r31
    386e:	ef 91       	pop	r30
    3870:	bf 91       	pop	r27
    3872:	af 91       	pop	r26
    3874:	9f 91       	pop	r25
    3876:	8f 91       	pop	r24
    3878:	7f 91       	pop	r23
    387a:	6f 91       	pop	r22
    387c:	5f 91       	pop	r21
    387e:	4f 91       	pop	r20
    3880:	3f 91       	pop	r19
    3882:	2f 91       	pop	r18
    3884:	0f 90       	pop	r0
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	0f 90       	pop	r0
    388a:	1f 90       	pop	r1
    388c:	18 95       	reti

0000388e <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    388e:	1f 92       	push	r1
    3890:	0f 92       	push	r0
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	0f 92       	push	r0
    3896:	11 24       	eor	r1, r1
    3898:	2f 93       	push	r18
    389a:	3f 93       	push	r19
    389c:	4f 93       	push	r20
    389e:	5f 93       	push	r21
    38a0:	6f 93       	push	r22
    38a2:	7f 93       	push	r23
    38a4:	8f 93       	push	r24
    38a6:	9f 93       	push	r25
    38a8:	af 93       	push	r26
    38aa:	bf 93       	push	r27
    38ac:	ef 93       	push	r30
    38ae:	ff 93       	push	r31
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	cd b7       	in	r28, 0x3d	; 61
    38b6:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    38b8:	80 91 52 01 	lds	r24, 0x0152
    38bc:	90 91 53 01 	lds	r25, 0x0153
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	29 f0       	breq	.+10     	; 0x38ce <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    38c4:	e0 91 52 01 	lds	r30, 0x0152
    38c8:	f0 91 53 01 	lds	r31, 0x0153
    38cc:	09 95       	icall
}
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	ff 91       	pop	r31
    38d4:	ef 91       	pop	r30
    38d6:	bf 91       	pop	r27
    38d8:	af 91       	pop	r26
    38da:	9f 91       	pop	r25
    38dc:	8f 91       	pop	r24
    38de:	7f 91       	pop	r23
    38e0:	6f 91       	pop	r22
    38e2:	5f 91       	pop	r21
    38e4:	4f 91       	pop	r20
    38e6:	3f 91       	pop	r19
    38e8:	2f 91       	pop	r18
    38ea:	0f 90       	pop	r0
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	0f 90       	pop	r0
    38f0:	1f 90       	pop	r1
    38f2:	18 95       	reti

000038f4 <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    38f4:	1f 92       	push	r1
    38f6:	0f 92       	push	r0
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	0f 92       	push	r0
    38fc:	11 24       	eor	r1, r1
    38fe:	2f 93       	push	r18
    3900:	3f 93       	push	r19
    3902:	4f 93       	push	r20
    3904:	5f 93       	push	r21
    3906:	6f 93       	push	r22
    3908:	7f 93       	push	r23
    390a:	8f 93       	push	r24
    390c:	9f 93       	push	r25
    390e:	af 93       	push	r26
    3910:	bf 93       	push	r27
    3912:	ef 93       	push	r30
    3914:	ff 93       	push	r31
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    391e:	80 91 54 01 	lds	r24, 0x0154
    3922:	90 91 55 01 	lds	r25, 0x0155
    3926:	00 97       	sbiw	r24, 0x00	; 0
    3928:	29 f0       	breq	.+10     	; 0x3934 <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    392a:	e0 91 54 01 	lds	r30, 0x0154
    392e:	f0 91 55 01 	lds	r31, 0x0155
    3932:	09 95       	icall
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	ff 91       	pop	r31
    393a:	ef 91       	pop	r30
    393c:	bf 91       	pop	r27
    393e:	af 91       	pop	r26
    3940:	9f 91       	pop	r25
    3942:	8f 91       	pop	r24
    3944:	7f 91       	pop	r23
    3946:	6f 91       	pop	r22
    3948:	5f 91       	pop	r21
    394a:	4f 91       	pop	r20
    394c:	3f 91       	pop	r19
    394e:	2f 91       	pop	r18
    3950:	0f 90       	pop	r0
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	0f 90       	pop	r0
    3956:	1f 90       	pop	r1
    3958:	18 95       	reti

0000395a <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    3962:	ea e3       	ldi	r30, 0x3A	; 58
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	8f e7       	ldi	r24, 0x7F	; 127
    3968:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    396a:	e7 e3       	ldi	r30, 0x37	; 55
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	8d ef       	ldi	r24, 0xFD	; 253
    3970:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    3972:	e4 e3       	ldi	r30, 0x34	; 52
    3974:	f0 e0       	ldi	r31, 0x00	; 0
    3976:	83 e1       	ldi	r24, 0x13	; 19
    3978:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    397a:	e1 e3       	ldi	r30, 0x31	; 49
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    3980:	eb e3       	ldi	r30, 0x3B	; 59
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    3986:	e8 e3       	ldi	r30, 0x38	; 56
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	84 ef       	ldi	r24, 0xF4	; 244
    398c:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    398e:	e5 e3       	ldi	r30, 0x35	; 53
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    3994:	e2 e3       	ldi	r30, 0x32	; 50
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	8c e3       	ldi	r24, 0x3C	; 60
    399a:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    399c:	81 e0       	ldi	r24, 0x01	; 1
}
    399e:	cf 91       	pop	r28
    39a0:	df 91       	pop	r29
    39a2:	08 95       	ret

000039a4 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    39a4:	df 93       	push	r29
    39a6:	cf 93       	push	r28
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
    39ac:	2e 97       	sbiw	r28, 0x0e	; 14
    39ae:	0f b6       	in	r0, 0x3f	; 63
    39b0:	f8 94       	cli
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	0f be       	out	0x3f, r0	; 63
    39b6:	cd bf       	out	0x3d, r28	; 61
    39b8:	8a 83       	std	Y+2, r24	; 0x02
    39ba:	6b 83       	std	Y+3, r22	; 0x03
    39bc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	84 30       	cpi	r24, 0x04	; 4
    39c6:	08 f0       	brcs	.+2      	; 0x39ca <DIO_enu_SetPinDirection+0x26>
    39c8:	0c c1       	rjmp	.+536    	; 0x3be2 <DIO_enu_SetPinDirection+0x23e>
    39ca:	8b 81       	ldd	r24, Y+3	; 0x03
    39cc:	88 30       	cpi	r24, 0x08	; 8
    39ce:	08 f0       	brcs	.+2      	; 0x39d2 <DIO_enu_SetPinDirection+0x2e>
    39d0:	08 c1       	rjmp	.+528    	; 0x3be2 <DIO_enu_SetPinDirection+0x23e>
    39d2:	8c 81       	ldd	r24, Y+4	; 0x04
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	21 f0       	breq	.+8      	; 0x39e0 <DIO_enu_SetPinDirection+0x3c>
    39d8:	8c 81       	ldd	r24, Y+4	; 0x04
    39da:	88 23       	and	r24, r24
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <DIO_enu_SetPinDirection+0x3c>
    39de:	01 c1       	rjmp	.+514    	; 0x3be2 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	28 2f       	mov	r18, r24
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	3e 87       	std	Y+14, r19	; 0x0e
    39e8:	2d 87       	std	Y+13, r18	; 0x0d
    39ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ee:	81 30       	cpi	r24, 0x01	; 1
    39f0:	91 05       	cpc	r25, r1
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <DIO_enu_SetPinDirection+0x52>
    39f4:	4f c0       	rjmp	.+158    	; 0x3a94 <DIO_enu_SetPinDirection+0xf0>
    39f6:	2d 85       	ldd	r18, Y+13	; 0x0d
    39f8:	3e 85       	ldd	r19, Y+14	; 0x0e
    39fa:	22 30       	cpi	r18, 0x02	; 2
    39fc:	31 05       	cpc	r19, r1
    39fe:	2c f4       	brge	.+10     	; 0x3a0a <DIO_enu_SetPinDirection+0x66>
    3a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a04:	00 97       	sbiw	r24, 0x00	; 0
    3a06:	71 f0       	breq	.+28     	; 0x3a24 <DIO_enu_SetPinDirection+0x80>
    3a08:	ed c0       	rjmp	.+474    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
    3a0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a0e:	22 30       	cpi	r18, 0x02	; 2
    3a10:	31 05       	cpc	r19, r1
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <DIO_enu_SetPinDirection+0x72>
    3a14:	77 c0       	rjmp	.+238    	; 0x3b04 <DIO_enu_SetPinDirection+0x160>
    3a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a1a:	83 30       	cpi	r24, 0x03	; 3
    3a1c:	91 05       	cpc	r25, r1
    3a1e:	09 f4       	brne	.+2      	; 0x3a22 <DIO_enu_SetPinDirection+0x7e>
    3a20:	a9 c0       	rjmp	.+338    	; 0x3b74 <DIO_enu_SetPinDirection+0x1d0>
    3a22:	e0 c0       	rjmp	.+448    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    3a24:	8c 81       	ldd	r24, Y+4	; 0x04
    3a26:	28 2f       	mov	r18, r24
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	3c 87       	std	Y+12, r19	; 0x0c
    3a2c:	2b 87       	std	Y+11, r18	; 0x0b
    3a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a30:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	d1 f0       	breq	.+52     	; 0x3a6a <DIO_enu_SetPinDirection+0xc6>
    3a36:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a38:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a3a:	21 30       	cpi	r18, 0x01	; 1
    3a3c:	31 05       	cpc	r19, r1
    3a3e:	09 f0       	breq	.+2      	; 0x3a42 <DIO_enu_SetPinDirection+0x9e>
    3a40:	d1 c0       	rjmp	.+418    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    3a42:	aa e3       	ldi	r26, 0x3A	; 58
    3a44:	b0 e0       	ldi	r27, 0x00	; 0
    3a46:	ea e3       	ldi	r30, 0x3A	; 58
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	80 81       	ld	r24, Z
    3a4c:	48 2f       	mov	r20, r24
    3a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a50:	28 2f       	mov	r18, r24
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	02 2e       	mov	r0, r18
    3a5a:	02 c0       	rjmp	.+4      	; 0x3a60 <DIO_enu_SetPinDirection+0xbc>
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	0a 94       	dec	r0
    3a62:	e2 f7       	brpl	.-8      	; 0x3a5c <DIO_enu_SetPinDirection+0xb8>
    3a64:	84 2b       	or	r24, r20
    3a66:	8c 93       	st	X, r24
    3a68:	bd c0       	rjmp	.+378    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    3a6a:	aa e3       	ldi	r26, 0x3A	; 58
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	ea e3       	ldi	r30, 0x3A	; 58
    3a70:	f0 e0       	ldi	r31, 0x00	; 0
    3a72:	80 81       	ld	r24, Z
    3a74:	48 2f       	mov	r20, r24
    3a76:	8b 81       	ldd	r24, Y+3	; 0x03
    3a78:	28 2f       	mov	r18, r24
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	02 2e       	mov	r0, r18
    3a82:	02 c0       	rjmp	.+4      	; 0x3a88 <DIO_enu_SetPinDirection+0xe4>
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	0a 94       	dec	r0
    3a8a:	e2 f7       	brpl	.-8      	; 0x3a84 <DIO_enu_SetPinDirection+0xe0>
    3a8c:	80 95       	com	r24
    3a8e:	84 23       	and	r24, r20
    3a90:	8c 93       	st	X, r24
    3a92:	a8 c0       	rjmp	.+336    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    3a94:	8c 81       	ldd	r24, Y+4	; 0x04
    3a96:	28 2f       	mov	r18, r24
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	3a 87       	std	Y+10, r19	; 0x0a
    3a9c:	29 87       	std	Y+9, r18	; 0x09
    3a9e:	89 85       	ldd	r24, Y+9	; 0x09
    3aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa2:	00 97       	sbiw	r24, 0x00	; 0
    3aa4:	d1 f0       	breq	.+52     	; 0x3ada <DIO_enu_SetPinDirection+0x136>
    3aa6:	29 85       	ldd	r18, Y+9	; 0x09
    3aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
    3aaa:	21 30       	cpi	r18, 0x01	; 1
    3aac:	31 05       	cpc	r19, r1
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <DIO_enu_SetPinDirection+0x10e>
    3ab0:	99 c0       	rjmp	.+306    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    3ab2:	a7 e3       	ldi	r26, 0x37	; 55
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	e7 e3       	ldi	r30, 0x37	; 55
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
    3abc:	48 2f       	mov	r20, r24
    3abe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac0:	28 2f       	mov	r18, r24
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	02 2e       	mov	r0, r18
    3aca:	02 c0       	rjmp	.+4      	; 0x3ad0 <DIO_enu_SetPinDirection+0x12c>
    3acc:	88 0f       	add	r24, r24
    3ace:	99 1f       	adc	r25, r25
    3ad0:	0a 94       	dec	r0
    3ad2:	e2 f7       	brpl	.-8      	; 0x3acc <DIO_enu_SetPinDirection+0x128>
    3ad4:	84 2b       	or	r24, r20
    3ad6:	8c 93       	st	X, r24
    3ad8:	85 c0       	rjmp	.+266    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    3ada:	a7 e3       	ldi	r26, 0x37	; 55
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	e7 e3       	ldi	r30, 0x37	; 55
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 81       	ld	r24, Z
    3ae4:	48 2f       	mov	r20, r24
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	28 2f       	mov	r18, r24
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	02 2e       	mov	r0, r18
    3af2:	02 c0       	rjmp	.+4      	; 0x3af8 <DIO_enu_SetPinDirection+0x154>
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	0a 94       	dec	r0
    3afa:	e2 f7       	brpl	.-8      	; 0x3af4 <DIO_enu_SetPinDirection+0x150>
    3afc:	80 95       	com	r24
    3afe:	84 23       	and	r24, r20
    3b00:	8c 93       	st	X, r24
    3b02:	70 c0       	rjmp	.+224    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    3b04:	8c 81       	ldd	r24, Y+4	; 0x04
    3b06:	28 2f       	mov	r18, r24
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	38 87       	std	Y+8, r19	; 0x08
    3b0c:	2f 83       	std	Y+7, r18	; 0x07
    3b0e:	8f 81       	ldd	r24, Y+7	; 0x07
    3b10:	98 85       	ldd	r25, Y+8	; 0x08
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	d1 f0       	breq	.+52     	; 0x3b4a <DIO_enu_SetPinDirection+0x1a6>
    3b16:	2f 81       	ldd	r18, Y+7	; 0x07
    3b18:	38 85       	ldd	r19, Y+8	; 0x08
    3b1a:	21 30       	cpi	r18, 0x01	; 1
    3b1c:	31 05       	cpc	r19, r1
    3b1e:	09 f0       	breq	.+2      	; 0x3b22 <DIO_enu_SetPinDirection+0x17e>
    3b20:	61 c0       	rjmp	.+194    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    3b22:	a4 e3       	ldi	r26, 0x34	; 52
    3b24:	b0 e0       	ldi	r27, 0x00	; 0
    3b26:	e4 e3       	ldi	r30, 0x34	; 52
    3b28:	f0 e0       	ldi	r31, 0x00	; 0
    3b2a:	80 81       	ld	r24, Z
    3b2c:	48 2f       	mov	r20, r24
    3b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b30:	28 2f       	mov	r18, r24
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	02 2e       	mov	r0, r18
    3b3a:	02 c0       	rjmp	.+4      	; 0x3b40 <DIO_enu_SetPinDirection+0x19c>
    3b3c:	88 0f       	add	r24, r24
    3b3e:	99 1f       	adc	r25, r25
    3b40:	0a 94       	dec	r0
    3b42:	e2 f7       	brpl	.-8      	; 0x3b3c <DIO_enu_SetPinDirection+0x198>
    3b44:	84 2b       	or	r24, r20
    3b46:	8c 93       	st	X, r24
    3b48:	4d c0       	rjmp	.+154    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    3b4a:	a4 e3       	ldi	r26, 0x34	; 52
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	e4 e3       	ldi	r30, 0x34	; 52
    3b50:	f0 e0       	ldi	r31, 0x00	; 0
    3b52:	80 81       	ld	r24, Z
    3b54:	48 2f       	mov	r20, r24
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	28 2f       	mov	r18, r24
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	02 2e       	mov	r0, r18
    3b62:	02 c0       	rjmp	.+4      	; 0x3b68 <DIO_enu_SetPinDirection+0x1c4>
    3b64:	88 0f       	add	r24, r24
    3b66:	99 1f       	adc	r25, r25
    3b68:	0a 94       	dec	r0
    3b6a:	e2 f7       	brpl	.-8      	; 0x3b64 <DIO_enu_SetPinDirection+0x1c0>
    3b6c:	80 95       	com	r24
    3b6e:	84 23       	and	r24, r20
    3b70:	8c 93       	st	X, r24
    3b72:	38 c0       	rjmp	.+112    	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    3b74:	8c 81       	ldd	r24, Y+4	; 0x04
    3b76:	28 2f       	mov	r18, r24
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	3e 83       	std	Y+6, r19	; 0x06
    3b7c:	2d 83       	std	Y+5, r18	; 0x05
    3b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b80:	9e 81       	ldd	r25, Y+6	; 0x06
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	c9 f0       	breq	.+50     	; 0x3bb8 <DIO_enu_SetPinDirection+0x214>
    3b86:	2d 81       	ldd	r18, Y+5	; 0x05
    3b88:	3e 81       	ldd	r19, Y+6	; 0x06
    3b8a:	21 30       	cpi	r18, 0x01	; 1
    3b8c:	31 05       	cpc	r19, r1
    3b8e:	51 f5       	brne	.+84     	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    3b90:	a1 e3       	ldi	r26, 0x31	; 49
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	e1 e3       	ldi	r30, 0x31	; 49
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	48 2f       	mov	r20, r24
    3b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b9e:	28 2f       	mov	r18, r24
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	02 2e       	mov	r0, r18
    3ba8:	02 c0       	rjmp	.+4      	; 0x3bae <DIO_enu_SetPinDirection+0x20a>
    3baa:	88 0f       	add	r24, r24
    3bac:	99 1f       	adc	r25, r25
    3bae:	0a 94       	dec	r0
    3bb0:	e2 f7       	brpl	.-8      	; 0x3baa <DIO_enu_SetPinDirection+0x206>
    3bb2:	84 2b       	or	r24, r20
    3bb4:	8c 93       	st	X, r24
    3bb6:	16 c0       	rjmp	.+44     	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    3bb8:	a1 e3       	ldi	r26, 0x31	; 49
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	e1 e3       	ldi	r30, 0x31	; 49
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	48 2f       	mov	r20, r24
    3bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc6:	28 2f       	mov	r18, r24
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	02 2e       	mov	r0, r18
    3bd0:	02 c0       	rjmp	.+4      	; 0x3bd6 <DIO_enu_SetPinDirection+0x232>
    3bd2:	88 0f       	add	r24, r24
    3bd4:	99 1f       	adc	r25, r25
    3bd6:	0a 94       	dec	r0
    3bd8:	e2 f7       	brpl	.-8      	; 0x3bd2 <DIO_enu_SetPinDirection+0x22e>
    3bda:	80 95       	com	r24
    3bdc:	84 23       	and	r24, r20
    3bde:	8c 93       	st	X, r24
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3be2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3be4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3be6:	2e 96       	adiw	r28, 0x0e	; 14
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	2e 97       	sbiw	r28, 0x0e	; 14
    3c02:	0f b6       	in	r0, 0x3f	; 63
    3c04:	f8 94       	cli
    3c06:	de bf       	out	0x3e, r29	; 62
    3c08:	0f be       	out	0x3f, r0	; 63
    3c0a:	cd bf       	out	0x3d, r28	; 61
    3c0c:	8a 83       	std	Y+2, r24	; 0x02
    3c0e:	6b 83       	std	Y+3, r22	; 0x03
    3c10:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    3c16:	8a 81       	ldd	r24, Y+2	; 0x02
    3c18:	84 30       	cpi	r24, 0x04	; 4
    3c1a:	08 f0       	brcs	.+2      	; 0x3c1e <DIO_enu_SetPinValue+0x26>
    3c1c:	0c c1       	rjmp	.+536    	; 0x3e36 <DIO_enu_SetPinValue+0x23e>
    3c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c20:	88 30       	cpi	r24, 0x08	; 8
    3c22:	08 f0       	brcs	.+2      	; 0x3c26 <DIO_enu_SetPinValue+0x2e>
    3c24:	08 c1       	rjmp	.+528    	; 0x3e36 <DIO_enu_SetPinValue+0x23e>
    3c26:	8c 81       	ldd	r24, Y+4	; 0x04
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	21 f0       	breq	.+8      	; 0x3c34 <DIO_enu_SetPinValue+0x3c>
    3c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c2e:	88 23       	and	r24, r24
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <DIO_enu_SetPinValue+0x3c>
    3c32:	01 c1       	rjmp	.+514    	; 0x3e36 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	28 2f       	mov	r18, r24
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	3e 87       	std	Y+14, r19	; 0x0e
    3c3c:	2d 87       	std	Y+13, r18	; 0x0d
    3c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	91 05       	cpc	r25, r1
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <DIO_enu_SetPinValue+0x52>
    3c48:	4f c0       	rjmp	.+158    	; 0x3ce8 <DIO_enu_SetPinValue+0xf0>
    3c4a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c4c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c4e:	22 30       	cpi	r18, 0x02	; 2
    3c50:	31 05       	cpc	r19, r1
    3c52:	2c f4       	brge	.+10     	; 0x3c5e <DIO_enu_SetPinValue+0x66>
    3c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	71 f0       	breq	.+28     	; 0x3c78 <DIO_enu_SetPinValue+0x80>
    3c5c:	ed c0       	rjmp	.+474    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
    3c5e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c60:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c62:	22 30       	cpi	r18, 0x02	; 2
    3c64:	31 05       	cpc	r19, r1
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <DIO_enu_SetPinValue+0x72>
    3c68:	77 c0       	rjmp	.+238    	; 0x3d58 <DIO_enu_SetPinValue+0x160>
    3c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6e:	83 30       	cpi	r24, 0x03	; 3
    3c70:	91 05       	cpc	r25, r1
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <DIO_enu_SetPinValue+0x7e>
    3c74:	a9 c0       	rjmp	.+338    	; 0x3dc8 <DIO_enu_SetPinValue+0x1d0>
    3c76:	e0 c0       	rjmp	.+448    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    3c78:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7a:	28 2f       	mov	r18, r24
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	3c 87       	std	Y+12, r19	; 0x0c
    3c80:	2b 87       	std	Y+11, r18	; 0x0b
    3c82:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c84:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c86:	00 97       	sbiw	r24, 0x00	; 0
    3c88:	d1 f0       	breq	.+52     	; 0x3cbe <DIO_enu_SetPinValue+0xc6>
    3c8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    3c8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    3c8e:	21 30       	cpi	r18, 0x01	; 1
    3c90:	31 05       	cpc	r19, r1
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <DIO_enu_SetPinValue+0x9e>
    3c94:	d1 c0       	rjmp	.+418    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    3c96:	ab e3       	ldi	r26, 0x3B	; 59
    3c98:	b0 e0       	ldi	r27, 0x00	; 0
    3c9a:	eb e3       	ldi	r30, 0x3B	; 59
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	80 81       	ld	r24, Z
    3ca0:	48 2f       	mov	r20, r24
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	28 2f       	mov	r18, r24
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	02 2e       	mov	r0, r18
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <DIO_enu_SetPinValue+0xbc>
    3cb0:	88 0f       	add	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	0a 94       	dec	r0
    3cb6:	e2 f7       	brpl	.-8      	; 0x3cb0 <DIO_enu_SetPinValue+0xb8>
    3cb8:	84 2b       	or	r24, r20
    3cba:	8c 93       	st	X, r24
    3cbc:	bd c0       	rjmp	.+378    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    3cbe:	ab e3       	ldi	r26, 0x3B	; 59
    3cc0:	b0 e0       	ldi	r27, 0x00	; 0
    3cc2:	eb e3       	ldi	r30, 0x3B	; 59
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	48 2f       	mov	r20, r24
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	28 2f       	mov	r18, r24
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	02 2e       	mov	r0, r18
    3cd6:	02 c0       	rjmp	.+4      	; 0x3cdc <DIO_enu_SetPinValue+0xe4>
    3cd8:	88 0f       	add	r24, r24
    3cda:	99 1f       	adc	r25, r25
    3cdc:	0a 94       	dec	r0
    3cde:	e2 f7       	brpl	.-8      	; 0x3cd8 <DIO_enu_SetPinValue+0xe0>
    3ce0:	80 95       	com	r24
    3ce2:	84 23       	and	r24, r20
    3ce4:	8c 93       	st	X, r24
    3ce6:	a8 c0       	rjmp	.+336    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    3ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cea:	28 2f       	mov	r18, r24
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	3a 87       	std	Y+10, r19	; 0x0a
    3cf0:	29 87       	std	Y+9, r18	; 0x09
    3cf2:	89 85       	ldd	r24, Y+9	; 0x09
    3cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf6:	00 97       	sbiw	r24, 0x00	; 0
    3cf8:	d1 f0       	breq	.+52     	; 0x3d2e <DIO_enu_SetPinValue+0x136>
    3cfa:	29 85       	ldd	r18, Y+9	; 0x09
    3cfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    3cfe:	21 30       	cpi	r18, 0x01	; 1
    3d00:	31 05       	cpc	r19, r1
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <DIO_enu_SetPinValue+0x10e>
    3d04:	99 c0       	rjmp	.+306    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    3d06:	a8 e3       	ldi	r26, 0x38	; 56
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	e8 e3       	ldi	r30, 0x38	; 56
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	48 2f       	mov	r20, r24
    3d12:	8b 81       	ldd	r24, Y+3	; 0x03
    3d14:	28 2f       	mov	r18, r24
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	81 e0       	ldi	r24, 0x01	; 1
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	02 2e       	mov	r0, r18
    3d1e:	02 c0       	rjmp	.+4      	; 0x3d24 <DIO_enu_SetPinValue+0x12c>
    3d20:	88 0f       	add	r24, r24
    3d22:	99 1f       	adc	r25, r25
    3d24:	0a 94       	dec	r0
    3d26:	e2 f7       	brpl	.-8      	; 0x3d20 <DIO_enu_SetPinValue+0x128>
    3d28:	84 2b       	or	r24, r20
    3d2a:	8c 93       	st	X, r24
    3d2c:	85 c0       	rjmp	.+266    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    3d2e:	a8 e3       	ldi	r26, 0x38	; 56
    3d30:	b0 e0       	ldi	r27, 0x00	; 0
    3d32:	e8 e3       	ldi	r30, 0x38	; 56
    3d34:	f0 e0       	ldi	r31, 0x00	; 0
    3d36:	80 81       	ld	r24, Z
    3d38:	48 2f       	mov	r20, r24
    3d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	02 2e       	mov	r0, r18
    3d46:	02 c0       	rjmp	.+4      	; 0x3d4c <DIO_enu_SetPinValue+0x154>
    3d48:	88 0f       	add	r24, r24
    3d4a:	99 1f       	adc	r25, r25
    3d4c:	0a 94       	dec	r0
    3d4e:	e2 f7       	brpl	.-8      	; 0x3d48 <DIO_enu_SetPinValue+0x150>
    3d50:	80 95       	com	r24
    3d52:	84 23       	and	r24, r20
    3d54:	8c 93       	st	X, r24
    3d56:	70 c0       	rjmp	.+224    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    3d58:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5a:	28 2f       	mov	r18, r24
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	38 87       	std	Y+8, r19	; 0x08
    3d60:	2f 83       	std	Y+7, r18	; 0x07
    3d62:	8f 81       	ldd	r24, Y+7	; 0x07
    3d64:	98 85       	ldd	r25, Y+8	; 0x08
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	d1 f0       	breq	.+52     	; 0x3d9e <DIO_enu_SetPinValue+0x1a6>
    3d6a:	2f 81       	ldd	r18, Y+7	; 0x07
    3d6c:	38 85       	ldd	r19, Y+8	; 0x08
    3d6e:	21 30       	cpi	r18, 0x01	; 1
    3d70:	31 05       	cpc	r19, r1
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <DIO_enu_SetPinValue+0x17e>
    3d74:	61 c0       	rjmp	.+194    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    3d76:	a5 e3       	ldi	r26, 0x35	; 53
    3d78:	b0 e0       	ldi	r27, 0x00	; 0
    3d7a:	e5 e3       	ldi	r30, 0x35	; 53
    3d7c:	f0 e0       	ldi	r31, 0x00	; 0
    3d7e:	80 81       	ld	r24, Z
    3d80:	48 2f       	mov	r20, r24
    3d82:	8b 81       	ldd	r24, Y+3	; 0x03
    3d84:	28 2f       	mov	r18, r24
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	02 2e       	mov	r0, r18
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <DIO_enu_SetPinValue+0x19c>
    3d90:	88 0f       	add	r24, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	0a 94       	dec	r0
    3d96:	e2 f7       	brpl	.-8      	; 0x3d90 <DIO_enu_SetPinValue+0x198>
    3d98:	84 2b       	or	r24, r20
    3d9a:	8c 93       	st	X, r24
    3d9c:	4d c0       	rjmp	.+154    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    3d9e:	a5 e3       	ldi	r26, 0x35	; 53
    3da0:	b0 e0       	ldi	r27, 0x00	; 0
    3da2:	e5 e3       	ldi	r30, 0x35	; 53
    3da4:	f0 e0       	ldi	r31, 0x00	; 0
    3da6:	80 81       	ld	r24, Z
    3da8:	48 2f       	mov	r20, r24
    3daa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	02 2e       	mov	r0, r18
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <DIO_enu_SetPinValue+0x1c4>
    3db8:	88 0f       	add	r24, r24
    3dba:	99 1f       	adc	r25, r25
    3dbc:	0a 94       	dec	r0
    3dbe:	e2 f7       	brpl	.-8      	; 0x3db8 <DIO_enu_SetPinValue+0x1c0>
    3dc0:	80 95       	com	r24
    3dc2:	84 23       	and	r24, r20
    3dc4:	8c 93       	st	X, r24
    3dc6:	38 c0       	rjmp	.+112    	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    3dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dca:	28 2f       	mov	r18, r24
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	3e 83       	std	Y+6, r19	; 0x06
    3dd0:	2d 83       	std	Y+5, r18	; 0x05
    3dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    3dd6:	00 97       	sbiw	r24, 0x00	; 0
    3dd8:	c9 f0       	breq	.+50     	; 0x3e0c <DIO_enu_SetPinValue+0x214>
    3dda:	2d 81       	ldd	r18, Y+5	; 0x05
    3ddc:	3e 81       	ldd	r19, Y+6	; 0x06
    3dde:	21 30       	cpi	r18, 0x01	; 1
    3de0:	31 05       	cpc	r19, r1
    3de2:	51 f5       	brne	.+84     	; 0x3e38 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    3de4:	a2 e3       	ldi	r26, 0x32	; 50
    3de6:	b0 e0       	ldi	r27, 0x00	; 0
    3de8:	e2 e3       	ldi	r30, 0x32	; 50
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	80 81       	ld	r24, Z
    3dee:	48 2f       	mov	r20, r24
    3df0:	8b 81       	ldd	r24, Y+3	; 0x03
    3df2:	28 2f       	mov	r18, r24
    3df4:	30 e0       	ldi	r19, 0x00	; 0
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	02 2e       	mov	r0, r18
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <DIO_enu_SetPinValue+0x20a>
    3dfe:	88 0f       	add	r24, r24
    3e00:	99 1f       	adc	r25, r25
    3e02:	0a 94       	dec	r0
    3e04:	e2 f7       	brpl	.-8      	; 0x3dfe <DIO_enu_SetPinValue+0x206>
    3e06:	84 2b       	or	r24, r20
    3e08:	8c 93       	st	X, r24
    3e0a:	16 c0       	rjmp	.+44     	; 0x3e38 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    3e0c:	a2 e3       	ldi	r26, 0x32	; 50
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	e2 e3       	ldi	r30, 0x32	; 50
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	80 81       	ld	r24, Z
    3e16:	48 2f       	mov	r20, r24
    3e18:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1a:	28 2f       	mov	r18, r24
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	90 e0       	ldi	r25, 0x00	; 0
    3e22:	02 2e       	mov	r0, r18
    3e24:	02 c0       	rjmp	.+4      	; 0x3e2a <DIO_enu_SetPinValue+0x232>
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	0a 94       	dec	r0
    3e2c:	e2 f7       	brpl	.-8      	; 0x3e26 <DIO_enu_SetPinValue+0x22e>
    3e2e:	80 95       	com	r24
    3e30:	84 23       	and	r24, r20
    3e32:	8c 93       	st	X, r24
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3e36:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3e38:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e3a:	2e 96       	adiw	r28, 0x0e	; 14
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	de bf       	out	0x3e, r29	; 62
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	08 95       	ret

00003e4c <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	cd b7       	in	r28, 0x3d	; 61
    3e52:	de b7       	in	r29, 0x3e	; 62
    3e54:	28 97       	sbiw	r28, 0x08	; 8
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	f8 94       	cli
    3e5a:	de bf       	out	0x3e, r29	; 62
    3e5c:	0f be       	out	0x3f, r0	; 63
    3e5e:	cd bf       	out	0x3d, r28	; 61
    3e60:	8b 83       	std	Y+3, r24	; 0x03
    3e62:	6c 83       	std	Y+4, r22	; 0x04
    3e64:	5e 83       	std	Y+6, r21	; 0x06
    3e66:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorState = STATE_OK;
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_PinValue ;
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	84 30       	cpi	r24, 0x04	; 4
    3e70:	08 f0       	brcs	.+2      	; 0x3e74 <DIO_enu_GetPinValue+0x28>
    3e72:	9f c0       	rjmp	.+318    	; 0x3fb2 <DIO_enu_GetPinValue+0x166>
    3e74:	8c 81       	ldd	r24, Y+4	; 0x04
    3e76:	88 30       	cpi	r24, 0x08	; 8
    3e78:	08 f0       	brcs	.+2      	; 0x3e7c <DIO_enu_GetPinValue+0x30>
    3e7a:	9b c0       	rjmp	.+310    	; 0x3fb2 <DIO_enu_GetPinValue+0x166>
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	09 f4       	brne	.+2      	; 0x3e86 <DIO_enu_GetPinValue+0x3a>
    3e84:	96 c0       	rjmp	.+300    	; 0x3fb2 <DIO_enu_GetPinValue+0x166>
    {
        switch (Copy_u8_PortId)
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	38 87       	std	Y+8, r19	; 0x08
    3e8e:	2f 83       	std	Y+7, r18	; 0x07
    3e90:	4f 81       	ldd	r20, Y+7	; 0x07
    3e92:	58 85       	ldd	r21, Y+8	; 0x08
    3e94:	41 30       	cpi	r20, 0x01	; 1
    3e96:	51 05       	cpc	r21, r1
    3e98:	a9 f1       	breq	.+106    	; 0x3f04 <DIO_enu_GetPinValue+0xb8>
    3e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3e9c:	98 85       	ldd	r25, Y+8	; 0x08
    3e9e:	82 30       	cpi	r24, 0x02	; 2
    3ea0:	91 05       	cpc	r25, r1
    3ea2:	34 f4       	brge	.+12     	; 0x3eb0 <DIO_enu_GetPinValue+0x64>
    3ea4:	2f 81       	ldd	r18, Y+7	; 0x07
    3ea6:	38 85       	ldd	r19, Y+8	; 0x08
    3ea8:	21 15       	cp	r18, r1
    3eaa:	31 05       	cpc	r19, r1
    3eac:	71 f0       	breq	.+28     	; 0x3eca <DIO_enu_GetPinValue+0x7e>
    3eae:	82 c0       	rjmp	.+260    	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
    3eb0:	4f 81       	ldd	r20, Y+7	; 0x07
    3eb2:	58 85       	ldd	r21, Y+8	; 0x08
    3eb4:	42 30       	cpi	r20, 0x02	; 2
    3eb6:	51 05       	cpc	r21, r1
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <DIO_enu_GetPinValue+0x70>
    3eba:	41 c0       	rjmp	.+130    	; 0x3f3e <DIO_enu_GetPinValue+0xf2>
    3ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ebe:	98 85       	ldd	r25, Y+8	; 0x08
    3ec0:	83 30       	cpi	r24, 0x03	; 3
    3ec2:	91 05       	cpc	r25, r1
    3ec4:	09 f4       	brne	.+2      	; 0x3ec8 <DIO_enu_GetPinValue+0x7c>
    3ec6:	58 c0       	rjmp	.+176    	; 0x3f78 <DIO_enu_GetPinValue+0x12c>
    3ec8:	75 c0       	rjmp	.+234    	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
        {
            case DIO_U8_PORTA:Local_u8_PinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);
    3eca:	e9 e3       	ldi	r30, 0x39	; 57
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	80 81       	ld	r24, Z
    3ed0:	28 2f       	mov	r18, r24
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ed6:	88 2f       	mov	r24, r24
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	a9 01       	movw	r20, r18
    3edc:	02 c0       	rjmp	.+4      	; 0x3ee2 <DIO_enu_GetPinValue+0x96>
    3ede:	55 95       	asr	r21
    3ee0:	47 95       	ror	r20
    3ee2:	8a 95       	dec	r24
    3ee4:	e2 f7       	brpl	.-8      	; 0x3ede <DIO_enu_GetPinValue+0x92>
    3ee6:	ca 01       	movw	r24, r20
    3ee8:	81 70       	andi	r24, 0x01	; 1
    3eea:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	88 23       	and	r24, r24
    3ef0:	21 f4       	brne	.+8      	; 0x3efa <DIO_enu_GetPinValue+0xae>
    3ef2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ef4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ef6:	10 82       	st	Z, r1
    3ef8:	5d c0       	rjmp	.+186    	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3efa:	ed 81       	ldd	r30, Y+5	; 0x05
    3efc:	fe 81       	ldd	r31, Y+6	; 0x06
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	80 83       	st	Z, r24
    3f02:	58 c0       	rjmp	.+176    	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTB:Local_u8_PinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);
    3f04:	e6 e3       	ldi	r30, 0x36	; 54
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	28 2f       	mov	r18, r24
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f10:	88 2f       	mov	r24, r24
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	a9 01       	movw	r20, r18
    3f16:	02 c0       	rjmp	.+4      	; 0x3f1c <DIO_enu_GetPinValue+0xd0>
    3f18:	55 95       	asr	r21
    3f1a:	47 95       	ror	r20
    3f1c:	8a 95       	dec	r24
    3f1e:	e2 f7       	brpl	.-8      	; 0x3f18 <DIO_enu_GetPinValue+0xcc>
    3f20:	ca 01       	movw	r24, r20
    3f22:	81 70       	andi	r24, 0x01	; 1
    3f24:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3f26:	89 81       	ldd	r24, Y+1	; 0x01
    3f28:	88 23       	and	r24, r24
    3f2a:	21 f4       	brne	.+8      	; 0x3f34 <DIO_enu_GetPinValue+0xe8>
    3f2c:	ed 81       	ldd	r30, Y+5	; 0x05
    3f2e:	fe 81       	ldd	r31, Y+6	; 0x06
    3f30:	10 82       	st	Z, r1
    3f32:	40 c0       	rjmp	.+128    	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3f34:	ed 81       	ldd	r30, Y+5	; 0x05
    3f36:	fe 81       	ldd	r31, Y+6	; 0x06
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	80 83       	st	Z, r24
    3f3c:	3b c0       	rjmp	.+118    	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTC:Local_u8_PinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);
    3f3e:	e3 e3       	ldi	r30, 0x33	; 51
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	28 2f       	mov	r18, r24
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	8c 81       	ldd	r24, Y+4	; 0x04
    3f4a:	88 2f       	mov	r24, r24
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	a9 01       	movw	r20, r18
    3f50:	02 c0       	rjmp	.+4      	; 0x3f56 <DIO_enu_GetPinValue+0x10a>
    3f52:	55 95       	asr	r21
    3f54:	47 95       	ror	r20
    3f56:	8a 95       	dec	r24
    3f58:	e2 f7       	brpl	.-8      	; 0x3f52 <DIO_enu_GetPinValue+0x106>
    3f5a:	ca 01       	movw	r24, r20
    3f5c:	81 70       	andi	r24, 0x01	; 1
    3f5e:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	88 23       	and	r24, r24
    3f64:	21 f4       	brne	.+8      	; 0x3f6e <DIO_enu_GetPinValue+0x122>
    3f66:	ed 81       	ldd	r30, Y+5	; 0x05
    3f68:	fe 81       	ldd	r31, Y+6	; 0x06
    3f6a:	10 82       	st	Z, r1
    3f6c:	23 c0       	rjmp	.+70     	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3f6e:	ed 81       	ldd	r30, Y+5	; 0x05
    3f70:	fe 81       	ldd	r31, Y+6	; 0x06
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	80 83       	st	Z, r24
    3f76:	1e c0       	rjmp	.+60     	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTD:Local_u8_PinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);
    3f78:	e0 e3       	ldi	r30, 0x30	; 48
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	28 2f       	mov	r18, r24
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	8c 81       	ldd	r24, Y+4	; 0x04
    3f84:	88 2f       	mov	r24, r24
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	a9 01       	movw	r20, r18
    3f8a:	02 c0       	rjmp	.+4      	; 0x3f90 <DIO_enu_GetPinValue+0x144>
    3f8c:	55 95       	asr	r21
    3f8e:	47 95       	ror	r20
    3f90:	8a 95       	dec	r24
    3f92:	e2 f7       	brpl	.-8      	; 0x3f8c <DIO_enu_GetPinValue+0x140>
    3f94:	ca 01       	movw	r24, r20
    3f96:	81 70       	andi	r24, 0x01	; 1
    3f98:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3f9a:	89 81       	ldd	r24, Y+1	; 0x01
    3f9c:	88 23       	and	r24, r24
    3f9e:	21 f4       	brne	.+8      	; 0x3fa8 <DIO_enu_GetPinValue+0x15c>
    3fa0:	ed 81       	ldd	r30, Y+5	; 0x05
    3fa2:	fe 81       	ldd	r31, Y+6	; 0x06
    3fa4:	10 82       	st	Z, r1
    3fa6:	06 c0       	rjmp	.+12     	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3fa8:	ed 81       	ldd	r30, Y+5	; 0x05
    3faa:	fe 81       	ldd	r31, Y+6	; 0x06
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	80 83       	st	Z, r24
    3fb0:	01 c0       	rjmp	.+2      	; 0x3fb4 <DIO_enu_GetPinValue+0x168>
            break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3fb2:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_ErrorState;
    3fb4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3fb6:	28 96       	adiw	r28, 0x08	; 8
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	de bf       	out	0x3e, r29	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	cd bf       	out	0x3d, r28	; 61
    3fc2:	cf 91       	pop	r28
    3fc4:	df 91       	pop	r29
    3fc6:	08 95       	ret

00003fc8 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    3fc8:	df 93       	push	r29
    3fca:	cf 93       	push	r28
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
    3fd0:	2d 97       	sbiw	r28, 0x0d	; 13
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	8a 83       	std	Y+2, r24	; 0x02
    3fde:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    3fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe6:	84 30       	cpi	r24, 0x04	; 4
    3fe8:	08 f0       	brcs	.+2      	; 0x3fec <DIO_enu_SetPortDirection+0x24>
    3fea:	84 c0       	rjmp	.+264    	; 0x40f4 <DIO_enu_SetPortDirection+0x12c>
    3fec:	8b 81       	ldd	r24, Y+3	; 0x03
    3fee:	81 30       	cpi	r24, 0x01	; 1
    3ff0:	21 f0       	breq	.+8      	; 0x3ffa <DIO_enu_SetPortDirection+0x32>
    3ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff4:	88 23       	and	r24, r24
    3ff6:	09 f0       	breq	.+2      	; 0x3ffa <DIO_enu_SetPortDirection+0x32>
    3ff8:	7d c0       	rjmp	.+250    	; 0x40f4 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    3ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffc:	28 2f       	mov	r18, r24
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	3d 87       	std	Y+13, r19	; 0x0d
    4002:	2c 87       	std	Y+12, r18	; 0x0c
    4004:	8c 85       	ldd	r24, Y+12	; 0x0c
    4006:	9d 85       	ldd	r25, Y+13	; 0x0d
    4008:	81 30       	cpi	r24, 0x01	; 1
    400a:	91 05       	cpc	r25, r1
    400c:	71 f1       	breq	.+92     	; 0x406a <DIO_enu_SetPortDirection+0xa2>
    400e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4010:	3d 85       	ldd	r19, Y+13	; 0x0d
    4012:	22 30       	cpi	r18, 0x02	; 2
    4014:	31 05       	cpc	r19, r1
    4016:	2c f4       	brge	.+10     	; 0x4022 <DIO_enu_SetPortDirection+0x5a>
    4018:	8c 85       	ldd	r24, Y+12	; 0x0c
    401a:	9d 85       	ldd	r25, Y+13	; 0x0d
    401c:	00 97       	sbiw	r24, 0x00	; 0
    401e:	69 f0       	breq	.+26     	; 0x403a <DIO_enu_SetPortDirection+0x72>
    4020:	6a c0       	rjmp	.+212    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
    4022:	2c 85       	ldd	r18, Y+12	; 0x0c
    4024:	3d 85       	ldd	r19, Y+13	; 0x0d
    4026:	22 30       	cpi	r18, 0x02	; 2
    4028:	31 05       	cpc	r19, r1
    402a:	b1 f1       	breq	.+108    	; 0x4098 <DIO_enu_SetPortDirection+0xd0>
    402c:	8c 85       	ldd	r24, Y+12	; 0x0c
    402e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4030:	83 30       	cpi	r24, 0x03	; 3
    4032:	91 05       	cpc	r25, r1
    4034:	09 f4       	brne	.+2      	; 0x4038 <DIO_enu_SetPortDirection+0x70>
    4036:	47 c0       	rjmp	.+142    	; 0x40c6 <DIO_enu_SetPortDirection+0xfe>
    4038:	5e c0       	rjmp	.+188    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    403a:	8b 81       	ldd	r24, Y+3	; 0x03
    403c:	28 2f       	mov	r18, r24
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	3b 87       	std	Y+11, r19	; 0x0b
    4042:	2a 87       	std	Y+10, r18	; 0x0a
    4044:	8a 85       	ldd	r24, Y+10	; 0x0a
    4046:	9b 85       	ldd	r25, Y+11	; 0x0b
    4048:	00 97       	sbiw	r24, 0x00	; 0
    404a:	59 f0       	breq	.+22     	; 0x4062 <DIO_enu_SetPortDirection+0x9a>
    404c:	2a 85       	ldd	r18, Y+10	; 0x0a
    404e:	3b 85       	ldd	r19, Y+11	; 0x0b
    4050:	21 30       	cpi	r18, 0x01	; 1
    4052:	31 05       	cpc	r19, r1
    4054:	09 f0       	breq	.+2      	; 0x4058 <DIO_enu_SetPortDirection+0x90>
    4056:	4f c0       	rjmp	.+158    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    4058:	ea e3       	ldi	r30, 0x3A	; 58
    405a:	f0 e0       	ldi	r31, 0x00	; 0
    405c:	8f ef       	ldi	r24, 0xFF	; 255
    405e:	80 83       	st	Z, r24
    4060:	4a c0       	rjmp	.+148    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    4062:	ea e3       	ldi	r30, 0x3A	; 58
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	10 82       	st	Z, r1
    4068:	46 c0       	rjmp	.+140    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    406a:	8b 81       	ldd	r24, Y+3	; 0x03
    406c:	28 2f       	mov	r18, r24
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	39 87       	std	Y+9, r19	; 0x09
    4072:	28 87       	std	Y+8, r18	; 0x08
    4074:	88 85       	ldd	r24, Y+8	; 0x08
    4076:	99 85       	ldd	r25, Y+9	; 0x09
    4078:	00 97       	sbiw	r24, 0x00	; 0
    407a:	51 f0       	breq	.+20     	; 0x4090 <DIO_enu_SetPortDirection+0xc8>
    407c:	28 85       	ldd	r18, Y+8	; 0x08
    407e:	39 85       	ldd	r19, Y+9	; 0x09
    4080:	21 30       	cpi	r18, 0x01	; 1
    4082:	31 05       	cpc	r19, r1
    4084:	c1 f5       	brne	.+112    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    4086:	e7 e3       	ldi	r30, 0x37	; 55
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	8f ef       	ldi	r24, 0xFF	; 255
    408c:	80 83       	st	Z, r24
    408e:	33 c0       	rjmp	.+102    	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    4090:	e7 e3       	ldi	r30, 0x37	; 55
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	10 82       	st	Z, r1
    4096:	2f c0       	rjmp	.+94     	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    4098:	8b 81       	ldd	r24, Y+3	; 0x03
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	3f 83       	std	Y+7, r19	; 0x07
    40a0:	2e 83       	std	Y+6, r18	; 0x06
    40a2:	8e 81       	ldd	r24, Y+6	; 0x06
    40a4:	9f 81       	ldd	r25, Y+7	; 0x07
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	51 f0       	breq	.+20     	; 0x40be <DIO_enu_SetPortDirection+0xf6>
    40aa:	2e 81       	ldd	r18, Y+6	; 0x06
    40ac:	3f 81       	ldd	r19, Y+7	; 0x07
    40ae:	21 30       	cpi	r18, 0x01	; 1
    40b0:	31 05       	cpc	r19, r1
    40b2:	09 f5       	brne	.+66     	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    40b4:	e4 e3       	ldi	r30, 0x34	; 52
    40b6:	f0 e0       	ldi	r31, 0x00	; 0
    40b8:	8f ef       	ldi	r24, 0xFF	; 255
    40ba:	80 83       	st	Z, r24
    40bc:	1c c0       	rjmp	.+56     	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    40be:	e4 e3       	ldi	r30, 0x34	; 52
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	10 82       	st	Z, r1
    40c4:	18 c0       	rjmp	.+48     	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    40c6:	8b 81       	ldd	r24, Y+3	; 0x03
    40c8:	28 2f       	mov	r18, r24
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	3d 83       	std	Y+5, r19	; 0x05
    40ce:	2c 83       	std	Y+4, r18	; 0x04
    40d0:	8c 81       	ldd	r24, Y+4	; 0x04
    40d2:	9d 81       	ldd	r25, Y+5	; 0x05
    40d4:	00 97       	sbiw	r24, 0x00	; 0
    40d6:	51 f0       	breq	.+20     	; 0x40ec <DIO_enu_SetPortDirection+0x124>
    40d8:	2c 81       	ldd	r18, Y+4	; 0x04
    40da:	3d 81       	ldd	r19, Y+5	; 0x05
    40dc:	21 30       	cpi	r18, 0x01	; 1
    40de:	31 05       	cpc	r19, r1
    40e0:	51 f4       	brne	.+20     	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    40e2:	e1 e3       	ldi	r30, 0x31	; 49
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	8f ef       	ldi	r24, 0xFF	; 255
    40e8:	80 83       	st	Z, r24
    40ea:	05 c0       	rjmp	.+10     	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    40ec:	e1 e3       	ldi	r30, 0x31	; 49
    40ee:	f0 e0       	ldi	r31, 0x00	; 0
    40f0:	10 82       	st	Z, r1
    40f2:	01 c0       	rjmp	.+2      	; 0x40f6 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    40f4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    40f8:	2d 96       	adiw	r28, 0x0d	; 13
    40fa:	0f b6       	in	r0, 0x3f	; 63
    40fc:	f8 94       	cli
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	0f be       	out	0x3f, r0	; 63
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	cf 91       	pop	r28
    4106:	df 91       	pop	r29
    4108:	08 95       	ret

0000410a <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	00 d0       	rcall	.+0      	; 0x4110 <DIO_enu_SetPortValue+0x6>
    4110:	00 d0       	rcall	.+0      	; 0x4112 <DIO_enu_SetPortValue+0x8>
    4112:	0f 92       	push	r0
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	8a 83       	std	Y+2, r24	; 0x02
    411a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    4120:	8a 81       	ldd	r24, Y+2	; 0x02
    4122:	84 30       	cpi	r24, 0x04	; 4
    4124:	98 f5       	brcc	.+102    	; 0x418c <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    4126:	8a 81       	ldd	r24, Y+2	; 0x02
    4128:	28 2f       	mov	r18, r24
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	3d 83       	std	Y+5, r19	; 0x05
    412e:	2c 83       	std	Y+4, r18	; 0x04
    4130:	8c 81       	ldd	r24, Y+4	; 0x04
    4132:	9d 81       	ldd	r25, Y+5	; 0x05
    4134:	81 30       	cpi	r24, 0x01	; 1
    4136:	91 05       	cpc	r25, r1
    4138:	d1 f0       	breq	.+52     	; 0x416e <DIO_enu_SetPortValue+0x64>
    413a:	2c 81       	ldd	r18, Y+4	; 0x04
    413c:	3d 81       	ldd	r19, Y+5	; 0x05
    413e:	22 30       	cpi	r18, 0x02	; 2
    4140:	31 05       	cpc	r19, r1
    4142:	2c f4       	brge	.+10     	; 0x414e <DIO_enu_SetPortValue+0x44>
    4144:	8c 81       	ldd	r24, Y+4	; 0x04
    4146:	9d 81       	ldd	r25, Y+5	; 0x05
    4148:	00 97       	sbiw	r24, 0x00	; 0
    414a:	61 f0       	breq	.+24     	; 0x4164 <DIO_enu_SetPortValue+0x5a>
    414c:	20 c0       	rjmp	.+64     	; 0x418e <DIO_enu_SetPortValue+0x84>
    414e:	2c 81       	ldd	r18, Y+4	; 0x04
    4150:	3d 81       	ldd	r19, Y+5	; 0x05
    4152:	22 30       	cpi	r18, 0x02	; 2
    4154:	31 05       	cpc	r19, r1
    4156:	81 f0       	breq	.+32     	; 0x4178 <DIO_enu_SetPortValue+0x6e>
    4158:	8c 81       	ldd	r24, Y+4	; 0x04
    415a:	9d 81       	ldd	r25, Y+5	; 0x05
    415c:	83 30       	cpi	r24, 0x03	; 3
    415e:	91 05       	cpc	r25, r1
    4160:	81 f0       	breq	.+32     	; 0x4182 <DIO_enu_SetPortValue+0x78>
    4162:	15 c0       	rjmp	.+42     	; 0x418e <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    4164:	eb e3       	ldi	r30, 0x3B	; 59
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	8b 81       	ldd	r24, Y+3	; 0x03
    416a:	80 83       	st	Z, r24
    416c:	10 c0       	rjmp	.+32     	; 0x418e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    416e:	e8 e3       	ldi	r30, 0x38	; 56
    4170:	f0 e0       	ldi	r31, 0x00	; 0
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	80 83       	st	Z, r24
    4176:	0b c0       	rjmp	.+22     	; 0x418e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    4178:	e5 e3       	ldi	r30, 0x35	; 53
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	8b 81       	ldd	r24, Y+3	; 0x03
    417e:	80 83       	st	Z, r24
    4180:	06 c0       	rjmp	.+12     	; 0x418e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    4182:	e2 e3       	ldi	r30, 0x32	; 50
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	8b 81       	ldd	r24, Y+3	; 0x03
    4188:	80 83       	st	Z, r24
    418a:	01 c0       	rjmp	.+2      	; 0x418e <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    418c:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    418e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4190:	0f 90       	pop	r0
    4192:	0f 90       	pop	r0
    4194:	0f 90       	pop	r0
    4196:	0f 90       	pop	r0
    4198:	0f 90       	pop	r0
    419a:	cf 91       	pop	r28
    419c:	df 91       	pop	r29
    419e:	08 95       	ret

000041a0 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    41a0:	df 93       	push	r29
    41a2:	cf 93       	push	r28
    41a4:	00 d0       	rcall	.+0      	; 0x41a6 <DIO_enu_GetPortValue+0x6>
    41a6:	00 d0       	rcall	.+0      	; 0x41a8 <DIO_enu_GetPortValue+0x8>
    41a8:	00 d0       	rcall	.+0      	; 0x41aa <DIO_enu_GetPortValue+0xa>
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	8a 83       	std	Y+2, r24	; 0x02
    41b0:	7c 83       	std	Y+4, r23	; 0x04
    41b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    41b4:	81 e0       	ldi	r24, 0x01	; 1
    41b6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    41b8:	8a 81       	ldd	r24, Y+2	; 0x02
    41ba:	84 30       	cpi	r24, 0x04	; 4
    41bc:	08 f0       	brcs	.+2      	; 0x41c0 <DIO_enu_GetPortValue+0x20>
    41be:	3f c0       	rjmp	.+126    	; 0x423e <DIO_enu_GetPortValue+0x9e>
    41c0:	8b 81       	ldd	r24, Y+3	; 0x03
    41c2:	9c 81       	ldd	r25, Y+4	; 0x04
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	d9 f1       	breq	.+118    	; 0x423e <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    41c8:	8a 81       	ldd	r24, Y+2	; 0x02
    41ca:	28 2f       	mov	r18, r24
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	3e 83       	std	Y+6, r19	; 0x06
    41d0:	2d 83       	std	Y+5, r18	; 0x05
    41d2:	8d 81       	ldd	r24, Y+5	; 0x05
    41d4:	9e 81       	ldd	r25, Y+6	; 0x06
    41d6:	81 30       	cpi	r24, 0x01	; 1
    41d8:	91 05       	cpc	r25, r1
    41da:	e1 f0       	breq	.+56     	; 0x4214 <DIO_enu_GetPortValue+0x74>
    41dc:	2d 81       	ldd	r18, Y+5	; 0x05
    41de:	3e 81       	ldd	r19, Y+6	; 0x06
    41e0:	22 30       	cpi	r18, 0x02	; 2
    41e2:	31 05       	cpc	r19, r1
    41e4:	2c f4       	brge	.+10     	; 0x41f0 <DIO_enu_GetPortValue+0x50>
    41e6:	8d 81       	ldd	r24, Y+5	; 0x05
    41e8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ea:	00 97       	sbiw	r24, 0x00	; 0
    41ec:	61 f0       	breq	.+24     	; 0x4206 <DIO_enu_GetPortValue+0x66>
    41ee:	28 c0       	rjmp	.+80     	; 0x4240 <DIO_enu_GetPortValue+0xa0>
    41f0:	2d 81       	ldd	r18, Y+5	; 0x05
    41f2:	3e 81       	ldd	r19, Y+6	; 0x06
    41f4:	22 30       	cpi	r18, 0x02	; 2
    41f6:	31 05       	cpc	r19, r1
    41f8:	a1 f0       	breq	.+40     	; 0x4222 <DIO_enu_GetPortValue+0x82>
    41fa:	8d 81       	ldd	r24, Y+5	; 0x05
    41fc:	9e 81       	ldd	r25, Y+6	; 0x06
    41fe:	83 30       	cpi	r24, 0x03	; 3
    4200:	91 05       	cpc	r25, r1
    4202:	b1 f0       	breq	.+44     	; 0x4230 <DIO_enu_GetPortValue+0x90>
    4204:	1d c0       	rjmp	.+58     	; 0x4240 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    4206:	e9 e3       	ldi	r30, 0x39	; 57
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	80 81       	ld	r24, Z
    420c:	eb 81       	ldd	r30, Y+3	; 0x03
    420e:	fc 81       	ldd	r31, Y+4	; 0x04
    4210:	80 83       	st	Z, r24
    4212:	16 c0       	rjmp	.+44     	; 0x4240 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    4214:	e6 e3       	ldi	r30, 0x36	; 54
    4216:	f0 e0       	ldi	r31, 0x00	; 0
    4218:	80 81       	ld	r24, Z
    421a:	eb 81       	ldd	r30, Y+3	; 0x03
    421c:	fc 81       	ldd	r31, Y+4	; 0x04
    421e:	80 83       	st	Z, r24
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    4222:	e3 e3       	ldi	r30, 0x33	; 51
    4224:	f0 e0       	ldi	r31, 0x00	; 0
    4226:	80 81       	ld	r24, Z
    4228:	eb 81       	ldd	r30, Y+3	; 0x03
    422a:	fc 81       	ldd	r31, Y+4	; 0x04
    422c:	80 83       	st	Z, r24
    422e:	08 c0       	rjmp	.+16     	; 0x4240 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    4230:	e0 e3       	ldi	r30, 0x30	; 48
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	80 81       	ld	r24, Z
    4236:	eb 81       	ldd	r30, Y+3	; 0x03
    4238:	fc 81       	ldd	r31, Y+4	; 0x04
    423a:	80 83       	st	Z, r24
    423c:	01 c0       	rjmp	.+2      	; 0x4240 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    423e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4240:	89 81       	ldd	r24, Y+1	; 0x01
}
    4242:	26 96       	adiw	r28, 0x06	; 6
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
    424e:	cf 91       	pop	r28
    4250:	df 91       	pop	r29
    4252:	08 95       	ret

00004254 <__udivmodhi4>:
    4254:	aa 1b       	sub	r26, r26
    4256:	bb 1b       	sub	r27, r27
    4258:	51 e1       	ldi	r21, 0x11	; 17
    425a:	07 c0       	rjmp	.+14     	; 0x426a <__udivmodhi4_ep>

0000425c <__udivmodhi4_loop>:
    425c:	aa 1f       	adc	r26, r26
    425e:	bb 1f       	adc	r27, r27
    4260:	a6 17       	cp	r26, r22
    4262:	b7 07       	cpc	r27, r23
    4264:	10 f0       	brcs	.+4      	; 0x426a <__udivmodhi4_ep>
    4266:	a6 1b       	sub	r26, r22
    4268:	b7 0b       	sbc	r27, r23

0000426a <__udivmodhi4_ep>:
    426a:	88 1f       	adc	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	5a 95       	dec	r21
    4270:	a9 f7       	brne	.-22     	; 0x425c <__udivmodhi4_loop>
    4272:	80 95       	com	r24
    4274:	90 95       	com	r25
    4276:	bc 01       	movw	r22, r24
    4278:	cd 01       	movw	r24, r26
    427a:	08 95       	ret

0000427c <__udivmodsi4>:
    427c:	a1 e2       	ldi	r26, 0x21	; 33
    427e:	1a 2e       	mov	r1, r26
    4280:	aa 1b       	sub	r26, r26
    4282:	bb 1b       	sub	r27, r27
    4284:	fd 01       	movw	r30, r26
    4286:	0d c0       	rjmp	.+26     	; 0x42a2 <__udivmodsi4_ep>

00004288 <__udivmodsi4_loop>:
    4288:	aa 1f       	adc	r26, r26
    428a:	bb 1f       	adc	r27, r27
    428c:	ee 1f       	adc	r30, r30
    428e:	ff 1f       	adc	r31, r31
    4290:	a2 17       	cp	r26, r18
    4292:	b3 07       	cpc	r27, r19
    4294:	e4 07       	cpc	r30, r20
    4296:	f5 07       	cpc	r31, r21
    4298:	20 f0       	brcs	.+8      	; 0x42a2 <__udivmodsi4_ep>
    429a:	a2 1b       	sub	r26, r18
    429c:	b3 0b       	sbc	r27, r19
    429e:	e4 0b       	sbc	r30, r20
    42a0:	f5 0b       	sbc	r31, r21

000042a2 <__udivmodsi4_ep>:
    42a2:	66 1f       	adc	r22, r22
    42a4:	77 1f       	adc	r23, r23
    42a6:	88 1f       	adc	r24, r24
    42a8:	99 1f       	adc	r25, r25
    42aa:	1a 94       	dec	r1
    42ac:	69 f7       	brne	.-38     	; 0x4288 <__udivmodsi4_loop>
    42ae:	60 95       	com	r22
    42b0:	70 95       	com	r23
    42b2:	80 95       	com	r24
    42b4:	90 95       	com	r25
    42b6:	9b 01       	movw	r18, r22
    42b8:	ac 01       	movw	r20, r24
    42ba:	bd 01       	movw	r22, r26
    42bc:	cf 01       	movw	r24, r30
    42be:	08 95       	ret

000042c0 <__prologue_saves__>:
    42c0:	2f 92       	push	r2
    42c2:	3f 92       	push	r3
    42c4:	4f 92       	push	r4
    42c6:	5f 92       	push	r5
    42c8:	6f 92       	push	r6
    42ca:	7f 92       	push	r7
    42cc:	8f 92       	push	r8
    42ce:	9f 92       	push	r9
    42d0:	af 92       	push	r10
    42d2:	bf 92       	push	r11
    42d4:	cf 92       	push	r12
    42d6:	df 92       	push	r13
    42d8:	ef 92       	push	r14
    42da:	ff 92       	push	r15
    42dc:	0f 93       	push	r16
    42de:	1f 93       	push	r17
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
    42e8:	ca 1b       	sub	r28, r26
    42ea:	db 0b       	sbc	r29, r27
    42ec:	0f b6       	in	r0, 0x3f	; 63
    42ee:	f8 94       	cli
    42f0:	de bf       	out	0x3e, r29	; 62
    42f2:	0f be       	out	0x3f, r0	; 63
    42f4:	cd bf       	out	0x3d, r28	; 61
    42f6:	09 94       	ijmp

000042f8 <__epilogue_restores__>:
    42f8:	2a 88       	ldd	r2, Y+18	; 0x12
    42fa:	39 88       	ldd	r3, Y+17	; 0x11
    42fc:	48 88       	ldd	r4, Y+16	; 0x10
    42fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    4300:	6e 84       	ldd	r6, Y+14	; 0x0e
    4302:	7d 84       	ldd	r7, Y+13	; 0x0d
    4304:	8c 84       	ldd	r8, Y+12	; 0x0c
    4306:	9b 84       	ldd	r9, Y+11	; 0x0b
    4308:	aa 84       	ldd	r10, Y+10	; 0x0a
    430a:	b9 84       	ldd	r11, Y+9	; 0x09
    430c:	c8 84       	ldd	r12, Y+8	; 0x08
    430e:	df 80       	ldd	r13, Y+7	; 0x07
    4310:	ee 80       	ldd	r14, Y+6	; 0x06
    4312:	fd 80       	ldd	r15, Y+5	; 0x05
    4314:	0c 81       	ldd	r16, Y+4	; 0x04
    4316:	1b 81       	ldd	r17, Y+3	; 0x03
    4318:	aa 81       	ldd	r26, Y+2	; 0x02
    431a:	b9 81       	ldd	r27, Y+1	; 0x01
    431c:	ce 0f       	add	r28, r30
    431e:	d1 1d       	adc	r29, r1
    4320:	0f b6       	in	r0, 0x3f	; 63
    4322:	f8 94       	cli
    4324:	de bf       	out	0x3e, r29	; 62
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	cd bf       	out	0x3d, r28	; 61
    432a:	ed 01       	movw	r28, r26
    432c:	08 95       	ret

0000432e <_exit>:
    432e:	f8 94       	cli

00004330 <__stop_program>:
    4330:	ff cf       	rjmp	.-2      	; 0x4330 <__stop_program>
