
Motor_DashBoard_SPI_MASTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005dbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ea  00800060  00005dbc  00005e50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080014a  0080014a  00005f3a  2**0
                  ALLOC
  3 .stab         000071dc  00000000  00000000  00005f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002749  00000000  00000000  0000d118  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000f861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000f9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000fb50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00011b95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00012c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00013c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00013d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0001405a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000148e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <__vector_1>
       8:	0c 94 ab 27 	jmp	0x4f56	; 0x4f56 <__vector_2>
       c:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <__vector_3>
      10:	0c 94 be 21 	jmp	0x437c	; 0x437c <__vector_4>
      14:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <__vector_5>
      18:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__vector_6>
      1c:	0c 94 57 22 	jmp	0x44ae	; 0x44ae <__vector_7>
      20:	0c 94 8a 22 	jmp	0x4514	; 0x4514 <__vector_8>
      24:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__vector_9>
      28:	0c 94 f0 22 	jmp	0x45e0	; 0x45e0 <__vector_10>
      2c:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a5 1a 	jmp	0x354a	; 0x354a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__vector_15>
      40:	0c 94 f4 2d 	jmp	0x5be8	; 0x5be8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 34       	cpi	r26, 0x4A	; 74
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e4       	ldi	r26, 0x4A	; 74
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 08 	call	0x1006	; 0x1006 <main>
      8a:	0c 94 dc 2e 	jmp	0x5db8	; 0x5db8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a5 2e 	jmp	0x5d4a	; 0x5d4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e0       	ldi	r26, 0x0C	; 12
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a5 2e 	jmp	0x5d4a	; 0x5d4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e0       	ldi	r24, 0x0C	; 12
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c1 2e 	jmp	0x5d82	; 0x5d82 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 2e 	jmp	0x5d5a	; 0x5d5a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c e0       	ldi	r22, 0x0C	; 12
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c9 2e 	jmp	0x5d92	; 0x5d92 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b1 2e 	jmp	0x5d62	; 0x5d62 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b5 2e 	jmp	0x5d6a	; 0x5d6a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d1 2e 	jmp	0x5da2	; 0x5da2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <displayOptionsPage>:
#define Password          "51120"

u8 key=0,order = 0, Index=0, checkCounter = 0,homeFlag = 0,inputFlag = 0;
u8 savedPass[] = Password, pass[PasswordLength];
u8 dummy = 0;
void displayOptionsPage(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     ca6:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
	LCD_enu_SendString("1-DC    3-Servo");
     caa:	80 e6       	ldi	r24, 0x60	; 96
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Stepper 4-Stop");
     cba:	80 e7       	ldi	r24, 0x70	; 112
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <takeUserOption>:
void takeUserOption(u8 *option){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <takeUserOption+0x6>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Keypad_enu_getKey(option);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Keypad_enu_getKey>
		if(*option == '1' || *option == '2' || *option == '3' || *option == '4')break;
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	80 81       	ld	r24, Z
     ce4:	81 33       	cpi	r24, 0x31	; 49
     ce6:	79 f0       	breq	.+30     	; 0xd06 <takeUserOption+0x3e>
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	80 81       	ld	r24, Z
     cee:	82 33       	cpi	r24, 0x32	; 50
     cf0:	51 f0       	breq	.+20     	; 0xd06 <takeUserOption+0x3e>
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	80 81       	ld	r24, Z
     cf8:	83 33       	cpi	r24, 0x33	; 51
     cfa:	29 f0       	breq	.+10     	; 0xd06 <takeUserOption+0x3e>
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	80 81       	ld	r24, Z
     d02:	84 33       	cpi	r24, 0x34	; 52
     d04:	41 f7       	brne	.-48     	; 0xcd6 <takeUserOption+0xe>
	}
}
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <displayRotationOptions>:
void displayRotationOptions(){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     d18:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
	LCD_enu_SendString("1-Rotate CW ");
     d1c:	81 e8       	ldi	r24, 0x81	; 129
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Rotate CCW");
     d2c:	8e e8       	ldi	r24, 0x8E	; 142
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <getPassword>:
void getPassword(void){
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <getPassword+0x6>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	Keypad_enu_getKey(&key);
     d44:	8a e4       	ldi	r24, 0x4A	; 74
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Keypad_enu_getKey>
	if(key != KEYPAD_U8_NO_KEY_PRESSED){
     d4c:	80 91 4a 01 	lds	r24, 0x014A
     d50:	8f 3f       	cpi	r24, 0xFF	; 255
     d52:	b9 f0       	breq	.+46     	; 0xd82 <getPassword+0x48>
		LCD_enu_SendChar('*');
     d54:	8a e2       	ldi	r24, 0x2A	; 42
     d56:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
		pass[Index] = key;
     d5a:	80 91 4c 01 	lds	r24, 0x014C
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	20 91 4a 01 	lds	r18, 0x014A
     d66:	fc 01       	movw	r30, r24
     d68:	ef 58       	subi	r30, 0x8F	; 143
     d6a:	fe 4f       	sbci	r31, 0xFE	; 254
     d6c:	20 83       	st	Z, r18
		Index++;
     d6e:	80 91 4c 01 	lds	r24, 0x014C
     d72:	8f 5f       	subi	r24, 0xFF	; 255
     d74:	80 93 4c 01 	sts	0x014C, r24
		checkCounter++;
     d78:	80 91 4d 01 	lds	r24, 0x014D
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 4d 01 	sts	0x014D, r24
	}
	if(checkCounter == PasswordLength){
     d82:	80 91 4d 01 	lds	r24, 0x014D
     d86:	85 30       	cpi	r24, 0x05	; 5
     d88:	09 f0       	breq	.+2      	; 0xd8c <getPassword+0x52>
     d8a:	69 c0       	rjmp	.+210    	; 0xe5e <getPassword+0x124>
		for(int j =0 ;j<PasswordLength ; j++){
     d8c:	1a 82       	std	Y+2, r1	; 0x02
     d8e:	19 82       	std	Y+1, r1	; 0x01
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <getPassword+0x86>
			if(pass[j] != savedPass[j]){
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	fc 01       	movw	r30, r24
     d98:	ef 58       	subi	r30, 0x8F	; 143
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	20 81       	ld	r18, Z
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	fc 01       	movw	r30, r24
     da4:	ec 5e       	subi	r30, 0xEC	; 236
     da6:	fe 4f       	sbci	r31, 0xFE	; 254
     da8:	80 81       	ld	r24, Z
     daa:	28 17       	cp	r18, r24
     dac:	21 f0       	breq	.+8      	; 0xdb6 <getPassword+0x7c>
				inputFlag = 1;
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	80 93 4f 01 	sts	0x014F, r24
     db4:	0a c0       	rjmp	.+20     	; 0xdca <getPassword+0x90>
		pass[Index] = key;
		Index++;
		checkCounter++;
	}
	if(checkCounter == PasswordLength){
		for(int j =0 ;j<PasswordLength ; j++){
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	9a 83       	std	Y+2, r25	; 0x02
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	85 30       	cpi	r24, 0x05	; 5
     dc6:	91 05       	cpc	r25, r1
     dc8:	24 f3       	brlt	.-56     	; 0xd92 <getPassword+0x58>
			if(pass[j] != savedPass[j]){
				inputFlag = 1;
				break;
			}
		}
		if(inputFlag){
     dca:	80 91 4f 01 	lds	r24, 0x014F
     dce:	88 23       	and	r24, r24
     dd0:	29 f1       	breq	.+74     	; 0xe1c <getPassword+0xe2>
			Index =0;
     dd2:	10 92 4c 01 	sts	0x014C, r1
			checkCounter =0;
     dd6:	10 92 4d 01 	sts	0x014D, r1
			inputFlag = 0;
     dda:	10 92 4f 01 	sts	0x014F, r1
			LCD_enu_Clear();
     dde:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
			LCD_enu_SendString("Wrong Password");
     de2:	8b e9       	ldi	r24, 0x9B	; 155
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
			LCD_enu_SetCursor(1, 0);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
			LCD_enu_SendString("Try Again!");
     df2:	8a ea       	ldi	r24, 0xAA	; 170
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
			Timers_enu_delay_ms(delay);
     dfa:	64 ef       	ldi	r22, 0xF4	; 244
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <Timers_enu_delay_ms>
			LCD_enu_Clear();
     e06:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
			LCD_enu_SendString("Enter Password:");
     e0a:	85 eb       	ldi	r24, 0xB5	; 181
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
			LCD_enu_SetCursor(1, 0);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
     e1a:	21 c0       	rjmp	.+66     	; 0xe5e <getPassword+0x124>
		}else{
			//To display this message only once
			if(!homeFlag){
     e1c:	80 91 4e 01 	lds	r24, 0x014E
     e20:	88 23       	and	r24, r24
     e22:	b9 f4       	brne	.+46     	; 0xe52 <getPassword+0x118>
				LCD_enu_Clear();
     e24:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
				LCD_enu_SendString("Welcome :)");
     e28:	85 ec       	ldi	r24, 0xC5	; 197
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
				LCD_enu_SendString("Choose Motor ..");
     e38:	80 ed       	ldi	r24, 0xD0	; 208
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
				homeFlag = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 4e 01 	sts	0x014E, r24
				Timers_enu_delay_ms(delay);
     e46:	64 ef       	ldi	r22, 0xF4	; 244
     e48:	71 e0       	ldi	r23, 0x01	; 1
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <Timers_enu_delay_ms>
			}
			displayOptionsPage();
     e52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <displayOptionsPage>
			takeUserOption(&order);
     e56:	8b e4       	ldi	r24, 0x4B	; 75
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
		}
	}
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <DCMotor>:
void DCMotor(){
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	displayRotationOptions();
     e70:	0e 94 88 06 	call	0xd10	; 0xd10 <displayRotationOptions>
	takeUserOption(&order);
     e74:	8b e4       	ldi	r24, 0x4B	; 75
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
	// Rotate DC Motors CW
	if(order == '1'){SPI_enu_Transceive(order, &dummy);}
     e7c:	80 91 4b 01 	lds	r24, 0x014B
     e80:	81 33       	cpi	r24, 0x31	; 49
     e82:	41 f4       	brne	.+16     	; 0xe94 <DCMotor+0x2c>
     e84:	80 91 4b 01 	lds	r24, 0x014B
     e88:	20 e5       	ldi	r18, 0x50	; 80
     e8a:	31 e0       	ldi	r19, 0x01	; 1
     e8c:	b9 01       	movw	r22, r18
     e8e:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
     e92:	0b c0       	rjmp	.+22     	; 0xeaa <DCMotor+0x42>
	// Rotate DC Motors CCW
	else if (order == '2'){SPI_enu_Transceive(order, &dummy);}
     e94:	80 91 4b 01 	lds	r24, 0x014B
     e98:	82 33       	cpi	r24, 0x32	; 50
     e9a:	39 f4       	brne	.+14     	; 0xeaa <DCMotor+0x42>
     e9c:	80 91 4b 01 	lds	r24, 0x014B
     ea0:	20 e5       	ldi	r18, 0x50	; 80
     ea2:	31 e0       	ldi	r19, 0x01	; 1
     ea4:	b9 01       	movw	r22, r18
     ea6:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
}
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <servoMotor>:
void servoMotor(){
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	0f 92       	push	r0
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     eba:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Angle:");
     ebe:	80 ee       	ldi	r24, 0xE0	; 224
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
	u8 servoMotorAngle= 0;
     ec6:	19 82       	std	Y+1, r1	; 0x01
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
     ec8:	8a e4       	ldi	r24, 0x4A	; 74
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Keypad_enu_getKey>
     ed0:	23 c0       	rjmp	.+70     	; 0xf18 <servoMotor+0x68>
	while(key != '='){
		Keypad_enu_getKey(&key);
     ed2:	8a e4       	ldi	r24, 0x4A	; 74
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Keypad_enu_getKey>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&(key != '=')){
     eda:	80 91 4a 01 	lds	r24, 0x014A
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	d9 f0       	breq	.+54     	; 0xf18 <servoMotor+0x68>
     ee2:	80 91 4a 01 	lds	r24, 0x014A
     ee6:	8d 33       	cpi	r24, 0x3D	; 61
     ee8:	b9 f0       	breq	.+46     	; 0xf18 <servoMotor+0x68>
			LCD_enu_SendChar(key);
     eea:	80 91 4a 01 	lds	r24, 0x014A
     eee:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
			servoMotorAngle = (servoMotorAngle*10)+(key -'0');
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9c 01       	movw	r18, r24
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	c9 01       	movw	r24, r18
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	82 0f       	add	r24, r18
     f0a:	93 1f       	adc	r25, r19
     f0c:	98 2f       	mov	r25, r24
     f0e:	80 91 4a 01 	lds	r24, 0x014A
     f12:	89 0f       	add	r24, r25
     f14:	80 53       	subi	r24, 0x30	; 48
     f16:	89 83       	std	Y+1, r24	; 0x01
	LCD_enu_Clear();
	LCD_enu_SendString("Enter Angle:");
	u8 servoMotorAngle= 0;
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
	while(key != '='){
     f18:	80 91 4a 01 	lds	r24, 0x014A
     f1c:	8d 33       	cpi	r24, 0x3D	; 61
     f1e:	c9 f6       	brne	.-78     	; 0xed2 <servoMotor+0x22>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&(key != '=')){
			LCD_enu_SendChar(key);
			servoMotorAngle = (servoMotorAngle*10)+(key -'0');
		}
	}
	SPI_enu_Transceive(servoMotorAngle, &dummy);
     f20:	20 e5       	ldi	r18, 0x50	; 80
     f22:	31 e0       	ldi	r19, 0x01	; 1
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	b9 01       	movw	r22, r18
     f28:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
}
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <stepperMotor>:

void stepperMotor(){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <stepperMotor+0x6>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	// Take Stepper Motor Angle
	LCD_enu_Clear();
     f3e:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Angle:");
     f42:	80 ee       	ldi	r24, 0xE0	; 224
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
	u16 stepperMotorAngle=0;
     f4a:	1a 82       	std	Y+2, r1	; 0x02
     f4c:	19 82       	std	Y+1, r1	; 0x01
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
     f4e:	8a e4       	ldi	r24, 0x4A	; 74
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Keypad_enu_getKey>
     f56:	25 c0       	rjmp	.+74     	; 0xfa2 <stepperMotor+0x6e>
	while(key != '='){
		Keypad_enu_getKey(&key);
     f58:	8a e4       	ldi	r24, 0x4A	; 74
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Keypad_enu_getKey>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&((key != '='))){
     f60:	80 91 4a 01 	lds	r24, 0x014A
     f64:	8f 3f       	cpi	r24, 0xFF	; 255
     f66:	e9 f0       	breq	.+58     	; 0xfa2 <stepperMotor+0x6e>
     f68:	80 91 4a 01 	lds	r24, 0x014A
     f6c:	8d 33       	cpi	r24, 0x3D	; 61
     f6e:	c9 f0       	breq	.+50     	; 0xfa2 <stepperMotor+0x6e>
			LCD_enu_SendChar(key);
     f70:	80 91 4a 01 	lds	r24, 0x014A
     f74:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
			stepperMotorAngle = (stepperMotorAngle*10)+(key -'0');
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	9c 01       	movw	r18, r24
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	c9 01       	movw	r24, r18
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	28 0f       	add	r18, r24
     f8e:	39 1f       	adc	r19, r25
     f90:	80 91 4a 01 	lds	r24, 0x014A
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	c0 97       	sbiw	r24, 0x30	; 48
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
	LCD_enu_Clear();
	LCD_enu_SendString("Enter Angle:");
	u16 stepperMotorAngle=0;
	// Display and Storing Angle
	Keypad_enu_getKey(&key);
	while(key != '='){
     fa2:	80 91 4a 01 	lds	r24, 0x014A
     fa6:	8d 33       	cpi	r24, 0x3D	; 61
     fa8:	b9 f6       	brne	.-82     	; 0xf58 <stepperMotor+0x24>
		if((key != KEYPAD_U8_NO_KEY_PRESSED)&&((key != '='))){
			LCD_enu_SendChar(key);
			stepperMotorAngle = (stepperMotorAngle*10)+(key -'0');
		}
	}
		displayRotationOptions();
     faa:	0e 94 88 06 	call	0xd10	; 0xd10 <displayRotationOptions>
		takeUserOption(&order);
     fae:	8b e4       	ldi	r24, 0x4B	; 75
     fb0:	91 e0       	ldi	r25, 0x01	; 1
     fb2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
		// Rotate Stepper Motor CW With Entered Angle
		if(order == '1'){
     fb6:	80 91 4b 01 	lds	r24, 0x014B
     fba:	81 33       	cpi	r24, 0x31	; 49
     fbc:	71 f4       	brne	.+28     	; 0xfda <stepperMotor+0xa6>
			SPI_enu_Transceive(order, &dummy);
     fbe:	80 91 4b 01 	lds	r24, 0x014B
     fc2:	20 e5       	ldi	r18, 0x50	; 80
     fc4:	31 e0       	ldi	r19, 0x01	; 1
     fc6:	b9 01       	movw	r22, r18
     fc8:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
			SPI_enu_Transceive(stepperMotorAngle, &dummy);
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	20 e5       	ldi	r18, 0x50	; 80
     fd0:	31 e0       	ldi	r19, 0x01	; 1
     fd2:	b9 01       	movw	r22, r18
     fd4:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
     fd8:	11 c0       	rjmp	.+34     	; 0xffc <stepperMotor+0xc8>
		}
		// Rotate Stepper Motor CCW With Entered Angle
		else if (order == '2'){
     fda:	80 91 4b 01 	lds	r24, 0x014B
     fde:	82 33       	cpi	r24, 0x32	; 50
     fe0:	69 f4       	brne	.+26     	; 0xffc <stepperMotor+0xc8>
			SPI_enu_Transceive(order, &dummy);
     fe2:	80 91 4b 01 	lds	r24, 0x014B
     fe6:	20 e5       	ldi	r18, 0x50	; 80
     fe8:	31 e0       	ldi	r19, 0x01	; 1
     fea:	b9 01       	movw	r22, r18
     fec:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
			SPI_enu_Transceive(stepperMotorAngle, &dummy);
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	20 e5       	ldi	r18, 0x50	; 80
     ff4:	31 e0       	ldi	r19, 0x01	; 1
     ff6:	b9 01       	movw	r22, r18
     ff8:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
		}
}
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <main>:
int main(void){
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	SPI_enu_Init();
    100e:	0e 94 56 23 	call	0x46ac	; 0x46ac <SPI_enu_Init>
	DIO_enu_SetPinDirection(DIO_U8_PORTB, DIO_U8_PIN4, DIO_U8_OUTPUT);
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	64 e0       	ldi	r22, 0x04	; 4
    1016:	41 e0       	ldi	r20, 0x01	; 1
    1018:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
	DIO_enu_SetPinValue(DIO_U8_PORTB, DIO_U8_PIN4, DIO_U8_LOW);
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	64 e0       	ldi	r22, 0x04	; 4
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
	Keypad_enu_Init();
    1026:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <Keypad_enu_Init>
	LCD_enu_Init();
    102a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <LCD_enu_Init>
	Timers_enu_Init(TIMER0, NORMAL_MODE, CLK_8);
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	42 e0       	ldi	r20, 0x02	; 2
    1034:	0e 94 0b 1b 	call	0x3616	; 0x3616 <Timers_enu_Init>
	LCD_enu_SendString("Hello, User :)");
    1038:	8d ee       	ldi	r24, 0xED	; 237
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
	Timers_enu_delay_ms(delay);
    1040:	64 ef       	ldi	r22, 0xF4	; 244
    1042:	71 e0       	ldi	r23, 0x01	; 1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <Timers_enu_delay_ms>
	LCD_enu_Clear();
    104c:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
    1050:	85 eb       	ldi	r24, 0xB5	; 181
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
	while(1){
		getPassword();
    1060:	0e 94 9d 06 	call	0xd3a	; 0xd3a <getPassword>
		if(order == '1'){
    1064:	80 91 4b 01 	lds	r24, 0x014B
    1068:	81 33       	cpi	r24, 0x31	; 49
    106a:	51 f4       	brne	.+20     	; 0x1080 <main+0x7a>
			SPI_enu_Transceive(order, &dummy);
    106c:	80 91 4b 01 	lds	r24, 0x014B
    1070:	20 e5       	ldi	r18, 0x50	; 80
    1072:	31 e0       	ldi	r19, 0x01	; 1
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
			DCMotor();
    107a:	0e 94 34 07 	call	0xe68	; 0xe68 <DCMotor>
    107e:	f0 cf       	rjmp	.-32     	; 0x1060 <main+0x5a>
		}
		else if(order == '2'){
    1080:	80 91 4b 01 	lds	r24, 0x014B
    1084:	82 33       	cpi	r24, 0x32	; 50
    1086:	51 f4       	brne	.+20     	; 0x109c <main+0x96>
			SPI_enu_Transceive(order, &dummy);
    1088:	80 91 4b 01 	lds	r24, 0x014B
    108c:	20 e5       	ldi	r18, 0x50	; 80
    108e:	31 e0       	ldi	r19, 0x01	; 1
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
			stepperMotor();
    1096:	0e 94 9a 07 	call	0xf34	; 0xf34 <stepperMotor>
    109a:	e2 cf       	rjmp	.-60     	; 0x1060 <main+0x5a>
		}
		else if(order == '3'){
    109c:	80 91 4b 01 	lds	r24, 0x014B
    10a0:	83 33       	cpi	r24, 0x33	; 51
    10a2:	51 f4       	brne	.+20     	; 0x10b8 <main+0xb2>
			SPI_enu_Transceive(order, &dummy);
    10a4:	80 91 4b 01 	lds	r24, 0x014B
    10a8:	20 e5       	ldi	r18, 0x50	; 80
    10aa:	31 e0       	ldi	r19, 0x01	; 1
    10ac:	b9 01       	movw	r22, r18
    10ae:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
			servoMotor();
    10b2:	0e 94 58 07 	call	0xeb0	; 0xeb0 <servoMotor>
    10b6:	d4 cf       	rjmp	.-88     	; 0x1060 <main+0x5a>
		}
		else if (order == '4'){
    10b8:	80 91 4b 01 	lds	r24, 0x014B
    10bc:	84 33       	cpi	r24, 0x34	; 52
    10be:	81 f6       	brne	.-96     	; 0x1060 <main+0x5a>
			SPI_enu_Transceive(order, &dummy);
    10c0:	80 91 4b 01 	lds	r24, 0x014B
    10c4:	20 e5       	ldi	r18, 0x50	; 80
    10c6:	31 e0       	ldi	r19, 0x01	; 1
    10c8:	b9 01       	movw	r22, r18
    10ca:	0e 94 af 23 	call	0x475e	; 0x475e <SPI_enu_Transceive>
			LCD_enu_Clear();
    10ce:	0e 94 c8 14 	call	0x2990	; 0x2990 <LCD_enu_Clear>
			LCD_enu_SendString("Stopping Motors");
    10d2:	8c ef       	ldi	r24, 0xFC	; 252
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LCD_enu_SendString>
			Timers_enu_delay_ms(delay);
    10da:	64 ef       	ldi	r22, 0xF4	; 244
    10dc:	71 e0       	ldi	r23, 0x01	; 1
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 2c 1f 	call	0x3e58	; 0x3e58 <Timers_enu_delay_ms>
    10e6:	bc cf       	rjmp	.-136    	; 0x1060 <main+0x5a>

000010e8 <SW_enu_Init>:
#include "Switch_Config.h"
#include "Switch_Private.h"


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <SW_enu_Init+0x6>
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <SW_enu_Init+0x8>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9b 83       	std	Y+3, r25	; 0x03
    10f6:	8a 83       	std	Y+2, r24	; 0x02

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    10f8:	19 82       	std	Y+1, r1	; 0x01
    10fa:	53 c0       	rjmp	.+166    	; 0x11a2 <SW_enu_Init+0xba>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	c9 01       	movw	r24, r18
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	28 0f       	add	r18, r24
    110a:	39 1f       	adc	r19, r25
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	9b 81       	ldd	r25, Y+3	; 0x03
    1110:	fc 01       	movw	r30, r24
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	40 81       	ld	r20, Z
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	c9 01       	movw	r24, r18
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	28 0f       	add	r18, r24
    1126:	39 1f       	adc	r19, r25
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	9b 81       	ldd	r25, Y+3	; 0x03
    112c:	fc 01       	movw	r30, r24
    112e:	e2 0f       	add	r30, r18
    1130:	f3 1f       	adc	r31, r19
    1132:	91 81       	ldd	r25, Z+1	; 0x01
    1134:	84 2f       	mov	r24, r20
    1136:	69 2f       	mov	r22, r25
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	c9 01       	movw	r24, r18
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	28 0f       	add	r18, r24
    114c:	39 1f       	adc	r19, r25
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	9b 81       	ldd	r25, Y+3	; 0x03
    1152:	fc 01       	movw	r30, r24
    1154:	e2 0f       	add	r30, r18
    1156:	f3 1f       	adc	r31, r19
    1158:	50 81       	ld	r21, Z
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	c9 01       	movw	r24, r18
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	28 0f       	add	r18, r24
    1168:	39 1f       	adc	r19, r25
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	fc 01       	movw	r30, r24
    1170:	e2 0f       	add	r30, r18
    1172:	f3 1f       	adc	r31, r19
    1174:	41 81       	ldd	r20, Z+1	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	c9 01       	movw	r24, r18
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	28 0f       	add	r18, r24
    1184:	39 1f       	adc	r19, r25
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	fc 01       	movw	r30, r24
    118c:	e2 0f       	add	r30, r18
    118e:	f3 1f       	adc	r31, r19
    1190:	92 81       	ldd	r25, Z+2	; 0x02
    1192:	85 2f       	mov	r24, r21
    1194:	64 2f       	mov	r22, r20
    1196:	49 2f       	mov	r20, r25
    1198:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	8f 5f       	subi	r24, 0xFF	; 255
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <SW_enu_Init+0xc2>
    11a8:	a9 cf       	rjmp	.-174    	; 0x10fc <SW_enu_Init+0x14>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    }

}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <SW_enu_getValue>:

ES_t SW_enu_getValue(u8 * Copy_u8_Value,SW_t * Copy_Au8_Switchs)
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	63 97       	sbiw	r28, 0x13	; 19
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	98 8b       	std	Y+16, r25	; 0x10
    11ce:	8f 87       	std	Y+15, r24	; 0x0f
    11d0:	7a 8b       	std	Y+18, r23	; 0x12
    11d2:	69 8b       	std	Y+17, r22	; 0x11

    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    11d4:	e9 89       	ldd	r30, Y+17	; 0x11
    11d6:	fa 89       	ldd	r31, Y+18	; 0x12
    11d8:	80 81       	ld	r24, Z
    11da:	e9 89       	ldd	r30, Y+17	; 0x11
    11dc:	fa 89       	ldd	r31, Y+18	; 0x12
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	2f 85       	ldd	r18, Y+15	; 0x0f
    11e2:	38 89       	ldd	r19, Y+16	; 0x10
    11e4:	69 2f       	mov	r22, r25
    11e6:	a9 01       	movw	r20, r18
    11e8:	0e 94 8a 2a 	call	0x5514	; 0x5514 <DIO_enu_GetPinValue>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a8 ec       	ldi	r26, 0xC8	; 200
    11f2:	b1 e4       	ldi	r27, 0x41	; 65
    11f4:	8b 87       	std	Y+11, r24	; 0x0b
    11f6:	9c 87       	std	Y+12, r25	; 0x0c
    11f8:	ad 87       	std	Y+13, r26	; 0x0d
    11fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1200:	8d 85       	ldd	r24, Y+13	; 0x0d
    1202:	9e 85       	ldd	r25, Y+14	; 0x0e
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	4a e7       	ldi	r20, 0x7A	; 122
    120a:	55 e4       	ldi	r21, 0x45	; 69
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	8f 83       	std	Y+7, r24	; 0x07
    1216:	98 87       	std	Y+8, r25	; 0x08
    1218:	a9 87       	std	Y+9, r26	; 0x09
    121a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    121c:	6f 81       	ldd	r22, Y+7	; 0x07
    121e:	78 85       	ldd	r23, Y+8	; 0x08
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	5f e3       	ldi	r21, 0x3F	; 63
    122c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1230:	88 23       	and	r24, r24
    1232:	2c f4       	brge	.+10     	; 0x123e <SW_enu_getValue+0x86>
		__ticks = 1;
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	3f c0       	rjmp	.+126    	; 0x12bc <SW_enu_getValue+0x104>
	else if (__tmp > 65535)
    123e:	6f 81       	ldd	r22, Y+7	; 0x07
    1240:	78 85       	ldd	r23, Y+8	; 0x08
    1242:	89 85       	ldd	r24, Y+9	; 0x09
    1244:	9a 85       	ldd	r25, Y+10	; 0x0a
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	3f ef       	ldi	r19, 0xFF	; 255
    124a:	4f e7       	ldi	r20, 0x7F	; 127
    124c:	57 e4       	ldi	r21, 0x47	; 71
    124e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1252:	18 16       	cp	r1, r24
    1254:	4c f5       	brge	.+82     	; 0x12a8 <SW_enu_getValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1256:	6b 85       	ldd	r22, Y+11	; 0x0b
    1258:	7c 85       	ldd	r23, Y+12	; 0x0c
    125a:	8d 85       	ldd	r24, Y+13	; 0x0d
    125c:	9e 85       	ldd	r25, Y+14	; 0x0e
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e2       	ldi	r20, 0x20	; 32
    1264:	51 e4       	ldi	r21, 0x41	; 65
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	bc 01       	movw	r22, r24
    1270:	cd 01       	movw	r24, r26
    1272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	9e 83       	std	Y+6, r25	; 0x06
    127c:	8d 83       	std	Y+5, r24	; 0x05
    127e:	0f c0       	rjmp	.+30     	; 0x129e <SW_enu_getValue+0xe6>
    1280:	80 e9       	ldi	r24, 0x90	; 144
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <SW_enu_getValue+0xd4>
    1290:	9c 83       	std	Y+4, r25	; 0x04
    1292:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	9e 83       	std	Y+6, r25	; 0x06
    129c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	69 f7       	brne	.-38     	; 0x1280 <SW_enu_getValue+0xc8>
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <SW_enu_getValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	8d 81       	ldd	r24, Y+5	; 0x05
    12be:	9e 81       	ldd	r25, Y+6	; 0x06
    12c0:	9a 83       	std	Y+2, r25	; 0x02
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <SW_enu_getValue+0x110>
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(25);
    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    12d0:	e9 89       	ldd	r30, Y+17	; 0x11
    12d2:	fa 89       	ldd	r31, Y+18	; 0x12
    12d4:	80 81       	ld	r24, Z
    12d6:	e9 89       	ldd	r30, Y+17	; 0x11
    12d8:	fa 89       	ldd	r31, Y+18	; 0x12
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    12de:	38 89       	ldd	r19, Y+16	; 0x10
    12e0:	69 2f       	mov	r22, r25
    12e2:	a9 01       	movw	r20, r18
    12e4:	0e 94 8a 2a 	call	0x5514	; 0x5514 <DIO_enu_GetPinValue>
    
}
    12e8:	63 96       	adiw	r28, 0x13	; 19
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	62 e0       	ldi	r22, 0x02	; 2
    131a:	41 e0       	ldi	r20, 0x01	; 1
    131c:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	63 e0       	ldi	r22, 0x03	; 3
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	62 e0       	ldi	r22, 0x02	; 2
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	63 e0       	ldi	r22, 0x03	; 3
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>

    return STATE_OK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	a5 97       	sbiw	r28, 0x25	; 37
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	8b a3       	std	Y+35, r24	; 0x23
    1370:	7d a3       	std	Y+37, r23	; 0x25
    1372:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1378:	8b a1       	ldd	r24, Y+35	; 0x23
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	21 f0       	breq	.+8      	; 0x1386 <STEP_Motor_enu_Rotate+0x2c>
    137e:	8b a1       	ldd	r24, Y+35	; 0x23
    1380:	88 23       	and	r24, r24
    1382:	09 f0       	breq	.+2      	; 0x1386 <STEP_Motor_enu_Rotate+0x2c>
    1384:	a5 c1       	rjmp	.+842    	; 0x16d0 <STEP_Motor_enu_Rotate+0x376>
    1386:	8c a1       	ldd	r24, Y+36	; 0x24
    1388:	9d a1       	ldd	r25, Y+37	; 0x25
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	89 36       	cpi	r24, 0x69	; 105
    138e:	92 07       	cpc	r25, r18
    1390:	08 f0       	brcs	.+2      	; 0x1394 <STEP_Motor_enu_Rotate+0x3a>
    1392:	9e c1       	rjmp	.+828    	; 0x16d0 <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    1394:	8f e0       	ldi	r24, 0x0F	; 15
    1396:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1398:	8c a1       	ldd	r24, Y+36	; 0x24
    139a:	9d a1       	ldd	r25, Y+37	; 0x25
    139c:	2a e5       	ldi	r18, 0x5A	; 90
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	b9 01       	movw	r22, r18
    13a2:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <__udivmodhi4>
    13a6:	cb 01       	movw	r24, r22
    13a8:	98 a3       	std	Y+32, r25	; 0x20
    13aa:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    13ac:	8b a1       	ldd	r24, Y+35	; 0x23
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <STEP_Motor_enu_Rotate+0x5a>
    13b2:	c5 c0       	rjmp	.+394    	; 0x153e <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    13b4:	1e 8e       	std	Y+30, r1	; 0x1e
    13b6:	b9 c0       	rjmp	.+370    	; 0x152a <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    13b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 01       	movw	r18, r24
    13c0:	23 70       	andi	r18, 0x03	; 3
    13c2:	30 70       	andi	r19, 0x00	; 0
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 2e       	mov	r0, r18
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <STEP_Motor_enu_Rotate+0x76>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	0a 94       	dec	r0
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <STEP_Motor_enu_Rotate+0x72>
    13d4:	98 2f       	mov	r25, r24
    13d6:	89 a1       	ldd	r24, Y+33	; 0x21
    13d8:	89 23       	and	r24, r25
    13da:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    13dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13de:	88 2f       	mov	r24, r24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	83 70       	andi	r24, 0x03	; 3
    13e4:	90 70       	andi	r25, 0x00	; 0
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <STEP_Motor_enu_Rotate+0x96>
    13ec:	89 e0       	ldi	r24, 0x09	; 9
    13ee:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    13f0:	89 a1       	ldd	r24, Y+33	; 0x21
    13f2:	98 2f       	mov	r25, r24
    13f4:	91 70       	andi	r25, 0x01	; 1
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	63 e0       	ldi	r22, 0x03	; 3
    13fa:	49 2f       	mov	r20, r25
    13fc:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    1400:	89 a1       	ldd	r24, Y+33	; 0x21
    1402:	86 95       	lsr	r24
    1404:	98 2f       	mov	r25, r24
    1406:	91 70       	andi	r25, 0x01	; 1
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	49 2f       	mov	r20, r25
    140e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    1412:	89 a1       	ldd	r24, Y+33	; 0x21
    1414:	86 95       	lsr	r24
    1416:	86 95       	lsr	r24
    1418:	98 2f       	mov	r25, r24
    141a:	91 70       	andi	r25, 0x01	; 1
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	49 2f       	mov	r20, r25
    1422:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    1426:	89 a1       	ldd	r24, Y+33	; 0x21
    1428:	86 95       	lsr	r24
    142a:	86 95       	lsr	r24
    142c:	86 95       	lsr	r24
    142e:	98 2f       	mov	r25, r24
    1430:	91 70       	andi	r25, 0x01	; 1
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	49 2f       	mov	r20, r25
    1438:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	aa ef       	ldi	r26, 0xFA	; 250
    1442:	b2 e4       	ldi	r27, 0x42	; 66
    1444:	89 8f       	std	Y+25, r24	; 0x19
    1446:	9a 8f       	std	Y+26, r25	; 0x1a
    1448:	ab 8f       	std	Y+27, r26	; 0x1b
    144a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    144c:	69 8d       	ldd	r22, Y+25	; 0x19
    144e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1450:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1452:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a e7       	ldi	r20, 0x7A	; 122
    145a:	55 e4       	ldi	r21, 0x45	; 69
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	8d 8b       	std	Y+21, r24	; 0x15
    1466:	9e 8b       	std	Y+22, r25	; 0x16
    1468:	af 8b       	std	Y+23, r26	; 0x17
    146a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    146c:	6d 89       	ldd	r22, Y+21	; 0x15
    146e:	7e 89       	ldd	r23, Y+22	; 0x16
    1470:	8f 89       	ldd	r24, Y+23	; 0x17
    1472:	98 8d       	ldd	r25, Y+24	; 0x18
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	40 e8       	ldi	r20, 0x80	; 128
    147a:	5f e3       	ldi	r21, 0x3F	; 63
    147c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1480:	88 23       	and	r24, r24
    1482:	2c f4       	brge	.+10     	; 0x148e <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 8b       	std	Y+20, r25	; 0x14
    148a:	8b 8b       	std	Y+19, r24	; 0x13
    148c:	3f c0       	rjmp	.+126    	; 0x150c <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    148e:	6d 89       	ldd	r22, Y+21	; 0x15
    1490:	7e 89       	ldd	r23, Y+22	; 0x16
    1492:	8f 89       	ldd	r24, Y+23	; 0x17
    1494:	98 8d       	ldd	r25, Y+24	; 0x18
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	3f ef       	ldi	r19, 0xFF	; 255
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	57 e4       	ldi	r21, 0x47	; 71
    149e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	4c f5       	brge	.+82     	; 0x14f8 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14a6:	69 8d       	ldd	r22, Y+25	; 0x19
    14a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	bc 01       	movw	r22, r24
    14c0:	cd 01       	movw	r24, r26
    14c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	9c 8b       	std	Y+20, r25	; 0x14
    14cc:	8b 8b       	std	Y+19, r24	; 0x13
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <STEP_Motor_enu_Rotate+0x194>
    14d0:	80 e9       	ldi	r24, 0x90	; 144
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	9a 8b       	std	Y+18, r25	; 0x12
    14d6:	89 8b       	std	Y+17, r24	; 0x11
    14d8:	89 89       	ldd	r24, Y+17	; 0x11
    14da:	9a 89       	ldd	r25, Y+18	; 0x12
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	f1 f7       	brne	.-4      	; 0x14dc <STEP_Motor_enu_Rotate+0x182>
    14e0:	9a 8b       	std	Y+18, r25	; 0x12
    14e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e4:	8b 89       	ldd	r24, Y+19	; 0x13
    14e6:	9c 89       	ldd	r25, Y+20	; 0x14
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	9c 8b       	std	Y+20, r25	; 0x14
    14ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ee:	8b 89       	ldd	r24, Y+19	; 0x13
    14f0:	9c 89       	ldd	r25, Y+20	; 0x14
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	69 f7       	brne	.-38     	; 0x14d0 <STEP_Motor_enu_Rotate+0x176>
    14f6:	14 c0       	rjmp	.+40     	; 0x1520 <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f8:	6d 89       	ldd	r22, Y+21	; 0x15
    14fa:	7e 89       	ldd	r23, Y+22	; 0x16
    14fc:	8f 89       	ldd	r24, Y+23	; 0x17
    14fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	9c 8b       	std	Y+20, r25	; 0x14
    150a:	8b 8b       	std	Y+19, r24	; 0x13
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	98 8b       	std	Y+16, r25	; 0x10
    1512:	8f 87       	std	Y+15, r24	; 0x0f
    1514:	8f 85       	ldd	r24, Y+15	; 0x0f
    1516:	98 89       	ldd	r25, Y+16	; 0x10
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	f1 f7       	brne	.-4      	; 0x1518 <STEP_Motor_enu_Rotate+0x1be>
    151c:	98 8b       	std	Y+16, r25	; 0x10
    151e:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    1520:	8f e0       	ldi	r24, 0x0F	; 15
    1522:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1524:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1526:	8f 5f       	subi	r24, 0xFF	; 255
    1528:	8e 8f       	std	Y+30, r24	; 0x1e
    152a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1532:	98 a1       	ldd	r25, Y+32	; 0x20
    1534:	28 17       	cp	r18, r24
    1536:	39 07       	cpc	r19, r25
    1538:	08 f4       	brcc	.+2      	; 0x153c <STEP_Motor_enu_Rotate+0x1e2>
    153a:	3e cf       	rjmp	.-388    	; 0x13b8 <STEP_Motor_enu_Rotate+0x5e>
    153c:	ca c0       	rjmp	.+404    	; 0x16d2 <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    153e:	8b a1       	ldd	r24, Y+35	; 0x23
    1540:	88 23       	and	r24, r24
    1542:	09 f0       	breq	.+2      	; 0x1546 <STEP_Motor_enu_Rotate+0x1ec>
    1544:	c6 c0       	rjmp	.+396    	; 0x16d2 <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1546:	1d 8e       	std	Y+29, r1	; 0x1d
    1548:	b9 c0       	rjmp	.+370    	; 0x16bc <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    154a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	9c 01       	movw	r18, r24
    1552:	23 70       	andi	r18, 0x03	; 3
    1554:	30 70       	andi	r19, 0x00	; 0
    1556:	83 e0       	ldi	r24, 0x03	; 3
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	02 2e       	mov	r0, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <STEP_Motor_enu_Rotate+0x208>
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	0a 94       	dec	r0
    1564:	e2 f7       	brpl	.-8      	; 0x155e <STEP_Motor_enu_Rotate+0x204>
    1566:	98 2f       	mov	r25, r24
    1568:	89 a1       	ldd	r24, Y+33	; 0x21
    156a:	89 23       	and	r24, r25
    156c:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    156e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	83 70       	andi	r24, 0x03	; 3
    1576:	90 70       	andi	r25, 0x00	; 0
    1578:	83 30       	cpi	r24, 0x03	; 3
    157a:	91 05       	cpc	r25, r1
    157c:	11 f4       	brne	.+4      	; 0x1582 <STEP_Motor_enu_Rotate+0x228>
    157e:	89 e0       	ldi	r24, 0x09	; 9
    1580:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    1582:	89 a1       	ldd	r24, Y+33	; 0x21
    1584:	98 2f       	mov	r25, r24
    1586:	91 70       	andi	r25, 0x01	; 1
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	49 2f       	mov	r20, r25
    158e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    1592:	89 a1       	ldd	r24, Y+33	; 0x21
    1594:	86 95       	lsr	r24
    1596:	98 2f       	mov	r25, r24
    1598:	91 70       	andi	r25, 0x01	; 1
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	49 2f       	mov	r20, r25
    15a0:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    15a4:	89 a1       	ldd	r24, Y+33	; 0x21
    15a6:	86 95       	lsr	r24
    15a8:	86 95       	lsr	r24
    15aa:	98 2f       	mov	r25, r24
    15ac:	91 70       	andi	r25, 0x01	; 1
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	49 2f       	mov	r20, r25
    15b4:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	86 95       	lsr	r24
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	98 2f       	mov	r25, r24
    15c2:	91 70       	andi	r25, 0x01	; 1
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	63 e0       	ldi	r22, 0x03	; 3
    15c8:	49 2f       	mov	r20, r25
    15ca:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	aa ef       	ldi	r26, 0xFA	; 250
    15d4:	b2 e4       	ldi	r27, 0x42	; 66
    15d6:	8b 87       	std	Y+11, r24	; 0x0b
    15d8:	9c 87       	std	Y+12, r25	; 0x0c
    15da:	ad 87       	std	Y+13, r26	; 0x0d
    15dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15de:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	4a e7       	ldi	r20, 0x7A	; 122
    15ec:	55 e4       	ldi	r21, 0x45	; 69
    15ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	8f 83       	std	Y+7, r24	; 0x07
    15f8:	98 87       	std	Y+8, r25	; 0x08
    15fa:	a9 87       	std	Y+9, r26	; 0x09
    15fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1600:	78 85       	ldd	r23, Y+8	; 0x08
    1602:	89 85       	ldd	r24, Y+9	; 0x09
    1604:	9a 85       	ldd	r25, Y+10	; 0x0a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	2c f4       	brge	.+10     	; 0x1620 <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	3f c0       	rjmp	.+126    	; 0x169e <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1620:	6f 81       	ldd	r22, Y+7	; 0x07
    1622:	78 85       	ldd	r23, Y+8	; 0x08
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	3f ef       	ldi	r19, 0xFF	; 255
    162c:	4f e7       	ldi	r20, 0x7F	; 127
    162e:	57 e4       	ldi	r21, 0x47	; 71
    1630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1634:	18 16       	cp	r1, r24
    1636:	4c f5       	brge	.+82     	; 0x168a <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	bc 01       	movw	r22, r24
    1652:	cd 01       	movw	r24, r26
    1654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	8d 83       	std	Y+5, r24	; 0x05
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <STEP_Motor_enu_Rotate+0x326>
    1662:	80 e9       	ldi	r24, 0x90	; 144
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	9c 83       	std	Y+4, r25	; 0x04
    1668:	8b 83       	std	Y+3, r24	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <STEP_Motor_enu_Rotate+0x314>
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	69 f7       	brne	.-38     	; 0x1662 <STEP_Motor_enu_Rotate+0x308>
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168a:	6f 81       	ldd	r22, Y+7	; 0x07
    168c:	78 85       	ldd	r23, Y+8	; 0x08
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	8d 81       	ldd	r24, Y+5	; 0x05
    16a0:	9e 81       	ldd	r25, Y+6	; 0x06
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <STEP_Motor_enu_Rotate+0x350>
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    16b2:	8f e0       	ldi	r24, 0x0F	; 15
    16b4:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    16b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8d 8f       	std	Y+29, r24	; 0x1d
    16bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16c4:	98 a1       	ldd	r25, Y+32	; 0x20
    16c6:	28 17       	cp	r18, r24
    16c8:	39 07       	cpc	r19, r25
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <STEP_Motor_enu_Rotate+0x374>
    16cc:	3e cf       	rjmp	.-388    	; 0x154a <STEP_Motor_enu_Rotate+0x1f0>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    16d0:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    16d2:	8a a1       	ldd	r24, Y+34	; 0x22
}
    16d4:	a5 96       	adiw	r28, 0x25	; 37
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	2e 97       	sbiw	r28, 0x0e	; 14
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	62 e0       	ldi	r22, 0x02	; 2
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	63 e0       	ldi	r22, 0x03	; 3
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	aa ef       	ldi	r26, 0xFA	; 250
    1728:	b2 e4       	ldi	r27, 0x42	; 66
    172a:	8b 87       	std	Y+11, r24	; 0x0b
    172c:	9c 87       	std	Y+12, r25	; 0x0c
    172e:	ad 87       	std	Y+13, r26	; 0x0d
    1730:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1732:	6b 85       	ldd	r22, Y+11	; 0x0b
    1734:	7c 85       	ldd	r23, Y+12	; 0x0c
    1736:	8d 85       	ldd	r24, Y+13	; 0x0d
    1738:	9e 85       	ldd	r25, Y+14	; 0x0e
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4a e7       	ldi	r20, 0x7A	; 122
    1740:	55 e4       	ldi	r21, 0x45	; 69
    1742:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	8f 83       	std	Y+7, r24	; 0x07
    174c:	98 87       	std	Y+8, r25	; 0x08
    174e:	a9 87       	std	Y+9, r26	; 0x09
    1750:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1752:	6f 81       	ldd	r22, Y+7	; 0x07
    1754:	78 85       	ldd	r23, Y+8	; 0x08
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e8       	ldi	r20, 0x80	; 128
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1766:	88 23       	and	r24, r24
    1768:	2c f4       	brge	.+10     	; 0x1774 <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	3f c0       	rjmp	.+126    	; 0x17f2 <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1774:	6f 81       	ldd	r22, Y+7	; 0x07
    1776:	78 85       	ldd	r23, Y+8	; 0x08
    1778:	89 85       	ldd	r24, Y+9	; 0x09
    177a:	9a 85       	ldd	r25, Y+10	; 0x0a
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	57 e4       	ldi	r21, 0x47	; 71
    1784:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1788:	18 16       	cp	r1, r24
    178a:	4c f5       	brge	.+82     	; 0x17de <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178c:	6b 85       	ldd	r22, Y+11	; 0x0b
    178e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1790:	8d 85       	ldd	r24, Y+13	; 0x0d
    1792:	9e 85       	ldd	r25, Y+14	; 0x0e
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e2       	ldi	r20, 0x20	; 32
    179a:	51 e4       	ldi	r21, 0x41	; 65
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <STEP_Motor_enu_Stop+0xee>
    17b6:	80 e9       	ldi	r24, 0x90	; 144
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	8b 83       	std	Y+3, r24	; 0x03
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	f1 f7       	brne	.-4      	; 0x17c2 <STEP_Motor_enu_Stop+0xdc>
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	69 f7       	brne	.-38     	; 0x17b6 <STEP_Motor_enu_Stop+0xd0>
    17dc:	14 c0       	rjmp	.+40     	; 0x1806 <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	78 85       	ldd	r23, Y+8	; 0x08
    17e2:	89 85       	ldd	r24, Y+9	; 0x09
    17e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	9e 83       	std	Y+6, r25	; 0x06
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	9a 81       	ldd	r25, Y+2	; 0x02
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <STEP_Motor_enu_Stop+0x118>
    1802:	9a 83       	std	Y+2, r25	; 0x02
    1804:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    1806:	81 e0       	ldi	r24, 0x01	; 1
}
    1808:	2e 96       	adiw	r28, 0x0e	; 14
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	00 d0       	rcall	.+0      	; 0x1820 <sevenSeg_enu_displayNum+0x6>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	66 e0       	ldi	r22, 0x06	; 6
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	0e 94 23 2b 	call	0x5646	; 0x5646 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	8a 30       	cpi	r24, 0x0A	; 10
    1842:	78 f5       	brcc	.+94     	; 0x18a2 <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	66 e0       	ldi	r22, 0x06	; 6
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	24 c0       	rjmp	.+72     	; 0x189a <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	fc 01       	movw	r30, r24
    185a:	e6 5d       	subi	r30, 0xD6	; 214
    185c:	fe 4f       	sbci	r31, 0xFE	; 254
    185e:	40 81       	ld	r20, Z
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	fc 01       	movw	r30, r24
    1868:	e0 5e       	subi	r30, 0xE0	; 224
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	80 81       	ld	r24, Z
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	89 81       	ldd	r24, Y+1	; 0x01
    1874:	88 2f       	mov	r24, r24
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	b9 01       	movw	r22, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <sevenSeg_enu_displayNum+0x66>
    187c:	75 95       	asr	r23
    187e:	67 95       	ror	r22
    1880:	8a 95       	dec	r24
    1882:	e2 f7       	brpl	.-8      	; 0x187c <sevenSeg_enu_displayNum+0x62>
    1884:	cb 01       	movw	r24, r22
    1886:	98 2f       	mov	r25, r24
    1888:	91 70       	andi	r25, 0x01	; 1
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	64 2f       	mov	r22, r20
    188e:	49 2f       	mov	r20, r25
    1890:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	87 30       	cpi	r24, 0x07	; 7
    189e:	c8 f2       	brcs	.-78     	; 0x1852 <sevenSeg_enu_displayNum+0x38>
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    18a2:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <Servo_enu_Init>:
#include"../../1-MCAL/Timers/Timer_Interface.h"

#include"Servo_Config.h"
#include"Servo_Private.h"

ES_t Servo_enu_Init(u8 Copy_Motor_PD4_State,u8 Copy_Motor_PD5_State){
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <Servo_enu_Init+0x6>
    18b8:	0f 92       	push	r0
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_Motor_PD4_State<2)&&(Copy_Motor_PD5_State<2)){
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	10 f5       	brcc	.+68     	; 0x1910 <Servo_enu_Init+0x5e>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	82 30       	cpi	r24, 0x02	; 2
    18d0:	f8 f4       	brcc	.+62     	; 0x1910 <Servo_enu_Init+0x5e>
        if(Copy_Motor_PD4_State == CONNECTED){
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	51 f4       	brne	.+20     	; 0x18ec <Servo_enu_Init+0x3a>
            DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN4, DIO_U8_OUTPUT);
    18d8:	83 e0       	ldi	r24, 0x03	; 3
    18da:	64 e0       	ldi	r22, 0x04	; 4
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
            Timers_enu_Init(TIMER1, FAST_PWM_NON_INVERTING_COMB, CLK_8);
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	68 e0       	ldi	r22, 0x08	; 8
    18e6:	42 e0       	ldi	r20, 0x02	; 2
    18e8:	0e 94 0b 1b 	call	0x3616	; 0x3616 <Timers_enu_Init>
        }
        if(Copy_Motor_PD5_State == CONNECTED){
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	81 30       	cpi	r24, 0x01	; 1
    18f0:	51 f4       	brne	.+20     	; 0x1906 <Servo_enu_Init+0x54>
            DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN5, DIO_U8_OUTPUT);
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	65 e0       	ldi	r22, 0x05	; 5
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
            Timers_enu_Init(TIMER1, FAST_PWM_NON_INVERTING_COMA, CLK_8);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	67 e0       	ldi	r22, 0x07	; 7
    1900:	42 e0       	ldi	r20, 0x02	; 2
    1902:	0e 94 0b 1b 	call	0x3616	; 0x3616 <Timers_enu_Init>
        }
        Timers_enu_Timer1_setTopValue(SERVO_COMPLETE_CYCLE_TICKS - 1);
    1906:	8f e3       	ldi	r24, 0x3F	; 63
    1908:	9c e9       	ldi	r25, 0x9C	; 156
    190a:	0e 94 87 20 	call	0x410e	; 0x410e <Timers_enu_Timer1_setTopValue>
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <Servo_enu_Init+0x60>
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    1910:	19 82       	std	Y+1, r1	; 0x01
    }
    return STATE_NOT_OK;
    1912:	80 e0       	ldi	r24, 0x00	; 0
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <Servo_enu_SetAngle>:
ES_t Servo_enu_SetAngle(u8 Copy_Motor,u8 Copy_u8_Angle){
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	27 97       	sbiw	r28, 0x07	; 7
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	8c 83       	std	Y+4, r24	; 0x04
    1936:	6d 83       	std	Y+5, r22	; 0x05
    ES_t Local_u8_errorState = STATE_OK;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	8b 83       	std	Y+3, r24	; 0x03
    if((Copy_Motor<=NUM_OF_MOTORS)&&(Copy_u8_Angle<=SERVO_MAX_ANGLE)){
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	08 f0       	brcs	.+2      	; 0x1944 <Servo_enu_SetAngle+0x24>
    1942:	46 c0       	rjmp	.+140    	; 0x19d0 <Servo_enu_SetAngle+0xb0>
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	85 3b       	cpi	r24, 0xB5	; 181
    1948:	08 f0       	brcs	.+2      	; 0x194c <Servo_enu_SetAngle+0x2c>
    194a:	42 c0       	rjmp	.+132    	; 0x19d0 <Servo_enu_SetAngle+0xb0>
        u16 Servo_u16_OCR_Value = ((SERVO_MIN_TIME+(Copy_u8_Angle*SERVO_MIN_TIME)/SERVO_MAX_ANGLE)*2)-1;
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e0       	ldi	r26, 0x00	; 0
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	28 ee       	ldi	r18, 0xE8	; 232
    1958:	33 e0       	ldi	r19, 0x03	; 3
    195a:	40 e0       	ldi	r20, 0x00	; 0
    195c:	50 e0       	ldi	r21, 0x00	; 0
    195e:	bc 01       	movw	r22, r24
    1960:	cd 01       	movw	r24, r26
    1962:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__mulsi3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	24 eb       	ldi	r18, 0xB4	; 180
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__udivmodsi4>
    197a:	da 01       	movw	r26, r20
    197c:	c9 01       	movw	r24, r18
    197e:	88 51       	subi	r24, 0x18	; 24
    1980:	9c 4f       	sbci	r25, 0xFC	; 252
    1982:	af 4f       	sbci	r26, 0xFF	; 255
    1984:	bf 4f       	sbci	r27, 0xFF	; 255
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	aa 1f       	adc	r26, r26
    198c:	bb 1f       	adc	r27, r27
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	9a 83       	std	Y+2, r25	; 0x02
    1992:	89 83       	std	Y+1, r24	; 0x01
        switch (Copy_Motor)
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	3f 83       	std	Y+7, r19	; 0x07
    199c:	2e 83       	std	Y+6, r18	; 0x06
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	9f 81       	ldd	r25, Y+7	; 0x07
    19a2:	81 30       	cpi	r24, 0x01	; 1
    19a4:	91 05       	cpc	r25, r1
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <Servo_enu_SetAngle+0x94>
    19a8:	2e 81       	ldd	r18, Y+6	; 0x06
    19aa:	3f 81       	ldd	r19, Y+7	; 0x07
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	41 f0       	breq	.+16     	; 0x19c2 <Servo_enu_SetAngle+0xa2>
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <Servo_enu_SetAngle+0xb2>
        {
        case MOTOR_1:Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_B,Servo_u16_OCR_Value); break;
    19b4:	29 81       	ldd	r18, Y+1	; 0x01
    19b6:	3a 81       	ldd	r19, Y+2	; 0x02
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	b9 01       	movw	r22, r18
    19bc:	0e 94 9a 20 	call	0x4134	; 0x4134 <Timers_enu_Timer1SetCompareValue>
    19c0:	08 c0       	rjmp	.+16     	; 0x19d2 <Servo_enu_SetAngle+0xb2>
        case MOTOR_2:Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_A,Servo_u16_OCR_Value); break;
    19c2:	29 81       	ldd	r18, Y+1	; 0x01
    19c4:	3a 81       	ldd	r19, Y+2	; 0x02
    19c6:	80 e0       	ldi	r24, 0x00	; 0
    19c8:	b9 01       	movw	r22, r18
    19ca:	0e 94 9a 20 	call	0x4134	; 0x4134 <Timers_enu_Timer1SetCompareValue>
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <Servo_enu_SetAngle+0xb2>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    19d0:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19d4:	27 96       	adiw	r28, 0x07	; 7
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <Servos_enu_Stop>:
ES_t Servos_enu_Stop(void){
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    Timers_enu_Stop(TIMER1);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <Timers_enu_Stop>
    return STATE_OK;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <LCD_enu_SendCmnd>:
#include "../../1-MCAL/DIO/DIO_interface.h"
/*HAL*/
#include "../../2-HAL/LCD/LCD_Private.h"
#include "../../2-HAL/LCD/LCD_Config.h"
ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	e1 97       	sbiw	r28, 0x31	; 49
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	89 ab       	std	Y+49, r24	; 0x31
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
    /* RS = 0 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_LOW);
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	40 e0       	ldi	r20, 0x00	; 0
    1a18:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /*Write Command*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_7BIT) & MASK_BIT);
    1a26:	89 a9       	ldd	r24, Y+49	; 0x31
    1a28:	98 2f       	mov	r25, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	99 27       	eor	r25, r25
    1a2e:	99 1f       	adc	r25, r25
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	66 e0       	ldi	r22, 0x06	; 6
    1a34:	49 2f       	mov	r20, r25
    1a36:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_6BIT) & MASK_BIT);
    1a3a:	89 a9       	ldd	r24, Y+49	; 0x31
    1a3c:	82 95       	swap	r24
    1a3e:	86 95       	lsr	r24
    1a40:	86 95       	lsr	r24
    1a42:	83 70       	andi	r24, 0x03	; 3
    1a44:	98 2f       	mov	r25, r24
    1a46:	91 70       	andi	r25, 0x01	; 1
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	65 e0       	ldi	r22, 0x05	; 5
    1a4c:	49 2f       	mov	r20, r25
    1a4e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_5BIT) & MASK_BIT);
    1a52:	89 a9       	ldd	r24, Y+49	; 0x31
    1a54:	82 95       	swap	r24
    1a56:	86 95       	lsr	r24
    1a58:	87 70       	andi	r24, 0x07	; 7
    1a5a:	98 2f       	mov	r25, r24
    1a5c:	91 70       	andi	r25, 0x01	; 1
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	64 e0       	ldi	r22, 0x04	; 4
    1a62:	49 2f       	mov	r20, r25
    1a64:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_4BIT) & MASK_BIT);
    1a68:	89 a9       	ldd	r24, Y+49	; 0x31
    1a6a:	82 95       	swap	r24
    1a6c:	8f 70       	andi	r24, 0x0F	; 15
    1a6e:	98 2f       	mov	r25, r24
    1a70:	91 70       	andi	r25, 0x01	; 1
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	63 e0       	ldi	r22, 0x03	; 3
    1a76:	49 2f       	mov	r20, r25
    1a78:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	62 e0       	ldi	r22, 0x02	; 2
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a0 e8       	ldi	r26, 0x80	; 128
    1a8c:	bf e3       	ldi	r27, 0x3F	; 63
    1a8e:	8d a7       	std	Y+45, r24	; 0x2d
    1a90:	9e a7       	std	Y+46, r25	; 0x2e
    1a92:	af a7       	std	Y+47, r26	; 0x2f
    1a94:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a96:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a98:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a9e:	2b ea       	ldi	r18, 0xAB	; 171
    1aa0:	3a ea       	ldi	r19, 0xAA	; 170
    1aa2:	4a ea       	ldi	r20, 0xAA	; 170
    1aa4:	50 e4       	ldi	r21, 0x40	; 64
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	89 a7       	std	Y+41, r24	; 0x29
    1ab0:	9a a7       	std	Y+42, r25	; 0x2a
    1ab2:	ab a7       	std	Y+43, r26	; 0x2b
    1ab4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ab6:	69 a5       	ldd	r22, Y+41	; 0x29
    1ab8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1aba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1abc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	1c f4       	brge	.+6      	; 0x1ad4 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	88 a7       	std	Y+40, r24	; 0x28
    1ad2:	91 c0       	rjmp	.+290    	; 0x1bf6 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1ad4:	69 a5       	ldd	r22, Y+41	; 0x29
    1ad6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ad8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ada:	9c a5       	ldd	r25, Y+44	; 0x2c
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	4f e7       	ldi	r20, 0x7F	; 127
    1ae2:	53 e4       	ldi	r21, 0x43	; 67
    1ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae8:	18 16       	cp	r1, r24
    1aea:	0c f0       	brlt	.+2      	; 0x1aee <LCD_enu_SendCmnd+0xf2>
    1aec:	7b c0       	rjmp	.+246    	; 0x1be4 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1aee:	6d a5       	ldd	r22, Y+45	; 0x2d
    1af0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af4:	98 a9       	ldd	r25, Y+48	; 0x30
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a e7       	ldi	r20, 0x7A	; 122
    1afc:	54 e4       	ldi	r21, 0x44	; 68
    1afe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8c a3       	std	Y+36, r24	; 0x24
    1b08:	9d a3       	std	Y+37, r25	; 0x25
    1b0a:	ae a3       	std	Y+38, r26	; 0x26
    1b0c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b0e:	6c a1       	ldd	r22, Y+36	; 0x24
    1b10:	7d a1       	ldd	r23, Y+37	; 0x25
    1b12:	8e a1       	ldd	r24, Y+38	; 0x26
    1b14:	9f a1       	ldd	r25, Y+39	; 0x27
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a e7       	ldi	r20, 0x7A	; 122
    1b1c:	55 e4       	ldi	r21, 0x45	; 69
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	88 a3       	std	Y+32, r24	; 0x20
    1b28:	99 a3       	std	Y+33, r25	; 0x21
    1b2a:	aa a3       	std	Y+34, r26	; 0x22
    1b2c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1b30:	79 a1       	ldd	r23, Y+33	; 0x21
    1b32:	8a a1       	ldd	r24, Y+34	; 0x22
    1b34:	9b a1       	ldd	r25, Y+35	; 0x23
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	5f e3       	ldi	r21, 0x3F	; 63
    1b3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b42:	88 23       	and	r24, r24
    1b44:	2c f4       	brge	.+10     	; 0x1b50 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	9f 8f       	std	Y+31, r25	; 0x1f
    1b4c:	8e 8f       	std	Y+30, r24	; 0x1e
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1b50:	68 a1       	ldd	r22, Y+32	; 0x20
    1b52:	79 a1       	ldd	r23, Y+33	; 0x21
    1b54:	8a a1       	ldd	r24, Y+34	; 0x22
    1b56:	9b a1       	ldd	r25, Y+35	; 0x23
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	57 e4       	ldi	r21, 0x47	; 71
    1b60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	4c f5       	brge	.+82     	; 0x1bba <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b68:	6c a1       	ldd	r22, Y+36	; 0x24
    1b6a:	7d a1       	ldd	r23, Y+37	; 0x25
    1b6c:	8e a1       	ldd	r24, Y+38	; 0x26
    1b6e:	9f a1       	ldd	r25, Y+39	; 0x27
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	40 e2       	ldi	r20, 0x20	; 32
    1b76:	51 e4       	ldi	r21, 0x41	; 65
    1b78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	bc 01       	movw	r22, r24
    1b82:	cd 01       	movw	r24, r26
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9f 8f       	std	Y+31, r25	; 0x1f
    1b8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b90:	0f c0       	rjmp	.+30     	; 0x1bb0 <LCD_enu_SendCmnd+0x1b4>
    1b92:	80 e9       	ldi	r24, 0x90	; 144
    1b94:	91 e0       	ldi	r25, 0x01	; 1
    1b96:	9d 8f       	std	Y+29, r25	; 0x1d
    1b98:	8c 8f       	std	Y+28, r24	; 0x1c
    1b9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b9c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_enu_SendCmnd+0x1a2>
    1ba2:	9d 8f       	std	Y+29, r25	; 0x1d
    1ba4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	9f 8f       	std	Y+31, r25	; 0x1f
    1bae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	69 f7       	brne	.-38     	; 0x1b92 <LCD_enu_SendCmnd+0x196>
    1bb8:	24 c0       	rjmp	.+72     	; 0x1c02 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bba:	68 a1       	ldd	r22, Y+32	; 0x20
    1bbc:	79 a1       	ldd	r23, Y+33	; 0x21
    1bbe:	8a a1       	ldd	r24, Y+34	; 0x22
    1bc0:	9b a1       	ldd	r25, Y+35	; 0x23
    1bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	9f 8f       	std	Y+31, r25	; 0x1f
    1bcc:	8e 8f       	std	Y+30, r24	; 0x1e
    1bce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bd2:	9b 8f       	std	Y+27, r25	; 0x1b
    1bd4:	8a 8f       	std	Y+26, r24	; 0x1a
    1bd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_enu_SendCmnd+0x1de>
    1bde:	9b 8f       	std	Y+27, r25	; 0x1b
    1be0:	8a 8f       	std	Y+26, r24	; 0x1a
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1be4:	69 a5       	ldd	r22, Y+41	; 0x29
    1be6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1be8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bea:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	88 a7       	std	Y+40, r24	; 0x28
    1bf6:	88 a5       	ldd	r24, Y+40	; 0x28
    1bf8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bfa:	89 8d       	ldd	r24, Y+25	; 0x19
    1bfc:	8a 95       	dec	r24
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_enu_SendCmnd+0x200>
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	62 e0       	ldi	r22, 0x02	; 2
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /*Write the rest of the cmnd*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_3BIT) & MASK_BIT);
    1c0c:	89 a9       	ldd	r24, Y+49	; 0x31
    1c0e:	86 95       	lsr	r24
    1c10:	86 95       	lsr	r24
    1c12:	86 95       	lsr	r24
    1c14:	98 2f       	mov	r25, r24
    1c16:	91 70       	andi	r25, 0x01	; 1
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	66 e0       	ldi	r22, 0x06	; 6
    1c1c:	49 2f       	mov	r20, r25
    1c1e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_2BIT) & MASK_BIT);
    1c22:	89 a9       	ldd	r24, Y+49	; 0x31
    1c24:	86 95       	lsr	r24
    1c26:	86 95       	lsr	r24
    1c28:	98 2f       	mov	r25, r24
    1c2a:	91 70       	andi	r25, 0x01	; 1
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	65 e0       	ldi	r22, 0x05	; 5
    1c30:	49 2f       	mov	r20, r25
    1c32:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_1BIT) & MASK_BIT);
    1c36:	89 a9       	ldd	r24, Y+49	; 0x31
    1c38:	86 95       	lsr	r24
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	91 70       	andi	r25, 0x01	; 1
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	64 e0       	ldi	r22, 0x04	; 4
    1c42:	49 2f       	mov	r20, r25
    1c44:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_0BIT) & MASK_BIT);
    1c48:	89 a9       	ldd	r24, Y+49	; 0x31
    1c4a:	98 2f       	mov	r25, r24
    1c4c:	91 70       	andi	r25, 0x01	; 1
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	63 e0       	ldi	r22, 0x03	; 3
    1c52:	49 2f       	mov	r20, r25
    1c54:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 e8       	ldi	r26, 0x80	; 128
    1c68:	bf e3       	ldi	r27, 0x3F	; 63
    1c6a:	8d 8b       	std	Y+21, r24	; 0x15
    1c6c:	9e 8b       	std	Y+22, r25	; 0x16
    1c6e:	af 8b       	std	Y+23, r26	; 0x17
    1c70:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c72:	6d 89       	ldd	r22, Y+21	; 0x15
    1c74:	7e 89       	ldd	r23, Y+22	; 0x16
    1c76:	8f 89       	ldd	r24, Y+23	; 0x17
    1c78:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7a:	2b ea       	ldi	r18, 0xAB	; 171
    1c7c:	3a ea       	ldi	r19, 0xAA	; 170
    1c7e:	4a ea       	ldi	r20, 0xAA	; 170
    1c80:	50 e4       	ldi	r21, 0x40	; 64
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	89 8b       	std	Y+17, r24	; 0x11
    1c8c:	9a 8b       	std	Y+18, r25	; 0x12
    1c8e:	ab 8b       	std	Y+19, r26	; 0x13
    1c90:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c92:	69 89       	ldd	r22, Y+17	; 0x11
    1c94:	7a 89       	ldd	r23, Y+18	; 0x12
    1c96:	8b 89       	ldd	r24, Y+19	; 0x13
    1c98:	9c 89       	ldd	r25, Y+20	; 0x14
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	1c f4       	brge	.+6      	; 0x1cb0 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	88 8b       	std	Y+16, r24	; 0x10
    1cae:	91 c0       	rjmp	.+290    	; 0x1dd2 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    1cb0:	69 89       	ldd	r22, Y+17	; 0x11
    1cb2:	7a 89       	ldd	r23, Y+18	; 0x12
    1cb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	53 e4       	ldi	r21, 0x43	; 67
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	0c f0       	brlt	.+2      	; 0x1cca <LCD_enu_SendCmnd+0x2ce>
    1cc8:	7b c0       	rjmp	.+246    	; 0x1dc0 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1cca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cce:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	4a e7       	ldi	r20, 0x7A	; 122
    1cd8:	54 e4       	ldi	r21, 0x44	; 68
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	8c 87       	std	Y+12, r24	; 0x0c
    1ce4:	9d 87       	std	Y+13, r25	; 0x0d
    1ce6:	ae 87       	std	Y+14, r26	; 0x0e
    1ce8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cec:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cee:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a e7       	ldi	r20, 0x7A	; 122
    1cf8:	55 e4       	ldi	r21, 0x45	; 69
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	88 87       	std	Y+8, r24	; 0x08
    1d04:	99 87       	std	Y+9, r25	; 0x09
    1d06:	aa 87       	std	Y+10, r26	; 0x0a
    1d08:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d0a:	68 85       	ldd	r22, Y+8	; 0x08
    1d0c:	79 85       	ldd	r23, Y+9	; 0x09
    1d0e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d10:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9f 83       	std	Y+7, r25	; 0x07
    1d28:	8e 83       	std	Y+6, r24	; 0x06
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1d2c:	68 85       	ldd	r22, Y+8	; 0x08
    1d2e:	79 85       	ldd	r23, Y+9	; 0x09
    1d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d32:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d46:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9f 83       	std	Y+7, r25	; 0x07
    1d6a:	8e 83       	std	Y+6, r24	; 0x06
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <LCD_enu_SendCmnd+0x390>
    1d6e:	80 e9       	ldi	r24, 0x90	; 144
    1d70:	91 e0       	ldi	r25, 0x01	; 1
    1d72:	9d 83       	std	Y+5, r25	; 0x05
    1d74:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d76:	8c 81       	ldd	r24, Y+4	; 0x04
    1d78:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <LCD_enu_SendCmnd+0x37e>
    1d7e:	9d 83       	std	Y+5, r25	; 0x05
    1d80:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8e 81       	ldd	r24, Y+6	; 0x06
    1d84:	9f 81       	ldd	r25, Y+7	; 0x07
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9f 83       	std	Y+7, r25	; 0x07
    1d8a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <LCD_enu_SendCmnd+0x372>
    1d94:	24 c0       	rjmp	.+72     	; 0x1dde <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	68 85       	ldd	r22, Y+8	; 0x08
    1d98:	79 85       	ldd	r23, Y+9	; 0x09
    1d9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9f 83       	std	Y+7, r25	; 0x07
    1da8:	8e 83       	std	Y+6, r24	; 0x06
    1daa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dac:	9f 81       	ldd	r25, Y+7	; 0x07
    1dae:	9b 83       	std	Y+3, r25	; 0x03
    1db0:	8a 83       	std	Y+2, r24	; 0x02
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	9b 81       	ldd	r25, Y+3	; 0x03
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <LCD_enu_SendCmnd+0x3ba>
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc0:	69 89       	ldd	r22, Y+17	; 0x11
    1dc2:	7a 89       	ldd	r23, Y+18	; 0x12
    1dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	88 8b       	std	Y+16, r24	; 0x10
    1dd2:	88 89       	ldd	r24, Y+16	; 0x10
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	8a 95       	dec	r24
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_enu_SendCmnd+0x3dc>
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    return STATE_OK;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    1dea:	e1 96       	adiw	r28, 0x31	; 49
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	cd bf       	out	0x3d, r28	; 61
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <LCD_enu_SendChar>:
ES_t LCD_enu_SendChar(u8 Copy_u8_Char)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	e1 97       	sbiw	r28, 0x31	; 49
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_HIGH);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	61 e0       	ldi	r22, 0x01	; 1
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	60 e0       	ldi	r22, 0x00	; 0
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_7BIT) & MASK_BIT);
    1e26:	89 a9       	ldd	r24, Y+49	; 0x31
    1e28:	98 2f       	mov	r25, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	99 27       	eor	r25, r25
    1e2e:	99 1f       	adc	r25, r25
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	66 e0       	ldi	r22, 0x06	; 6
    1e34:	49 2f       	mov	r20, r25
    1e36:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_6BIT) & MASK_BIT);
    1e3a:	89 a9       	ldd	r24, Y+49	; 0x31
    1e3c:	82 95       	swap	r24
    1e3e:	86 95       	lsr	r24
    1e40:	86 95       	lsr	r24
    1e42:	83 70       	andi	r24, 0x03	; 3
    1e44:	98 2f       	mov	r25, r24
    1e46:	91 70       	andi	r25, 0x01	; 1
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	65 e0       	ldi	r22, 0x05	; 5
    1e4c:	49 2f       	mov	r20, r25
    1e4e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_5BIT) & MASK_BIT);
    1e52:	89 a9       	ldd	r24, Y+49	; 0x31
    1e54:	82 95       	swap	r24
    1e56:	86 95       	lsr	r24
    1e58:	87 70       	andi	r24, 0x07	; 7
    1e5a:	98 2f       	mov	r25, r24
    1e5c:	91 70       	andi	r25, 0x01	; 1
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	49 2f       	mov	r20, r25
    1e64:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_4BIT) & MASK_BIT);
    1e68:	89 a9       	ldd	r24, Y+49	; 0x31
    1e6a:	82 95       	swap	r24
    1e6c:	8f 70       	andi	r24, 0x0F	; 15
    1e6e:	98 2f       	mov	r25, r24
    1e70:	91 70       	andi	r25, 0x01	; 1
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	63 e0       	ldi	r22, 0x03	; 3
    1e76:	49 2f       	mov	r20, r25
    1e78:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	62 e0       	ldi	r22, 0x02	; 2
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	a0 e8       	ldi	r26, 0x80	; 128
    1e8c:	bf e3       	ldi	r27, 0x3F	; 63
    1e8e:	8d a7       	std	Y+45, r24	; 0x2d
    1e90:	9e a7       	std	Y+46, r25	; 0x2e
    1e92:	af a7       	std	Y+47, r26	; 0x2f
    1e94:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e96:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e98:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	2b ea       	ldi	r18, 0xAB	; 171
    1ea0:	3a ea       	ldi	r19, 0xAA	; 170
    1ea2:	4a ea       	ldi	r20, 0xAA	; 170
    1ea4:	50 e4       	ldi	r21, 0x40	; 64
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	89 a7       	std	Y+41, r24	; 0x29
    1eb0:	9a a7       	std	Y+42, r25	; 0x2a
    1eb2:	ab a7       	std	Y+43, r26	; 0x2b
    1eb4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1eb6:	69 a5       	ldd	r22, Y+41	; 0x29
    1eb8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ebc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	1c f4       	brge	.+6      	; 0x1ed4 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	88 a7       	std	Y+40, r24	; 0x28
    1ed2:	91 c0       	rjmp	.+290    	; 0x1ff6 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    1ed4:	69 a5       	ldd	r22, Y+41	; 0x29
    1ed6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ed8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eda:	9c a5       	ldd	r25, Y+44	; 0x2c
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4f e7       	ldi	r20, 0x7F	; 127
    1ee2:	53 e4       	ldi	r21, 0x43	; 67
    1ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee8:	18 16       	cp	r1, r24
    1eea:	0c f0       	brlt	.+2      	; 0x1eee <LCD_enu_SendChar+0xf2>
    1eec:	7b c0       	rjmp	.+246    	; 0x1fe4 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1eee:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ef0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ef2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	4a e7       	ldi	r20, 0x7A	; 122
    1efc:	54 e4       	ldi	r21, 0x44	; 68
    1efe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8c a3       	std	Y+36, r24	; 0x24
    1f08:	9d a3       	std	Y+37, r25	; 0x25
    1f0a:	ae a3       	std	Y+38, r26	; 0x26
    1f0c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0e:	6c a1       	ldd	r22, Y+36	; 0x24
    1f10:	7d a1       	ldd	r23, Y+37	; 0x25
    1f12:	8e a1       	ldd	r24, Y+38	; 0x26
    1f14:	9f a1       	ldd	r25, Y+39	; 0x27
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a e7       	ldi	r20, 0x7A	; 122
    1f1c:	55 e4       	ldi	r21, 0x45	; 69
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	88 a3       	std	Y+32, r24	; 0x20
    1f28:	99 a3       	std	Y+33, r25	; 0x21
    1f2a:	aa a3       	std	Y+34, r26	; 0x22
    1f2c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f2e:	68 a1       	ldd	r22, Y+32	; 0x20
    1f30:	79 a1       	ldd	r23, Y+33	; 0x21
    1f32:	8a a1       	ldd	r24, Y+34	; 0x22
    1f34:	9b a1       	ldd	r25, Y+35	; 0x23
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e8       	ldi	r20, 0x80	; 128
    1f3c:	5f e3       	ldi	r21, 0x3F	; 63
    1f3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f42:	88 23       	and	r24, r24
    1f44:	2c f4       	brge	.+10     	; 0x1f50 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	9f 8f       	std	Y+31, r25	; 0x1f
    1f4c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f4e:	3f c0       	rjmp	.+126    	; 0x1fce <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1f50:	68 a1       	ldd	r22, Y+32	; 0x20
    1f52:	79 a1       	ldd	r23, Y+33	; 0x21
    1f54:	8a a1       	ldd	r24, Y+34	; 0x22
    1f56:	9b a1       	ldd	r25, Y+35	; 0x23
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	3f ef       	ldi	r19, 0xFF	; 255
    1f5c:	4f e7       	ldi	r20, 0x7F	; 127
    1f5e:	57 e4       	ldi	r21, 0x47	; 71
    1f60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f64:	18 16       	cp	r1, r24
    1f66:	4c f5       	brge	.+82     	; 0x1fba <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	6c a1       	ldd	r22, Y+36	; 0x24
    1f6a:	7d a1       	ldd	r23, Y+37	; 0x25
    1f6c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f6e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e2       	ldi	r20, 0x20	; 32
    1f76:	51 e4       	ldi	r21, 0x41	; 65
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	bc 01       	movw	r22, r24
    1f82:	cd 01       	movw	r24, r26
    1f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <LCD_enu_SendChar+0x1b4>
    1f92:	80 e9       	ldi	r24, 0x90	; 144
    1f94:	91 e0       	ldi	r25, 0x01	; 1
    1f96:	9d 8f       	std	Y+29, r25	; 0x1d
    1f98:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f9c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_enu_SendChar+0x1a2>
    1fa2:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	9f 8f       	std	Y+31, r25	; 0x1f
    1fae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f7       	brne	.-38     	; 0x1f92 <LCD_enu_SendChar+0x196>
    1fb8:	24 c0       	rjmp	.+72     	; 0x2002 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	68 a1       	ldd	r22, Y+32	; 0x20
    1fbc:	79 a1       	ldd	r23, Y+33	; 0x21
    1fbe:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc0:	9b a1       	ldd	r25, Y+35	; 0x23
    1fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	9f 8f       	std	Y+31, r25	; 0x1f
    1fcc:	8e 8f       	std	Y+30, r24	; 0x1e
    1fce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fd2:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd4:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_enu_SendChar+0x1de>
    1fde:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe0:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fe4:	69 a5       	ldd	r22, Y+41	; 0x29
    1fe6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fea:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	88 a7       	std	Y+40, r24	; 0x28
    1ff6:	88 a5       	ldd	r24, Y+40	; 0x28
    1ff8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ffa:	89 8d       	ldd	r24, Y+25	; 0x19
    1ffc:	8a 95       	dec	r24
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_enu_SendChar+0x200>
    2000:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	62 e0       	ldi	r22, 0x02	; 2
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_3BIT) & MASK_BIT);
    200c:	89 a9       	ldd	r24, Y+49	; 0x31
    200e:	86 95       	lsr	r24
    2010:	86 95       	lsr	r24
    2012:	86 95       	lsr	r24
    2014:	98 2f       	mov	r25, r24
    2016:	91 70       	andi	r25, 0x01	; 1
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	66 e0       	ldi	r22, 0x06	; 6
    201c:	49 2f       	mov	r20, r25
    201e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_2BIT) & MASK_BIT);
    2022:	89 a9       	ldd	r24, Y+49	; 0x31
    2024:	86 95       	lsr	r24
    2026:	86 95       	lsr	r24
    2028:	98 2f       	mov	r25, r24
    202a:	91 70       	andi	r25, 0x01	; 1
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	65 e0       	ldi	r22, 0x05	; 5
    2030:	49 2f       	mov	r20, r25
    2032:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_1BIT) & MASK_BIT);
    2036:	89 a9       	ldd	r24, Y+49	; 0x31
    2038:	86 95       	lsr	r24
    203a:	98 2f       	mov	r25, r24
    203c:	91 70       	andi	r25, 0x01	; 1
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	64 e0       	ldi	r22, 0x04	; 4
    2042:	49 2f       	mov	r20, r25
    2044:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_0BIT) & MASK_BIT);
    2048:	89 a9       	ldd	r24, Y+49	; 0x31
    204a:	98 2f       	mov	r25, r24
    204c:	91 70       	andi	r25, 0x01	; 1
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	63 e0       	ldi	r22, 0x03	; 3
    2052:	49 2f       	mov	r20, r25
    2054:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	62 e0       	ldi	r22, 0x02	; 2
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e8       	ldi	r26, 0x80	; 128
    2068:	bf e3       	ldi	r27, 0x3F	; 63
    206a:	8d 8b       	std	Y+21, r24	; 0x15
    206c:	9e 8b       	std	Y+22, r25	; 0x16
    206e:	af 8b       	std	Y+23, r26	; 0x17
    2070:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	2b ea       	ldi	r18, 0xAB	; 171
    207c:	3a ea       	ldi	r19, 0xAA	; 170
    207e:	4a ea       	ldi	r20, 0xAA	; 170
    2080:	50 e4       	ldi	r21, 0x40	; 64
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	89 8b       	std	Y+17, r24	; 0x11
    208c:	9a 8b       	std	Y+18, r25	; 0x12
    208e:	ab 8b       	std	Y+19, r26	; 0x13
    2090:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2092:	69 89       	ldd	r22, Y+17	; 0x11
    2094:	7a 89       	ldd	r23, Y+18	; 0x12
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	1c f4       	brge	.+6      	; 0x20b0 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	88 8b       	std	Y+16, r24	; 0x10
    20ae:	91 c0       	rjmp	.+290    	; 0x21d2 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    20b0:	69 89       	ldd	r22, Y+17	; 0x11
    20b2:	7a 89       	ldd	r23, Y+18	; 0x12
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	53 e4       	ldi	r21, 0x43	; 67
    20c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <LCD_enu_SendChar+0x2ce>
    20c8:	7b c0       	rjmp	.+246    	; 0x21c0 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    20ca:	6d 89       	ldd	r22, Y+21	; 0x15
    20cc:	7e 89       	ldd	r23, Y+22	; 0x16
    20ce:	8f 89       	ldd	r24, Y+23	; 0x17
    20d0:	98 8d       	ldd	r25, Y+24	; 0x18
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8c 87       	std	Y+12, r24	; 0x0c
    20e4:	9d 87       	std	Y+13, r25	; 0x0d
    20e6:	ae 87       	std	Y+14, r26	; 0x0e
    20e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	55 e4       	ldi	r21, 0x45	; 69
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	88 87       	std	Y+8, r24	; 0x08
    2104:	99 87       	std	Y+9, r25	; 0x09
    2106:	aa 87       	std	Y+10, r26	; 0x0a
    2108:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    210a:	68 85       	ldd	r22, Y+8	; 0x08
    210c:	79 85       	ldd	r23, Y+9	; 0x09
    210e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2110:	9b 85       	ldd	r25, Y+11	; 0x0b
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <LCD_enu_SendChar+0x330>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9f 83       	std	Y+7, r25	; 0x07
    2128:	8e 83       	std	Y+6, r24	; 0x06
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    212c:	68 85       	ldd	r22, Y+8	; 0x08
    212e:	79 85       	ldd	r23, Y+9	; 0x09
    2130:	8a 85       	ldd	r24, Y+10	; 0x0a
    2132:	9b 85       	ldd	r25, Y+11	; 0x0b
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	6c 85       	ldd	r22, Y+12	; 0x0c
    2146:	7d 85       	ldd	r23, Y+13	; 0x0d
    2148:	8e 85       	ldd	r24, Y+14	; 0x0e
    214a:	9f 85       	ldd	r25, Y+15	; 0x0f
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9f 83       	std	Y+7, r25	; 0x07
    216a:	8e 83       	std	Y+6, r24	; 0x06
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LCD_enu_SendChar+0x390>
    216e:	80 e9       	ldi	r24, 0x90	; 144
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	9d 83       	std	Y+5, r25	; 0x05
    2174:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2176:	8c 81       	ldd	r24, Y+4	; 0x04
    2178:	9d 81       	ldd	r25, Y+5	; 0x05
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_enu_SendChar+0x37e>
    217e:	9d 83       	std	Y+5, r25	; 0x05
    2180:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8e 81       	ldd	r24, Y+6	; 0x06
    2184:	9f 81       	ldd	r25, Y+7	; 0x07
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9f 83       	std	Y+7, r25	; 0x07
    218a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8e 81       	ldd	r24, Y+6	; 0x06
    218e:	9f 81       	ldd	r25, Y+7	; 0x07
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <LCD_enu_SendChar+0x372>
    2194:	24 c0       	rjmp	.+72     	; 0x21de <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	68 85       	ldd	r22, Y+8	; 0x08
    2198:	79 85       	ldd	r23, Y+9	; 0x09
    219a:	8a 85       	ldd	r24, Y+10	; 0x0a
    219c:	9b 85       	ldd	r25, Y+11	; 0x0b
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9f 83       	std	Y+7, r25	; 0x07
    21a8:	8e 83       	std	Y+6, r24	; 0x06
    21aa:	8e 81       	ldd	r24, Y+6	; 0x06
    21ac:	9f 81       	ldd	r25, Y+7	; 0x07
    21ae:	9b 83       	std	Y+3, r25	; 0x03
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_enu_SendChar+0x3ba>
    21ba:	9b 83       	std	Y+3, r25	; 0x03
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21c0:	69 89       	ldd	r22, Y+17	; 0x11
    21c2:	7a 89       	ldd	r23, Y+18	; 0x12
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	88 8b       	std	Y+16, r24	; 0x10
    21d2:	88 89       	ldd	r24, Y+16	; 0x10
    21d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	8a 95       	dec	r24
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_enu_SendChar+0x3dc>
    21dc:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    return STATE_OK;
    21e8:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    21ea:	e1 96       	adiw	r28, 0x31	; 49
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <LCD_enu_SendString+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LCD_enu_SendString+0x8>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	8a 83       	std	Y+2, r24	; 0x02
    if (Copy_pu8_String != NULL)
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	e1 f0       	breq	.+56     	; 0x2250 <LCD_enu_SendString+0x54>
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    2218:	19 82       	std	Y+1, r1	; 0x01
    221a:	0e c0       	rjmp	.+28     	; 0x2238 <LCD_enu_SendString+0x3c>
        {
            LCD_enu_SendChar(Copy_pu8_String[i]);
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	fc 01       	movw	r30, r24
    2228:	e2 0f       	add	r30, r18
    222a:	f3 1f       	adc	r31, r19
    222c:	80 81       	ld	r24, Z
    222e:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    u8 Local_u8_errorState = STATE_OK;
    if (Copy_pu8_String != NULL)
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	8f 5f       	subi	r24, 0xFF	; 255
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	fc 01       	movw	r30, r24
    2244:	e2 0f       	add	r30, r18
    2246:	f3 1f       	adc	r31, r19
    2248:	80 81       	ld	r24, Z
    224a:	88 23       	and	r24, r24
    224c:	39 f7       	brne	.-50     	; 0x221c <LCD_enu_SendString+0x20>
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <LCD_enu_SendString+0x56>
            LCD_enu_SendChar(Copy_pu8_String[i]);
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2250:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	cf 91       	pop	r28
    225e:	df 91       	pop	r29
    2260:	08 95       	ret

00002262 <LCD_enu_SendNum>:
ES_t LCD_enu_SendNum(u32 Copy_u32_Num)
{
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	cd b7       	in	r28, 0x3d	; 61
    226c:	de b7       	in	r29, 0x3e	; 62
    226e:	60 97       	sbiw	r28, 0x10	; 16
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	6d 87       	std	Y+13, r22	; 0x0d
    227c:	7e 87       	std	Y+14, r23	; 0x0e
    227e:	8f 87       	std	Y+15, r24	; 0x0f
    2280:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0;
    2282:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    2284:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u32_Num == 0)
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	af 85       	ldd	r26, Y+15	; 0x0f
    228c:	b8 89       	ldd	r27, Y+16	; 0x10
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	a1 05       	cpc	r26, r1
    2292:	b1 05       	cpc	r27, r1
    2294:	89 f5       	brne	.+98     	; 0x22f8 <LCD_enu_SendNum+0x96>
        LCD_enu_SendChar('0');
    2296:	80 e3       	ldi	r24, 0x30	; 48
    2298:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
    229c:	4d c0       	rjmp	.+154    	; 0x2338 <LCD_enu_SendNum+0xd6>
    else
    {
        while (Copy_u32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	08 2f       	mov	r16, r24
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a8:	af 85       	ldd	r26, Y+15	; 0x0f
    22aa:	b8 89       	ldd	r27, Y+16	; 0x10
    22ac:	2a e0       	ldi	r18, 0x0A	; 10
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__udivmodsi4>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	28 2f       	mov	r18, r24
    22c2:	ce 01       	movw	r24, r28
    22c4:	03 96       	adiw	r24, 0x03	; 3
    22c6:	fc 01       	movw	r30, r24
    22c8:	e0 0f       	add	r30, r16
    22ca:	f1 1f       	adc	r31, r17
    22cc:	20 83       	st	Z, r18
            Copy_u32_Num /= 10;
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	af 85       	ldd	r26, Y+15	; 0x0f
    22d4:	b8 89       	ldd	r27, Y+16	; 0x10
    22d6:	2a e0       	ldi	r18, 0x0A	; 10
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	bc 01       	movw	r22, r24
    22e0:	cd 01       	movw	r24, r26
    22e2:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__udivmodsi4>
    22e6:	da 01       	movw	r26, r20
    22e8:	c9 01       	movw	r24, r18
    22ea:	8d 87       	std	Y+13, r24	; 0x0d
    22ec:	9e 87       	std	Y+14, r25	; 0x0e
    22ee:	af 87       	std	Y+15, r26	; 0x0f
    22f0:	b8 8b       	std	Y+16, r27	; 0x10
            Local_u8_iterator1++;
    22f2:	8a 81       	ldd	r24, Y+2	; 0x02
    22f4:	8f 5f       	subi	r24, 0xFF	; 255
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    s8 Local_u8_iterator2 = 0;
    if (Copy_u32_Num == 0)
        LCD_enu_SendChar('0');
    else
    {
        while (Copy_u32_Num != 0)
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	af 85       	ldd	r26, Y+15	; 0x0f
    22fe:	b8 89       	ldd	r27, Y+16	; 0x10
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	a1 05       	cpc	r26, r1
    2304:	b1 05       	cpc	r27, r1
    2306:	59 f6       	brne	.-106    	; 0x229e <LCD_enu_SendNum+0x3c>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	81 50       	subi	r24, 0x01	; 1
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	11 c0       	rjmp	.+34     	; 0x2332 <LCD_enu_SendNum+0xd0>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	28 2f       	mov	r18, r24
    2314:	33 27       	eor	r19, r19
    2316:	27 fd       	sbrc	r18, 7
    2318:	30 95       	com	r19
    231a:	ce 01       	movw	r24, r28
    231c:	03 96       	adiw	r24, 0x03	; 3
    231e:	fc 01       	movw	r30, r24
    2320:	e2 0f       	add	r30, r18
    2322:	f3 1f       	adc	r31, r19
    2324:	80 81       	ld	r24, Z
    2326:	80 5d       	subi	r24, 0xD0	; 208
    2328:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	81 50       	subi	r24, 0x01	; 1
    2330:	89 83       	std	Y+1, r24	; 0x01
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	88 23       	and	r24, r24
    2336:	64 f7       	brge	.-40     	; 0x2310 <LCD_enu_SendNum+0xae>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
        }
    }
    return STATE_OK;
    2338:	81 e0       	ldi	r24, 0x01	; 1
}
    233a:	60 96       	adiw	r28, 0x10	; 16
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	08 95       	ret

00002350 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <LCD_enu_SetCursor+0x6>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <LCD_enu_SetCursor+0x8>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Location < MAX_NUM_OF_LOCATIONS)
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	88 32       	cpi	r24, 0x28	; 40
    236a:	d8 f4       	brcc	.+54     	; 0x23a2 <LCD_enu_SetCursor+0x52>
    {
        switch (Copy_u8_lineNum)
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	3d 83       	std	Y+5, r19	; 0x05
    2374:	2c 83       	std	Y+4, r18	; 0x04
    2376:	8c 81       	ldd	r24, Y+4	; 0x04
    2378:	9d 81       	ldd	r25, Y+5	; 0x05
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	31 f0       	breq	.+12     	; 0x238a <LCD_enu_SetCursor+0x3a>
    237e:	2c 81       	ldd	r18, Y+4	; 0x04
    2380:	3d 81       	ldd	r19, Y+5	; 0x05
    2382:	21 30       	cpi	r18, 0x01	; 1
    2384:	31 05       	cpc	r19, r1
    2386:	31 f0       	breq	.+12     	; 0x2394 <LCD_enu_SetCursor+0x44>
    2388:	0a c0       	rjmp	.+20     	; 0x239e <LCD_enu_SetCursor+0x4e>
        {
        case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	80 58       	subi	r24, 0x80	; 128
    238e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    2392:	08 c0       	rjmp	.+16     	; 0x23a4 <LCD_enu_SetCursor+0x54>
        case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	80 54       	subi	r24, 0x40	; 64
    2398:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    239c:	03 c0       	rjmp	.+6      	; 0x23a4 <LCD_enu_SetCursor+0x54>
        default:Local_u8_errorState = STATE_NOT_OK;break;
    239e:	19 82       	std	Y+1, r1	; 0x01
    23a0:	01 c0       	rjmp	.+2      	; 0x23a4 <LCD_enu_SetCursor+0x54>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    23a2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <LCD_enu_Init>:
ES_t LCD_enu_Init(void)
{
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	df 93       	push	r29
    23bc:	cf 93       	push	r28
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	cc 54       	subi	r28, 0x4C	; 76
    23c4:	d0 40       	sbci	r29, 0x00	; 0
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_OUTPUT);
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	41 e0       	ldi	r20, 0x01	; 1
    23d6:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_OUTPUT);
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_OUTPUT);
    23e4:	80 e0       	ldi	r24, 0x00	; 0
    23e6:	62 e0       	ldi	r22, 0x02	; 2
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D7, DIO_U8_OUTPUT);
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	66 e0       	ldi	r22, 0x06	; 6
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D6, DIO_U8_OUTPUT);
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	65 e0       	ldi	r22, 0x05	; 5
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D5, DIO_U8_OUTPUT);
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	64 e0       	ldi	r22, 0x04	; 4
    2406:	41 e0       	ldi	r20, 0x01	; 1
    2408:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D4, DIO_U8_OUTPUT);
    240c:	80 e0       	ldi	r24, 0x00	; 0
    240e:	63 e0       	ldi	r22, 0x03	; 3
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    2416:	fe 01       	movw	r30, r28
    2418:	e7 5b       	subi	r30, 0xB7	; 183
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	ac e0       	ldi	r26, 0x0C	; 12
    2422:	b2 e4       	ldi	r27, 0x42	; 66
    2424:	80 83       	st	Z, r24
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	a2 83       	std	Z+2, r26	; 0x02
    242a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242c:	8e 01       	movw	r16, r28
    242e:	0b 5b       	subi	r16, 0xBB	; 187
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	fe 01       	movw	r30, r28
    2434:	e7 5b       	subi	r30, 0xB7	; 183
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	60 81       	ld	r22, Z
    243a:	71 81       	ldd	r23, Z+1	; 0x01
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	93 81       	ldd	r25, Z+3	; 0x03
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	4a e7       	ldi	r20, 0x7A	; 122
    2446:	55 e4       	ldi	r21, 0x45	; 69
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	80 83       	st	Z, r24
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	a2 83       	std	Z+2, r26	; 0x02
    2458:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    245a:	fe 01       	movw	r30, r28
    245c:	eb 5b       	subi	r30, 0xBB	; 187
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e8       	ldi	r20, 0x80	; 128
    246e:	5f e3       	ldi	r21, 0x3F	; 63
    2470:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2474:	88 23       	and	r24, r24
    2476:	44 f4       	brge	.+16     	; 0x2488 <LCD_enu_Init+0xd2>
		__ticks = 1;
    2478:	fe 01       	movw	r30, r28
    247a:	ed 5b       	subi	r30, 0xBD	; 189
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
    2486:	64 c0       	rjmp	.+200    	; 0x2550 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    2488:	fe 01       	movw	r30, r28
    248a:	eb 5b       	subi	r30, 0xBB	; 187
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	60 81       	ld	r22, Z
    2490:	71 81       	ldd	r23, Z+1	; 0x01
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	3f ef       	ldi	r19, 0xFF	; 255
    249a:	4f e7       	ldi	r20, 0x7F	; 127
    249c:	57 e4       	ldi	r21, 0x47	; 71
    249e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a2:	18 16       	cp	r1, r24
    24a4:	0c f0       	brlt	.+2      	; 0x24a8 <LCD_enu_Init+0xf2>
    24a6:	43 c0       	rjmp	.+134    	; 0x252e <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a8:	fe 01       	movw	r30, r28
    24aa:	e7 5b       	subi	r30, 0xB7	; 183
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	51 e4       	ldi	r21, 0x41	; 65
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8e 01       	movw	r16, r28
    24c8:	0d 5b       	subi	r16, 0xBD	; 189
    24ca:	1f 4f       	sbci	r17, 0xFF	; 255
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	f8 01       	movw	r30, r16
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
    24de:	1f c0       	rjmp	.+62     	; 0x251e <LCD_enu_Init+0x168>
    24e0:	fe 01       	movw	r30, r28
    24e2:	ef 5b       	subi	r30, 0xBF	; 191
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 e9       	ldi	r24, 0x90	; 144
    24e8:	91 e0       	ldi	r25, 0x01	; 1
    24ea:	91 83       	std	Z+1, r25	; 0x01
    24ec:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ee:	fe 01       	movw	r30, r28
    24f0:	ef 5b       	subi	r30, 0xBF	; 191
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	f1 f7       	brne	.-4      	; 0x24f8 <LCD_enu_Init+0x142>
    24fc:	fe 01       	movw	r30, r28
    24fe:	ef 5b       	subi	r30, 0xBF	; 191
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	de 01       	movw	r26, r28
    2508:	ad 5b       	subi	r26, 0xBD	; 189
    250a:	bf 4f       	sbci	r27, 0xFF	; 255
    250c:	fe 01       	movw	r30, r28
    250e:	ed 5b       	subi	r30, 0xBD	; 189
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	11 96       	adiw	r26, 0x01	; 1
    251a:	9c 93       	st	X, r25
    251c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251e:	fe 01       	movw	r30, r28
    2520:	ed 5b       	subi	r30, 0xBD	; 189
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	d1 f6       	brne	.-76     	; 0x24e0 <LCD_enu_Init+0x12a>
    252c:	24 c0       	rjmp	.+72     	; 0x2576 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252e:	8e 01       	movw	r16, r28
    2530:	0d 5b       	subi	r16, 0xBD	; 189
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	fe 01       	movw	r30, r28
    2536:	eb 5b       	subi	r30, 0xBB	; 187
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	f8 01       	movw	r30, r16
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
    2550:	fe 01       	movw	r30, r28
    2552:	ed 5b       	subi	r30, 0xBD	; 189
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	fe 01       	movw	r30, r28
    255c:	ff 96       	adiw	r30, 0x3f	; 63
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	fe 01       	movw	r30, r28
    2564:	ff 96       	adiw	r30, 0x3f	; 63
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f1 f7       	brne	.-4      	; 0x256a <LCD_enu_Init+0x1b4>
    256e:	fe 01       	movw	r30, r28
    2570:	ff 96       	adiw	r30, 0x3f	; 63
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    2576:	83 e3       	ldi	r24, 0x33	; 51
    2578:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    257c:	82 e3       	ldi	r24, 0x32	; 50
    257e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    2582:	88 e2       	ldi	r24, 0x28	; 40
    2584:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e2       	ldi	r26, 0x20	; 32
    258e:	b2 e4       	ldi	r27, 0x42	; 66
    2590:	8b af       	std	Y+59, r24	; 0x3b
    2592:	9c af       	std	Y+60, r25	; 0x3c
    2594:	ad af       	std	Y+61, r26	; 0x3d
    2596:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2598:	6b ad       	ldd	r22, Y+59	; 0x3b
    259a:	7c ad       	ldd	r23, Y+60	; 0x3c
    259c:	8d ad       	ldd	r24, Y+61	; 0x3d
    259e:	9e ad       	ldd	r25, Y+62	; 0x3e
    25a0:	2b ea       	ldi	r18, 0xAB	; 171
    25a2:	3a ea       	ldi	r19, 0xAA	; 170
    25a4:	4a ea       	ldi	r20, 0xAA	; 170
    25a6:	50 e4       	ldi	r21, 0x40	; 64
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f ab       	std	Y+55, r24	; 0x37
    25b2:	98 af       	std	Y+56, r25	; 0x38
    25b4:	a9 af       	std	Y+57, r26	; 0x39
    25b6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    25b8:	6f a9       	ldd	r22, Y+55	; 0x37
    25ba:	78 ad       	ldd	r23, Y+56	; 0x38
    25bc:	89 ad       	ldd	r24, Y+57	; 0x39
    25be:	9a ad       	ldd	r25, Y+58	; 0x3a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	1c f4       	brge	.+6      	; 0x25d6 <LCD_enu_Init+0x220>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	8e ab       	std	Y+54, r24	; 0x36
    25d4:	91 c0       	rjmp	.+290    	; 0x26f8 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    25d6:	6f a9       	ldd	r22, Y+55	; 0x37
    25d8:	78 ad       	ldd	r23, Y+56	; 0x38
    25da:	89 ad       	ldd	r24, Y+57	; 0x39
    25dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	53 e4       	ldi	r21, 0x43	; 67
    25e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	0c f0       	brlt	.+2      	; 0x25f0 <LCD_enu_Init+0x23a>
    25ee:	7b c0       	rjmp	.+246    	; 0x26e6 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    25f0:	6b ad       	ldd	r22, Y+59	; 0x3b
    25f2:	7c ad       	ldd	r23, Y+60	; 0x3c
    25f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	4a e7       	ldi	r20, 0x7A	; 122
    25fe:	54 e4       	ldi	r21, 0x44	; 68
    2600:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	8a ab       	std	Y+50, r24	; 0x32
    260a:	9b ab       	std	Y+51, r25	; 0x33
    260c:	ac ab       	std	Y+52, r26	; 0x34
    260e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	6a a9       	ldd	r22, Y+50	; 0x32
    2612:	7b a9       	ldd	r23, Y+51	; 0x33
    2614:	8c a9       	ldd	r24, Y+52	; 0x34
    2616:	9d a9       	ldd	r25, Y+53	; 0x35
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a e7       	ldi	r20, 0x7A	; 122
    261e:	55 e4       	ldi	r21, 0x45	; 69
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8e a7       	std	Y+46, r24	; 0x2e
    262a:	9f a7       	std	Y+47, r25	; 0x2f
    262c:	a8 ab       	std	Y+48, r26	; 0x30
    262e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2630:	6e a5       	ldd	r22, Y+46	; 0x2e
    2632:	7f a5       	ldd	r23, Y+47	; 0x2f
    2634:	88 a9       	ldd	r24, Y+48	; 0x30
    2636:	99 a9       	ldd	r25, Y+49	; 0x31
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_enu_Init+0x29c>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9d a7       	std	Y+45, r25	; 0x2d
    264e:	8c a7       	std	Y+44, r24	; 0x2c
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    2652:	6e a5       	ldd	r22, Y+46	; 0x2e
    2654:	7f a5       	ldd	r23, Y+47	; 0x2f
    2656:	88 a9       	ldd	r24, Y+48	; 0x30
    2658:	99 a9       	ldd	r25, Y+49	; 0x31
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	6a a9       	ldd	r22, Y+50	; 0x32
    266c:	7b a9       	ldd	r23, Y+51	; 0x33
    266e:	8c a9       	ldd	r24, Y+52	; 0x34
    2670:	9d a9       	ldd	r25, Y+53	; 0x35
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9d a7       	std	Y+45, r25	; 0x2d
    2690:	8c a7       	std	Y+44, r24	; 0x2c
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_enu_Init+0x2fc>
    2694:	80 e9       	ldi	r24, 0x90	; 144
    2696:	91 e0       	ldi	r25, 0x01	; 1
    2698:	9b a7       	std	Y+43, r25	; 0x2b
    269a:	8a a7       	std	Y+42, r24	; 0x2a
    269c:	8a a5       	ldd	r24, Y+42	; 0x2a
    269e:	9b a5       	ldd	r25, Y+43	; 0x2b
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_enu_Init+0x2ea>
    26a4:	9b a7       	std	Y+43, r25	; 0x2b
    26a6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    26aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9d a7       	std	Y+45, r25	; 0x2d
    26b0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    26b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_enu_Init+0x2de>
    26ba:	24 c0       	rjmp	.+72     	; 0x2704 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    26be:	7f a5       	ldd	r23, Y+47	; 0x2f
    26c0:	88 a9       	ldd	r24, Y+48	; 0x30
    26c2:	99 a9       	ldd	r25, Y+49	; 0x31
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9d a7       	std	Y+45, r25	; 0x2d
    26ce:	8c a7       	std	Y+44, r24	; 0x2c
    26d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    26d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    26d4:	99 a7       	std	Y+41, r25	; 0x29
    26d6:	88 a7       	std	Y+40, r24	; 0x28
    26d8:	88 a5       	ldd	r24, Y+40	; 0x28
    26da:	99 a5       	ldd	r25, Y+41	; 0x29
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_enu_Init+0x326>
    26e0:	99 a7       	std	Y+41, r25	; 0x29
    26e2:	88 a7       	std	Y+40, r24	; 0x28
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26e6:	6f a9       	ldd	r22, Y+55	; 0x37
    26e8:	78 ad       	ldd	r23, Y+56	; 0x38
    26ea:	89 ad       	ldd	r24, Y+57	; 0x39
    26ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	8e ab       	std	Y+54, r24	; 0x36
    26f8:	8e a9       	ldd	r24, Y+54	; 0x36
    26fa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26fc:	8f a1       	ldd	r24, Y+39	; 0x27
    26fe:	8a 95       	dec	r24
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_enu_Init+0x348>
    2702:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(LCD_U8_CURSOR);
    2704:	8f e0       	ldi	r24, 0x0F	; 15
    2706:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	a0 e2       	ldi	r26, 0x20	; 32
    2710:	b2 e4       	ldi	r27, 0x42	; 66
    2712:	8b a3       	std	Y+35, r24	; 0x23
    2714:	9c a3       	std	Y+36, r25	; 0x24
    2716:	ad a3       	std	Y+37, r26	; 0x25
    2718:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    271a:	6b a1       	ldd	r22, Y+35	; 0x23
    271c:	7c a1       	ldd	r23, Y+36	; 0x24
    271e:	8d a1       	ldd	r24, Y+37	; 0x25
    2720:	9e a1       	ldd	r25, Y+38	; 0x26
    2722:	2b ea       	ldi	r18, 0xAB	; 171
    2724:	3a ea       	ldi	r19, 0xAA	; 170
    2726:	4a ea       	ldi	r20, 0xAA	; 170
    2728:	50 e4       	ldi	r21, 0x40	; 64
    272a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	8f 8f       	std	Y+31, r24	; 0x1f
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	a9 a3       	std	Y+33, r26	; 0x21
    2738:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    273a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    273c:	78 a1       	ldd	r23, Y+32	; 0x20
    273e:	89 a1       	ldd	r24, Y+33	; 0x21
    2740:	9a a1       	ldd	r25, Y+34	; 0x22
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	5f e3       	ldi	r21, 0x3F	; 63
    274a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    274e:	88 23       	and	r24, r24
    2750:	1c f4       	brge	.+6      	; 0x2758 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	8e 8f       	std	Y+30, r24	; 0x1e
    2756:	91 c0       	rjmp	.+290    	; 0x287a <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2758:	6f 8d       	ldd	r22, Y+31	; 0x1f
    275a:	78 a1       	ldd	r23, Y+32	; 0x20
    275c:	89 a1       	ldd	r24, Y+33	; 0x21
    275e:	9a a1       	ldd	r25, Y+34	; 0x22
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	53 e4       	ldi	r21, 0x43	; 67
    2768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	0c f0       	brlt	.+2      	; 0x2772 <LCD_enu_Init+0x3bc>
    2770:	7b c0       	rjmp	.+246    	; 0x2868 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    2772:	6b a1       	ldd	r22, Y+35	; 0x23
    2774:	7c a1       	ldd	r23, Y+36	; 0x24
    2776:	8d a1       	ldd	r24, Y+37	; 0x25
    2778:	9e a1       	ldd	r25, Y+38	; 0x26
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a e7       	ldi	r20, 0x7A	; 122
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8a 8f       	std	Y+26, r24	; 0x1a
    278c:	9b 8f       	std	Y+27, r25	; 0x1b
    278e:	ac 8f       	std	Y+28, r26	; 0x1c
    2790:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2792:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2794:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2796:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2798:	9d 8d       	ldd	r25, Y+29	; 0x1d
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	4a e7       	ldi	r20, 0x7A	; 122
    27a0:	55 e4       	ldi	r21, 0x45	; 69
    27a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8e 8b       	std	Y+22, r24	; 0x16
    27ac:	9f 8b       	std	Y+23, r25	; 0x17
    27ae:	a8 8f       	std	Y+24, r26	; 0x18
    27b0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27b2:	6e 89       	ldd	r22, Y+22	; 0x16
    27b4:	7f 89       	ldd	r23, Y+23	; 0x17
    27b6:	88 8d       	ldd	r24, Y+24	; 0x18
    27b8:	99 8d       	ldd	r25, Y+25	; 0x19
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e8       	ldi	r20, 0x80	; 128
    27c0:	5f e3       	ldi	r21, 0x3F	; 63
    27c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c6:	88 23       	and	r24, r24
    27c8:	2c f4       	brge	.+10     	; 0x27d4 <LCD_enu_Init+0x41e>
		__ticks = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9d 8b       	std	Y+21, r25	; 0x15
    27d0:	8c 8b       	std	Y+20, r24	; 0x14
    27d2:	3f c0       	rjmp	.+126    	; 0x2852 <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    27d4:	6e 89       	ldd	r22, Y+22	; 0x16
    27d6:	7f 89       	ldd	r23, Y+23	; 0x17
    27d8:	88 8d       	ldd	r24, Y+24	; 0x18
    27da:	99 8d       	ldd	r25, Y+25	; 0x19
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	4c f5       	brge	.+82     	; 0x283e <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ec:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27ee:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27f0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27f2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e2       	ldi	r20, 0x20	; 32
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	bc 01       	movw	r22, r24
    2806:	cd 01       	movw	r24, r26
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9d 8b       	std	Y+21, r25	; 0x15
    2812:	8c 8b       	std	Y+20, r24	; 0x14
    2814:	0f c0       	rjmp	.+30     	; 0x2834 <LCD_enu_Init+0x47e>
    2816:	80 e9       	ldi	r24, 0x90	; 144
    2818:	91 e0       	ldi	r25, 0x01	; 1
    281a:	9b 8b       	std	Y+19, r25	; 0x13
    281c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    281e:	8a 89       	ldd	r24, Y+18	; 0x12
    2820:	9b 89       	ldd	r25, Y+19	; 0x13
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_enu_Init+0x46c>
    2826:	9b 8b       	std	Y+19, r25	; 0x13
    2828:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282a:	8c 89       	ldd	r24, Y+20	; 0x14
    282c:	9d 89       	ldd	r25, Y+21	; 0x15
    282e:	01 97       	sbiw	r24, 0x01	; 1
    2830:	9d 8b       	std	Y+21, r25	; 0x15
    2832:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2834:	8c 89       	ldd	r24, Y+20	; 0x14
    2836:	9d 89       	ldd	r25, Y+21	; 0x15
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	69 f7       	brne	.-38     	; 0x2816 <LCD_enu_Init+0x460>
    283c:	24 c0       	rjmp	.+72     	; 0x2886 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283e:	6e 89       	ldd	r22, Y+22	; 0x16
    2840:	7f 89       	ldd	r23, Y+23	; 0x17
    2842:	88 8d       	ldd	r24, Y+24	; 0x18
    2844:	99 8d       	ldd	r25, Y+25	; 0x19
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9d 8b       	std	Y+21, r25	; 0x15
    2850:	8c 8b       	std	Y+20, r24	; 0x14
    2852:	8c 89       	ldd	r24, Y+20	; 0x14
    2854:	9d 89       	ldd	r25, Y+21	; 0x15
    2856:	99 8b       	std	Y+17, r25	; 0x11
    2858:	88 8b       	std	Y+16, r24	; 0x10
    285a:	88 89       	ldd	r24, Y+16	; 0x10
    285c:	99 89       	ldd	r25, Y+17	; 0x11
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	f1 f7       	brne	.-4      	; 0x285e <LCD_enu_Init+0x4a8>
    2862:	99 8b       	std	Y+17, r25	; 0x11
    2864:	88 8b       	std	Y+16, r24	; 0x10
    2866:	0f c0       	rjmp	.+30     	; 0x2886 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2868:	6f 8d       	ldd	r22, Y+31	; 0x1f
    286a:	78 a1       	ldd	r23, Y+32	; 0x20
    286c:	89 a1       	ldd	r24, Y+33	; 0x21
    286e:	9a a1       	ldd	r25, Y+34	; 0x22
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	8e 8f       	std	Y+30, r24	; 0x1e
    287a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    287c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    287e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2880:	8a 95       	dec	r24
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_enu_Init+0x4ca>
    2884:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e0       	ldi	r26, 0x00	; 0
    2892:	b0 e4       	ldi	r27, 0x40	; 64
    2894:	8b 87       	std	Y+11, r24	; 0x0b
    2896:	9c 87       	std	Y+12, r25	; 0x0c
    2898:	ad 87       	std	Y+13, r26	; 0x0d
    289a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	6b 85       	ldd	r22, Y+11	; 0x0b
    289e:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a e7       	ldi	r20, 0x7A	; 122
    28aa:	55 e4       	ldi	r21, 0x45	; 69
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8f 83       	std	Y+7, r24	; 0x07
    28b6:	98 87       	std	Y+8, r25	; 0x08
    28b8:	a9 87       	std	Y+9, r26	; 0x09
    28ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28bc:	6f 81       	ldd	r22, Y+7	; 0x07
    28be:	78 85       	ldd	r23, Y+8	; 0x08
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <LCD_enu_Init+0x528>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_enu_Init+0x588>
    2920:	80 e9       	ldi	r24, 0x90	; 144
    2922:	91 e0       	ldi	r25, 0x01	; 1
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_enu_Init+0x576>
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9e 83       	std	Y+6, r25	; 0x06
    293c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_enu_Init+0x56a>
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	6f 81       	ldd	r22, Y+7	; 0x07
    294a:	78 85       	ldd	r23, Y+8	; 0x08
    294c:	89 85       	ldd	r24, Y+9	; 0x09
    294e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	9a 81       	ldd	r25, Y+2	; 0x02
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_enu_Init+0x5b2>
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2970:	86 e0       	ldi	r24, 0x06	; 6
    2972:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    return STATE_OK;
    2976:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    2978:	c4 5b       	subi	r28, 0xB4	; 180
    297a:	df 4f       	sbci	r29, 0xFF	; 255
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	2e 97       	sbiw	r28, 0x0e	; 14
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e0       	ldi	r26, 0x00	; 0
    29b0:	b0 e4       	ldi	r27, 0x40	; 64
    29b2:	8b 87       	std	Y+11, r24	; 0x0b
    29b4:	9c 87       	std	Y+12, r25	; 0x0c
    29b6:	ad 87       	std	Y+13, r26	; 0x0d
    29b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a e7       	ldi	r20, 0x7A	; 122
    29c8:	55 e4       	ldi	r21, 0x45	; 69
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8f 83       	std	Y+7, r24	; 0x07
    29d4:	98 87       	std	Y+8, r25	; 0x08
    29d6:	a9 87       	std	Y+9, r26	; 0x09
    29d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_enu_Clear+0x6c>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9e 83       	std	Y+6, r25	; 0x06
    29f8:	8d 83       	std	Y+5, r24	; 0x05
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    29fc:	6f 81       	ldd	r22, Y+7	; 0x07
    29fe:	78 85       	ldd	r23, Y+8	; 0x08
    2a00:	89 85       	ldd	r24, Y+9	; 0x09
    2a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_enu_Clear+0xcc>
    2a3e:	80 e9       	ldi	r24, 0x90	; 144
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_enu_Clear+0xba>
    2a4e:	9c 83       	std	Y+4, r25	; 0x04
    2a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	9e 81       	ldd	r25, Y+6	; 0x06
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_enu_Clear+0xae>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9e 83       	std	Y+6, r25	; 0x06
    2a78:	8d 83       	std	Y+5, r24	; 0x05
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	9a 83       	std	Y+2, r25	; 0x02
    2a80:	89 83       	std	Y+1, r24	; 0x01
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_enu_Clear+0xf6>
    2a8a:	9a 83       	std	Y+2, r25	; 0x02
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    return STATE_OK;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
}
    2a90:	2e 96       	adiw	r28, 0x0e	; 14
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <LCD_enu_sendCustomChar>:
ES_t LCD_enu_sendCustomChar(u8 Copy_u8_charNum, u8 *Copy_pu8_charArray, u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	27 97       	sbiw	r28, 0x07	; 7
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	8b 83       	std	Y+3, r24	; 0x03
    2ab8:	7d 83       	std	Y+5, r23	; 0x05
    2aba:	6c 83       	std	Y+4, r22	; 0x04
    2abc:	4e 83       	std	Y+6, r20	; 0x06
    2abe:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    2ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	81 f1       	breq	.+96     	; 0x2b2c <LCD_enu_sendCustomChar+0x8a>
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	88 30       	cpi	r24, 0x08	; 8
    2ad0:	68 f5       	brcc	.+90     	; 0x2b2c <LCD_enu_sendCustomChar+0x8a>
    2ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	50 f5       	brcc	.+84     	; 0x2b2c <LCD_enu_sendCustomChar+0x8a>
    2ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    2ada:	88 32       	cpi	r24, 0x28	; 40
    2adc:	38 f5       	brcc	.+78     	; 0x2b2c <LCD_enu_sendCustomChar+0x8a>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	08 96       	adiw	r24, 0x08	; 8
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	88 0f       	add	r24, r24
    2aec:	99 1f       	adc	r25, r25
    2aee:	88 0f       	add	r24, r24
    2af0:	99 1f       	adc	r25, r25
    2af2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2af6:	19 82       	std	Y+1, r1	; 0x01
    2af8:	0e c0       	rjmp	.+28     	; 0x2b16 <LCD_enu_sendCustomChar+0x74>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	28 2f       	mov	r18, r24
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	8c 81       	ldd	r24, Y+4	; 0x04
    2b02:	9d 81       	ldd	r25, Y+5	; 0x05
    2b04:	fc 01       	movw	r30, r24
    2b06:	e2 0f       	add	r30, r18
    2b08:	f3 1f       	adc	r31, r19
    2b0a:	80 81       	ld	r24, Z
    2b0c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
{
    u8 Local_u8_errorState = STATE_OK;
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	88 30       	cpi	r24, 0x08	; 8
    2b1a:	78 f3       	brcs	.-34     	; 0x2afa <LCD_enu_sendCustomChar+0x58>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(Copy_u8_lineNum, Copy_u8_Location);
    2b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	0e 94 a8 11 	call	0x2350	; 0x2350 <LCD_enu_SetCursor>
        LCD_enu_SendChar(Copy_u8_charNum);
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <LCD_enu_SendChar>
    2b2a:	01 c0       	rjmp	.+2      	; 0x2b2e <LCD_enu_sendCustomChar+0x8c>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2b2c:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b30:	27 96       	adiw	r28, 0x07	; 7
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	0f 92       	push	r0
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2b4c:	19 82       	std	Y+1, r1	; 0x01
    2b4e:	33 c0       	rjmp	.+102    	; 0x2bb6 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	88 2f       	mov	r24, r24
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	fc 01       	movw	r30, r24
    2b58:	ef 5b       	subi	r30, 0xBF	; 191
    2b5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b5c:	90 81       	ld	r25, Z
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	69 2f       	mov	r22, r25
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	fc 01       	movw	r30, r24
    2b70:	ef 5b       	subi	r30, 0xBF	; 191
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	90 81       	ld	r25, Z
    2b76:	82 e0       	ldi	r24, 0x02	; 2
    2b78:	69 2f       	mov	r22, r25
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	fc 01       	movw	r30, r24
    2b88:	eb 5b       	subi	r30, 0xBB	; 187
    2b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8c:	90 81       	ld	r25, Z
    2b8e:	82 e0       	ldi	r24, 0x02	; 2
    2b90:	69 2f       	mov	r22, r25
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	88 2f       	mov	r24, r24
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	eb 5b       	subi	r30, 0xBB	; 187
    2ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba4:	90 81       	ld	r25, Z
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	69 2f       	mov	r22, r25
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	8f 5f       	subi	r24, 0xFF	; 255
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	84 30       	cpi	r24, 0x04	; 4
    2bba:	50 f2       	brcs	.-108    	; 0x2b50 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
}
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	65 97       	sbiw	r28, 0x15	; 21
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	9d 8b       	std	Y+21, r25	; 0x15
    2bdc:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	8a 8b       	std	Y+18, r24	; 0x12
    2be2:	1b 8a       	std	Y+19, r1	; 0x13
    2be4:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    2be6:	8c 89       	ldd	r24, Y+20	; 0x14
    2be8:	9d 89       	ldd	r25, Y+21	; 0x15
    2bea:	00 97       	sbiw	r24, 0x00	; 0
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <Keypad_enu_getKey+0x2a>
    2bee:	f0 c0       	rjmp	.+480    	; 0x2dd0 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    2bf0:	ec 89       	ldd	r30, Y+20	; 0x14
    2bf2:	fd 89       	ldd	r31, Y+21	; 0x15
    2bf4:	8f ef       	ldi	r24, 0xFF	; 255
    2bf6:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2bf8:	19 8a       	std	Y+17, r1	; 0x11
    2bfa:	e5 c0       	rjmp	.+458    	; 0x2dc6 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    2bfc:	89 89       	ldd	r24, Y+17	; 0x11
    2bfe:	88 2f       	mov	r24, r24
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	fc 01       	movw	r30, r24
    2c04:	ef 5b       	subi	r30, 0xBF	; 191
    2c06:	fe 4f       	sbci	r31, 0xFE	; 254
    2c08:	90 81       	ld	r25, Z
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	69 2f       	mov	r22, r25
    2c0e:	40 e0       	ldi	r20, 0x00	; 0
    2c10:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2c14:	18 8a       	std	Y+16, r1	; 0x10
    2c16:	c1 c0       	rjmp	.+386    	; 0x2d9a <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2c18:	88 89       	ldd	r24, Y+16	; 0x10
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	fc 01       	movw	r30, r24
    2c20:	eb 5b       	subi	r30, 0xBB	; 187
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	90 81       	ld	r25, Z
    2c26:	9e 01       	movw	r18, r28
    2c28:	2d 5e       	subi	r18, 0xED	; 237
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2c:	82 e0       	ldi	r24, 0x02	; 2
    2c2e:	69 2f       	mov	r22, r25
    2c30:	a9 01       	movw	r20, r18
    2c32:	0e 94 8a 2a 	call	0x5514	; 0x5514 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	88 23       	and	r24, r24
    2c3a:	09 f0       	breq	.+2      	; 0x2c3e <Keypad_enu_getKey+0x78>
    2c3c:	ab c0       	rjmp	.+342    	; 0x2d94 <Keypad_enu_getKey+0x1ce>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	a0 ea       	ldi	r26, 0xA0	; 160
    2c44:	b1 e4       	ldi	r27, 0x41	; 65
    2c46:	8b 87       	std	Y+11, r24	; 0x0b
    2c48:	9c 87       	std	Y+12, r25	; 0x0c
    2c4a:	ad 87       	std	Y+13, r26	; 0x0d
    2c4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a e7       	ldi	r20, 0x7A	; 122
    2c5c:	55 e4       	ldi	r21, 0x45	; 69
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	8f 83       	std	Y+7, r24	; 0x07
    2c68:	98 87       	std	Y+8, r25	; 0x08
    2c6a:	a9 87       	std	Y+9, r26	; 0x09
    2c6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c70:	78 85       	ldd	r23, Y+8	; 0x08
    2c72:	89 85       	ldd	r24, Y+9	; 0x09
    2c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e8       	ldi	r20, 0x80	; 128
    2c7c:	5f e3       	ldi	r21, 0x3F	; 63
    2c7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c82:	88 23       	and	r24, r24
    2c84:	2c f4       	brge	.+10     	; 0x2c90 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
    2c8e:	3f c0       	rjmp	.+126    	; 0x2d0e <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2c90:	6f 81       	ldd	r22, Y+7	; 0x07
    2c92:	78 85       	ldd	r23, Y+8	; 0x08
    2c94:	89 85       	ldd	r24, Y+9	; 0x09
    2c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	4c f5       	brge	.+82     	; 0x2cfa <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2caa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e2       	ldi	r20, 0x20	; 32
    2cb6:	51 e4       	ldi	r21, 0x41	; 65
    2cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	bc 01       	movw	r22, r24
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	9e 83       	std	Y+6, r25	; 0x06
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	0f c0       	rjmp	.+30     	; 0x2cf0 <Keypad_enu_getKey+0x12a>
    2cd2:	80 e9       	ldi	r24, 0x90	; 144
    2cd4:	91 e0       	ldi	r25, 0x01	; 1
    2cd6:	9c 83       	std	Y+4, r25	; 0x04
    2cd8:	8b 83       	std	Y+3, r24	; 0x03
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <Keypad_enu_getKey+0x118>
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	9e 83       	std	Y+6, r25	; 0x06
    2cee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf4:	00 97       	sbiw	r24, 0x00	; 0
    2cf6:	69 f7       	brne	.-38     	; 0x2cd2 <Keypad_enu_getKey+0x10c>
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cfa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfc:	78 85       	ldd	r23, Y+8	; 0x08
    2cfe:	89 85       	ldd	r24, Y+9	; 0x09
    2d00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	9e 81       	ldd	r25, Y+6	; 0x06
    2d12:	9a 83       	std	Y+2, r25	; 0x02
    2d14:	89 83       	std	Y+1, r24	; 0x01
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	01 97       	sbiw	r24, 0x01	; 1
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <Keypad_enu_getKey+0x154>
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2d22:	88 89       	ldd	r24, Y+16	; 0x10
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	fc 01       	movw	r30, r24
    2d2a:	eb 5b       	subi	r30, 0xBB	; 187
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	90 81       	ld	r25, Z
    2d30:	9e 01       	movw	r18, r28
    2d32:	2d 5e       	subi	r18, 0xED	; 237
    2d34:	3f 4f       	sbci	r19, 0xFF	; 255
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	69 2f       	mov	r22, r25
    2d3a:	a9 01       	movw	r20, r18
    2d3c:	0e 94 8a 2a 	call	0x5514	; 0x5514 <DIO_enu_GetPinValue>
    2d40:	0f c0       	rjmp	.+30     	; 0x2d60 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2d42:	88 89       	ldd	r24, Y+16	; 0x10
    2d44:	88 2f       	mov	r24, r24
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	fc 01       	movw	r30, r24
    2d4a:	eb 5b       	subi	r30, 0xBB	; 187
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	90 81       	ld	r25, Z
    2d50:	9e 01       	movw	r18, r28
    2d52:	2d 5e       	subi	r18, 0xED	; 237
    2d54:	3f 4f       	sbci	r19, 0xFF	; 255
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	69 2f       	mov	r22, r25
    2d5a:	a9 01       	movw	r20, r18
    2d5c:	0e 94 8a 2a 	call	0x5514	; 0x5514 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2d60:	8b 89       	ldd	r24, Y+19	; 0x13
    2d62:	88 23       	and	r24, r24
    2d64:	71 f3       	breq	.-36     	; 0x2d42 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2d66:	89 89       	ldd	r24, Y+17	; 0x11
    2d68:	48 2f       	mov	r20, r24
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	88 89       	ldd	r24, Y+16	; 0x10
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	ca 01       	movw	r24, r20
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	82 0f       	add	r24, r18
    2d7e:	93 1f       	adc	r25, r19
    2d80:	fc 01       	movw	r30, r24
    2d82:	ef 5c       	subi	r30, 0xCF	; 207
    2d84:	fe 4f       	sbci	r31, 0xFE	; 254
    2d86:	80 81       	ld	r24, Z
    2d88:	ec 89       	ldd	r30, Y+20	; 0x14
    2d8a:	fd 89       	ldd	r31, Y+21	; 0x15
    2d8c:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	8f 87       	std	Y+15, r24	; 0x0f
    2d92:	07 c0       	rjmp	.+14     	; 0x2da2 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2d94:	88 89       	ldd	r24, Y+16	; 0x10
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	88 8b       	std	Y+16, r24	; 0x10
    2d9a:	88 89       	ldd	r24, Y+16	; 0x10
    2d9c:	84 30       	cpi	r24, 0x04	; 4
    2d9e:	08 f4       	brcc	.+2      	; 0x2da2 <Keypad_enu_getKey+0x1dc>
    2da0:	3b cf       	rjmp	.-394    	; 0x2c18 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2da2:	89 89       	ldd	r24, Y+17	; 0x11
    2da4:	88 2f       	mov	r24, r24
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	fc 01       	movw	r30, r24
    2daa:	ef 5b       	subi	r30, 0xBF	; 191
    2dac:	fe 4f       	sbci	r31, 0xFE	; 254
    2dae:	90 81       	ld	r25, Z
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	69 2f       	mov	r22, r25
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbc:	88 23       	and	r24, r24
    2dbe:	49 f4       	brne	.+18     	; 0x2dd2 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2dc0:	89 89       	ldd	r24, Y+17	; 0x11
    2dc2:	8f 5f       	subi	r24, 0xFF	; 255
    2dc4:	89 8b       	std	Y+17, r24	; 0x11
    2dc6:	89 89       	ldd	r24, Y+17	; 0x11
    2dc8:	84 30       	cpi	r24, 0x04	; 4
    2dca:	08 f4       	brcc	.+2      	; 0x2dce <Keypad_enu_getKey+0x208>
    2dcc:	17 cf       	rjmp	.-466    	; 0x2bfc <Keypad_enu_getKey+0x36>
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2dd0:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2dd2:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2dd4:	65 96       	adiw	r28, 0x15	; 21
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <EEPROM_enu_Write>:
#include"../../1-MCAL/I2C/I2C_Interface.h"

#include"EEPROM_Config.h"
#include"EEPROM_Private.h"

ES_t EEPROM_enu_Write(u16 Copy_u8_Location,u8 Copy_u8_Data){
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	61 97       	sbiw	r28, 0x11	; 17
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	98 8b       	std	Y+16, r25	; 0x10
    2dfc:	8f 87       	std	Y+15, r24	; 0x0f
    2dfe:	69 8b       	std	Y+17, r22	; 0x11
    I2C_enu_Start();
    2e00:	0e 94 28 24 	call	0x4850	; 0x4850 <I2C_enu_Start>
    I2C_enu_writeData(0x50|(A2_PIN <<2)|(Copy_u8_Location>>8),(u8)Copy_u8_Location);
    2e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e06:	98 89       	ldd	r25, Y+16	; 0x10
    2e08:	89 2f       	mov	r24, r25
    2e0a:	99 27       	eor	r25, r25
    2e0c:	80 65       	ori	r24, 0x50	; 80
    2e0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e10:	62 2f       	mov	r22, r18
    2e12:	0e 94 4f 24 	call	0x489e	; 0x489e <I2C_enu_writeData>
    I2C_enu_writeData(NONE,Copy_u8_Data);
    2e16:	88 ee       	ldi	r24, 0xE8	; 232
    2e18:	93 e0       	ldi	r25, 0x03	; 3
    2e1a:	69 89       	ldd	r22, Y+17	; 0x11
    2e1c:	0e 94 4f 24 	call	0x489e	; 0x489e <I2C_enu_writeData>
    I2C_enu_Stop();
    2e20:	0e 94 39 24 	call	0x4872	; 0x4872 <I2C_enu_Stop>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e2       	ldi	r26, 0x20	; 32
    2e2a:	b1 e4       	ldi	r27, 0x41	; 65
    2e2c:	8b 87       	std	Y+11, r24	; 0x0b
    2e2e:	9c 87       	std	Y+12, r25	; 0x0c
    2e30:	ad 87       	std	Y+13, r26	; 0x0d
    2e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	4a e7       	ldi	r20, 0x7A	; 122
    2e42:	55 e4       	ldi	r21, 0x45	; 69
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	8f 83       	std	Y+7, r24	; 0x07
    2e4e:	98 87       	std	Y+8, r25	; 0x08
    2e50:	a9 87       	std	Y+9, r26	; 0x09
    2e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e54:	6f 81       	ldd	r22, Y+7	; 0x07
    2e56:	78 85       	ldd	r23, Y+8	; 0x08
    2e58:	89 85       	ldd	r24, Y+9	; 0x09
    2e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <EEPROM_enu_Write+0x90>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	3f c0       	rjmp	.+126    	; 0x2ef4 <EEPROM_enu_Write+0x10e>
	else if (__tmp > 65535)
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	3f ef       	ldi	r19, 0xFF	; 255
    2e82:	4f e7       	ldi	r20, 0x7F	; 127
    2e84:	57 e4       	ldi	r21, 0x47	; 71
    2e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e8a:	18 16       	cp	r1, r24
    2e8c:	4c f5       	brge	.+82     	; 0x2ee0 <EEPROM_enu_Write+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	40 e2       	ldi	r20, 0x20	; 32
    2e9c:	51 e4       	ldi	r21, 0x41	; 65
    2e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9e 83       	std	Y+6, r25	; 0x06
    2eb4:	8d 83       	std	Y+5, r24	; 0x05
    2eb6:	0f c0       	rjmp	.+30     	; 0x2ed6 <EEPROM_enu_Write+0xf0>
    2eb8:	80 e9       	ldi	r24, 0x90	; 144
    2eba:	91 e0       	ldi	r25, 0x01	; 1
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	f1 f7       	brne	.-4      	; 0x2ec4 <EEPROM_enu_Write+0xde>
    2ec8:	9c 83       	std	Y+4, r25	; 0x04
    2eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ece:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <EEPROM_enu_Write+0xd2>
    2ede:	14 c0       	rjmp	.+40     	; 0x2f08 <EEPROM_enu_Write+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee2:	78 85       	ldd	r23, Y+8	; 0x08
    2ee4:	89 85       	ldd	r24, Y+9	; 0x09
    2ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	9a 81       	ldd	r25, Y+2	; 0x02
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <EEPROM_enu_Write+0x11a>
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
    return STATE_OK;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
}
    2f0a:	61 96       	adiw	r28, 0x11	; 17
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	08 95       	ret

00002f1c <EEPROM_enu_Read>:
ES_t EEPROM_enu_Read(u16 Copy_u8_Location,u8 *Copy_u8_receivedData){
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <EEPROM_enu_Read+0x6>
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <EEPROM_enu_Read+0x8>
    2f24:	0f 92       	push	r0
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	9b 83       	std	Y+3, r25	; 0x03
    2f2c:	8a 83       	std	Y+2, r24	; 0x02
    2f2e:	7d 83       	std	Y+5, r23	; 0x05
    2f30:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_receivedData != NULL)
    2f36:	8c 81       	ldd	r24, Y+4	; 0x04
    2f38:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	d1 f0       	breq	.+52     	; 0x2f72 <EEPROM_enu_Read+0x56>
    {
        I2C_enu_Start();
    2f3e:	0e 94 28 24 	call	0x4850	; 0x4850 <I2C_enu_Start>
        I2C_enu_writeData(0x50 | (A2_PIN << 2) | (Copy_u8_Location >> 8), (u8)Copy_u8_Location);
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	9b 81       	ldd	r25, Y+3	; 0x03
    2f46:	89 2f       	mov	r24, r25
    2f48:	99 27       	eor	r25, r25
    2f4a:	80 65       	ori	r24, 0x50	; 80
    2f4c:	2a 81       	ldd	r18, Y+2	; 0x02
    2f4e:	62 2f       	mov	r22, r18
    2f50:	0e 94 4f 24 	call	0x489e	; 0x489e <I2C_enu_writeData>
        I2C_enu_Start();
    2f54:	0e 94 28 24 	call	0x4850	; 0x4850 <I2C_enu_Start>
        I2C_enu_readData(0x50 | (A2_PIN << 2) | (Copy_u8_Location >> 8), Copy_u8_receivedData);
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	89 2f       	mov	r24, r25
    2f5e:	99 27       	eor	r25, r25
    2f60:	80 65       	ori	r24, 0x50	; 80
    2f62:	2c 81       	ldd	r18, Y+4	; 0x04
    2f64:	3d 81       	ldd	r19, Y+5	; 0x05
    2f66:	b9 01       	movw	r22, r18
    2f68:	0e 94 80 24 	call	0x4900	; 0x4900 <I2C_enu_readData>
        I2C_enu_Stop();
    2f6c:	0e 94 39 24 	call	0x4872	; 0x4872 <I2C_enu_Stop>
    2f70:	01 c0       	rjmp	.+2      	; 0x2f74 <EEPROM_enu_Read+0x58>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2f72:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <DC_Motor_enu_Init+0x6>
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	8a 83       	std	Y+2, r24	; 0x02
    2f94:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    2f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	19 f0       	breq	.+6      	; 0x2fa6 <DC_Motor_enu_Init+0x20>
    2fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa2:	88 23       	and	r24, r24
    2fa4:	59 f5       	brne	.+86     	; 0x2ffc <DC_Motor_enu_Init+0x76>
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	19 f0       	breq	.+6      	; 0x2fb2 <DC_Motor_enu_Init+0x2c>
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	88 23       	and	r24, r24
    2fb0:	29 f5       	brne	.+74     	; 0x2ffc <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	79 f4       	brne	.+30     	; 0x2fd6 <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	64 e0       	ldi	r22, 0x04	; 4
    2fbc:	41 e0       	ldi	r20, 0x01	; 1
    2fbe:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    2fc2:	82 e0       	ldi	r24, 0x02	; 2
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    2fcc:	82 e0       	ldi	r24, 0x02	; 2
    2fce:	61 e0       	ldi	r22, 0x01	; 1
    2fd0:	41 e0       	ldi	r20, 0x01	; 1
    2fd2:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	81 30       	cpi	r24, 0x01	; 1
    2fda:	89 f4       	brne	.+34     	; 0x2ffe <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	65 e0       	ldi	r22, 0x05	; 5
    2fe0:	41 e0       	ldi	r20, 0x01	; 1
    2fe2:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    2fe6:	82 e0       	ldi	r24, 0x02	; 2
    2fe8:	62 e0       	ldi	r22, 0x02	; 2
    2fea:	41 e0       	ldi	r20, 0x01	; 1
    2fec:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	63 e0       	ldi	r22, 0x03	; 3
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    2ffa:	01 c0       	rjmp	.+2      	; 0x2ffe <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2ffc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	29 97       	sbiw	r28, 0x09	; 9
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	8a 83       	std	Y+2, r24	; 0x02
    3022:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	39 87       	std	Y+9, r19	; 0x09
    3030:	28 87       	std	Y+8, r18	; 0x08
    3032:	88 85       	ldd	r24, Y+8	; 0x08
    3034:	99 85       	ldd	r25, Y+9	; 0x09
    3036:	00 97       	sbiw	r24, 0x00	; 0
    3038:	31 f0       	breq	.+12     	; 0x3046 <DC_Motor_enu_Rotate+0x3a>
    303a:	28 85       	ldd	r18, Y+8	; 0x08
    303c:	39 85       	ldd	r19, Y+9	; 0x09
    303e:	21 30       	cpi	r18, 0x01	; 1
    3040:	31 05       	cpc	r19, r1
    3042:	89 f1       	breq	.+98     	; 0x30a6 <DC_Motor_enu_Rotate+0x9a>
    3044:	60 c0       	rjmp	.+192    	; 0x3106 <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	3f 83       	std	Y+7, r19	; 0x07
    304e:	2e 83       	std	Y+6, r18	; 0x06
    3050:	8e 81       	ldd	r24, Y+6	; 0x06
    3052:	9f 81       	ldd	r25, Y+7	; 0x07
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	a9 f0       	breq	.+42     	; 0x3082 <DC_Motor_enu_Rotate+0x76>
    3058:	2e 81       	ldd	r18, Y+6	; 0x06
    305a:	3f 81       	ldd	r19, Y+7	; 0x07
    305c:	21 30       	cpi	r18, 0x01	; 1
    305e:	31 05       	cpc	r19, r1
    3060:	01 f5       	brne	.+64     	; 0x30a2 <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	64 e0       	ldi	r22, 0x04	; 4
    3066:	41 e0       	ldi	r20, 0x01	; 1
    3068:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	41 e0       	ldi	r20, 0x01	; 1
    3072:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    3076:	82 e0       	ldi	r24, 0x02	; 2
    3078:	61 e0       	ldi	r22, 0x01	; 1
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    3080:	43 c0       	rjmp	.+134    	; 0x3108 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	64 e0       	ldi	r22, 0x04	; 4
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	40 e0       	ldi	r20, 0x00	; 0
    3092:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    3096:	82 e0       	ldi	r24, 0x02	; 2
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	41 e0       	ldi	r20, 0x01	; 1
    309c:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    30a0:	33 c0       	rjmp	.+102    	; 0x3108 <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    30a2:	19 82       	std	Y+1, r1	; 0x01
    30a4:	31 c0       	rjmp	.+98     	; 0x3108 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	28 2f       	mov	r18, r24
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	3d 83       	std	Y+5, r19	; 0x05
    30ae:	2c 83       	std	Y+4, r18	; 0x04
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	a9 f0       	breq	.+42     	; 0x30e2 <DC_Motor_enu_Rotate+0xd6>
    30b8:	2c 81       	ldd	r18, Y+4	; 0x04
    30ba:	3d 81       	ldd	r19, Y+5	; 0x05
    30bc:	21 30       	cpi	r18, 0x01	; 1
    30be:	31 05       	cpc	r19, r1
    30c0:	01 f5       	brne	.+64     	; 0x3102 <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	65 e0       	ldi	r22, 0x05	; 5
    30c6:	41 e0       	ldi	r20, 0x01	; 1
    30c8:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    30cc:	82 e0       	ldi	r24, 0x02	; 2
    30ce:	62 e0       	ldi	r22, 0x02	; 2
    30d0:	41 e0       	ldi	r20, 0x01	; 1
    30d2:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	63 e0       	ldi	r22, 0x03	; 3
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    30e0:	13 c0       	rjmp	.+38     	; 0x3108 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    30e2:	82 e0       	ldi	r24, 0x02	; 2
    30e4:	65 e0       	ldi	r22, 0x05	; 5
    30e6:	41 e0       	ldi	r20, 0x01	; 1
    30e8:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	62 e0       	ldi	r22, 0x02	; 2
    30f0:	40 e0       	ldi	r20, 0x00	; 0
    30f2:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	63 e0       	ldi	r22, 0x03	; 3
    30fa:	41 e0       	ldi	r20, 0x01	; 1
    30fc:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    3102:	19 82       	std	Y+1, r1	; 0x01
    3104:	01 c0       	rjmp	.+2      	; 0x3108 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    3106:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    3108:	89 81       	ldd	r24, Y+1	; 0x01
}
    310a:	29 96       	adiw	r28, 0x09	; 9
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	08 95       	ret

0000311c <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    311c:	df 93       	push	r29
    311e:	cf 93       	push	r28
    3120:	00 d0       	rcall	.+0      	; 0x3122 <DC_Motor_enu_Stop+0x6>
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
    3126:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	88 23       	and	r24, r24
    3130:	31 f4       	brne	.+12     	; 0x313e <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    3132:	82 e0       	ldi	r24, 0x02	; 2
    3134:	64 e0       	ldi	r22, 0x04	; 4
    3136:	40 e0       	ldi	r20, 0x00	; 0
    3138:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    313c:	0a c0       	rjmp	.+20     	; 0x3152 <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	81 30       	cpi	r24, 0x01	; 1
    3142:	31 f4       	brne	.+12     	; 0x3150 <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    3144:	82 e0       	ldi	r24, 0x02	; 2
    3146:	65 e0       	ldi	r22, 0x05	; 5
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    314e:	01 c0       	rjmp	.+2      	; 0x3152 <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3150:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3152:	89 81       	ldd	r24, Y+1	; 0x01
}
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	cf 91       	pop	r28
    315a:	df 91       	pop	r29
    315c:	08 95       	ret

0000315e <WDT_enu_Enable>:
#include"../../5-LIB/BIT_MATH.h"
#include"WDT_Config.h"
#include"WDT_Private.h"


ES_t WDT_enu_Enable(u8 Copy_u8_Time){
    315e:	df 93       	push	r29
    3160:	cf 93       	push	r28
    3162:	00 d0       	rcall	.+0      	; 0x3164 <WDT_enu_Enable+0x6>
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_enu_errorState = STATE_OK;
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Time<8){
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	88 30       	cpi	r24, 0x08	; 8
    3172:	80 f4       	brcc	.+32     	; 0x3194 <WDT_enu_Enable+0x36>
        /*Enable With Input Time*/
        WDT_WDTCR_REG |= Copy_u8_Time;
    3174:	a1 e4       	ldi	r26, 0x41	; 65
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	e1 e4       	ldi	r30, 0x41	; 65
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	90 81       	ld	r25, Z
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	89 2b       	or	r24, r25
    3182:	8c 93       	st	X, r24
        SET_BIT(WDT_WDTCR_REG,WDE);
    3184:	a1 e4       	ldi	r26, 0x41	; 65
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e1 e4       	ldi	r30, 0x41	; 65
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	88 60       	ori	r24, 0x08	; 8
    3190:	8c 93       	st	X, r24
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <WDT_enu_Enable+0x38>
    }else{
        Local_enu_errorState = STATE_NOT_OK;
    3194:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_enu_errorState;
    3196:	89 81       	ldd	r24, Y+1	; 0x01

}
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	cf 91       	pop	r28
    319e:	df 91       	pop	r29
    31a0:	08 95       	ret

000031a2 <WDT_enu_Disable>:
ES_t WDT_enu_Disable(void){
    31a2:	df 93       	push	r29
    31a4:	cf 93       	push	r28
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    /*Disable Sequance*/
    WDT_WDTCR_REG |= ((1<<WDTOE) | (1<<WDE));
    31aa:	a1 e4       	ldi	r26, 0x41	; 65
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e1 e4       	ldi	r30, 0x41	; 65
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	88 61       	ori	r24, 0x18	; 24
    31b6:	8c 93       	st	X, r24
    WDT_WDTCR_REG = 0x00;
    31b8:	e1 e4       	ldi	r30, 0x41	; 65
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	10 82       	st	Z, r1
    return STATE_OK;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	cf 91       	pop	r28
    31c2:	df 91       	pop	r29
    31c4:	08 95       	ret

000031c6 <UART_enu_Init>:
#include"UART_Private.h"
static void(*UART_pf_TX)(void) =NULL;
static void(*UART_pf_RX)(void) =NULL;
static u8 *UART_pu8_String = NULL;

ES_t UART_enu_Init(void){
    31c6:	df 93       	push	r29
    31c8:	cf 93       	push	r28
    31ca:	00 d0       	rcall	.+0      	; 0x31cc <UART_enu_Init+0x6>
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <UART_enu_Init+0x8>
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    u16 Local_u16_UBRRValue = 0;
    31d2:	1b 82       	std	Y+3, r1	; 0x03
    31d4:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_UCSRCValue = UCSRC_INITIAL_VALUE;
    31d6:	80 e8       	ldi	r24, 0x80	; 128
    31d8:	89 83       	std	Y+1, r24	; 0x01
/****************** UART Mode ****************/
    #if UART_MODE == ASYNCH_NORMAL_MODE
    CLR_BIT(UART_UCSRA_REG,U2X);
    31da:	ab e2       	ldi	r26, 0x2B	; 43
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	eb e2       	ldi	r30, 0x2B	; 43
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	8d 7f       	andi	r24, 0xFD	; 253
    31e6:	8c 93       	st	X, r24
    //CLR_BIT(UART_UCSRA_REG,MPCM);
    CLR_BIT(Local_u8_UCSRCValue,UMSEL);
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	8f 7b       	andi	r24, 0xBF	; 191
    31ec:	89 83       	std	Y+1, r24	; 0x01
    Local_u16_UBRRValue = (F_CPU/(16UL*UART_BAUD_RATE))-1;
    31ee:	87 e6       	ldi	r24, 0x67	; 103
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9b 83       	std	Y+3, r25	; 0x03
    31f4:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(Local_u8_UCSRCValue,UMSEL);
    Local_u16_boudRateValue = (F_CPU/(2UL*UART_BAUD_RATE))-1;
    #endif
/****************** UART Stop Bits ****************/
    #if UART_STOP_BITS == ONE_BIT
    CLR_BIT(Local_u8_UCSRCValue,USBS);
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	87 7f       	andi	r24, 0xF7	; 247
    31fa:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_DATA_BITS == _7_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    CLR_BIT(Local_u8_UCSRCValue,UCZ0);
    #elif UART_DATA_BITS == _8_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    31fc:	aa e2       	ldi	r26, 0x2A	; 42
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	ea e2       	ldi	r30, 0x2A	; 42
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	8b 7f       	andi	r24, 0xFB	; 251
    3208:	8c 93       	st	X, r24
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	84 60       	ori	r24, 0x04	; 4
    320e:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	82 60       	ori	r24, 0x02	; 2
    3214:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    #endif
/******************UART Parity Bit****************/
    #if UART_PARITY_BIT == NONE
    CLR_BIT(Local_u8_UCSRCValue,UPM1);
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	8f 7d       	andi	r24, 0xDF	; 223
    321a:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	8f 7e       	andi	r24, 0xEF	; 239
    3220:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_PARITY_BIT == EVEN_PARITY
    SET_BIT(Local_u8_UCSRCValue,UPM1);
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    #endif   
/************** Update UCSRC REG ********************/
    UART_UCSRC_REG = Local_u8_UCSRCValue;
    3222:	e0 e4       	ldi	r30, 0x40	; 64
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	89 81       	ldd	r24, Y+1	; 0x01
    3228:	80 83       	st	Z, r24
/************** Baud Rate Value***********************/
    UART_UBRRL_REG = (u8)Local_u16_UBRRValue;
    322a:	e9 e2       	ldi	r30, 0x29	; 41
    322c:	f0 e0       	ldi	r31, 0x00	; 0
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	80 83       	st	Z, r24
    UART_UBRRH_REG = (u8)(Local_u16_UBRRValue>>8);
    3232:	e0 e4       	ldi	r30, 0x40	; 64
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	9b 81       	ldd	r25, Y+3	; 0x03
    323a:	89 2f       	mov	r24, r25
    323c:	99 27       	eor	r25, r25
    323e:	80 83       	st	Z, r24
/************** Enable (RX-TX) ************************/
    SET_BIT(UART_UCSRB_REG,RXEN);
    3240:	aa e2       	ldi	r26, 0x2A	; 42
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	ea e2       	ldi	r30, 0x2A	; 42
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	80 61       	ori	r24, 0x10	; 16
    324c:	8c 93       	st	X, r24
    SET_BIT(UART_UCSRB_REG,TXEN);
    324e:	aa e2       	ldi	r26, 0x2A	; 42
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	ea e2       	ldi	r30, 0x2A	; 42
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	88 60       	ori	r24, 0x08	; 8
    325a:	8c 93       	st	X, r24
}
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	08 95       	ret

0000326a <UART_enu_sendChar>:
ES_t UART_enu_sendChar(u8 Copy_u8_Char){
    326a:	df 93       	push	r29
    326c:	cf 93       	push	r28
    326e:	00 d0       	rcall	.+0      	; 0x3270 <UART_enu_sendChar+0x6>
    3270:	cd b7       	in	r28, 0x3d	; 61
    3272:	de b7       	in	r29, 0x3e	; 62
    3274:	89 83       	std	Y+1, r24	; 0x01
    /*Wait Transmit register is empty*/
    while(!GET_BIT(UART_UCSRA_REG,UDRE));
    3276:	eb e2       	ldi	r30, 0x2B	; 43
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	82 95       	swap	r24
    327e:	86 95       	lsr	r24
    3280:	87 70       	andi	r24, 0x07	; 7
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	81 70       	andi	r24, 0x01	; 1
    3288:	90 70       	andi	r25, 0x00	; 0
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	a1 f3       	breq	.-24     	; 0x3276 <UART_enu_sendChar+0xc>
    /*Send Byte Value*/
    UART_UDR_REG = Copy_u8_Char;
    328e:	ec e2       	ldi	r30, 0x2C	; 44
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	80 83       	st	Z, r24
}
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <UART_enu_recieveChar>:
ES_t UART_enu_recieveChar(u8 *Copy_pu8_recievedChar){
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <UART_enu_recieveChar+0x6>
    32a6:	0f 92       	push	r0
    32a8:	cd b7       	in	r28, 0x3d	; 61
    32aa:	de b7       	in	r29, 0x3e	; 62
    32ac:	9b 83       	std	Y+3, r25	; 0x03
    32ae:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedChar!= NULL){
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	61 f0       	breq	.+24     	; 0x32d4 <UART_enu_recieveChar+0x34>
        /*Wait The Data Is Recieved */
        while(!GET_BIT(UART_UCSRA_REG,RXC));
    32bc:	eb e2       	ldi	r30, 0x2B	; 43
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	88 23       	and	r24, r24
    32c4:	dc f7       	brge	.-10     	; 0x32bc <UART_enu_recieveChar+0x1c>
        *Copy_pu8_recievedChar = UART_UDR_REG;
    32c6:	ec e2       	ldi	r30, 0x2C	; 44
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	ea 81       	ldd	r30, Y+2	; 0x02
    32ce:	fb 81       	ldd	r31, Y+3	; 0x03
    32d0:	80 83       	st	Z, r24
    32d2:	01 c0       	rjmp	.+2      	; 0x32d6 <UART_enu_recieveChar+0x36>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    32d4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	cf 91       	pop	r28
    32e0:	df 91       	pop	r29
    32e2:	08 95       	ret

000032e4 <UART_enu_sendString>:
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	00 d0       	rcall	.+0      	; 0x32ea <UART_enu_sendString+0x6>
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <UART_enu_sendString+0x8>
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    32f0:	9c 83       	std	Y+4, r25	; 0x04
    32f2:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_pu8_String!=NULL){
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	9c 81       	ldd	r25, Y+4	; 0x04
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	c9 f1       	breq	.+114    	; 0x3372 <UART_enu_sendString+0x8e>
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    3300:	19 82       	std	Y+1, r1	; 0x01
    3302:	1b c0       	rjmp	.+54     	; 0x333a <UART_enu_sendString+0x56>
        /*Wait Transmit register is empty*/
        while(!GET_BIT(UART_UCSRA_REG,UDRE));
    3304:	eb e2       	ldi	r30, 0x2B	; 43
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	82 95       	swap	r24
    330c:	86 95       	lsr	r24
    330e:	87 70       	andi	r24, 0x07	; 7
    3310:	88 2f       	mov	r24, r24
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	81 70       	andi	r24, 0x01	; 1
    3316:	90 70       	andi	r25, 0x00	; 0
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	a1 f3       	breq	.-24     	; 0x3304 <UART_enu_sendString+0x20>
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    331c:	ac e2       	ldi	r26, 0x2C	; 44
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	28 2f       	mov	r18, r24
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	fc 01       	movw	r30, r24
    332c:	e2 0f       	add	r30, r18
    332e:	f3 1f       	adc	r31, r19
    3330:	80 81       	ld	r24, Z
    3332:	8c 93       	st	X, r24
    return Local_u8_errorState;
}
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_String!=NULL){
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	8f 5f       	subi	r24, 0xFF	; 255
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	8b 81       	ldd	r24, Y+3	; 0x03
    3342:	9c 81       	ldd	r25, Y+4	; 0x04
    3344:	fc 01       	movw	r30, r24
    3346:	e2 0f       	add	r30, r18
    3348:	f3 1f       	adc	r31, r19
    334a:	80 81       	ld	r24, Z
    334c:	88 23       	and	r24, r24
    334e:	d1 f6       	brne	.-76     	; 0x3304 <UART_enu_sendString+0x20>
        /*Wait Transmit register is empty*/
        while(!GET_BIT(UART_UCSRA_REG,UDRE));
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    }
    while((!GET_BIT(UART_UCSRA_REG,UDRE)));
    3350:	eb e2       	ldi	r30, 0x2B	; 43
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	82 95       	swap	r24
    3358:	86 95       	lsr	r24
    335a:	87 70       	andi	r24, 0x07	; 7
    335c:	88 2f       	mov	r24, r24
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	81 70       	andi	r24, 0x01	; 1
    3362:	90 70       	andi	r25, 0x00	; 0
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	a1 f3       	breq	.-24     	; 0x3350 <UART_enu_sendString+0x6c>
    UART_UDR_REG = '\r';
    3368:	ec e2       	ldi	r30, 0x2C	; 44
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	8d e0       	ldi	r24, 0x0D	; 13
    336e:	80 83       	st	Z, r24
    3370:	01 c0       	rjmp	.+2      	; 0x3374 <UART_enu_sendString+0x90>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3372:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	cf 91       	pop	r28
    3380:	df 91       	pop	r29
    3382:	08 95       	ret

00003384 <UART_enu_recieveString>:
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <UART_enu_recieveString+0x6>
    338a:	00 d0       	rcall	.+0      	; 0x338c <UART_enu_recieveString+0x8>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	9c 83       	std	Y+4, r25	; 0x04
    3394:	8b 83       	std	Y+3, r24	; 0x03
    3396:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_Iterator = 0;
    3398:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedString!= NULL){
    339e:	8b 81       	ldd	r24, Y+3	; 0x03
    33a0:	9c 81       	ldd	r25, Y+4	; 0x04
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	19 f1       	breq	.+70     	; 0x33ec <UART_enu_recieveString+0x68>
    33a6:	14 c0       	rjmp	.+40     	; 0x33d0 <UART_enu_recieveString+0x4c>
        while(Local_u8_Iterator < Copy_u8_messageSize){
            while(!GET_BIT(UART_UCSRA_REG,RXC));
    33a8:	eb e2       	ldi	r30, 0x2B	; 43
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	88 23       	and	r24, r24
    33b0:	dc f7       	brge	.-10     	; 0x33a8 <UART_enu_recieveString+0x24>
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	28 2f       	mov	r18, r24
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ba:	9c 81       	ldd	r25, Y+4	; 0x04
    33bc:	dc 01       	movw	r26, r24
    33be:	a2 0f       	add	r26, r18
    33c0:	b3 1f       	adc	r27, r19
    33c2:	ec e2       	ldi	r30, 0x2C	; 44
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	8c 93       	st	X, r24
            Local_u8_Iterator++;
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	8f 5f       	subi	r24, 0xFF	; 255
    33ce:	8a 83       	std	Y+2, r24	; 0x02
}
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    u8 Local_u8_Iterator = 0;
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_recievedString!= NULL){
        while(Local_u8_Iterator < Copy_u8_messageSize){
    33d0:	9a 81       	ldd	r25, Y+2	; 0x02
    33d2:	8d 81       	ldd	r24, Y+5	; 0x05
    33d4:	98 17       	cp	r25, r24
    33d6:	40 f3       	brcs	.-48     	; 0x33a8 <UART_enu_recieveString+0x24>
            while(!GET_BIT(UART_UCSRA_REG,RXC));
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
            Local_u8_Iterator++;
        }
        Copy_pu8_recievedString[Local_u8_Iterator] = '\0';
    33d8:	8a 81       	ldd	r24, Y+2	; 0x02
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	fc 01       	movw	r30, r24
    33e4:	e2 0f       	add	r30, r18
    33e6:	f3 1f       	adc	r31, r19
    33e8:	10 82       	st	Z, r1
    33ea:	01 c0       	rjmp	.+2      	; 0x33ee <UART_enu_recieveString+0x6a>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    33ec:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <UART_enu_sendNUmber>:
ES_t UART_enu_sendNUmber(s32 Copy_s32_Num){
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	61 97       	sbiw	r28, 0x11	; 17
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	6e 87       	std	Y+14, r22	; 0x0e
    341a:	7f 87       	std	Y+15, r23	; 0x0f
    341c:	88 8b       	std	Y+16, r24	; 0x10
    341e:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0,flag = 0;
    3420:	1b 82       	std	Y+3, r1	; 0x03
    3422:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    3424:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_s32_Num < 0){
    3426:	8e 85       	ldd	r24, Y+14	; 0x0e
    3428:	9f 85       	ldd	r25, Y+15	; 0x0f
    342a:	a8 89       	ldd	r26, Y+16	; 0x10
    342c:	b9 89       	ldd	r27, Y+17	; 0x11
    342e:	bb 23       	and	r27, r27
    3430:	8c f4       	brge	.+34     	; 0x3454 <UART_enu_sendNUmber+0x54>
        Copy_s32_Num *= -1;
    3432:	8e 85       	ldd	r24, Y+14	; 0x0e
    3434:	9f 85       	ldd	r25, Y+15	; 0x0f
    3436:	a8 89       	ldd	r26, Y+16	; 0x10
    3438:	b9 89       	ldd	r27, Y+17	; 0x11
    343a:	b0 95       	com	r27
    343c:	a0 95       	com	r26
    343e:	90 95       	com	r25
    3440:	81 95       	neg	r24
    3442:	9f 4f       	sbci	r25, 0xFF	; 255
    3444:	af 4f       	sbci	r26, 0xFF	; 255
    3446:	bf 4f       	sbci	r27, 0xFF	; 255
    3448:	8e 87       	std	Y+14, r24	; 0x0e
    344a:	9f 87       	std	Y+15, r25	; 0x0f
    344c:	a8 8b       	std	Y+16, r26	; 0x10
    344e:	b9 8b       	std	Y+17, r27	; 0x11
        flag =1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	8a 83       	std	Y+2, r24	; 0x02
    }
    if (Copy_s32_Num == 0){
    3454:	8e 85       	ldd	r24, Y+14	; 0x0e
    3456:	9f 85       	ldd	r25, Y+15	; 0x0f
    3458:	a8 89       	ldd	r26, Y+16	; 0x10
    345a:	b9 89       	ldd	r27, Y+17	; 0x11
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	a1 05       	cpc	r26, r1
    3460:	b1 05       	cpc	r27, r1
    3462:	a9 f5       	brne	.+106    	; 0x34ce <UART_enu_sendNUmber+0xce>
        UART_enu_sendChar('0');
    3464:	80 e3       	ldi	r24, 0x30	; 48
    3466:	0e 94 35 19 	call	0x326a	; 0x326a <UART_enu_sendChar>
        UART_enu_sendChar('\r');
    346a:	8d e0       	ldi	r24, 0x0D	; 13
    346c:	0e 94 35 19 	call	0x326a	; 0x326a <UART_enu_sendChar>
    3470:	60 c0       	rjmp	.+192    	; 0x3532 <UART_enu_sendNUmber+0x132>
    }
    else
    {
        while (Copy_s32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = (Copy_s32_Num % 10) + '0';
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	08 2f       	mov	r16, r24
    3476:	10 e0       	ldi	r17, 0x00	; 0
    3478:	8e 85       	ldd	r24, Y+14	; 0x0e
    347a:	9f 85       	ldd	r25, Y+15	; 0x0f
    347c:	a8 89       	ldd	r26, Y+16	; 0x10
    347e:	b9 89       	ldd	r27, Y+17	; 0x11
    3480:	2a e0       	ldi	r18, 0x0A	; 10
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	40 e0       	ldi	r20, 0x00	; 0
    3486:	50 e0       	ldi	r21, 0x00	; 0
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__divmodsi4>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	28 2f       	mov	r18, r24
    3496:	20 5d       	subi	r18, 0xD0	; 208
    3498:	ce 01       	movw	r24, r28
    349a:	04 96       	adiw	r24, 0x04	; 4
    349c:	fc 01       	movw	r30, r24
    349e:	e0 0f       	add	r30, r16
    34a0:	f1 1f       	adc	r31, r17
    34a2:	20 83       	st	Z, r18
            Copy_s32_Num /= 10;
    34a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    34a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    34a8:	a8 89       	ldd	r26, Y+16	; 0x10
    34aa:	b9 89       	ldd	r27, Y+17	; 0x11
    34ac:	2a e0       	ldi	r18, 0x0A	; 10
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	50 e0       	ldi	r21, 0x00	; 0
    34b4:	bc 01       	movw	r22, r24
    34b6:	cd 01       	movw	r24, r26
    34b8:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <__divmodsi4>
    34bc:	da 01       	movw	r26, r20
    34be:	c9 01       	movw	r24, r18
    34c0:	8e 87       	std	Y+14, r24	; 0x0e
    34c2:	9f 87       	std	Y+15, r25	; 0x0f
    34c4:	a8 8b       	std	Y+16, r26	; 0x10
    34c6:	b9 8b       	std	Y+17, r27	; 0x11
            Local_u8_iterator1++;
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	8f 5f       	subi	r24, 0xFF	; 255
    34cc:	8b 83       	std	Y+3, r24	; 0x03
        UART_enu_sendChar('0');
        UART_enu_sendChar('\r');
    }
    else
    {
        while (Copy_s32_Num != 0)
    34ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    34d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    34d2:	a8 89       	ldd	r26, Y+16	; 0x10
    34d4:	b9 89       	ldd	r27, Y+17	; 0x11
    34d6:	00 97       	sbiw	r24, 0x00	; 0
    34d8:	a1 05       	cpc	r26, r1
    34da:	b1 05       	cpc	r27, r1
    34dc:	51 f6       	brne	.-108    	; 0x3472 <UART_enu_sendNUmber+0x72>
        {
            Local_u8_numArr[Local_u8_iterator1] = (Copy_s32_Num % 10) + '0';
            Copy_s32_Num /= 10;
            Local_u8_iterator1++;
        }
        if(flag){
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	88 23       	and	r24, r24
    34e2:	69 f0       	breq	.+26     	; 0x34fe <UART_enu_sendNUmber+0xfe>
        Local_u8_numArr[Local_u8_iterator1] = '-';
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	ce 01       	movw	r24, r28
    34ec:	04 96       	adiw	r24, 0x04	; 4
    34ee:	fc 01       	movw	r30, r24
    34f0:	e2 0f       	add	r30, r18
    34f2:	f3 1f       	adc	r31, r19
    34f4:	8d e2       	ldi	r24, 0x2D	; 45
    34f6:	80 83       	st	Z, r24
        Local_u8_iterator1++;
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	8f 5f       	subi	r24, 0xFF	; 255
    34fc:	8b 83       	std	Y+3, r24	; 0x03
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	81 50       	subi	r24, 0x01	; 1
    3502:	89 83       	std	Y+1, r24	; 0x01
    3504:	10 c0       	rjmp	.+32     	; 0x3526 <UART_enu_sendNUmber+0x126>
        {
            UART_enu_sendChar(Local_u8_numArr[Local_u8_iterator2]);
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	28 2f       	mov	r18, r24
    350a:	33 27       	eor	r19, r19
    350c:	27 fd       	sbrc	r18, 7
    350e:	30 95       	com	r19
    3510:	ce 01       	movw	r24, r28
    3512:	04 96       	adiw	r24, 0x04	; 4
    3514:	fc 01       	movw	r30, r24
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	80 81       	ld	r24, Z
    351c:	0e 94 35 19 	call	0x326a	; 0x326a <UART_enu_sendChar>
        }
        if(flag){
        Local_u8_numArr[Local_u8_iterator1] = '-';
        Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	81 50       	subi	r24, 0x01	; 1
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	88 23       	and	r24, r24
    352a:	6c f7       	brge	.-38     	; 0x3506 <UART_enu_sendNUmber+0x106>
        {
            UART_enu_sendChar(Local_u8_numArr[Local_u8_iterator2]);
        }
        UART_enu_sendChar('\r');
    352c:	8d e0       	ldi	r24, 0x0D	; 13
    352e:	0e 94 35 19 	call	0x326a	; 0x326a <UART_enu_sendChar>
    }
    return STATE_OK;
    3532:	81 e0       	ldi	r24, 0x01	; 1
}
    3534:	61 96       	adiw	r28, 0x11	; 17
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	1f 91       	pop	r17
    3546:	0f 91       	pop	r16
    3548:	08 95       	ret

0000354a <__vector_13>:
/*************ISR(Recieve)**********/
ISR(UART_RX){
    354a:	1f 92       	push	r1
    354c:	0f 92       	push	r0
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	0f 92       	push	r0
    3552:	11 24       	eor	r1, r1
    3554:	2f 93       	push	r18
    3556:	3f 93       	push	r19
    3558:	4f 93       	push	r20
    355a:	5f 93       	push	r21
    355c:	6f 93       	push	r22
    355e:	7f 93       	push	r23
    3560:	8f 93       	push	r24
    3562:	9f 93       	push	r25
    3564:	af 93       	push	r26
    3566:	bf 93       	push	r27
    3568:	ef 93       	push	r30
    356a:	ff 93       	push	r31
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	cd b7       	in	r28, 0x3d	; 61
    3572:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_RX != NULL)
    3574:	80 91 53 01 	lds	r24, 0x0153
    3578:	90 91 54 01 	lds	r25, 0x0154
    357c:	00 97       	sbiw	r24, 0x00	; 0
    357e:	29 f0       	breq	.+10     	; 0x358a <__vector_13+0x40>
        UART_pf_RX();
    3580:	e0 91 53 01 	lds	r30, 0x0153
    3584:	f0 91 54 01 	lds	r31, 0x0154
    3588:	09 95       	icall
}
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	ff 91       	pop	r31
    3590:	ef 91       	pop	r30
    3592:	bf 91       	pop	r27
    3594:	af 91       	pop	r26
    3596:	9f 91       	pop	r25
    3598:	8f 91       	pop	r24
    359a:	7f 91       	pop	r23
    359c:	6f 91       	pop	r22
    359e:	5f 91       	pop	r21
    35a0:	4f 91       	pop	r20
    35a2:	3f 91       	pop	r19
    35a4:	2f 91       	pop	r18
    35a6:	0f 90       	pop	r0
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	0f 90       	pop	r0
    35ac:	1f 90       	pop	r1
    35ae:	18 95       	reti

000035b0 <__vector_15>:
/*************ISR(Transmit)**********/
ISR(UART_TX){
    35b0:	1f 92       	push	r1
    35b2:	0f 92       	push	r0
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	0f 92       	push	r0
    35b8:	11 24       	eor	r1, r1
    35ba:	2f 93       	push	r18
    35bc:	3f 93       	push	r19
    35be:	4f 93       	push	r20
    35c0:	5f 93       	push	r21
    35c2:	6f 93       	push	r22
    35c4:	7f 93       	push	r23
    35c6:	8f 93       	push	r24
    35c8:	9f 93       	push	r25
    35ca:	af 93       	push	r26
    35cc:	bf 93       	push	r27
    35ce:	ef 93       	push	r30
    35d0:	ff 93       	push	r31
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_TX != NULL)
    35da:	80 91 51 01 	lds	r24, 0x0151
    35de:	90 91 52 01 	lds	r25, 0x0152
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	29 f0       	breq	.+10     	; 0x35f0 <__vector_15+0x40>
        UART_pf_RX();
    35e6:	e0 91 53 01 	lds	r30, 0x0153
    35ea:	f0 91 54 01 	lds	r31, 0x0154
    35ee:	09 95       	icall

}
    35f0:	cf 91       	pop	r28
    35f2:	df 91       	pop	r29
    35f4:	ff 91       	pop	r31
    35f6:	ef 91       	pop	r30
    35f8:	bf 91       	pop	r27
    35fa:	af 91       	pop	r26
    35fc:	9f 91       	pop	r25
    35fe:	8f 91       	pop	r24
    3600:	7f 91       	pop	r23
    3602:	6f 91       	pop	r22
    3604:	5f 91       	pop	r21
    3606:	4f 91       	pop	r20
    3608:	3f 91       	pop	r19
    360a:	2f 91       	pop	r18
    360c:	0f 90       	pop	r0
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	0f 90       	pop	r0
    3612:	1f 90       	pop	r1
    3614:	18 95       	reti

00003616 <Timers_enu_Init>:
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[4])(void)= {NULL};
static  void(*Timers_pf_Timer2[2])(void)= {NULL};

ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    3616:	df 93       	push	r29
    3618:	cf 93       	push	r28
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	2c 97       	sbiw	r28, 0x0c	; 12
    3620:	0f b6       	in	r0, 0x3f	; 63
    3622:	f8 94       	cli
    3624:	de bf       	out	0x3e, r29	; 62
    3626:	0f be       	out	0x3f, r0	; 63
    3628:	cd bf       	out	0x3d, r28	; 61
    362a:	8a 83       	std	Y+2, r24	; 0x02
    362c:	6b 83       	std	Y+3, r22	; 0x03
    362e:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<3)&& (Copy_u8_Mode < 9)&&(Copy_u8_Prescaler<8)){
    3634:	8a 81       	ldd	r24, Y+2	; 0x02
    3636:	83 30       	cpi	r24, 0x03	; 3
    3638:	08 f0       	brcs	.+2      	; 0x363c <Timers_enu_Init+0x26>
    363a:	ca c2       	rjmp	.+1428   	; 0x3bd0 <Timers_enu_Init+0x5ba>
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	89 30       	cpi	r24, 0x09	; 9
    3640:	08 f0       	brcs	.+2      	; 0x3644 <Timers_enu_Init+0x2e>
    3642:	c6 c2       	rjmp	.+1420   	; 0x3bd0 <Timers_enu_Init+0x5ba>
    3644:	8c 81       	ldd	r24, Y+4	; 0x04
    3646:	88 30       	cpi	r24, 0x08	; 8
    3648:	08 f0       	brcs	.+2      	; 0x364c <Timers_enu_Init+0x36>
    364a:	c2 c2       	rjmp	.+1412   	; 0x3bd0 <Timers_enu_Init+0x5ba>
    switch (Copy_u8_TimerNo)
    364c:	8a 81       	ldd	r24, Y+2	; 0x02
    364e:	28 2f       	mov	r18, r24
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	3c 87       	std	Y+12, r19	; 0x0c
    3654:	2b 87       	std	Y+11, r18	; 0x0b
    3656:	8b 85       	ldd	r24, Y+11	; 0x0b
    3658:	9c 85       	ldd	r25, Y+12	; 0x0c
    365a:	81 30       	cpi	r24, 0x01	; 1
    365c:	91 05       	cpc	r25, r1
    365e:	09 f4       	brne	.+2      	; 0x3662 <Timers_enu_Init+0x4c>
    3660:	d5 c0       	rjmp	.+426    	; 0x380c <Timers_enu_Init+0x1f6>
    3662:	2b 85       	ldd	r18, Y+11	; 0x0b
    3664:	3c 85       	ldd	r19, Y+12	; 0x0c
    3666:	22 30       	cpi	r18, 0x02	; 2
    3668:	31 05       	cpc	r19, r1
    366a:	09 f4       	brne	.+2      	; 0x366e <Timers_enu_Init+0x58>
    366c:	ea c1       	rjmp	.+980    	; 0x3a42 <Timers_enu_Init+0x42c>
    366e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3670:	9c 85       	ldd	r25, Y+12	; 0x0c
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	09 f0       	breq	.+2      	; 0x3678 <Timers_enu_Init+0x62>
    3676:	ad c2       	rjmp	.+1370   	; 0x3bd2 <Timers_enu_Init+0x5bc>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    3678:	8b 81       	ldd	r24, Y+3	; 0x03
    367a:	28 2f       	mov	r18, r24
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	3a 87       	std	Y+10, r19	; 0x0a
    3680:	29 87       	std	Y+9, r18	; 0x09
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	83 30       	cpi	r24, 0x03	; 3
    3688:	91 05       	cpc	r25, r1
    368a:	09 f4       	brne	.+2      	; 0x368e <Timers_enu_Init+0x78>
    368c:	40 c0       	rjmp	.+128    	; 0x370e <Timers_enu_Init+0xf8>
    368e:	29 85       	ldd	r18, Y+9	; 0x09
    3690:	3a 85       	ldd	r19, Y+10	; 0x0a
    3692:	24 30       	cpi	r18, 0x04	; 4
    3694:	31 05       	cpc	r19, r1
    3696:	54 f4       	brge	.+20     	; 0x36ac <Timers_enu_Init+0x96>
    3698:	89 85       	ldd	r24, Y+9	; 0x09
    369a:	9a 85       	ldd	r25, Y+10	; 0x0a
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	c9 f0       	breq	.+50     	; 0x36d2 <Timers_enu_Init+0xbc>
    36a0:	29 85       	ldd	r18, Y+9	; 0x09
    36a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    36a4:	21 30       	cpi	r18, 0x01	; 1
    36a6:	31 05       	cpc	r19, r1
    36a8:	19 f1       	breq	.+70     	; 0x36f0 <Timers_enu_Init+0xda>
    36aa:	a4 c0       	rjmp	.+328    	; 0x37f4 <Timers_enu_Init+0x1de>
    36ac:	89 85       	ldd	r24, Y+9	; 0x09
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	85 30       	cpi	r24, 0x05	; 5
    36b2:	91 05       	cpc	r25, r1
    36b4:	09 f4       	brne	.+2      	; 0x36b8 <Timers_enu_Init+0xa2>
    36b6:	65 c0       	rjmp	.+202    	; 0x3782 <Timers_enu_Init+0x16c>
    36b8:	29 85       	ldd	r18, Y+9	; 0x09
    36ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    36bc:	25 30       	cpi	r18, 0x05	; 5
    36be:	31 05       	cpc	r19, r1
    36c0:	0c f4       	brge	.+2      	; 0x36c4 <Timers_enu_Init+0xae>
    36c2:	42 c0       	rjmp	.+132    	; 0x3748 <Timers_enu_Init+0x132>
    36c4:	89 85       	ldd	r24, Y+9	; 0x09
    36c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c8:	86 30       	cpi	r24, 0x06	; 6
    36ca:	91 05       	cpc	r25, r1
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <Timers_enu_Init+0xba>
    36ce:	76 c0       	rjmp	.+236    	; 0x37bc <Timers_enu_Init+0x1a6>
    36d0:	91 c0       	rjmp	.+290    	; 0x37f4 <Timers_enu_Init+0x1de>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    36d2:	a3 e5       	ldi	r26, 0x53	; 83
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	e3 e5       	ldi	r30, 0x53	; 83
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	80 81       	ld	r24, Z
    36dc:	8f 7b       	andi	r24, 0xBF	; 191
    36de:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    36e0:	a3 e5       	ldi	r26, 0x53	; 83
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	e3 e5       	ldi	r30, 0x53	; 83
    36e6:	f0 e0       	ldi	r31, 0x00	; 0
    36e8:	80 81       	ld	r24, Z
    36ea:	87 7f       	andi	r24, 0xF7	; 247
    36ec:	8c 93       	st	X, r24
    36ee:	82 c0       	rjmp	.+260    	; 0x37f4 <Timers_enu_Init+0x1de>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    36f0:	a3 e5       	ldi	r26, 0x53	; 83
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	e3 e5       	ldi	r30, 0x53	; 83
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	8f 7b       	andi	r24, 0xBF	; 191
    36fc:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    36fe:	a3 e5       	ldi	r26, 0x53	; 83
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	e3 e5       	ldi	r30, 0x53	; 83
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	88 60       	ori	r24, 0x08	; 8
    370a:	8c 93       	st	X, r24
    370c:	73 c0       	rjmp	.+230    	; 0x37f4 <Timers_enu_Init+0x1de>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    370e:	a3 e5       	ldi	r26, 0x53	; 83
    3710:	b0 e0       	ldi	r27, 0x00	; 0
    3712:	e3 e5       	ldi	r30, 0x53	; 83
    3714:	f0 e0       	ldi	r31, 0x00	; 0
    3716:	80 81       	ld	r24, Z
    3718:	80 64       	ori	r24, 0x40	; 64
    371a:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    371c:	a3 e5       	ldi	r26, 0x53	; 83
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	e3 e5       	ldi	r30, 0x53	; 83
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	88 60       	ori	r24, 0x08	; 8
    3728:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    372a:	a3 e5       	ldi	r26, 0x53	; 83
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	e3 e5       	ldi	r30, 0x53	; 83
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	80 62       	ori	r24, 0x20	; 32
    3736:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    3738:	a3 e5       	ldi	r26, 0x53	; 83
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	e3 e5       	ldi	r30, 0x53	; 83
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	80 61       	ori	r24, 0x10	; 16
    3744:	8c 93       	st	X, r24
    3746:	56 c0       	rjmp	.+172    	; 0x37f4 <Timers_enu_Init+0x1de>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3748:	a3 e5       	ldi	r26, 0x53	; 83
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	e3 e5       	ldi	r30, 0x53	; 83
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	80 64       	ori	r24, 0x40	; 64
    3754:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3756:	a3 e5       	ldi	r26, 0x53	; 83
    3758:	b0 e0       	ldi	r27, 0x00	; 0
    375a:	e3 e5       	ldi	r30, 0x53	; 83
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	88 60       	ori	r24, 0x08	; 8
    3762:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3764:	a3 e5       	ldi	r26, 0x53	; 83
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	e3 e5       	ldi	r30, 0x53	; 83
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	80 62       	ori	r24, 0x20	; 32
    3770:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    3772:	a3 e5       	ldi	r26, 0x53	; 83
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	e3 e5       	ldi	r30, 0x53	; 83
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	8f 7e       	andi	r24, 0xEF	; 239
    377e:	8c 93       	st	X, r24
    3780:	39 c0       	rjmp	.+114    	; 0x37f4 <Timers_enu_Init+0x1de>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3782:	a3 e5       	ldi	r26, 0x53	; 83
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	e3 e5       	ldi	r30, 0x53	; 83
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	80 64       	ori	r24, 0x40	; 64
    378e:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    3790:	a3 e5       	ldi	r26, 0x53	; 83
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	e3 e5       	ldi	r30, 0x53	; 83
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	87 7f       	andi	r24, 0xF7	; 247
    379c:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    379e:	a3 e5       	ldi	r26, 0x53	; 83
    37a0:	b0 e0       	ldi	r27, 0x00	; 0
    37a2:	e3 e5       	ldi	r30, 0x53	; 83
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	80 62       	ori	r24, 0x20	; 32
    37aa:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    37ac:	a3 e5       	ldi	r26, 0x53	; 83
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	e3 e5       	ldi	r30, 0x53	; 83
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	80 81       	ld	r24, Z
    37b6:	80 61       	ori	r24, 0x10	; 16
    37b8:	8c 93       	st	X, r24
    37ba:	1c c0       	rjmp	.+56     	; 0x37f4 <Timers_enu_Init+0x1de>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    37bc:	a3 e5       	ldi	r26, 0x53	; 83
    37be:	b0 e0       	ldi	r27, 0x00	; 0
    37c0:	e3 e5       	ldi	r30, 0x53	; 83
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	80 64       	ori	r24, 0x40	; 64
    37c8:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    37ca:	a3 e5       	ldi	r26, 0x53	; 83
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	e3 e5       	ldi	r30, 0x53	; 83
    37d0:	f0 e0       	ldi	r31, 0x00	; 0
    37d2:	80 81       	ld	r24, Z
    37d4:	87 7f       	andi	r24, 0xF7	; 247
    37d6:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    37d8:	a3 e5       	ldi	r26, 0x53	; 83
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e3 e5       	ldi	r30, 0x53	; 83
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	80 62       	ori	r24, 0x20	; 32
    37e4:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    37e6:	a3 e5       	ldi	r26, 0x53	; 83
    37e8:	b0 e0       	ldi	r27, 0x00	; 0
    37ea:	e3 e5       	ldi	r30, 0x53	; 83
    37ec:	f0 e0       	ldi	r31, 0x00	; 0
    37ee:	80 81       	ld	r24, Z
    37f0:	8f 7e       	andi	r24, 0xEF	; 239
    37f2:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    37f4:	a3 e5       	ldi	r26, 0x53	; 83
    37f6:	b0 e0       	ldi	r27, 0x00	; 0
    37f8:	e3 e5       	ldi	r30, 0x53	; 83
    37fa:	f0 e0       	ldi	r31, 0x00	; 0
    37fc:	90 81       	ld	r25, Z
    37fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3800:	89 2b       	or	r24, r25
    3802:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    3804:	8c 81       	ldd	r24, Y+4	; 0x04
    3806:	80 93 67 01 	sts	0x0167, r24
    380a:	e3 c1       	rjmp	.+966    	; 0x3bd2 <Timers_enu_Init+0x5bc>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	28 2f       	mov	r18, r24
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	38 87       	std	Y+8, r19	; 0x08
    3814:	2f 83       	std	Y+7, r18	; 0x07
    3816:	8f 81       	ldd	r24, Y+7	; 0x07
    3818:	98 85       	ldd	r25, Y+8	; 0x08
    381a:	87 30       	cpi	r24, 0x07	; 7
    381c:	91 05       	cpc	r25, r1
    381e:	09 f4       	brne	.+2      	; 0x3822 <Timers_enu_Init+0x20c>
    3820:	5c c0       	rjmp	.+184    	; 0x38da <Timers_enu_Init+0x2c4>
    3822:	2f 81       	ldd	r18, Y+7	; 0x07
    3824:	38 85       	ldd	r19, Y+8	; 0x08
    3826:	28 30       	cpi	r18, 0x08	; 8
    3828:	31 05       	cpc	r19, r1
    382a:	54 f4       	brge	.+20     	; 0x3840 <Timers_enu_Init+0x22a>
    382c:	8f 81       	ldd	r24, Y+7	; 0x07
    382e:	98 85       	ldd	r25, Y+8	; 0x08
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	c9 f0       	breq	.+50     	; 0x3866 <Timers_enu_Init+0x250>
    3834:	2f 81       	ldd	r18, Y+7	; 0x07
    3836:	38 85       	ldd	r19, Y+8	; 0x08
    3838:	21 30       	cpi	r18, 0x01	; 1
    383a:	31 05       	cpc	r19, r1
    383c:	89 f1       	breq	.+98     	; 0x38a0 <Timers_enu_Init+0x28a>
    383e:	f8 c0       	rjmp	.+496    	; 0x3a30 <Timers_enu_Init+0x41a>
    3840:	8f 81       	ldd	r24, Y+7	; 0x07
    3842:	98 85       	ldd	r25, Y+8	; 0x08
    3844:	89 30       	cpi	r24, 0x09	; 9
    3846:	91 05       	cpc	r25, r1
    3848:	09 f4       	brne	.+2      	; 0x384c <Timers_enu_Init+0x236>
    384a:	9d c0       	rjmp	.+314    	; 0x3986 <Timers_enu_Init+0x370>
    384c:	2f 81       	ldd	r18, Y+7	; 0x07
    384e:	38 85       	ldd	r19, Y+8	; 0x08
    3850:	29 30       	cpi	r18, 0x09	; 9
    3852:	31 05       	cpc	r19, r1
    3854:	0c f4       	brge	.+2      	; 0x3858 <Timers_enu_Init+0x242>
    3856:	6c c0       	rjmp	.+216    	; 0x3930 <Timers_enu_Init+0x31a>
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	98 85       	ldd	r25, Y+8	; 0x08
    385c:	8a 30       	cpi	r24, 0x0A	; 10
    385e:	91 05       	cpc	r25, r1
    3860:	09 f4       	brne	.+2      	; 0x3864 <Timers_enu_Init+0x24e>
    3862:	bc c0       	rjmp	.+376    	; 0x39dc <Timers_enu_Init+0x3c6>
    3864:	e5 c0       	rjmp	.+458    	; 0x3a30 <Timers_enu_Init+0x41a>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3866:	af e4       	ldi	r26, 0x4F	; 79
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	ef e4       	ldi	r30, 0x4F	; 79
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	8e 7f       	andi	r24, 0xFE	; 254
    3872:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    3874:	af e4       	ldi	r26, 0x4F	; 79
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	ef e4       	ldi	r30, 0x4F	; 79
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	8d 7f       	andi	r24, 0xFD	; 253
    3880:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3882:	ae e4       	ldi	r26, 0x4E	; 78
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	ee e4       	ldi	r30, 0x4E	; 78
    3888:	f0 e0       	ldi	r31, 0x00	; 0
    388a:	80 81       	ld	r24, Z
    388c:	87 7f       	andi	r24, 0xF7	; 247
    388e:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3890:	ae e4       	ldi	r26, 0x4E	; 78
    3892:	b0 e0       	ldi	r27, 0x00	; 0
    3894:	ee e4       	ldi	r30, 0x4E	; 78
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	80 81       	ld	r24, Z
    389a:	8f 7e       	andi	r24, 0xEF	; 239
    389c:	8c 93       	st	X, r24
    389e:	c8 c0       	rjmp	.+400    	; 0x3a30 <Timers_enu_Init+0x41a>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    38a0:	af e4       	ldi	r26, 0x4F	; 79
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	ef e4       	ldi	r30, 0x4F	; 79
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	80 81       	ld	r24, Z
    38aa:	8e 7f       	andi	r24, 0xFE	; 254
    38ac:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    38ae:	af e4       	ldi	r26, 0x4F	; 79
    38b0:	b0 e0       	ldi	r27, 0x00	; 0
    38b2:	ef e4       	ldi	r30, 0x4F	; 79
    38b4:	f0 e0       	ldi	r31, 0x00	; 0
    38b6:	80 81       	ld	r24, Z
    38b8:	8d 7f       	andi	r24, 0xFD	; 253
    38ba:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    38bc:	ae e4       	ldi	r26, 0x4E	; 78
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	ee e4       	ldi	r30, 0x4E	; 78
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	88 60       	ori	r24, 0x08	; 8
    38c8:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    38ca:	ae e4       	ldi	r26, 0x4E	; 78
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	ee e4       	ldi	r30, 0x4E	; 78
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	8f 7e       	andi	r24, 0xEF	; 239
    38d6:	8c 93       	st	X, r24
    38d8:	ab c0       	rjmp	.+342    	; 0x3a30 <Timers_enu_Init+0x41a>
        break;
        case FAST_PWM_NON_INVERTING_COMA:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    38da:	af e4       	ldi	r26, 0x4F	; 79
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	ef e4       	ldi	r30, 0x4F	; 79
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	8e 7f       	andi	r24, 0xFE	; 254
    38e6:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    38e8:	af e4       	ldi	r26, 0x4F	; 79
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	ef e4       	ldi	r30, 0x4F	; 79
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	80 81       	ld	r24, Z
    38f2:	82 60       	ori	r24, 0x02	; 2
    38f4:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    38f6:	ae e4       	ldi	r26, 0x4E	; 78
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	ee e4       	ldi	r30, 0x4E	; 78
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	80 81       	ld	r24, Z
    3900:	88 60       	ori	r24, 0x08	; 8
    3902:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3904:	ae e4       	ldi	r26, 0x4E	; 78
    3906:	b0 e0       	ldi	r27, 0x00	; 0
    3908:	ee e4       	ldi	r30, 0x4E	; 78
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	80 81       	ld	r24, Z
    390e:	80 61       	ori	r24, 0x10	; 16
    3910:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    3912:	af e4       	ldi	r26, 0x4F	; 79
    3914:	b0 e0       	ldi	r27, 0x00	; 0
    3916:	ef e4       	ldi	r30, 0x4F	; 79
    3918:	f0 e0       	ldi	r31, 0x00	; 0
    391a:	80 81       	ld	r24, Z
    391c:	80 68       	ori	r24, 0x80	; 128
    391e:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    3920:	af e4       	ldi	r26, 0x4F	; 79
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	ef e4       	ldi	r30, 0x4F	; 79
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	8f 7b       	andi	r24, 0xBF	; 191
    392c:	8c 93       	st	X, r24
    392e:	80 c0       	rjmp	.+256    	; 0x3a30 <Timers_enu_Init+0x41a>
        break;
        case FAST_PWM_NON_INVERTING_COMB:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3930:	af e4       	ldi	r26, 0x4F	; 79
    3932:	b0 e0       	ldi	r27, 0x00	; 0
    3934:	ef e4       	ldi	r30, 0x4F	; 79
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 81       	ld	r24, Z
    393a:	8e 7f       	andi	r24, 0xFE	; 254
    393c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    393e:	af e4       	ldi	r26, 0x4F	; 79
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	ef e4       	ldi	r30, 0x4F	; 79
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	82 60       	ori	r24, 0x02	; 2
    394a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    394c:	ae e4       	ldi	r26, 0x4E	; 78
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	ee e4       	ldi	r30, 0x4E	; 78
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	88 60       	ori	r24, 0x08	; 8
    3958:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    395a:	ae e4       	ldi	r26, 0x4E	; 78
    395c:	b0 e0       	ldi	r27, 0x00	; 0
    395e:	ee e4       	ldi	r30, 0x4E	; 78
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	80 81       	ld	r24, Z
    3964:	80 61       	ori	r24, 0x10	; 16
    3966:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1B1);
    3968:	af e4       	ldi	r26, 0x4F	; 79
    396a:	b0 e0       	ldi	r27, 0x00	; 0
    396c:	ef e4       	ldi	r30, 0x4F	; 79
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	80 81       	ld	r24, Z
    3972:	80 62       	ori	r24, 0x20	; 32
    3974:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1B0);
    3976:	af e4       	ldi	r26, 0x4F	; 79
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	ef e4       	ldi	r30, 0x4F	; 79
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	80 81       	ld	r24, Z
    3980:	8f 7e       	andi	r24, 0xEF	; 239
    3982:	8c 93       	st	X, r24
    3984:	55 c0       	rjmp	.+170    	; 0x3a30 <Timers_enu_Init+0x41a>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING_COMA:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    3986:	af e4       	ldi	r26, 0x4F	; 79
    3988:	b0 e0       	ldi	r27, 0x00	; 0
    398a:	ef e4       	ldi	r30, 0x4F	; 79
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	81 60       	ori	r24, 0x01	; 1
    3992:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3994:	af e4       	ldi	r26, 0x4F	; 79
    3996:	b0 e0       	ldi	r27, 0x00	; 0
    3998:	ef e4       	ldi	r30, 0x4F	; 79
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	80 81       	ld	r24, Z
    399e:	82 60       	ori	r24, 0x02	; 2
    39a0:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    39a2:	ae e4       	ldi	r26, 0x4E	; 78
    39a4:	b0 e0       	ldi	r27, 0x00	; 0
    39a6:	ee e4       	ldi	r30, 0x4E	; 78
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	87 7f       	andi	r24, 0xF7	; 247
    39ae:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    39b0:	ae e4       	ldi	r26, 0x4E	; 78
    39b2:	b0 e0       	ldi	r27, 0x00	; 0
    39b4:	ee e4       	ldi	r30, 0x4E	; 78
    39b6:	f0 e0       	ldi	r31, 0x00	; 0
    39b8:	80 81       	ld	r24, Z
    39ba:	80 61       	ori	r24, 0x10	; 16
    39bc:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    39be:	af e4       	ldi	r26, 0x4F	; 79
    39c0:	b0 e0       	ldi	r27, 0x00	; 0
    39c2:	ef e4       	ldi	r30, 0x4F	; 79
    39c4:	f0 e0       	ldi	r31, 0x00	; 0
    39c6:	80 81       	ld	r24, Z
    39c8:	80 68       	ori	r24, 0x80	; 128
    39ca:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    39cc:	af e4       	ldi	r26, 0x4F	; 79
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	ef e4       	ldi	r30, 0x4F	; 79
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	8f 7b       	andi	r24, 0xBF	; 191
    39d8:	8c 93       	st	X, r24
    39da:	2a c0       	rjmp	.+84     	; 0x3a30 <Timers_enu_Init+0x41a>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING_COMB:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    39dc:	af e4       	ldi	r26, 0x4F	; 79
    39de:	b0 e0       	ldi	r27, 0x00	; 0
    39e0:	ef e4       	ldi	r30, 0x4F	; 79
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	80 81       	ld	r24, Z
    39e6:	81 60       	ori	r24, 0x01	; 1
    39e8:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    39ea:	af e4       	ldi	r26, 0x4F	; 79
    39ec:	b0 e0       	ldi	r27, 0x00	; 0
    39ee:	ef e4       	ldi	r30, 0x4F	; 79
    39f0:	f0 e0       	ldi	r31, 0x00	; 0
    39f2:	80 81       	ld	r24, Z
    39f4:	82 60       	ori	r24, 0x02	; 2
    39f6:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    39f8:	ae e4       	ldi	r26, 0x4E	; 78
    39fa:	b0 e0       	ldi	r27, 0x00	; 0
    39fc:	ee e4       	ldi	r30, 0x4E	; 78
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	80 81       	ld	r24, Z
    3a02:	87 7f       	andi	r24, 0xF7	; 247
    3a04:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3a06:	ae e4       	ldi	r26, 0x4E	; 78
    3a08:	b0 e0       	ldi	r27, 0x00	; 0
    3a0a:	ee e4       	ldi	r30, 0x4E	; 78
    3a0c:	f0 e0       	ldi	r31, 0x00	; 0
    3a0e:	80 81       	ld	r24, Z
    3a10:	80 61       	ori	r24, 0x10	; 16
    3a12:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1B1);
    3a14:	af e4       	ldi	r26, 0x4F	; 79
    3a16:	b0 e0       	ldi	r27, 0x00	; 0
    3a18:	ef e4       	ldi	r30, 0x4F	; 79
    3a1a:	f0 e0       	ldi	r31, 0x00	; 0
    3a1c:	80 81       	ld	r24, Z
    3a1e:	80 62       	ori	r24, 0x20	; 32
    3a20:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1B0);
    3a22:	af e4       	ldi	r26, 0x4F	; 79
    3a24:	b0 e0       	ldi	r27, 0x00	; 0
    3a26:	ef e4       	ldi	r30, 0x4F	; 79
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	80 81       	ld	r24, Z
    3a2c:	8f 7e       	andi	r24, 0xEF	; 239
    3a2e:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    3a30:	ae e4       	ldi	r26, 0x4E	; 78
    3a32:	b0 e0       	ldi	r27, 0x00	; 0
    3a34:	ee e4       	ldi	r30, 0x4E	; 78
    3a36:	f0 e0       	ldi	r31, 0x00	; 0
    3a38:	90 81       	ld	r25, Z
    3a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a3c:	89 2b       	or	r24, r25
    3a3e:	8c 93       	st	X, r24
    3a40:	c8 c0       	rjmp	.+400    	; 0x3bd2 <Timers_enu_Init+0x5bc>
    break;
    case TIMER2:
        switch (Copy_u8_Mode)
    3a42:	8b 81       	ldd	r24, Y+3	; 0x03
    3a44:	28 2f       	mov	r18, r24
    3a46:	30 e0       	ldi	r19, 0x00	; 0
    3a48:	3e 83       	std	Y+6, r19	; 0x06
    3a4a:	2d 83       	std	Y+5, r18	; 0x05
    3a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a50:	83 30       	cpi	r24, 0x03	; 3
    3a52:	91 05       	cpc	r25, r1
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <Timers_enu_Init+0x442>
    3a56:	40 c0       	rjmp	.+128    	; 0x3ad8 <Timers_enu_Init+0x4c2>
    3a58:	2d 81       	ldd	r18, Y+5	; 0x05
    3a5a:	3e 81       	ldd	r19, Y+6	; 0x06
    3a5c:	24 30       	cpi	r18, 0x04	; 4
    3a5e:	31 05       	cpc	r19, r1
    3a60:	54 f4       	brge	.+20     	; 0x3a76 <Timers_enu_Init+0x460>
    3a62:	8d 81       	ldd	r24, Y+5	; 0x05
    3a64:	9e 81       	ldd	r25, Y+6	; 0x06
    3a66:	00 97       	sbiw	r24, 0x00	; 0
    3a68:	c9 f0       	breq	.+50     	; 0x3a9c <Timers_enu_Init+0x486>
    3a6a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a6c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a6e:	21 30       	cpi	r18, 0x01	; 1
    3a70:	31 05       	cpc	r19, r1
    3a72:	19 f1       	breq	.+70     	; 0x3aba <Timers_enu_Init+0x4a4>
    3a74:	a4 c0       	rjmp	.+328    	; 0x3bbe <Timers_enu_Init+0x5a8>
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	85 30       	cpi	r24, 0x05	; 5
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <Timers_enu_Init+0x46c>
    3a80:	65 c0       	rjmp	.+202    	; 0x3b4c <Timers_enu_Init+0x536>
    3a82:	2d 81       	ldd	r18, Y+5	; 0x05
    3a84:	3e 81       	ldd	r19, Y+6	; 0x06
    3a86:	25 30       	cpi	r18, 0x05	; 5
    3a88:	31 05       	cpc	r19, r1
    3a8a:	0c f4       	brge	.+2      	; 0x3a8e <Timers_enu_Init+0x478>
    3a8c:	42 c0       	rjmp	.+132    	; 0x3b12 <Timers_enu_Init+0x4fc>
    3a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a90:	9e 81       	ldd	r25, Y+6	; 0x06
    3a92:	86 30       	cpi	r24, 0x06	; 6
    3a94:	91 05       	cpc	r25, r1
    3a96:	09 f4       	brne	.+2      	; 0x3a9a <Timers_enu_Init+0x484>
    3a98:	76 c0       	rjmp	.+236    	; 0x3b86 <Timers_enu_Init+0x570>
    3a9a:	91 c0       	rjmp	.+290    	; 0x3bbe <Timers_enu_Init+0x5a8>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER2_TCCR2_REG, WGM20);
    3a9c:	a5 e4       	ldi	r26, 0x45	; 69
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	e5 e4       	ldi	r30, 0x45	; 69
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	80 81       	ld	r24, Z
    3aa6:	8f 7b       	andi	r24, 0xBF	; 191
    3aa8:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3aaa:	a5 e4       	ldi	r26, 0x45	; 69
    3aac:	b0 e0       	ldi	r27, 0x00	; 0
    3aae:	e5 e4       	ldi	r30, 0x45	; 69
    3ab0:	f0 e0       	ldi	r31, 0x00	; 0
    3ab2:	80 81       	ld	r24, Z
    3ab4:	87 7f       	andi	r24, 0xF7	; 247
    3ab6:	8c 93       	st	X, r24
    3ab8:	82 c0       	rjmp	.+260    	; 0x3bbe <Timers_enu_Init+0x5a8>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER2_TCCR2_REG, WGM20);
    3aba:	a5 e4       	ldi	r26, 0x45	; 69
    3abc:	b0 e0       	ldi	r27, 0x00	; 0
    3abe:	e5 e4       	ldi	r30, 0x45	; 69
    3ac0:	f0 e0       	ldi	r31, 0x00	; 0
    3ac2:	80 81       	ld	r24, Z
    3ac4:	8f 7b       	andi	r24, 0xBF	; 191
    3ac6:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3ac8:	a5 e4       	ldi	r26, 0x45	; 69
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	e5 e4       	ldi	r30, 0x45	; 69
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	80 81       	ld	r24, Z
    3ad2:	88 60       	ori	r24, 0x08	; 8
    3ad4:	8c 93       	st	X, r24
    3ad6:	73 c0       	rjmp	.+230    	; 0x3bbe <Timers_enu_Init+0x5a8>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3ad8:	a5 e4       	ldi	r26, 0x45	; 69
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e5 e4       	ldi	r30, 0x45	; 69
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	80 64       	ori	r24, 0x40	; 64
    3ae4:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3ae6:	a5 e4       	ldi	r26, 0x45	; 69
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	e5 e4       	ldi	r30, 0x45	; 69
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 81       	ld	r24, Z
    3af0:	88 60       	ori	r24, 0x08	; 8
    3af2:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3af4:	a5 e4       	ldi	r26, 0x45	; 69
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e5 e4       	ldi	r30, 0x45	; 69
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	80 62       	ori	r24, 0x20	; 32
    3b00:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, COM20);
    3b02:	a5 e4       	ldi	r26, 0x45	; 69
    3b04:	b0 e0       	ldi	r27, 0x00	; 0
    3b06:	e5 e4       	ldi	r30, 0x45	; 69
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 81       	ld	r24, Z
    3b0c:	80 61       	ori	r24, 0x10	; 16
    3b0e:	8c 93       	st	X, r24
    3b10:	56 c0       	rjmp	.+172    	; 0x3bbe <Timers_enu_Init+0x5a8>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3b12:	a5 e4       	ldi	r26, 0x45	; 69
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	e5 e4       	ldi	r30, 0x45	; 69
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	80 81       	ld	r24, Z
    3b1c:	80 64       	ori	r24, 0x40	; 64
    3b1e:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3b20:	a5 e4       	ldi	r26, 0x45	; 69
    3b22:	b0 e0       	ldi	r27, 0x00	; 0
    3b24:	e5 e4       	ldi	r30, 0x45	; 69
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	80 81       	ld	r24, Z
    3b2a:	88 60       	ori	r24, 0x08	; 8
    3b2c:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3b2e:	a5 e4       	ldi	r26, 0x45	; 69
    3b30:	b0 e0       	ldi	r27, 0x00	; 0
    3b32:	e5 e4       	ldi	r30, 0x45	; 69
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	80 81       	ld	r24, Z
    3b38:	80 62       	ori	r24, 0x20	; 32
    3b3a:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, COM20);
    3b3c:	a5 e4       	ldi	r26, 0x45	; 69
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	e5 e4       	ldi	r30, 0x45	; 69
    3b42:	f0 e0       	ldi	r31, 0x00	; 0
    3b44:	80 81       	ld	r24, Z
    3b46:	8f 7e       	andi	r24, 0xEF	; 239
    3b48:	8c 93       	st	X, r24
    3b4a:	39 c0       	rjmp	.+114    	; 0x3bbe <Timers_enu_Init+0x5a8>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3b4c:	a5 e4       	ldi	r26, 0x45	; 69
    3b4e:	b0 e0       	ldi	r27, 0x00	; 0
    3b50:	e5 e4       	ldi	r30, 0x45	; 69
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	80 81       	ld	r24, Z
    3b56:	80 64       	ori	r24, 0x40	; 64
    3b58:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3b5a:	a5 e4       	ldi	r26, 0x45	; 69
    3b5c:	b0 e0       	ldi	r27, 0x00	; 0
    3b5e:	e5 e4       	ldi	r30, 0x45	; 69
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	80 81       	ld	r24, Z
    3b64:	87 7f       	andi	r24, 0xF7	; 247
    3b66:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3b68:	a5 e4       	ldi	r26, 0x45	; 69
    3b6a:	b0 e0       	ldi	r27, 0x00	; 0
    3b6c:	e5 e4       	ldi	r30, 0x45	; 69
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	80 81       	ld	r24, Z
    3b72:	80 62       	ori	r24, 0x20	; 32
    3b74:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, COM20);
    3b76:	a5 e4       	ldi	r26, 0x45	; 69
    3b78:	b0 e0       	ldi	r27, 0x00	; 0
    3b7a:	e5 e4       	ldi	r30, 0x45	; 69
    3b7c:	f0 e0       	ldi	r31, 0x00	; 0
    3b7e:	80 81       	ld	r24, Z
    3b80:	80 61       	ori	r24, 0x10	; 16
    3b82:	8c 93       	st	X, r24
    3b84:	1c c0       	rjmp	.+56     	; 0x3bbe <Timers_enu_Init+0x5a8>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3b86:	a5 e4       	ldi	r26, 0x45	; 69
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	e5 e4       	ldi	r30, 0x45	; 69
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	80 64       	ori	r24, 0x40	; 64
    3b92:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3b94:	a5 e4       	ldi	r26, 0x45	; 69
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	e5 e4       	ldi	r30, 0x45	; 69
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	87 7f       	andi	r24, 0xF7	; 247
    3ba0:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3ba2:	a5 e4       	ldi	r26, 0x45	; 69
    3ba4:	b0 e0       	ldi	r27, 0x00	; 0
    3ba6:	e5 e4       	ldi	r30, 0x45	; 69
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	80 81       	ld	r24, Z
    3bac:	80 62       	ori	r24, 0x20	; 32
    3bae:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, COM20);
    3bb0:	a5 e4       	ldi	r26, 0x45	; 69
    3bb2:	b0 e0       	ldi	r27, 0x00	; 0
    3bb4:	e5 e4       	ldi	r30, 0x45	; 69
    3bb6:	f0 e0       	ldi	r31, 0x00	; 0
    3bb8:	80 81       	ld	r24, Z
    3bba:	8f 7e       	andi	r24, 0xEF	; 239
    3bbc:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER2_TCCR2_REG |= Copy_u8_Prescaler;
    3bbe:	a5 e4       	ldi	r26, 0x45	; 69
    3bc0:	b0 e0       	ldi	r27, 0x00	; 0
    3bc2:	e5 e4       	ldi	r30, 0x45	; 69
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	90 81       	ld	r25, Z
    3bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bca:	89 2b       	or	r24, r25
    3bcc:	8c 93       	st	X, r24
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <Timers_enu_Init+0x5bc>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    3bd0:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3bd4:	2c 96       	adiw	r28, 0x0c	; 12
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	cf 91       	pop	r28
    3be2:	df 91       	pop	r29
    3be4:	08 95       	ret

00003be6 <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    3be6:	df 93       	push	r29
    3be8:	cf 93       	push	r28
    3bea:	cd b7       	in	r28, 0x3d	; 61
    3bec:	de b7       	in	r29, 0x3e	; 62
    3bee:	2f 97       	sbiw	r28, 0x0f	; 15
    3bf0:	0f b6       	in	r0, 0x3f	; 63
    3bf2:	f8 94       	cli
    3bf4:	de bf       	out	0x3e, r29	; 62
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	cd bf       	out	0x3d, r28	; 61
    3bfa:	8a 83       	std	Y+2, r24	; 0x02
    3bfc:	7c 83       	std	Y+4, r23	; 0x04
    3bfe:	6b 83       	std	Y+3, r22	; 0x03
    3c00:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo< 3)&(Copy_pf != NULL) && (Copy_u8_Mode< 3)){
    3c06:	1f 86       	std	Y+15, r1	; 0x0f
    3c08:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0a:	83 30       	cpi	r24, 0x03	; 3
    3c0c:	10 f4       	brcc	.+4      	; 0x3c12 <Timers_enu_SetCallBack+0x2c>
    3c0e:	21 e0       	ldi	r18, 0x01	; 1
    3c10:	2f 87       	std	Y+15, r18	; 0x0f
    3c12:	1e 86       	std	Y+14, r1	; 0x0e
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	9c 81       	ldd	r25, Y+4	; 0x04
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	11 f0       	breq	.+4      	; 0x3c20 <Timers_enu_SetCallBack+0x3a>
    3c1c:	31 e0       	ldi	r19, 0x01	; 1
    3c1e:	3e 87       	std	Y+14, r19	; 0x0e
    3c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c24:	89 23       	and	r24, r25
    3c26:	91 e0       	ldi	r25, 0x01	; 1
    3c28:	89 27       	eor	r24, r25
    3c2a:	88 23       	and	r24, r24
    3c2c:	09 f0       	breq	.+2      	; 0x3c30 <Timers_enu_SetCallBack+0x4a>
    3c2e:	a6 c0       	rjmp	.+332    	; 0x3d7c <Timers_enu_SetCallBack+0x196>
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	83 30       	cpi	r24, 0x03	; 3
    3c34:	08 f0       	brcs	.+2      	; 0x3c38 <Timers_enu_SetCallBack+0x52>
    3c36:	a2 c0       	rjmp	.+324    	; 0x3d7c <Timers_enu_SetCallBack+0x196>
        switch (Copy_u8_TimerNo)
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	28 2f       	mov	r18, r24
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	3d 87       	std	Y+13, r19	; 0x0d
    3c40:	2c 87       	std	Y+12, r18	; 0x0c
    3c42:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c44:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c46:	81 30       	cpi	r24, 0x01	; 1
    3c48:	91 05       	cpc	r25, r1
    3c4a:	b1 f1       	breq	.+108    	; 0x3cb8 <Timers_enu_SetCallBack+0xd2>
    3c4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c4e:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c50:	22 30       	cpi	r18, 0x02	; 2
    3c52:	31 05       	cpc	r19, r1
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <Timers_enu_SetCallBack+0x72>
    3c56:	67 c0       	rjmp	.+206    	; 0x3d26 <Timers_enu_SetCallBack+0x140>
    3c58:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c5c:	00 97       	sbiw	r24, 0x00	; 0
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <Timers_enu_SetCallBack+0x7c>
    3c60:	8e c0       	rjmp	.+284    	; 0x3d7e <Timers_enu_SetCallBack+0x198>
        {
        case TIMER0:
        switch (Copy_u8_Mode)
    3c62:	8d 81       	ldd	r24, Y+5	; 0x05
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	3b 87       	std	Y+11, r19	; 0x0b
    3c6a:	2a 87       	std	Y+10, r18	; 0x0a
    3c6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	31 f0       	breq	.+12     	; 0x3c80 <Timers_enu_SetCallBack+0x9a>
    3c74:	2a 85       	ldd	r18, Y+10	; 0x0a
    3c76:	3b 85       	ldd	r19, Y+11	; 0x0b
    3c78:	21 30       	cpi	r18, 0x01	; 1
    3c7a:	31 05       	cpc	r19, r1
    3c7c:	49 f0       	breq	.+18     	; 0x3c90 <Timers_enu_SetCallBack+0xaa>
    3c7e:	0f c0       	rjmp	.+30     	; 0x3c9e <Timers_enu_SetCallBack+0xb8>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE0);break;
    3c80:	a9 e5       	ldi	r26, 0x59	; 89
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e9 e5       	ldi	r30, 0x59	; 89
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	81 60       	ori	r24, 0x01	; 1
    3c8c:	8c 93       	st	X, r24
    3c8e:	07 c0       	rjmp	.+14     	; 0x3c9e <Timers_enu_SetCallBack+0xb8>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE0);break;
    3c90:	a9 e5       	ldi	r26, 0x59	; 89
    3c92:	b0 e0       	ldi	r27, 0x00	; 0
    3c94:	e9 e5       	ldi	r30, 0x59	; 89
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	80 81       	ld	r24, Z
    3c9a:	82 60       	ori	r24, 0x02	; 2
    3c9c:	8c 93       	st	X, r24
        }
        Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    3c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca0:	88 2f       	mov	r24, r24
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	88 0f       	add	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	fc 01       	movw	r30, r24
    3caa:	e9 5a       	subi	r30, 0xA9	; 169
    3cac:	fe 4f       	sbci	r31, 0xFE	; 254
    3cae:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb2:	91 83       	std	Z+1, r25	; 0x01
    3cb4:	80 83       	st	Z, r24
    3cb6:	63 c0       	rjmp	.+198    	; 0x3d7e <Timers_enu_SetCallBack+0x198>
        break;
        case TIMER1:
        switch (Copy_u8_Mode)
    3cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	39 87       	std	Y+9, r19	; 0x09
    3cc0:	28 87       	std	Y+8, r18	; 0x08
    3cc2:	88 85       	ldd	r24, Y+8	; 0x08
    3cc4:	99 85       	ldd	r25, Y+9	; 0x09
    3cc6:	81 30       	cpi	r24, 0x01	; 1
    3cc8:	91 05       	cpc	r25, r1
    3cca:	89 f0       	breq	.+34     	; 0x3cee <Timers_enu_SetCallBack+0x108>
    3ccc:	28 85       	ldd	r18, Y+8	; 0x08
    3cce:	39 85       	ldd	r19, Y+9	; 0x09
    3cd0:	22 30       	cpi	r18, 0x02	; 2
    3cd2:	31 05       	cpc	r19, r1
    3cd4:	a1 f0       	breq	.+40     	; 0x3cfe <Timers_enu_SetCallBack+0x118>
    3cd6:	88 85       	ldd	r24, Y+8	; 0x08
    3cd8:	99 85       	ldd	r25, Y+9	; 0x09
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	b9 f4       	brne	.+46     	; 0x3d0c <Timers_enu_SetCallBack+0x126>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE1);break;
    3cde:	a9 e5       	ldi	r26, 0x59	; 89
    3ce0:	b0 e0       	ldi	r27, 0x00	; 0
    3ce2:	e9 e5       	ldi	r30, 0x59	; 89
    3ce4:	f0 e0       	ldi	r31, 0x00	; 0
    3ce6:	80 81       	ld	r24, Z
    3ce8:	84 60       	ori	r24, 0x04	; 4
    3cea:	8c 93       	st	X, r24
    3cec:	0f c0       	rjmp	.+30     	; 0x3d0c <Timers_enu_SetCallBack+0x126>
        case CTC_MODE_A:SET_BIT(TIMER_TIMSK_REG, OCIE1A);break;
    3cee:	a9 e5       	ldi	r26, 0x59	; 89
    3cf0:	b0 e0       	ldi	r27, 0x00	; 0
    3cf2:	e9 e5       	ldi	r30, 0x59	; 89
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	80 81       	ld	r24, Z
    3cf8:	80 61       	ori	r24, 0x10	; 16
    3cfa:	8c 93       	st	X, r24
    3cfc:	07 c0       	rjmp	.+14     	; 0x3d0c <Timers_enu_SetCallBack+0x126>
        case CTC_MODE_B:SET_BIT(TIMER_TIMSK_REG, OCIE1B);break;
    3cfe:	a9 e5       	ldi	r26, 0x59	; 89
    3d00:	b0 e0       	ldi	r27, 0x00	; 0
    3d02:	e9 e5       	ldi	r30, 0x59	; 89
    3d04:	f0 e0       	ldi	r31, 0x00	; 0
    3d06:	80 81       	ld	r24, Z
    3d08:	88 60       	ori	r24, 0x08	; 8
    3d0a:	8c 93       	st	X, r24
        }
        Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    3d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	fc 01       	movw	r30, r24
    3d18:	e5 5a       	subi	r30, 0xA5	; 165
    3d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	91 83       	std	Z+1, r25	; 0x01
    3d22:	80 83       	st	Z, r24
    3d24:	2c c0       	rjmp	.+88     	; 0x3d7e <Timers_enu_SetCallBack+0x198>
        break;
        case TIMER2:
        switch (Copy_u8_Mode)
    3d26:	8d 81       	ldd	r24, Y+5	; 0x05
    3d28:	28 2f       	mov	r18, r24
    3d2a:	30 e0       	ldi	r19, 0x00	; 0
    3d2c:	3f 83       	std	Y+7, r19	; 0x07
    3d2e:	2e 83       	std	Y+6, r18	; 0x06
    3d30:	8e 81       	ldd	r24, Y+6	; 0x06
    3d32:	9f 81       	ldd	r25, Y+7	; 0x07
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	31 f0       	breq	.+12     	; 0x3d44 <Timers_enu_SetCallBack+0x15e>
    3d38:	2e 81       	ldd	r18, Y+6	; 0x06
    3d3a:	3f 81       	ldd	r19, Y+7	; 0x07
    3d3c:	21 30       	cpi	r18, 0x01	; 1
    3d3e:	31 05       	cpc	r19, r1
    3d40:	49 f0       	breq	.+18     	; 0x3d54 <Timers_enu_SetCallBack+0x16e>
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <Timers_enu_SetCallBack+0x17c>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE2);break;
    3d44:	a9 e5       	ldi	r26, 0x59	; 89
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	e9 e5       	ldi	r30, 0x59	; 89
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	80 81       	ld	r24, Z
    3d4e:	80 64       	ori	r24, 0x40	; 64
    3d50:	8c 93       	st	X, r24
    3d52:	07 c0       	rjmp	.+14     	; 0x3d62 <Timers_enu_SetCallBack+0x17c>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE2);break;
    3d54:	a9 e5       	ldi	r26, 0x59	; 89
    3d56:	b0 e0       	ldi	r27, 0x00	; 0
    3d58:	e9 e5       	ldi	r30, 0x59	; 89
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	80 81       	ld	r24, Z
    3d5e:	80 68       	ori	r24, 0x80	; 128
    3d60:	8c 93       	st	X, r24
        }
        Timers_pf_Timer2[Copy_u8_Mode] = Copy_pf;
    3d62:	8d 81       	ldd	r24, Y+5	; 0x05
    3d64:	88 2f       	mov	r24, r24
    3d66:	90 e0       	ldi	r25, 0x00	; 0
    3d68:	88 0f       	add	r24, r24
    3d6a:	99 1f       	adc	r25, r25
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	ed 59       	subi	r30, 0x9D	; 157
    3d70:	fe 4f       	sbci	r31, 0xFE	; 254
    3d72:	8b 81       	ldd	r24, Y+3	; 0x03
    3d74:	9c 81       	ldd	r25, Y+4	; 0x04
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
    3d7a:	01 c0       	rjmp	.+2      	; 0x3d7e <Timers_enu_SetCallBack+0x198>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3d7c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d80:	2f 96       	adiw	r28, 0x0f	; 15
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	cf 91       	pop	r28
    3d8e:	df 91       	pop	r29
    3d90:	08 95       	ret

00003d92 <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	00 d0       	rcall	.+0      	; 0x3d98 <Timers_enu_SetCLKSource+0x6>
    3d98:	00 d0       	rcall	.+0      	; 0x3d9a <Timers_enu_SetCLKSource+0x8>
    3d9a:	0f 92       	push	r0
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	8a 83       	std	Y+2, r24	; 0x02
    3da2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 3)){
    3da8:	8b 81       	ldd	r24, Y+3	; 0x03
    3daa:	88 30       	cpi	r24, 0x08	; 8
    3dac:	08 f0       	brcs	.+2      	; 0x3db0 <Timers_enu_SetCLKSource+0x1e>
    3dae:	4a c0       	rjmp	.+148    	; 0x3e44 <Timers_enu_SetCLKSource+0xb2>
    3db0:	8a 81       	ldd	r24, Y+2	; 0x02
    3db2:	83 30       	cpi	r24, 0x03	; 3
    3db4:	08 f0       	brcs	.+2      	; 0x3db8 <Timers_enu_SetCLKSource+0x26>
    3db6:	46 c0       	rjmp	.+140    	; 0x3e44 <Timers_enu_SetCLKSource+0xb2>
        switch (Copy_u8_TimerNo)
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dba:	28 2f       	mov	r18, r24
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	3d 83       	std	Y+5, r19	; 0x05
    3dc0:	2c 83       	std	Y+4, r18	; 0x04
    3dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc6:	81 30       	cpi	r24, 0x01	; 1
    3dc8:	91 05       	cpc	r25, r1
    3dca:	e1 f0       	breq	.+56     	; 0x3e04 <Timers_enu_SetCLKSource+0x72>
    3dcc:	2c 81       	ldd	r18, Y+4	; 0x04
    3dce:	3d 81       	ldd	r19, Y+5	; 0x05
    3dd0:	22 30       	cpi	r18, 0x02	; 2
    3dd2:	31 05       	cpc	r19, r1
    3dd4:	39 f1       	breq	.+78     	; 0x3e24 <Timers_enu_SetCLKSource+0x92>
    3dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	a1 f5       	brne	.+104    	; 0x3e46 <Timers_enu_SetCLKSource+0xb4>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3dde:	a3 e5       	ldi	r26, 0x53	; 83
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	e3 e5       	ldi	r30, 0x53	; 83
    3de4:	f0 e0       	ldi	r31, 0x00	; 0
    3de6:	80 81       	ld	r24, Z
    3de8:	88 7f       	andi	r24, 0xF8	; 248
    3dea:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    3dec:	a3 e5       	ldi	r26, 0x53	; 83
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	e3 e5       	ldi	r30, 0x53	; 83
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	90 81       	ld	r25, Z
    3df6:	8b 81       	ldd	r24, Y+3	; 0x03
    3df8:	89 2b       	or	r24, r25
    3dfa:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    3dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfe:	80 93 67 01 	sts	0x0167, r24
    3e02:	21 c0       	rjmp	.+66     	; 0x3e46 <Timers_enu_SetCLKSource+0xb4>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3e04:	ae e4       	ldi	r26, 0x4E	; 78
    3e06:	b0 e0       	ldi	r27, 0x00	; 0
    3e08:	ee e4       	ldi	r30, 0x4E	; 78
    3e0a:	f0 e0       	ldi	r31, 0x00	; 0
    3e0c:	80 81       	ld	r24, Z
    3e0e:	88 7f       	andi	r24, 0xF8	; 248
    3e10:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    3e12:	ae e4       	ldi	r26, 0x4E	; 78
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	ee e4       	ldi	r30, 0x4E	; 78
    3e18:	f0 e0       	ldi	r31, 0x00	; 0
    3e1a:	90 81       	ld	r25, Z
    3e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e1e:	89 2b       	or	r24, r25
    3e20:	8c 93       	st	X, r24
    3e22:	11 c0       	rjmp	.+34     	; 0x3e46 <Timers_enu_SetCLKSource+0xb4>
        break;
        case TIMER2:
            // Clear Old Value of Prescaler
            TIMER2_TCCR2_REG &= CLEAR_CLK_SOURCE;
    3e24:	a5 e4       	ldi	r26, 0x45	; 69
    3e26:	b0 e0       	ldi	r27, 0x00	; 0
    3e28:	e5 e4       	ldi	r30, 0x45	; 69
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	80 81       	ld	r24, Z
    3e2e:	88 7f       	andi	r24, 0xF8	; 248
    3e30:	8c 93       	st	X, r24
            TIMER2_TCCR2_REG |= Copy_u8_CLK_Source;
    3e32:	a5 e4       	ldi	r26, 0x45	; 69
    3e34:	b0 e0       	ldi	r27, 0x00	; 0
    3e36:	e5 e4       	ldi	r30, 0x45	; 69
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	90 81       	ld	r25, Z
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	89 2b       	or	r24, r25
    3e40:	8c 93       	st	X, r24
    3e42:	01 c0       	rjmp	.+2      	; 0x3e46 <Timers_enu_SetCLKSource+0xb4>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3e44:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	cf 91       	pop	r28
    3e54:	df 91       	pop	r29
    3e56:	08 95       	ret

00003e58 <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)     // Using Timer 0 
{
    3e58:	ef 92       	push	r14
    3e5a:	ff 92       	push	r15
    3e5c:	0f 93       	push	r16
    3e5e:	1f 93       	push	r17
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	cd b7       	in	r28, 0x3d	; 61
    3e66:	de b7       	in	r29, 0x3e	; 62
    3e68:	2c 97       	sbiw	r28, 0x0c	; 12
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	69 87       	std	Y+9, r22	; 0x09
    3e76:	7a 87       	std	Y+10, r23	; 0x0a
    3e78:	8b 87       	std	Y+11, r24	; 0x0b
    3e7a:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    3e7c:	a3 e5       	ldi	r26, 0x53	; 83
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	e3 e5       	ldi	r30, 0x53	; 83
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	90 81       	ld	r25, Z
    3e86:	80 91 67 01 	lds	r24, 0x0167
    3e8a:	89 2b       	or	r24, r25
    3e8c:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    3e8e:	80 e8       	ldi	r24, 0x80	; 128
    3e90:	90 e0       	ldi	r25, 0x00	; 0
    3e92:	98 87       	std	Y+8, r25	; 0x08
    3e94:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    3e96:	89 85       	ldd	r24, Y+9	; 0x09
    3e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3e9c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3e9e:	28 ee       	ldi	r18, 0xE8	; 232
    3ea0:	33 e0       	ldi	r19, 0x03	; 3
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	50 e0       	ldi	r21, 0x00	; 0
    3ea6:	bc 01       	movw	r22, r24
    3ea8:	cd 01       	movw	r24, r26
    3eaa:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__mulsi3>
    3eae:	7b 01       	movw	r14, r22
    3eb0:	8c 01       	movw	r16, r24
    3eb2:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb4:	98 85       	ldd	r25, Y+8	; 0x08
    3eb6:	9c 01       	movw	r18, r24
    3eb8:	40 e0       	ldi	r20, 0x00	; 0
    3eba:	50 e0       	ldi	r21, 0x00	; 0
    3ebc:	c8 01       	movw	r24, r16
    3ebe:	b7 01       	movw	r22, r14
    3ec0:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__udivmodsi4>
    3ec4:	da 01       	movw	r26, r20
    3ec6:	c9 01       	movw	r24, r18
    3ec8:	9e 83       	std	Y+6, r25	; 0x06
    3eca:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    3ecc:	89 85       	ldd	r24, Y+9	; 0x09
    3ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ed0:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ed2:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ed4:	28 ee       	ldi	r18, 0xE8	; 232
    3ed6:	33 e0       	ldi	r19, 0x03	; 3
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	50 e0       	ldi	r21, 0x00	; 0
    3edc:	bc 01       	movw	r22, r24
    3ede:	cd 01       	movw	r24, r26
    3ee0:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__mulsi3>
    3ee4:	7b 01       	movw	r14, r22
    3ee6:	8c 01       	movw	r16, r24
    3ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    3eea:	98 85       	ldd	r25, Y+8	; 0x08
    3eec:	9c 01       	movw	r18, r24
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	c8 01       	movw	r24, r16
    3ef4:	b7 01       	movw	r22, r14
    3ef6:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__udivmodsi4>
    3efa:	dc 01       	movw	r26, r24
    3efc:	cb 01       	movw	r24, r22
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	34 e2       	ldi	r19, 0x24	; 36
    3f02:	44 ef       	ldi	r20, 0xF4	; 244
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	bc 01       	movw	r22, r24
    3f08:	cd 01       	movw	r24, r26
    3f0a:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__mulsi3>
    3f0e:	dc 01       	movw	r26, r24
    3f10:	cb 01       	movw	r24, r22
    3f12:	20 e0       	ldi	r18, 0x00	; 0
    3f14:	32 e1       	ldi	r19, 0x12	; 18
    3f16:	4a e7       	ldi	r20, 0x7A	; 122
    3f18:	50 e0       	ldi	r21, 0x00	; 0
    3f1a:	bc 01       	movw	r22, r24
    3f1c:	cd 01       	movw	r24, r26
    3f1e:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <__udivmodsi4>
    3f22:	da 01       	movw	r26, r20
    3f24:	c9 01       	movw	r24, r18
    3f26:	9c 83       	std	Y+4, r25	; 0x04
    3f28:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    3f2a:	e2 e5       	ldi	r30, 0x52	; 82
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f30:	81 95       	neg	r24
    3f32:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    3f34:	1a 82       	std	Y+2, r1	; 0x02
    3f36:	19 82       	std	Y+1, r1	; 0x01
    3f38:	15 c0       	rjmp	.+42     	; 0x3f64 <Timers_enu_delay_ms+0x10c>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    3f3a:	a8 e5       	ldi	r26, 0x58	; 88
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	e8 e5       	ldi	r30, 0x58	; 88
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	81 60       	ori	r24, 0x01	; 1
    3f46:	8c 93       	st	X, r24
        local_u16_counter++;
    3f48:	89 81       	ldd	r24, Y+1	; 0x01
    3f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4c:	01 96       	adiw	r24, 0x01	; 1
    3f4e:	9a 83       	std	Y+2, r25	; 0x02
    3f50:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    3f52:	e8 e5       	ldi	r30, 0x58	; 88
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	88 2f       	mov	r24, r24
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	81 70       	andi	r24, 0x01	; 1
    3f5e:	90 70       	andi	r25, 0x00	; 0
    3f60:	88 23       	and	r24, r24
    3f62:	59 f7       	brne	.-42     	; 0x3f3a <Timers_enu_delay_ms+0xe2>
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    3f64:	8d 81       	ldd	r24, Y+5	; 0x05
    3f66:	9e 81       	ldd	r25, Y+6	; 0x06
    3f68:	9c 01       	movw	r18, r24
    3f6a:	2f 5f       	subi	r18, 0xFF	; 255
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	89 81       	ldd	r24, Y+1	; 0x01
    3f70:	9a 81       	ldd	r25, Y+2	; 0x02
    3f72:	28 17       	cp	r18, r24
    3f74:	39 07       	cpc	r19, r25
    3f76:	69 f7       	brne	.-38     	; 0x3f52 <Timers_enu_delay_ms+0xfa>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3f78:	a3 e5       	ldi	r26, 0x53	; 83
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	e3 e5       	ldi	r30, 0x53	; 83
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	88 7f       	andi	r24, 0xF8	; 248
    3f84:	8c 93       	st	X, r24
    return STATE_OK;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
}
    3f88:	2c 96       	adiw	r28, 0x0c	; 12
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	f8 94       	cli
    3f8e:	de bf       	out	0x3e, r29	; 62
    3f90:	0f be       	out	0x3f, r0	; 63
    3f92:	cd bf       	out	0x3d, r28	; 61
    3f94:	cf 91       	pop	r28
    3f96:	df 91       	pop	r29
    3f98:	1f 91       	pop	r17
    3f9a:	0f 91       	pop	r16
    3f9c:	ff 90       	pop	r15
    3f9e:	ef 90       	pop	r14
    3fa0:	08 95       	ret

00003fa2 <Timers_enu_SetTimerValue>:
ES_t Timers_enu_SetTimerValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    3fa2:	df 93       	push	r29
    3fa4:	cf 93       	push	r28
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <Timers_enu_SetTimerValue+0x6>
    3fa8:	00 d0       	rcall	.+0      	; 0x3faa <Timers_enu_SetTimerValue+0x8>
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <Timers_enu_SetTimerValue+0xa>
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	8a 83       	std	Y+2, r24	; 0x02
    3fb2:	7c 83       	std	Y+4, r23	; 0x04
    3fb4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    3fba:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbc:	83 30       	cpi	r24, 0x03	; 3
    3fbe:	20 f5       	brcc	.+72     	; 0x4008 <Timers_enu_SetTimerValue+0x66>
        switch (Copy_u8_TimerNo)
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	28 2f       	mov	r18, r24
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	3e 83       	std	Y+6, r19	; 0x06
    3fc8:	2d 83       	std	Y+5, r18	; 0x05
    3fca:	8d 81       	ldd	r24, Y+5	; 0x05
    3fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3fce:	81 30       	cpi	r24, 0x01	; 1
    3fd0:	91 05       	cpc	r25, r1
    3fd2:	71 f0       	breq	.+28     	; 0x3ff0 <Timers_enu_SetTimerValue+0x4e>
    3fd4:	2d 81       	ldd	r18, Y+5	; 0x05
    3fd6:	3e 81       	ldd	r19, Y+6	; 0x06
    3fd8:	22 30       	cpi	r18, 0x02	; 2
    3fda:	31 05       	cpc	r19, r1
    3fdc:	81 f0       	breq	.+32     	; 0x3ffe <Timers_enu_SetTimerValue+0x5c>
    3fde:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe2:	00 97       	sbiw	r24, 0x00	; 0
    3fe4:	91 f4       	brne	.+36     	; 0x400a <Timers_enu_SetTimerValue+0x68>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    3fe6:	e2 e5       	ldi	r30, 0x52	; 82
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	8b 81       	ldd	r24, Y+3	; 0x03
    3fec:	80 83       	st	Z, r24
    3fee:	0d c0       	rjmp	.+26     	; 0x400a <Timers_enu_SetTimerValue+0x68>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    3ff0:	ec e4       	ldi	r30, 0x4C	; 76
    3ff2:	f0 e0       	ldi	r31, 0x00	; 0
    3ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff8:	91 83       	std	Z+1, r25	; 0x01
    3ffa:	80 83       	st	Z, r24
    3ffc:	06 c0       	rjmp	.+12     	; 0x400a <Timers_enu_SetTimerValue+0x68>
        break;
        case TIMER2:
            TIMER2_TCNT2_REG = Copy_u8_Value;
    3ffe:	e4 e4       	ldi	r30, 0x44	; 68
    4000:	f0 e0       	ldi	r31, 0x00	; 0
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	80 83       	st	Z, r24
    4006:	01 c0       	rjmp	.+2      	; 0x400a <Timers_enu_SetTimerValue+0x68>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4008:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    400a:	89 81       	ldd	r24, Y+1	; 0x01
}
    400c:	26 96       	adiw	r28, 0x06	; 6
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	08 95       	ret

0000401e <Timers_enu_GetTimerValue>:
ES_t Timers_enu_GetTimerValue(u8 Copy_u8_TimerNo,u16 *Copy_u8_Value){
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	00 d0       	rcall	.+0      	; 0x4024 <Timers_enu_GetTimerValue+0x6>
    4024:	00 d0       	rcall	.+0      	; 0x4026 <Timers_enu_GetTimerValue+0x8>
    4026:	00 d0       	rcall	.+0      	; 0x4028 <Timers_enu_GetTimerValue+0xa>
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	8a 83       	std	Y+2, r24	; 0x02
    402e:	7c 83       	std	Y+4, r23	; 0x04
    4030:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    4036:	8a 81       	ldd	r24, Y+2	; 0x02
    4038:	83 30       	cpi	r24, 0x03	; 3
    403a:	80 f5       	brcc	.+96     	; 0x409c <Timers_enu_GetTimerValue+0x7e>
        switch (Copy_u8_TimerNo)
    403c:	8a 81       	ldd	r24, Y+2	; 0x02
    403e:	28 2f       	mov	r18, r24
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	3e 83       	std	Y+6, r19	; 0x06
    4044:	2d 83       	std	Y+5, r18	; 0x05
    4046:	8d 81       	ldd	r24, Y+5	; 0x05
    4048:	9e 81       	ldd	r25, Y+6	; 0x06
    404a:	81 30       	cpi	r24, 0x01	; 1
    404c:	91 05       	cpc	r25, r1
    404e:	99 f0       	breq	.+38     	; 0x4076 <Timers_enu_GetTimerValue+0x58>
    4050:	2d 81       	ldd	r18, Y+5	; 0x05
    4052:	3e 81       	ldd	r19, Y+6	; 0x06
    4054:	22 30       	cpi	r18, 0x02	; 2
    4056:	31 05       	cpc	r19, r1
    4058:	b9 f0       	breq	.+46     	; 0x4088 <Timers_enu_GetTimerValue+0x6a>
    405a:	8d 81       	ldd	r24, Y+5	; 0x05
    405c:	9e 81       	ldd	r25, Y+6	; 0x06
    405e:	00 97       	sbiw	r24, 0x00	; 0
    4060:	f1 f4       	brne	.+60     	; 0x409e <Timers_enu_GetTimerValue+0x80>
        {
        case TIMER0:
            *Copy_u8_Value = TIMER0_TCNT0_REG;
    4062:	e2 e5       	ldi	r30, 0x52	; 82
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	80 81       	ld	r24, Z
    4068:	88 2f       	mov	r24, r24
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	eb 81       	ldd	r30, Y+3	; 0x03
    406e:	fc 81       	ldd	r31, Y+4	; 0x04
    4070:	91 83       	std	Z+1, r25	; 0x01
    4072:	80 83       	st	Z, r24
    4074:	14 c0       	rjmp	.+40     	; 0x409e <Timers_enu_GetTimerValue+0x80>
        break;
        case TIMER1:
            *Copy_u8_Value = TIMER1_TCNT1_REG;
    4076:	ec e4       	ldi	r30, 0x4C	; 76
    4078:	f0 e0       	ldi	r31, 0x00	; 0
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	eb 81       	ldd	r30, Y+3	; 0x03
    4080:	fc 81       	ldd	r31, Y+4	; 0x04
    4082:	91 83       	std	Z+1, r25	; 0x01
    4084:	80 83       	st	Z, r24
    4086:	0b c0       	rjmp	.+22     	; 0x409e <Timers_enu_GetTimerValue+0x80>
        break;
        case TIMER2:
            *Copy_u8_Value = TIMER2_TCNT2_REG;
    4088:	e4 e4       	ldi	r30, 0x44	; 68
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	80 81       	ld	r24, Z
    408e:	88 2f       	mov	r24, r24
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	eb 81       	ldd	r30, Y+3	; 0x03
    4094:	fc 81       	ldd	r31, Y+4	; 0x04
    4096:	91 83       	std	Z+1, r25	; 0x01
    4098:	80 83       	st	Z, r24
    409a:	01 c0       	rjmp	.+2      	; 0x409e <Timers_enu_GetTimerValue+0x80>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    409c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    409e:	89 81       	ldd	r24, Y+1	; 0x01

}
    40a0:	26 96       	adiw	r28, 0x06	; 6
    40a2:	0f b6       	in	r0, 0x3f	; 63
    40a4:	f8 94       	cli
    40a6:	de bf       	out	0x3e, r29	; 62
    40a8:	0f be       	out	0x3f, r0	; 63
    40aa:	cd bf       	out	0x3d, r28	; 61
    40ac:	cf 91       	pop	r28
    40ae:	df 91       	pop	r29
    40b0:	08 95       	ret

000040b2 <Timers_enu_TimerSetCompareValue>:
ES_t Timers_enu_TimerSetCompareValue(u8 Copy_u8_TimerNo, u8 Copy_u8_Value){
    40b2:	df 93       	push	r29
    40b4:	cf 93       	push	r28
    40b6:	00 d0       	rcall	.+0      	; 0x40b8 <Timers_enu_TimerSetCompareValue+0x6>
    40b8:	00 d0       	rcall	.+0      	; 0x40ba <Timers_enu_TimerSetCompareValue+0x8>
    40ba:	0f 92       	push	r0
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	8a 83       	std	Y+2, r24	; 0x02
    40c2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNo)
    40c8:	8a 81       	ldd	r24, Y+2	; 0x02
    40ca:	28 2f       	mov	r18, r24
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	3d 83       	std	Y+5, r19	; 0x05
    40d0:	2c 83       	std	Y+4, r18	; 0x04
    40d2:	8c 81       	ldd	r24, Y+4	; 0x04
    40d4:	9d 81       	ldd	r25, Y+5	; 0x05
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	31 f0       	breq	.+12     	; 0x40e6 <Timers_enu_TimerSetCompareValue+0x34>
    40da:	2c 81       	ldd	r18, Y+4	; 0x04
    40dc:	3d 81       	ldd	r19, Y+5	; 0x05
    40de:	22 30       	cpi	r18, 0x02	; 2
    40e0:	31 05       	cpc	r19, r1
    40e2:	31 f0       	breq	.+12     	; 0x40f0 <Timers_enu_TimerSetCompareValue+0x3e>
    40e4:	0a c0       	rjmp	.+20     	; 0x40fa <Timers_enu_TimerSetCompareValue+0x48>
    {
    case TIMER0:TIMER0_OCR0_REG = Copy_u8_Value;break;
    40e6:	ec e5       	ldi	r30, 0x5C	; 92
    40e8:	f0 e0       	ldi	r31, 0x00	; 0
    40ea:	8b 81       	ldd	r24, Y+3	; 0x03
    40ec:	80 83       	st	Z, r24
    40ee:	06 c0       	rjmp	.+12     	; 0x40fc <Timers_enu_TimerSetCompareValue+0x4a>
    case TIMER2:TIMER2_OCR2_REG = Copy_u8_Value;break;  
    40f0:	e3 e4       	ldi	r30, 0x43	; 67
    40f2:	f0 e0       	ldi	r31, 0x00	; 0
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	80 83       	st	Z, r24
    40f8:	01 c0       	rjmp	.+2      	; 0x40fc <Timers_enu_TimerSetCompareValue+0x4a>
    default:Local_u8_errorState = STATE_NOT_OK;break;
    40fa:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    40fe:	0f 90       	pop	r0
    4100:	0f 90       	pop	r0
    4102:	0f 90       	pop	r0
    4104:	0f 90       	pop	r0
    4106:	0f 90       	pop	r0
    4108:	cf 91       	pop	r28
    410a:	df 91       	pop	r29
    410c:	08 95       	ret

0000410e <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    410e:	df 93       	push	r29
    4110:	cf 93       	push	r28
    4112:	00 d0       	rcall	.+0      	; 0x4114 <Timers_enu_Timer1_setTopValue+0x6>
    4114:	cd b7       	in	r28, 0x3d	; 61
    4116:	de b7       	in	r29, 0x3e	; 62
    4118:	9a 83       	std	Y+2, r25	; 0x02
    411a:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    411c:	e6 e4       	ldi	r30, 0x46	; 70
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	9a 81       	ldd	r25, Y+2	; 0x02
    4124:	91 83       	std	Z+1, r25	; 0x01
    4126:	80 83       	st	Z, r24
        return STATE_OK;
    4128:	81 e0       	ldi	r24, 0x01	; 1
}
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	cf 91       	pop	r28
    4130:	df 91       	pop	r29
    4132:	08 95       	ret

00004134 <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    4134:	df 93       	push	r29
    4136:	cf 93       	push	r28
    4138:	00 d0       	rcall	.+0      	; 0x413a <Timers_enu_Timer1SetCompareValue+0x6>
    413a:	00 d0       	rcall	.+0      	; 0x413c <Timers_enu_Timer1SetCompareValue+0x8>
    413c:	00 d0       	rcall	.+0      	; 0x413e <Timers_enu_Timer1SetCompareValue+0xa>
    413e:	cd b7       	in	r28, 0x3d	; 61
    4140:	de b7       	in	r29, 0x3e	; 62
    4142:	8a 83       	std	Y+2, r24	; 0x02
    4144:	7c 83       	std	Y+4, r23	; 0x04
    4146:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    414c:	8a 81       	ldd	r24, Y+2	; 0x02
    414e:	82 30       	cpi	r24, 0x02	; 2
    4150:	e8 f4       	brcc	.+58     	; 0x418c <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	28 2f       	mov	r18, r24
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	3e 83       	std	Y+6, r19	; 0x06
    415a:	2d 83       	std	Y+5, r18	; 0x05
    415c:	8d 81       	ldd	r24, Y+5	; 0x05
    415e:	9e 81       	ldd	r25, Y+6	; 0x06
    4160:	00 97       	sbiw	r24, 0x00	; 0
    4162:	31 f0       	breq	.+12     	; 0x4170 <Timers_enu_Timer1SetCompareValue+0x3c>
    4164:	2d 81       	ldd	r18, Y+5	; 0x05
    4166:	3e 81       	ldd	r19, Y+6	; 0x06
    4168:	21 30       	cpi	r18, 0x01	; 1
    416a:	31 05       	cpc	r19, r1
    416c:	41 f0       	breq	.+16     	; 0x417e <Timers_enu_Timer1SetCompareValue+0x4a>
    416e:	0f c0       	rjmp	.+30     	; 0x418e <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    4170:	ea e4       	ldi	r30, 0x4A	; 74
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
    4176:	9c 81       	ldd	r25, Y+4	; 0x04
    4178:	91 83       	std	Z+1, r25	; 0x01
    417a:	80 83       	st	Z, r24
    417c:	08 c0       	rjmp	.+16     	; 0x418e <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    417e:	e8 e4       	ldi	r30, 0x48	; 72
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	8b 81       	ldd	r24, Y+3	; 0x03
    4184:	9c 81       	ldd	r25, Y+4	; 0x04
    4186:	91 83       	std	Z+1, r25	; 0x01
    4188:	80 83       	st	Z, r24
    418a:	01 c0       	rjmp	.+2      	; 0x418e <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    418c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    418e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4190:	26 96       	adiw	r28, 0x06	; 6
    4192:	0f b6       	in	r0, 0x3f	; 63
    4194:	f8 94       	cli
    4196:	de bf       	out	0x3e, r29	; 62
    4198:	0f be       	out	0x3f, r0	; 63
    419a:	cd bf       	out	0x3d, r28	; 61
    419c:	cf 91       	pop	r28
    419e:	df 91       	pop	r29
    41a0:	08 95       	ret

000041a2 <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    41a2:	df 93       	push	r29
    41a4:	cf 93       	push	r28
    41a6:	00 d0       	rcall	.+0      	; 0x41a8 <Timers_enu_Stop+0x6>
    41a8:	00 d0       	rcall	.+0      	; 0x41aa <Timers_enu_Stop+0x8>
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<3){
    41b4:	8a 81       	ldd	r24, Y+2	; 0x02
    41b6:	83 30       	cpi	r24, 0x03	; 3
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <Timers_enu_Stop+0x1a>
    41ba:	4d c0       	rjmp	.+154    	; 0x4256 <Timers_enu_Stop+0xb4>
        switch (Copy_u8_TimerNo)
    41bc:	8a 81       	ldd	r24, Y+2	; 0x02
    41be:	28 2f       	mov	r18, r24
    41c0:	30 e0       	ldi	r19, 0x00	; 0
    41c2:	3c 83       	std	Y+4, r19	; 0x04
    41c4:	2b 83       	std	Y+3, r18	; 0x03
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ca:	81 30       	cpi	r24, 0x01	; 1
    41cc:	91 05       	cpc	r25, r1
    41ce:	c9 f0       	breq	.+50     	; 0x4202 <Timers_enu_Stop+0x60>
    41d0:	eb 81       	ldd	r30, Y+3	; 0x03
    41d2:	fc 81       	ldd	r31, Y+4	; 0x04
    41d4:	e2 30       	cpi	r30, 0x02	; 2
    41d6:	f1 05       	cpc	r31, r1
    41d8:	79 f1       	breq	.+94     	; 0x4238 <Timers_enu_Stop+0x96>
    41da:	2b 81       	ldd	r18, Y+3	; 0x03
    41dc:	3c 81       	ldd	r19, Y+4	; 0x04
    41de:	21 15       	cp	r18, r1
    41e0:	31 05       	cpc	r19, r1
    41e2:	d1 f5       	brne	.+116    	; 0x4258 <Timers_enu_Stop+0xb6>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    41e4:	a3 e5       	ldi	r26, 0x53	; 83
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	e3 e5       	ldi	r30, 0x53	; 83
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	88 7f       	andi	r24, 0xF8	; 248
    41f0:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    41f2:	a2 e5       	ldi	r26, 0x52	; 82
    41f4:	b0 e0       	ldi	r27, 0x00	; 0
    41f6:	ec e5       	ldi	r30, 0x5C	; 92
    41f8:	f0 e0       	ldi	r31, 0x00	; 0
    41fa:	10 82       	st	Z, r1
    41fc:	80 81       	ld	r24, Z
    41fe:	8c 93       	st	X, r24
    4200:	2b c0       	rjmp	.+86     	; 0x4258 <Timers_enu_Stop+0xb6>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    4202:	ae e4       	ldi	r26, 0x4E	; 78
    4204:	b0 e0       	ldi	r27, 0x00	; 0
    4206:	ee e4       	ldi	r30, 0x4E	; 78
    4208:	f0 e0       	ldi	r31, 0x00	; 0
    420a:	80 81       	ld	r24, Z
    420c:	88 7f       	andi	r24, 0xF8	; 248
    420e:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    4210:	2c e4       	ldi	r18, 0x4C	; 76
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	aa e4       	ldi	r26, 0x4A	; 74
    4216:	b0 e0       	ldi	r27, 0x00	; 0
    4218:	e8 e4       	ldi	r30, 0x48	; 72
    421a:	f0 e0       	ldi	r31, 0x00	; 0
    421c:	11 82       	std	Z+1, r1	; 0x01
    421e:	10 82       	st	Z, r1
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	11 96       	adiw	r26, 0x01	; 1
    4226:	9c 93       	st	X, r25
    4228:	8e 93       	st	-X, r24
    422a:	8d 91       	ld	r24, X+
    422c:	9c 91       	ld	r25, X
    422e:	11 97       	sbiw	r26, 0x01	; 1
    4230:	f9 01       	movw	r30, r18
    4232:	91 83       	std	Z+1, r25	; 0x01
    4234:	80 83       	st	Z, r24
    4236:	10 c0       	rjmp	.+32     	; 0x4258 <Timers_enu_Stop+0xb6>
        break;
        case TIMER2:
        TIMER2_TCCR2_REG &= CLEAR_CLK_SOURCE;
    4238:	a5 e4       	ldi	r26, 0x45	; 69
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	e5 e4       	ldi	r30, 0x45	; 69
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 81       	ld	r24, Z
    4242:	88 7f       	andi	r24, 0xF8	; 248
    4244:	8c 93       	st	X, r24
        TIMER2_TCNT2_REG = TIMER2_OCR2_REG = 0;
    4246:	a4 e4       	ldi	r26, 0x44	; 68
    4248:	b0 e0       	ldi	r27, 0x00	; 0
    424a:	e3 e4       	ldi	r30, 0x43	; 67
    424c:	f0 e0       	ldi	r31, 0x00	; 0
    424e:	10 82       	st	Z, r1
    4250:	80 81       	ld	r24, Z
    4252:	8c 93       	st	X, r24
    4254:	01 c0       	rjmp	.+2      	; 0x4258 <Timers_enu_Stop+0xb6>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    4256:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4258:	89 81       	ldd	r24, Y+1	; 0x01
}
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	08 95       	ret

00004268 <Timers_enu_ICUReadValue>:

/*************** ICU ******************/
ES_t Timers_enu_ICUReadValue(u16 * Copy_ICR1_Value){
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	00 d0       	rcall	.+0      	; 0x426e <Timers_enu_ICUReadValue+0x6>
    426e:	0f 92       	push	r0
    4270:	cd b7       	in	r28, 0x3d	; 61
    4272:	de b7       	in	r29, 0x3e	; 62
    4274:	9b 83       	std	Y+3, r25	; 0x03
    4276:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_ICR1_Value != NULL){
    427c:	8a 81       	ldd	r24, Y+2	; 0x02
    427e:	9b 81       	ldd	r25, Y+3	; 0x03
    4280:	00 97       	sbiw	r24, 0x00	; 0
    4282:	49 f0       	breq	.+18     	; 0x4296 <Timers_enu_ICUReadValue+0x2e>
        *Copy_ICR1_Value = TIMER1_ICR1_REG;
    4284:	e6 e4       	ldi	r30, 0x46	; 70
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	ea 81       	ldd	r30, Y+2	; 0x02
    428e:	fb 81       	ldd	r31, Y+3	; 0x03
    4290:	91 83       	std	Z+1, r25	; 0x01
    4292:	80 83       	st	Z, r24
    4294:	01 c0       	rjmp	.+2      	; 0x4298 <Timers_enu_ICUReadValue+0x30>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4296:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4298:	89 81       	ldd	r24, Y+1	; 0x01
}
    429a:	0f 90       	pop	r0
    429c:	0f 90       	pop	r0
    429e:	0f 90       	pop	r0
    42a0:	cf 91       	pop	r28
    42a2:	df 91       	pop	r29
    42a4:	08 95       	ret

000042a6 <Timers_enu_ICUSetTriggerEdge>:
ES_t Timers_enu_ICUSetTriggerEdge(u8 Copy_Trigger){
    42a6:	df 93       	push	r29
    42a8:	cf 93       	push	r28
    42aa:	00 d0       	rcall	.+0      	; 0x42ac <Timers_enu_ICUSetTriggerEdge+0x6>
    42ac:	00 d0       	rcall	.+0      	; 0x42ae <Timers_enu_ICUSetTriggerEdge+0x8>
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_Trigger)
    42b8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ba:	28 2f       	mov	r18, r24
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	3c 83       	std	Y+4, r19	; 0x04
    42c0:	2b 83       	std	Y+3, r18	; 0x03
    42c2:	8b 81       	ldd	r24, Y+3	; 0x03
    42c4:	9c 81       	ldd	r25, Y+4	; 0x04
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	69 f0       	breq	.+26     	; 0x42e4 <Timers_enu_ICUSetTriggerEdge+0x3e>
    42ca:	2b 81       	ldd	r18, Y+3	; 0x03
    42cc:	3c 81       	ldd	r19, Y+4	; 0x04
    42ce:	21 30       	cpi	r18, 0x01	; 1
    42d0:	31 05       	cpc	r19, r1
    42d2:	81 f4       	brne	.+32     	; 0x42f4 <Timers_enu_ICUSetTriggerEdge+0x4e>
    {
    case ICU_RISING_EDGE:SET_BIT(TIMER1_TCCR1B_REG, ICES1);break;
    42d4:	ae e4       	ldi	r26, 0x4E	; 78
    42d6:	b0 e0       	ldi	r27, 0x00	; 0
    42d8:	ee e4       	ldi	r30, 0x4E	; 78
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	80 81       	ld	r24, Z
    42de:	80 64       	ori	r24, 0x40	; 64
    42e0:	8c 93       	st	X, r24
    42e2:	09 c0       	rjmp	.+18     	; 0x42f6 <Timers_enu_ICUSetTriggerEdge+0x50>
    case ICU_FALLING_EDGE:CLR_BIT(TIMER1_TCCR1B_REG, ICES1);break;
    42e4:	ae e4       	ldi	r26, 0x4E	; 78
    42e6:	b0 e0       	ldi	r27, 0x00	; 0
    42e8:	ee e4       	ldi	r30, 0x4E	; 78
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	80 81       	ld	r24, Z
    42ee:	8f 7b       	andi	r24, 0xBF	; 191
    42f0:	8c 93       	st	X, r24
    42f2:	01 c0       	rjmp	.+2      	; 0x42f6 <Timers_enu_ICUSetTriggerEdge+0x50>
    default:Local_u8_errorState = STATE_NOT_OK ;break;
    42f4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	cf 91       	pop	r28
    4302:	df 91       	pop	r29
    4304:	08 95       	ret

00004306 <Timers_enu_ICUSetCallBack>:
ES_t Timers_enu_ICUSetCallBack(void (*Copy_pf_ICU)(void)){
    4306:	df 93       	push	r29
    4308:	cf 93       	push	r28
    430a:	00 d0       	rcall	.+0      	; 0x430c <Timers_enu_ICUSetCallBack+0x6>
    430c:	0f 92       	push	r0
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
    4312:	9b 83       	std	Y+3, r25	; 0x03
    4314:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pf_ICU != NULL){
    431a:	8a 81       	ldd	r24, Y+2	; 0x02
    431c:	9b 81       	ldd	r25, Y+3	; 0x03
    431e:	00 97       	sbiw	r24, 0x00	; 0
    4320:	39 f0       	breq	.+14     	; 0x4330 <Timers_enu_ICUSetCallBack+0x2a>
        Timers_pf_Timer1[3]  = Copy_pf_ICU;
    4322:	8a 81       	ldd	r24, Y+2	; 0x02
    4324:	9b 81       	ldd	r25, Y+3	; 0x03
    4326:	90 93 62 01 	sts	0x0162, r25
    432a:	80 93 61 01 	sts	0x0161, r24
    432e:	01 c0       	rjmp	.+2      	; 0x4332 <Timers_enu_ICUSetCallBack+0x2c>
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    4330:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4332:	89 81       	ldd	r24, Y+1	; 0x01
}
    4334:	0f 90       	pop	r0
    4336:	0f 90       	pop	r0
    4338:	0f 90       	pop	r0
    433a:	cf 91       	pop	r28
    433c:	df 91       	pop	r29
    433e:	08 95       	ret

00004340 <Timers_enu_ICUInterruptEnabled>:
ES_t Timers_enu_ICUInterruptEnabled(){
    4340:	df 93       	push	r29
    4342:	cf 93       	push	r28
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMER_TIMSK_REG,TICIE1);
    4348:	a9 e5       	ldi	r26, 0x59	; 89
    434a:	b0 e0       	ldi	r27, 0x00	; 0
    434c:	e9 e5       	ldi	r30, 0x59	; 89
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	80 81       	ld	r24, Z
    4352:	80 62       	ori	r24, 0x20	; 32
    4354:	8c 93       	st	X, r24
    return STATE_OK;
    4356:	81 e0       	ldi	r24, 0x01	; 1
}
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <Timers_enu_ICUInterruptDisabled>:
ES_t Timers_enu_ICUInterruptDisabled(){
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMER_TIMSK_REG,TICIE1);
    4366:	a9 e5       	ldi	r26, 0x59	; 89
    4368:	b0 e0       	ldi	r27, 0x00	; 0
    436a:	e9 e5       	ldi	r30, 0x59	; 89
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	80 81       	ld	r24, Z
    4370:	8f 7d       	andi	r24, 0xDF	; 223
    4372:	8c 93       	st	X, r24
    return STATE_OK;
    4374:	81 e0       	ldi	r24, 0x01	; 1
}
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <__vector_4>:
/*****ISR(Timer2) CTC Mode*****/
ISR(TIMER2_COMP){
    437c:	1f 92       	push	r1
    437e:	0f 92       	push	r0
    4380:	0f b6       	in	r0, 0x3f	; 63
    4382:	0f 92       	push	r0
    4384:	11 24       	eor	r1, r1
    4386:	2f 93       	push	r18
    4388:	3f 93       	push	r19
    438a:	4f 93       	push	r20
    438c:	5f 93       	push	r21
    438e:	6f 93       	push	r22
    4390:	7f 93       	push	r23
    4392:	8f 93       	push	r24
    4394:	9f 93       	push	r25
    4396:	af 93       	push	r26
    4398:	bf 93       	push	r27
    439a:	ef 93       	push	r30
    439c:	ff 93       	push	r31
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer2[CTC_MODE] != NULL)
    43a6:	80 91 65 01 	lds	r24, 0x0165
    43aa:	90 91 66 01 	lds	r25, 0x0166
    43ae:	00 97       	sbiw	r24, 0x00	; 0
    43b0:	29 f0       	breq	.+10     	; 0x43bc <__vector_4+0x40>
        Timers_pf_Timer2[CTC_MODE]();
    43b2:	e0 91 65 01 	lds	r30, 0x0165
    43b6:	f0 91 66 01 	lds	r31, 0x0166
    43ba:	09 95       	icall
}
    43bc:	cf 91       	pop	r28
    43be:	df 91       	pop	r29
    43c0:	ff 91       	pop	r31
    43c2:	ef 91       	pop	r30
    43c4:	bf 91       	pop	r27
    43c6:	af 91       	pop	r26
    43c8:	9f 91       	pop	r25
    43ca:	8f 91       	pop	r24
    43cc:	7f 91       	pop	r23
    43ce:	6f 91       	pop	r22
    43d0:	5f 91       	pop	r21
    43d2:	4f 91       	pop	r20
    43d4:	3f 91       	pop	r19
    43d6:	2f 91       	pop	r18
    43d8:	0f 90       	pop	r0
    43da:	0f be       	out	0x3f, r0	; 63
    43dc:	0f 90       	pop	r0
    43de:	1f 90       	pop	r1
    43e0:	18 95       	reti

000043e2 <__vector_5>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER2_OVF){
    43e2:	1f 92       	push	r1
    43e4:	0f 92       	push	r0
    43e6:	0f b6       	in	r0, 0x3f	; 63
    43e8:	0f 92       	push	r0
    43ea:	11 24       	eor	r1, r1
    43ec:	2f 93       	push	r18
    43ee:	3f 93       	push	r19
    43f0:	4f 93       	push	r20
    43f2:	5f 93       	push	r21
    43f4:	6f 93       	push	r22
    43f6:	7f 93       	push	r23
    43f8:	8f 93       	push	r24
    43fa:	9f 93       	push	r25
    43fc:	af 93       	push	r26
    43fe:	bf 93       	push	r27
    4400:	ef 93       	push	r30
    4402:	ff 93       	push	r31
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer2[NORMAL_MODE] != NULL)
    440c:	80 91 63 01 	lds	r24, 0x0163
    4410:	90 91 64 01 	lds	r25, 0x0164
    4414:	00 97       	sbiw	r24, 0x00	; 0
    4416:	29 f0       	breq	.+10     	; 0x4422 <__vector_5+0x40>
        Timers_pf_Timer2[NORMAL_MODE]();
    4418:	e0 91 63 01 	lds	r30, 0x0163
    441c:	f0 91 64 01 	lds	r31, 0x0164
    4420:	09 95       	icall
}
    4422:	cf 91       	pop	r28
    4424:	df 91       	pop	r29
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	0f 90       	pop	r0
    4444:	1f 90       	pop	r1
    4446:	18 95       	reti

00004448 <__vector_6>:
/*****ISR(Timer1) ICU *****/
ISR(TIMER1_CAPT){
    4448:	1f 92       	push	r1
    444a:	0f 92       	push	r0
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	0f 92       	push	r0
    4450:	11 24       	eor	r1, r1
    4452:	2f 93       	push	r18
    4454:	3f 93       	push	r19
    4456:	4f 93       	push	r20
    4458:	5f 93       	push	r21
    445a:	6f 93       	push	r22
    445c:	7f 93       	push	r23
    445e:	8f 93       	push	r24
    4460:	9f 93       	push	r25
    4462:	af 93       	push	r26
    4464:	bf 93       	push	r27
    4466:	ef 93       	push	r30
    4468:	ff 93       	push	r31
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    if(Timers_pf_Timer1[3] != NULL)
    4472:	80 91 61 01 	lds	r24, 0x0161
    4476:	90 91 62 01 	lds	r25, 0x0162
    447a:	00 97       	sbiw	r24, 0x00	; 0
    447c:	29 f0       	breq	.+10     	; 0x4488 <__vector_6+0x40>
        Timers_pf_Timer1[3]();
    447e:	e0 91 61 01 	lds	r30, 0x0161
    4482:	f0 91 62 01 	lds	r31, 0x0162
    4486:	09 95       	icall
}
    4488:	cf 91       	pop	r28
    448a:	df 91       	pop	r29
    448c:	ff 91       	pop	r31
    448e:	ef 91       	pop	r30
    4490:	bf 91       	pop	r27
    4492:	af 91       	pop	r26
    4494:	9f 91       	pop	r25
    4496:	8f 91       	pop	r24
    4498:	7f 91       	pop	r23
    449a:	6f 91       	pop	r22
    449c:	5f 91       	pop	r21
    449e:	4f 91       	pop	r20
    44a0:	3f 91       	pop	r19
    44a2:	2f 91       	pop	r18
    44a4:	0f 90       	pop	r0
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	0f 90       	pop	r0
    44aa:	1f 90       	pop	r1
    44ac:	18 95       	reti

000044ae <__vector_7>:
/*****ISR(Timer1) CTC Mode A*****/
ISR(TIMER1_COMPA){
    44ae:	1f 92       	push	r1
    44b0:	0f 92       	push	r0
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	0f 92       	push	r0
    44b6:	11 24       	eor	r1, r1
    44b8:	2f 93       	push	r18
    44ba:	3f 93       	push	r19
    44bc:	4f 93       	push	r20
    44be:	5f 93       	push	r21
    44c0:	6f 93       	push	r22
    44c2:	7f 93       	push	r23
    44c4:	8f 93       	push	r24
    44c6:	9f 93       	push	r25
    44c8:	af 93       	push	r26
    44ca:	bf 93       	push	r27
    44cc:	ef 93       	push	r30
    44ce:	ff 93       	push	r31
    44d0:	df 93       	push	r29
    44d2:	cf 93       	push	r28
    44d4:	cd b7       	in	r28, 0x3d	; 61
    44d6:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    44d8:	80 91 5d 01 	lds	r24, 0x015D
    44dc:	90 91 5e 01 	lds	r25, 0x015E
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	29 f0       	breq	.+10     	; 0x44ee <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    44e4:	e0 91 5d 01 	lds	r30, 0x015D
    44e8:	f0 91 5e 01 	lds	r31, 0x015E
    44ec:	09 95       	icall
}
    44ee:	cf 91       	pop	r28
    44f0:	df 91       	pop	r29
    44f2:	ff 91       	pop	r31
    44f4:	ef 91       	pop	r30
    44f6:	bf 91       	pop	r27
    44f8:	af 91       	pop	r26
    44fa:	9f 91       	pop	r25
    44fc:	8f 91       	pop	r24
    44fe:	7f 91       	pop	r23
    4500:	6f 91       	pop	r22
    4502:	5f 91       	pop	r21
    4504:	4f 91       	pop	r20
    4506:	3f 91       	pop	r19
    4508:	2f 91       	pop	r18
    450a:	0f 90       	pop	r0
    450c:	0f be       	out	0x3f, r0	; 63
    450e:	0f 90       	pop	r0
    4510:	1f 90       	pop	r1
    4512:	18 95       	reti

00004514 <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
ISR(TIMER1_COMPB){
    4514:	1f 92       	push	r1
    4516:	0f 92       	push	r0
    4518:	0f b6       	in	r0, 0x3f	; 63
    451a:	0f 92       	push	r0
    451c:	11 24       	eor	r1, r1
    451e:	2f 93       	push	r18
    4520:	3f 93       	push	r19
    4522:	4f 93       	push	r20
    4524:	5f 93       	push	r21
    4526:	6f 93       	push	r22
    4528:	7f 93       	push	r23
    452a:	8f 93       	push	r24
    452c:	9f 93       	push	r25
    452e:	af 93       	push	r26
    4530:	bf 93       	push	r27
    4532:	ef 93       	push	r30
    4534:	ff 93       	push	r31
    4536:	df 93       	push	r29
    4538:	cf 93       	push	r28
    453a:	cd b7       	in	r28, 0x3d	; 61
    453c:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    453e:	80 91 5f 01 	lds	r24, 0x015F
    4542:	90 91 60 01 	lds	r25, 0x0160
    4546:	00 97       	sbiw	r24, 0x00	; 0
    4548:	29 f0       	breq	.+10     	; 0x4554 <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    454a:	e0 91 5f 01 	lds	r30, 0x015F
    454e:	f0 91 60 01 	lds	r31, 0x0160
    4552:	09 95       	icall
}
    4554:	cf 91       	pop	r28
    4556:	df 91       	pop	r29
    4558:	ff 91       	pop	r31
    455a:	ef 91       	pop	r30
    455c:	bf 91       	pop	r27
    455e:	af 91       	pop	r26
    4560:	9f 91       	pop	r25
    4562:	8f 91       	pop	r24
    4564:	7f 91       	pop	r23
    4566:	6f 91       	pop	r22
    4568:	5f 91       	pop	r21
    456a:	4f 91       	pop	r20
    456c:	3f 91       	pop	r19
    456e:	2f 91       	pop	r18
    4570:	0f 90       	pop	r0
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	0f 90       	pop	r0
    4576:	1f 90       	pop	r1
    4578:	18 95       	reti

0000457a <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER1_OVF){
    457a:	1f 92       	push	r1
    457c:	0f 92       	push	r0
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	0f 92       	push	r0
    4582:	11 24       	eor	r1, r1
    4584:	2f 93       	push	r18
    4586:	3f 93       	push	r19
    4588:	4f 93       	push	r20
    458a:	5f 93       	push	r21
    458c:	6f 93       	push	r22
    458e:	7f 93       	push	r23
    4590:	8f 93       	push	r24
    4592:	9f 93       	push	r25
    4594:	af 93       	push	r26
    4596:	bf 93       	push	r27
    4598:	ef 93       	push	r30
    459a:	ff 93       	push	r31
    459c:	df 93       	push	r29
    459e:	cf 93       	push	r28
    45a0:	cd b7       	in	r28, 0x3d	; 61
    45a2:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    45a4:	80 91 5b 01 	lds	r24, 0x015B
    45a8:	90 91 5c 01 	lds	r25, 0x015C
    45ac:	00 97       	sbiw	r24, 0x00	; 0
    45ae:	29 f0       	breq	.+10     	; 0x45ba <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    45b0:	e0 91 5b 01 	lds	r30, 0x015B
    45b4:	f0 91 5c 01 	lds	r31, 0x015C
    45b8:	09 95       	icall
}
    45ba:	cf 91       	pop	r28
    45bc:	df 91       	pop	r29
    45be:	ff 91       	pop	r31
    45c0:	ef 91       	pop	r30
    45c2:	bf 91       	pop	r27
    45c4:	af 91       	pop	r26
    45c6:	9f 91       	pop	r25
    45c8:	8f 91       	pop	r24
    45ca:	7f 91       	pop	r23
    45cc:	6f 91       	pop	r22
    45ce:	5f 91       	pop	r21
    45d0:	4f 91       	pop	r20
    45d2:	3f 91       	pop	r19
    45d4:	2f 91       	pop	r18
    45d6:	0f 90       	pop	r0
    45d8:	0f be       	out	0x3f, r0	; 63
    45da:	0f 90       	pop	r0
    45dc:	1f 90       	pop	r1
    45de:	18 95       	reti

000045e0 <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
ISR(TIMER0_COMP){
    45e0:	1f 92       	push	r1
    45e2:	0f 92       	push	r0
    45e4:	0f b6       	in	r0, 0x3f	; 63
    45e6:	0f 92       	push	r0
    45e8:	11 24       	eor	r1, r1
    45ea:	2f 93       	push	r18
    45ec:	3f 93       	push	r19
    45ee:	4f 93       	push	r20
    45f0:	5f 93       	push	r21
    45f2:	6f 93       	push	r22
    45f4:	7f 93       	push	r23
    45f6:	8f 93       	push	r24
    45f8:	9f 93       	push	r25
    45fa:	af 93       	push	r26
    45fc:	bf 93       	push	r27
    45fe:	ef 93       	push	r30
    4600:	ff 93       	push	r31
    4602:	df 93       	push	r29
    4604:	cf 93       	push	r28
    4606:	cd b7       	in	r28, 0x3d	; 61
    4608:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    460a:	80 91 59 01 	lds	r24, 0x0159
    460e:	90 91 5a 01 	lds	r25, 0x015A
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	29 f0       	breq	.+10     	; 0x4620 <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    4616:	e0 91 59 01 	lds	r30, 0x0159
    461a:	f0 91 5a 01 	lds	r31, 0x015A
    461e:	09 95       	icall
}
    4620:	cf 91       	pop	r28
    4622:	df 91       	pop	r29
    4624:	ff 91       	pop	r31
    4626:	ef 91       	pop	r30
    4628:	bf 91       	pop	r27
    462a:	af 91       	pop	r26
    462c:	9f 91       	pop	r25
    462e:	8f 91       	pop	r24
    4630:	7f 91       	pop	r23
    4632:	6f 91       	pop	r22
    4634:	5f 91       	pop	r21
    4636:	4f 91       	pop	r20
    4638:	3f 91       	pop	r19
    463a:	2f 91       	pop	r18
    463c:	0f 90       	pop	r0
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	0f 90       	pop	r0
    4642:	1f 90       	pop	r1
    4644:	18 95       	reti

00004646 <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
ISR(TIMER0_OVF){
    4646:	1f 92       	push	r1
    4648:	0f 92       	push	r0
    464a:	0f b6       	in	r0, 0x3f	; 63
    464c:	0f 92       	push	r0
    464e:	11 24       	eor	r1, r1
    4650:	2f 93       	push	r18
    4652:	3f 93       	push	r19
    4654:	4f 93       	push	r20
    4656:	5f 93       	push	r21
    4658:	6f 93       	push	r22
    465a:	7f 93       	push	r23
    465c:	8f 93       	push	r24
    465e:	9f 93       	push	r25
    4660:	af 93       	push	r26
    4662:	bf 93       	push	r27
    4664:	ef 93       	push	r30
    4666:	ff 93       	push	r31
    4668:	df 93       	push	r29
    466a:	cf 93       	push	r28
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    4670:	80 91 57 01 	lds	r24, 0x0157
    4674:	90 91 58 01 	lds	r25, 0x0158
    4678:	00 97       	sbiw	r24, 0x00	; 0
    467a:	29 f0       	breq	.+10     	; 0x4686 <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    467c:	e0 91 57 01 	lds	r30, 0x0157
    4680:	f0 91 58 01 	lds	r31, 0x0158
    4684:	09 95       	icall
}
    4686:	cf 91       	pop	r28
    4688:	df 91       	pop	r29
    468a:	ff 91       	pop	r31
    468c:	ef 91       	pop	r30
    468e:	bf 91       	pop	r27
    4690:	af 91       	pop	r26
    4692:	9f 91       	pop	r25
    4694:	8f 91       	pop	r24
    4696:	7f 91       	pop	r23
    4698:	6f 91       	pop	r22
    469a:	5f 91       	pop	r21
    469c:	4f 91       	pop	r20
    469e:	3f 91       	pop	r19
    46a0:	2f 91       	pop	r18
    46a2:	0f 90       	pop	r0
    46a4:	0f be       	out	0x3f, r0	; 63
    46a6:	0f 90       	pop	r0
    46a8:	1f 90       	pop	r1
    46aa:	18 95       	reti

000046ac <SPI_enu_Init>:
#include"../../1-MCAL/DIO/DIO_interface.h"

#include"SPI_Config.h"
#include"SPI_Private.h"

ES_t SPI_enu_Init(void){
    46ac:	df 93       	push	r29
    46ae:	cf 93       	push	r28
    46b0:	cd b7       	in	r28, 0x3d	; 61
    46b2:	de b7       	in	r29, 0x3e	; 62
    //Mode
    #if SPI_MODE == SPI_MASTER
    //MOSI --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_OUTPUT);
    46b4:	81 e0       	ldi	r24, 0x01	; 1
    46b6:	65 e0       	ldi	r22, 0x05	; 5
    46b8:	41 e0       	ldi	r20, 0x01	; 1
    46ba:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    //MISO --> INPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_INPUT);
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	66 e0       	ldi	r22, 0x06	; 6
    46c2:	40 e0       	ldi	r20, 0x00	; 0
    46c4:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    //CLK --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN7,DIO_U8_OUTPUT);
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	67 e0       	ldi	r22, 0x07	; 7
    46cc:	41 e0       	ldi	r20, 0x01	; 1
    46ce:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    //SS --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_OUTPUT);
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	64 e0       	ldi	r22, 0x04	; 4
    46d6:	41 e0       	ldi	r20, 0x01	; 1
    46d8:	0e 94 36 28 	call	0x506c	; 0x506c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_HIGH);
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	64 e0       	ldi	r22, 0x04	; 4
    46e0:	41 e0       	ldi	r20, 0x01	; 1
    46e2:	0e 94 60 29 	call	0x52c0	; 0x52c0 <DIO_enu_SetPinValue>
    SET_BIT(SPI_SPCR,MSTR);
    46e6:	ad e2       	ldi	r26, 0x2D	; 45
    46e8:	b0 e0       	ldi	r27, 0x00	; 0
    46ea:	ed e2       	ldi	r30, 0x2D	; 45
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	80 81       	ld	r24, Z
    46f0:	80 61       	ori	r24, 0x10	; 16
    46f2:	8c 93       	st	X, r24
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_INPUT);
    CLR_BIT(SPI_SPCR,MSTR);
    #endif
    //Data Order
    #if SPI_DATA_ORDER == LSB
    SET_BIT(SPI_SPCR,DORD);
    46f4:	ad e2       	ldi	r26, 0x2D	; 45
    46f6:	b0 e0       	ldi	r27, 0x00	; 0
    46f8:	ed e2       	ldi	r30, 0x2D	; 45
    46fa:	f0 e0       	ldi	r31, 0x00	; 0
    46fc:	80 81       	ld	r24, Z
    46fe:	80 62       	ori	r24, 0x20	; 32
    4700:	8c 93       	st	X, r24
    #elif  SPI_DATA_ORDER == MSB
    CLR_BIT(SPI_SPCR,DORD);
    #endif
    //Clock Polarity 
    #if SPI_CLOCK_POLARITY == LEADING_RISING
    CLR_BIT(SPI_SPCR,CPOL);
    4702:	ad e2       	ldi	r26, 0x2D	; 45
    4704:	b0 e0       	ldi	r27, 0x00	; 0
    4706:	ed e2       	ldi	r30, 0x2D	; 45
    4708:	f0 e0       	ldi	r31, 0x00	; 0
    470a:	80 81       	ld	r24, Z
    470c:	87 7f       	andi	r24, 0xF7	; 247
    470e:	8c 93       	st	X, r24
    #endif
    //Clock Phase 
    #if SPI_CLOCK_PHASE== LEADING_SAMPLE
    CLR_BIT(SPI_SPCR,CPHA);
    #elif SPI_CLOCK_PHASE== LEADING_SETUP
    SET_BIT(SPI_SPCR,CPHA);
    4710:	ad e2       	ldi	r26, 0x2D	; 45
    4712:	b0 e0       	ldi	r27, 0x00	; 0
    4714:	ed e2       	ldi	r30, 0x2D	; 45
    4716:	f0 e0       	ldi	r31, 0x00	; 0
    4718:	80 81       	ld	r24, Z
    471a:	84 60       	ori	r24, 0x04	; 4
    471c:	8c 93       	st	X, r24
    #elif SPI_CLOCK_PRESCALER == DIV_64
    SET_BIT(SPI_SPCR,SPR0);
    SET_BIT(SPI_SPCR,SPR1);
    SET_BIT(SPI_SPSR,SPI2X);
    #elif SPI_CLOCK_PRESCALER == DIV_128
    SET_BIT(SPI_SPCR,SPR0);
    471e:	ad e2       	ldi	r26, 0x2D	; 45
    4720:	b0 e0       	ldi	r27, 0x00	; 0
    4722:	ed e2       	ldi	r30, 0x2D	; 45
    4724:	f0 e0       	ldi	r31, 0x00	; 0
    4726:	80 81       	ld	r24, Z
    4728:	81 60       	ori	r24, 0x01	; 1
    472a:	8c 93       	st	X, r24
    SET_BIT(SPI_SPCR,SPR1);
    472c:	ad e2       	ldi	r26, 0x2D	; 45
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	ed e2       	ldi	r30, 0x2D	; 45
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	82 60       	ori	r24, 0x02	; 2
    4738:	8c 93       	st	X, r24
    CLR_BIT(SPI_SPSR,SPI2X);
    473a:	ae e2       	ldi	r26, 0x2E	; 46
    473c:	b0 e0       	ldi	r27, 0x00	; 0
    473e:	ee e2       	ldi	r30, 0x2E	; 46
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	80 81       	ld	r24, Z
    4744:	8e 7f       	andi	r24, 0xFE	; 254
    4746:	8c 93       	st	X, r24
    #endif
    //Enable SPI
    SET_BIT(SPI_SPCR,SPE);
    4748:	ad e2       	ldi	r26, 0x2D	; 45
    474a:	b0 e0       	ldi	r27, 0x00	; 0
    474c:	ed e2       	ldi	r30, 0x2D	; 45
    474e:	f0 e0       	ldi	r31, 0x00	; 0
    4750:	80 81       	ld	r24, Z
    4752:	80 64       	ori	r24, 0x40	; 64
    4754:	8c 93       	st	X, r24
    return STATE_OK;
    4756:	81 e0       	ldi	r24, 0x01	; 1
}
    4758:	cf 91       	pop	r28
    475a:	df 91       	pop	r29
    475c:	08 95       	ret

0000475e <SPI_enu_Transceive>:
ES_t SPI_enu_Transceive(u8 Copy_u8_Data ,u8 *Copy_u8_recievedData){
    475e:	df 93       	push	r29
    4760:	cf 93       	push	r28
    4762:	00 d0       	rcall	.+0      	; 0x4764 <SPI_enu_Transceive+0x6>
    4764:	0f 92       	push	r0
    4766:	cd b7       	in	r28, 0x3d	; 61
    4768:	de b7       	in	r29, 0x3e	; 62
    476a:	89 83       	std	Y+1, r24	; 0x01
    476c:	7b 83       	std	Y+3, r23	; 0x03
    476e:	6a 83       	std	Y+2, r22	; 0x02
        //Send Data
        SPI_SPDR = Copy_u8_Data;
    4770:	ef e2       	ldi	r30, 0x2F	; 47
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	89 81       	ldd	r24, Y+1	; 0x01
    4776:	80 83       	st	Z, r24
        while ((!GET_BIT(SPI_SPSR,SPIF)));
    4778:	ee e2       	ldi	r30, 0x2E	; 46
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	80 81       	ld	r24, Z
    477e:	88 23       	and	r24, r24
    4780:	dc f7       	brge	.-10     	; 0x4778 <SPI_enu_Transceive+0x1a>
        //Receive Data
        *Copy_u8_recievedData = SPI_SPDR;
    4782:	ef e2       	ldi	r30, 0x2F	; 47
    4784:	f0 e0       	ldi	r31, 0x00	; 0
    4786:	80 81       	ld	r24, Z
    4788:	ea 81       	ldd	r30, Y+2	; 0x02
    478a:	fb 81       	ldd	r31, Y+3	; 0x03
    478c:	80 83       	st	Z, r24
        return STATE_OK;
    478e:	81 e0       	ldi	r24, 0x01	; 1
}
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <SPI_enu_Disable>:
ES_t SPI_enu_Disable(void){
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	cd b7       	in	r28, 0x3d	; 61
    47a2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPI_SPCR,SPE);
    47a4:	ad e2       	ldi	r26, 0x2D	; 45
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	ed e2       	ldi	r30, 0x2D	; 45
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	8f 7b       	andi	r24, 0xBF	; 191
    47b0:	8c 93       	st	X, r24
	return STATE_OK;
    47b2:	81 e0       	ldi	r24, 0x01	; 1
}
    47b4:	cf 91       	pop	r28
    47b6:	df 91       	pop	r29
    47b8:	08 95       	ret

000047ba <I2C_enu_clearAndCheckFlag>:
#include"../../1-MCAL/WDT/WDT_Interface.h"

#include"I2C_Config.h"
#include"I2C_Private.h"

static void I2C_enu_clearAndCheckFlag(void){
    47ba:	df 93       	push	r29
    47bc:	cf 93       	push	r28
    47be:	cd b7       	in	r28, 0x3d	; 61
    47c0:	de b7       	in	r29, 0x3e	; 62
    //Clear Flag
    SET_BIT(I2C_TWCR,TWINT);
    47c2:	a6 e5       	ldi	r26, 0x56	; 86
    47c4:	b0 e0       	ldi	r27, 0x00	; 0
    47c6:	e6 e5       	ldi	r30, 0x56	; 86
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	80 81       	ld	r24, Z
    47cc:	80 68       	ori	r24, 0x80	; 128
    47ce:	8c 93       	st	X, r24
    //Wait Flag
    while((!GET_BIT(I2C_TWCR,TWINT)));
    47d0:	e6 e5       	ldi	r30, 0x56	; 86
    47d2:	f0 e0       	ldi	r31, 0x00	; 0
    47d4:	80 81       	ld	r24, Z
    47d6:	88 23       	and	r24, r24
    47d8:	dc f7       	brge	.-10     	; 0x47d0 <I2C_enu_clearAndCheckFlag+0x16>
}
    47da:	cf 91       	pop	r28
    47dc:	df 91       	pop	r29
    47de:	08 95       	ret

000047e0 <I2C_enu_Init>:
ES_t I2C_enu_Init(void){
    47e0:	df 93       	push	r29
    47e2:	cf 93       	push	r28
    47e4:	cd b7       	in	r28, 0x3d	; 61
    47e6:	de b7       	in	r29, 0x3e	; 62
    3- Enable ACK
    4- Enable I2C
*/
    #if I2C_MODE == I2C_MASTER
    //1-Select Prescaler
    CLR_BIT(I2C_TWSR,TWPS0);
    47e8:	a1 e2       	ldi	r26, 0x21	; 33
    47ea:	b0 e0       	ldi	r27, 0x00	; 0
    47ec:	e1 e2       	ldi	r30, 0x21	; 33
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	80 81       	ld	r24, Z
    47f2:	8e 7f       	andi	r24, 0xFE	; 254
    47f4:	8c 93       	st	X, r24
    CLR_BIT(I2C_TWSR,TWPS1);
    47f6:	a1 e2       	ldi	r26, 0x21	; 33
    47f8:	b0 e0       	ldi	r27, 0x00	; 0
    47fa:	e1 e2       	ldi	r30, 0x21	; 33
    47fc:	f0 e0       	ldi	r31, 0x00	; 0
    47fe:	80 81       	ld	r24, Z
    4800:	8d 7f       	andi	r24, 0xFD	; 253
    4802:	8c 93       	st	X, r24
    //2-Set TWBR REG
    I2C_TWBR = ((F_CPU/I2C_SPEED)-16)/(2*I2C_PRESCALER);
    4804:	e0 e2       	ldi	r30, 0x20	; 32
    4806:	f0 e0       	ldi	r31, 0x00	; 0
    4808:	88 e3       	ldi	r24, 0x38	; 56
    480a:	80 83       	st	Z, r24
    //3- Enable ACK
    SET_BIT(I2C_TWCR,TWEA);
    480c:	a6 e5       	ldi	r26, 0x56	; 86
    480e:	b0 e0       	ldi	r27, 0x00	; 0
    4810:	e6 e5       	ldi	r30, 0x56	; 86
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	80 64       	ori	r24, 0x40	; 64
    4818:	8c 93       	st	X, r24
    //4- Enable I2C
    SET_BIT(I2C_TWCR,TWEN);
    481a:	a6 e5       	ldi	r26, 0x56	; 86
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	e6 e5       	ldi	r30, 0x56	; 86
    4820:	f0 e0       	ldi	r31, 0x00	; 0
    4822:	80 81       	ld	r24, Z
    4824:	84 60       	ori	r24, 0x04	; 4
    4826:	8c 93       	st	X, r24
    //1- Enable ACK
    SET_BIT(I2C_TWCR,TWEA);
    //2- Enable I2C
    SET_BIT(I2C_TWCR,TWEN);
    #endif
    return STATE_OK;
    4828:	81 e0       	ldi	r24, 0x01	; 1
}
    482a:	cf 91       	pop	r28
    482c:	df 91       	pop	r29
    482e:	08 95       	ret

00004830 <I2C_enu_setSlaveAddress>:
ES_t I2C_enu_setSlaveAddress(u8 Copy_u8_slaveAddress){
    4830:	df 93       	push	r29
    4832:	cf 93       	push	r28
    4834:	0f 92       	push	r0
    4836:	cd b7       	in	r28, 0x3d	; 61
    4838:	de b7       	in	r29, 0x3e	; 62
    483a:	89 83       	std	Y+1, r24	; 0x01
    // Set Slave Address
    I2C_TWAR = (Copy_u8_slaveAddress<<1);
    483c:	e2 e2       	ldi	r30, 0x22	; 34
    483e:	f0 e0       	ldi	r31, 0x00	; 0
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	88 0f       	add	r24, r24
    4844:	80 83       	st	Z, r24
    return STATE_OK;
    4846:	81 e0       	ldi	r24, 0x01	; 1
}
    4848:	0f 90       	pop	r0
    484a:	cf 91       	pop	r28
    484c:	df 91       	pop	r29
    484e:	08 95       	ret

00004850 <I2C_enu_Start>:
ES_t I2C_enu_Start(void){
    4850:	df 93       	push	r29
    4852:	cf 93       	push	r28
    4854:	cd b7       	in	r28, 0x3d	; 61
    4856:	de b7       	in	r29, 0x3e	; 62
    //1- Enable Start Condition
    SET_BIT(I2C_TWCR,TWSTA);
    4858:	a6 e5       	ldi	r26, 0x56	; 86
    485a:	b0 e0       	ldi	r27, 0x00	; 0
    485c:	e6 e5       	ldi	r30, 0x56	; 86
    485e:	f0 e0       	ldi	r31, 0x00	; 0
    4860:	80 81       	ld	r24, Z
    4862:	80 62       	ori	r24, 0x20	; 32
    4864:	8c 93       	st	X, r24
    I2C_enu_clearAndCheckFlag();
    4866:	0e 94 dd 23 	call	0x47ba	; 0x47ba <I2C_enu_clearAndCheckFlag>
    return STATE_OK;
    486a:	81 e0       	ldi	r24, 0x01	; 1
}
    486c:	cf 91       	pop	r28
    486e:	df 91       	pop	r29
    4870:	08 95       	ret

00004872 <I2C_enu_Stop>:
ES_t I2C_enu_Stop(void){
    4872:	df 93       	push	r29
    4874:	cf 93       	push	r28
    4876:	cd b7       	in	r28, 0x3d	; 61
    4878:	de b7       	in	r29, 0x3e	; 62
    //1- Enable Stop Condition
    SET_BIT(I2C_TWCR,TWSTO);
    487a:	a6 e5       	ldi	r26, 0x56	; 86
    487c:	b0 e0       	ldi	r27, 0x00	; 0
    487e:	e6 e5       	ldi	r30, 0x56	; 86
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	80 81       	ld	r24, Z
    4884:	80 61       	ori	r24, 0x10	; 16
    4886:	8c 93       	st	X, r24
    //2- Clear Flag
    SET_BIT(I2C_TWCR,TWINT);
    4888:	a6 e5       	ldi	r26, 0x56	; 86
    488a:	b0 e0       	ldi	r27, 0x00	; 0
    488c:	e6 e5       	ldi	r30, 0x56	; 86
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	80 81       	ld	r24, Z
    4892:	80 68       	ori	r24, 0x80	; 128
    4894:	8c 93       	st	X, r24
    return STATE_OK;
    4896:	81 e0       	ldi	r24, 0x01	; 1
}
    4898:	cf 91       	pop	r28
    489a:	df 91       	pop	r29
    489c:	08 95       	ret

0000489e <I2C_enu_writeData>:
ES_t I2C_enu_writeData(u16 Copy_u8_slaveAddress ,u8 Copy_u8_Data){
    489e:	df 93       	push	r29
    48a0:	cf 93       	push	r28
    48a2:	00 d0       	rcall	.+0      	; 0x48a4 <I2C_enu_writeData+0x6>
    48a4:	0f 92       	push	r0
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	9a 83       	std	Y+2, r25	; 0x02
    48ac:	89 83       	std	Y+1, r24	; 0x01
    48ae:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_u8_slaveAddress != NONE)
    48b0:	89 81       	ldd	r24, Y+1	; 0x01
    48b2:	9a 81       	ldd	r25, Y+2	; 0x02
    48b4:	23 e0       	ldi	r18, 0x03	; 3
    48b6:	88 3e       	cpi	r24, 0xE8	; 232
    48b8:	92 07       	cpc	r25, r18
    48ba:	a9 f0       	breq	.+42     	; 0x48e6 <I2C_enu_writeData+0x48>
    {
        // 1- Write Slave Address
        I2C_TWDR = (Copy_u8_slaveAddress << 1);
    48bc:	e3 e2       	ldi	r30, 0x23	; 35
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	88 0f       	add	r24, r24
    48c4:	80 83       	st	Z, r24
        // 2-Set Write Operation
        CLR_BIT(I2C_TWDR, TWD0);
    48c6:	a3 e2       	ldi	r26, 0x23	; 35
    48c8:	b0 e0       	ldi	r27, 0x00	; 0
    48ca:	e3 e2       	ldi	r30, 0x23	; 35
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	80 81       	ld	r24, Z
    48d0:	8e 7f       	andi	r24, 0xFE	; 254
    48d2:	8c 93       	st	X, r24
        // 3-Start Bit
        CLR_BIT(I2C_TWCR, TWSTA);
    48d4:	a6 e5       	ldi	r26, 0x56	; 86
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	e6 e5       	ldi	r30, 0x56	; 86
    48da:	f0 e0       	ldi	r31, 0x00	; 0
    48dc:	80 81       	ld	r24, Z
    48de:	8f 7d       	andi	r24, 0xDF	; 223
    48e0:	8c 93       	st	X, r24
        I2C_enu_clearAndCheckFlag();
    48e2:	0e 94 dd 23 	call	0x47ba	; 0x47ba <I2C_enu_clearAndCheckFlag>
    }
        // 4- Write Data
        I2C_TWDR = Copy_u8_Data;
    48e6:	e3 e2       	ldi	r30, 0x23	; 35
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	8b 81       	ldd	r24, Y+3	; 0x03
    48ec:	80 83       	st	Z, r24
        I2C_enu_clearAndCheckFlag();
    48ee:	0e 94 dd 23 	call	0x47ba	; 0x47ba <I2C_enu_clearAndCheckFlag>
    return STATE_OK;
    48f2:	81 e0       	ldi	r24, 0x01	; 1
}
    48f4:	0f 90       	pop	r0
    48f6:	0f 90       	pop	r0
    48f8:	0f 90       	pop	r0
    48fa:	cf 91       	pop	r28
    48fc:	df 91       	pop	r29
    48fe:	08 95       	ret

00004900 <I2C_enu_readData>:
ES_t I2C_enu_readData(u8 Copy_u8_slaveAddress,u8 *Copy_pu8_receivedByte){
    4900:	df 93       	push	r29
    4902:	cf 93       	push	r28
    4904:	00 d0       	rcall	.+0      	; 0x4906 <I2C_enu_readData+0x6>
    4906:	00 d0       	rcall	.+0      	; 0x4908 <I2C_enu_readData+0x8>
    4908:	cd b7       	in	r28, 0x3d	; 61
    490a:	de b7       	in	r29, 0x3e	; 62
    490c:	8a 83       	std	Y+2, r24	; 0x02
    490e:	7c 83       	std	Y+4, r23	; 0x04
    4910:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_receivedByte != NULL){
    4916:	8b 81       	ldd	r24, Y+3	; 0x03
    4918:	9c 81       	ldd	r25, Y+4	; 0x04
    491a:	00 97       	sbiw	r24, 0x00	; 0
    491c:	39 f1       	breq	.+78     	; 0x496c <I2C_enu_readData+0x6c>
        #if I2C_MODE == I2C_MASTER
        //1- Write Slave Address
        I2C_TWDR = (Copy_u8_slaveAddress<<1);
    491e:	e3 e2       	ldi	r30, 0x23	; 35
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	8a 81       	ldd	r24, Y+2	; 0x02
    4924:	88 0f       	add	r24, r24
    4926:	80 83       	st	Z, r24
        //2- Set Read Operation
        SET_BIT(I2C_TWDR,TWD0);
    4928:	a3 e2       	ldi	r26, 0x23	; 35
    492a:	b0 e0       	ldi	r27, 0x00	; 0
    492c:	e3 e2       	ldi	r30, 0x23	; 35
    492e:	f0 e0       	ldi	r31, 0x00	; 0
    4930:	80 81       	ld	r24, Z
    4932:	81 60       	ori	r24, 0x01	; 1
    4934:	8c 93       	st	X, r24
        //3-Start Bit
        CLR_BIT(I2C_TWCR,TWSTA);
    4936:	a6 e5       	ldi	r26, 0x56	; 86
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	e6 e5       	ldi	r30, 0x56	; 86
    493c:	f0 e0       	ldi	r31, 0x00	; 0
    493e:	80 81       	ld	r24, Z
    4940:	8f 7d       	andi	r24, 0xDF	; 223
    4942:	8c 93       	st	X, r24
        I2C_enu_clearAndCheckFlag();
    4944:	0e 94 dd 23 	call	0x47ba	; 0x47ba <I2C_enu_clearAndCheckFlag>
        //4- Check Data Received
        I2C_enu_clearAndCheckFlag();
    4948:	0e 94 dd 23 	call	0x47ba	; 0x47ba <I2C_enu_clearAndCheckFlag>
        //5-Read Data
        *Copy_pu8_receivedByte= I2C_TWDR;
    494c:	e3 e2       	ldi	r30, 0x23	; 35
    494e:	f0 e0       	ldi	r31, 0x00	; 0
    4950:	80 81       	ld	r24, Z
    4952:	eb 81       	ldd	r30, Y+3	; 0x03
    4954:	fc 81       	ldd	r31, Y+4	; 0x04
    4956:	80 83       	st	Z, r24
        //6- Send NACK
        CLR_BIT(I2C_TWCR,TWEA);
    4958:	a6 e5       	ldi	r26, 0x56	; 86
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	e6 e5       	ldi	r30, 0x56	; 86
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	8f 7b       	andi	r24, 0xBF	; 191
    4964:	8c 93       	st	X, r24
        //7- Check Flag
        I2C_enu_clearAndCheckFlag();
    4966:	0e 94 dd 23 	call	0x47ba	; 0x47ba <I2C_enu_clearAndCheckFlag>
    496a:	01 c0       	rjmp	.+2      	; 0x496e <I2C_enu_readData+0x6e>
        //Wait to recieve Data
        while( (TWSR & 0xf8) != 0x80);
        *Copy_pu8_receivedByte = I2C_TWDR;
        #endif
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    496c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    496e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	0f 90       	pop	r0
    4976:	0f 90       	pop	r0
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	08 95       	ret

0000497e <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    497e:	df 93       	push	r29
    4980:	cf 93       	push	r28
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    4986:	af e5       	ldi	r26, 0x5F	; 95
    4988:	b0 e0       	ldi	r27, 0x00	; 0
    498a:	ef e5       	ldi	r30, 0x5F	; 95
    498c:	f0 e0       	ldi	r31, 0x00	; 0
    498e:	80 81       	ld	r24, Z
    4990:	80 68       	ori	r24, 0x80	; 128
    4992:	8c 93       	st	X, r24
    return STATE_OK;
    4994:	81 e0       	ldi	r24, 0x01	; 1
}
    4996:	cf 91       	pop	r28
    4998:	df 91       	pop	r29
    499a:	08 95       	ret

0000499c <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    499c:	df 93       	push	r29
    499e:	cf 93       	push	r28
    49a0:	cd b7       	in	r28, 0x3d	; 61
    49a2:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    49a4:	af e5       	ldi	r26, 0x5F	; 95
    49a6:	b0 e0       	ldi	r27, 0x00	; 0
    49a8:	ef e5       	ldi	r30, 0x5F	; 95
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	80 81       	ld	r24, Z
    49ae:	8f 77       	andi	r24, 0x7F	; 127
    49b0:	8c 93       	st	X, r24
    return STATE_OK;
    49b2:	81 e0       	ldi	r24, 0x01	; 1
}
    49b4:	cf 91       	pop	r28
    49b6:	df 91       	pop	r29
    49b8:	08 95       	ret

000049ba <EXTI_enu_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    49ba:	df 93       	push	r29
    49bc:	cf 93       	push	r28
    49be:	cd b7       	in	r28, 0x3d	; 61
    49c0:	de b7       	in	r29, 0x3e	; 62
    49c2:	2b 97       	sbiw	r28, 0x0b	; 11
    49c4:	0f b6       	in	r0, 0x3f	; 63
    49c6:	f8 94       	cli
    49c8:	de bf       	out	0x3e, r29	; 62
    49ca:	0f be       	out	0x3f, r0	; 63
    49cc:	cd bf       	out	0x3d, r28	; 61
    49ce:	8a 83       	std	Y+2, r24	; 0x02
    49d0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    49d6:	8a 81       	ldd	r24, Y+2	; 0x02
    49d8:	83 30       	cpi	r24, 0x03	; 3
    49da:	08 f0       	brcs	.+2      	; 0x49de <EXTI_enu_Enable+0x24>
    49dc:	07 c1       	rjmp	.+526    	; 0x4bec <EXTI_enu_Enable+0x232>
    49de:	8b 81       	ldd	r24, Y+3	; 0x03
    49e0:	84 30       	cpi	r24, 0x04	; 4
    49e2:	08 f0       	brcs	.+2      	; 0x49e6 <EXTI_enu_Enable+0x2c>
    49e4:	03 c1       	rjmp	.+518    	; 0x4bec <EXTI_enu_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    49e6:	8a 81       	ldd	r24, Y+2	; 0x02
    49e8:	28 2f       	mov	r18, r24
    49ea:	30 e0       	ldi	r19, 0x00	; 0
    49ec:	3b 87       	std	Y+11, r19	; 0x0b
    49ee:	2a 87       	std	Y+10, r18	; 0x0a
    49f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    49f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    49f4:	81 30       	cpi	r24, 0x01	; 1
    49f6:	91 05       	cpc	r25, r1
    49f8:	09 f4       	brne	.+2      	; 0x49fc <EXTI_enu_Enable+0x42>
    49fa:	6d c0       	rjmp	.+218    	; 0x4ad6 <EXTI_enu_Enable+0x11c>
    49fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    49fe:	3b 85       	ldd	r19, Y+11	; 0x0b
    4a00:	22 30       	cpi	r18, 0x02	; 2
    4a02:	31 05       	cpc	r19, r1
    4a04:	09 f4       	brne	.+2      	; 0x4a08 <EXTI_enu_Enable+0x4e>
    4a06:	c9 c0       	rjmp	.+402    	; 0x4b9a <EXTI_enu_Enable+0x1e0>
    4a08:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a0c:	00 97       	sbiw	r24, 0x00	; 0
    4a0e:	09 f0       	breq	.+2      	; 0x4a12 <EXTI_enu_Enable+0x58>
    4a10:	ee c0       	rjmp	.+476    	; 0x4bee <EXTI_enu_Enable+0x234>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    4a12:	8b 81       	ldd	r24, Y+3	; 0x03
    4a14:	28 2f       	mov	r18, r24
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	39 87       	std	Y+9, r19	; 0x09
    4a1a:	28 87       	std	Y+8, r18	; 0x08
    4a1c:	88 85       	ldd	r24, Y+8	; 0x08
    4a1e:	99 85       	ldd	r25, Y+9	; 0x09
    4a20:	81 30       	cpi	r24, 0x01	; 1
    4a22:	91 05       	cpc	r25, r1
    4a24:	21 f1       	breq	.+72     	; 0x4a6e <EXTI_enu_Enable+0xb4>
    4a26:	28 85       	ldd	r18, Y+8	; 0x08
    4a28:	39 85       	ldd	r19, Y+9	; 0x09
    4a2a:	22 30       	cpi	r18, 0x02	; 2
    4a2c:	31 05       	cpc	r19, r1
    4a2e:	2c f4       	brge	.+10     	; 0x4a3a <EXTI_enu_Enable+0x80>
    4a30:	88 85       	ldd	r24, Y+8	; 0x08
    4a32:	99 85       	ldd	r25, Y+9	; 0x09
    4a34:	00 97       	sbiw	r24, 0x00	; 0
    4a36:	61 f0       	breq	.+24     	; 0x4a50 <EXTI_enu_Enable+0x96>
    4a38:	46 c0       	rjmp	.+140    	; 0x4ac6 <EXTI_enu_Enable+0x10c>
    4a3a:	28 85       	ldd	r18, Y+8	; 0x08
    4a3c:	39 85       	ldd	r19, Y+9	; 0x09
    4a3e:	22 30       	cpi	r18, 0x02	; 2
    4a40:	31 05       	cpc	r19, r1
    4a42:	21 f1       	breq	.+72     	; 0x4a8c <EXTI_enu_Enable+0xd2>
    4a44:	88 85       	ldd	r24, Y+8	; 0x08
    4a46:	99 85       	ldd	r25, Y+9	; 0x09
    4a48:	83 30       	cpi	r24, 0x03	; 3
    4a4a:	91 05       	cpc	r25, r1
    4a4c:	71 f1       	breq	.+92     	; 0x4aaa <EXTI_enu_Enable+0xf0>
    4a4e:	3b c0       	rjmp	.+118    	; 0x4ac6 <EXTI_enu_Enable+0x10c>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a50:	a5 e5       	ldi	r26, 0x55	; 85
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	e5 e5       	ldi	r30, 0x55	; 85
    4a56:	f0 e0       	ldi	r31, 0x00	; 0
    4a58:	80 81       	ld	r24, Z
    4a5a:	8e 7f       	andi	r24, 0xFE	; 254
    4a5c:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a5e:	a5 e5       	ldi	r26, 0x55	; 85
    4a60:	b0 e0       	ldi	r27, 0x00	; 0
    4a62:	e5 e5       	ldi	r30, 0x55	; 85
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	80 81       	ld	r24, Z
    4a68:	8d 7f       	andi	r24, 0xFD	; 253
    4a6a:	8c 93       	st	X, r24
    4a6c:	2c c0       	rjmp	.+88     	; 0x4ac6 <EXTI_enu_Enable+0x10c>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a6e:	a5 e5       	ldi	r26, 0x55	; 85
    4a70:	b0 e0       	ldi	r27, 0x00	; 0
    4a72:	e5 e5       	ldi	r30, 0x55	; 85
    4a74:	f0 e0       	ldi	r31, 0x00	; 0
    4a76:	80 81       	ld	r24, Z
    4a78:	81 60       	ori	r24, 0x01	; 1
    4a7a:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a7c:	a5 e5       	ldi	r26, 0x55	; 85
    4a7e:	b0 e0       	ldi	r27, 0x00	; 0
    4a80:	e5 e5       	ldi	r30, 0x55	; 85
    4a82:	f0 e0       	ldi	r31, 0x00	; 0
    4a84:	80 81       	ld	r24, Z
    4a86:	8d 7f       	andi	r24, 0xFD	; 253
    4a88:	8c 93       	st	X, r24
    4a8a:	1d c0       	rjmp	.+58     	; 0x4ac6 <EXTI_enu_Enable+0x10c>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a8c:	a5 e5       	ldi	r26, 0x55	; 85
    4a8e:	b0 e0       	ldi	r27, 0x00	; 0
    4a90:	e5 e5       	ldi	r30, 0x55	; 85
    4a92:	f0 e0       	ldi	r31, 0x00	; 0
    4a94:	80 81       	ld	r24, Z
    4a96:	8e 7f       	andi	r24, 0xFE	; 254
    4a98:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a9a:	a5 e5       	ldi	r26, 0x55	; 85
    4a9c:	b0 e0       	ldi	r27, 0x00	; 0
    4a9e:	e5 e5       	ldi	r30, 0x55	; 85
    4aa0:	f0 e0       	ldi	r31, 0x00	; 0
    4aa2:	80 81       	ld	r24, Z
    4aa4:	82 60       	ori	r24, 0x02	; 2
    4aa6:	8c 93       	st	X, r24
    4aa8:	0e c0       	rjmp	.+28     	; 0x4ac6 <EXTI_enu_Enable+0x10c>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4aaa:	a5 e5       	ldi	r26, 0x55	; 85
    4aac:	b0 e0       	ldi	r27, 0x00	; 0
    4aae:	e5 e5       	ldi	r30, 0x55	; 85
    4ab0:	f0 e0       	ldi	r31, 0x00	; 0
    4ab2:	80 81       	ld	r24, Z
    4ab4:	81 60       	ori	r24, 0x01	; 1
    4ab6:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4ab8:	a5 e5       	ldi	r26, 0x55	; 85
    4aba:	b0 e0       	ldi	r27, 0x00	; 0
    4abc:	e5 e5       	ldi	r30, 0x55	; 85
    4abe:	f0 e0       	ldi	r31, 0x00	; 0
    4ac0:	80 81       	ld	r24, Z
    4ac2:	82 60       	ori	r24, 0x02	; 2
    4ac4:	8c 93       	st	X, r24
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    4ac6:	ab e5       	ldi	r26, 0x5B	; 91
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	eb e5       	ldi	r30, 0x5B	; 91
    4acc:	f0 e0       	ldi	r31, 0x00	; 0
    4ace:	80 81       	ld	r24, Z
    4ad0:	80 64       	ori	r24, 0x40	; 64
    4ad2:	8c 93       	st	X, r24
    4ad4:	8c c0       	rjmp	.+280    	; 0x4bee <EXTI_enu_Enable+0x234>
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    4ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad8:	28 2f       	mov	r18, r24
    4ada:	30 e0       	ldi	r19, 0x00	; 0
    4adc:	3f 83       	std	Y+7, r19	; 0x07
    4ade:	2e 83       	std	Y+6, r18	; 0x06
    4ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    4ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    4ae4:	81 30       	cpi	r24, 0x01	; 1
    4ae6:	91 05       	cpc	r25, r1
    4ae8:	21 f1       	breq	.+72     	; 0x4b32 <EXTI_enu_Enable+0x178>
    4aea:	2e 81       	ldd	r18, Y+6	; 0x06
    4aec:	3f 81       	ldd	r19, Y+7	; 0x07
    4aee:	22 30       	cpi	r18, 0x02	; 2
    4af0:	31 05       	cpc	r19, r1
    4af2:	2c f4       	brge	.+10     	; 0x4afe <EXTI_enu_Enable+0x144>
    4af4:	8e 81       	ldd	r24, Y+6	; 0x06
    4af6:	9f 81       	ldd	r25, Y+7	; 0x07
    4af8:	00 97       	sbiw	r24, 0x00	; 0
    4afa:	61 f0       	breq	.+24     	; 0x4b14 <EXTI_enu_Enable+0x15a>
    4afc:	46 c0       	rjmp	.+140    	; 0x4b8a <EXTI_enu_Enable+0x1d0>
    4afe:	2e 81       	ldd	r18, Y+6	; 0x06
    4b00:	3f 81       	ldd	r19, Y+7	; 0x07
    4b02:	22 30       	cpi	r18, 0x02	; 2
    4b04:	31 05       	cpc	r19, r1
    4b06:	21 f1       	breq	.+72     	; 0x4b50 <EXTI_enu_Enable+0x196>
    4b08:	8e 81       	ldd	r24, Y+6	; 0x06
    4b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    4b0c:	83 30       	cpi	r24, 0x03	; 3
    4b0e:	91 05       	cpc	r25, r1
    4b10:	71 f1       	breq	.+92     	; 0x4b6e <EXTI_enu_Enable+0x1b4>
    4b12:	3b c0       	rjmp	.+118    	; 0x4b8a <EXTI_enu_Enable+0x1d0>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b14:	a5 e5       	ldi	r26, 0x55	; 85
    4b16:	b0 e0       	ldi	r27, 0x00	; 0
    4b18:	e5 e5       	ldi	r30, 0x55	; 85
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	8b 7f       	andi	r24, 0xFB	; 251
    4b20:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b22:	a5 e5       	ldi	r26, 0x55	; 85
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	e5 e5       	ldi	r30, 0x55	; 85
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	87 7f       	andi	r24, 0xF7	; 247
    4b2e:	8c 93       	st	X, r24
    4b30:	2c c0       	rjmp	.+88     	; 0x4b8a <EXTI_enu_Enable+0x1d0>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b32:	a5 e5       	ldi	r26, 0x55	; 85
    4b34:	b0 e0       	ldi	r27, 0x00	; 0
    4b36:	e5 e5       	ldi	r30, 0x55	; 85
    4b38:	f0 e0       	ldi	r31, 0x00	; 0
    4b3a:	80 81       	ld	r24, Z
    4b3c:	84 60       	ori	r24, 0x04	; 4
    4b3e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b40:	a5 e5       	ldi	r26, 0x55	; 85
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	e5 e5       	ldi	r30, 0x55	; 85
    4b46:	f0 e0       	ldi	r31, 0x00	; 0
    4b48:	80 81       	ld	r24, Z
    4b4a:	87 7f       	andi	r24, 0xF7	; 247
    4b4c:	8c 93       	st	X, r24
    4b4e:	1d c0       	rjmp	.+58     	; 0x4b8a <EXTI_enu_Enable+0x1d0>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b50:	a5 e5       	ldi	r26, 0x55	; 85
    4b52:	b0 e0       	ldi	r27, 0x00	; 0
    4b54:	e5 e5       	ldi	r30, 0x55	; 85
    4b56:	f0 e0       	ldi	r31, 0x00	; 0
    4b58:	80 81       	ld	r24, Z
    4b5a:	8b 7f       	andi	r24, 0xFB	; 251
    4b5c:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b5e:	a5 e5       	ldi	r26, 0x55	; 85
    4b60:	b0 e0       	ldi	r27, 0x00	; 0
    4b62:	e5 e5       	ldi	r30, 0x55	; 85
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	80 81       	ld	r24, Z
    4b68:	88 60       	ori	r24, 0x08	; 8
    4b6a:	8c 93       	st	X, r24
    4b6c:	0e c0       	rjmp	.+28     	; 0x4b8a <EXTI_enu_Enable+0x1d0>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4b6e:	a5 e5       	ldi	r26, 0x55	; 85
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	e5 e5       	ldi	r30, 0x55	; 85
    4b74:	f0 e0       	ldi	r31, 0x00	; 0
    4b76:	80 81       	ld	r24, Z
    4b78:	84 60       	ori	r24, 0x04	; 4
    4b7a:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b7c:	a5 e5       	ldi	r26, 0x55	; 85
    4b7e:	b0 e0       	ldi	r27, 0x00	; 0
    4b80:	e5 e5       	ldi	r30, 0x55	; 85
    4b82:	f0 e0       	ldi	r31, 0x00	; 0
    4b84:	80 81       	ld	r24, Z
    4b86:	88 60       	ori	r24, 0x08	; 8
    4b88:	8c 93       	st	X, r24
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    4b8a:	ab e5       	ldi	r26, 0x5B	; 91
    4b8c:	b0 e0       	ldi	r27, 0x00	; 0
    4b8e:	eb e5       	ldi	r30, 0x5B	; 91
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	80 81       	ld	r24, Z
    4b94:	80 68       	ori	r24, 0x80	; 128
    4b96:	8c 93       	st	X, r24
    4b98:	2a c0       	rjmp	.+84     	; 0x4bee <EXTI_enu_Enable+0x234>
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    4b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9c:	28 2f       	mov	r18, r24
    4b9e:	30 e0       	ldi	r19, 0x00	; 0
    4ba0:	3d 83       	std	Y+5, r19	; 0x05
    4ba2:	2c 83       	std	Y+4, r18	; 0x04
    4ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    4ba8:	82 30       	cpi	r24, 0x02	; 2
    4baa:	91 05       	cpc	r25, r1
    4bac:	31 f0       	breq	.+12     	; 0x4bba <EXTI_enu_Enable+0x200>
    4bae:	2c 81       	ldd	r18, Y+4	; 0x04
    4bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    4bb2:	23 30       	cpi	r18, 0x03	; 3
    4bb4:	31 05       	cpc	r19, r1
    4bb6:	49 f0       	breq	.+18     	; 0x4bca <EXTI_enu_Enable+0x210>
    4bb8:	10 c0       	rjmp	.+32     	; 0x4bda <EXTI_enu_Enable+0x220>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4bba:	a4 e5       	ldi	r26, 0x54	; 84
    4bbc:	b0 e0       	ldi	r27, 0x00	; 0
    4bbe:	e4 e5       	ldi	r30, 0x54	; 84
    4bc0:	f0 e0       	ldi	r31, 0x00	; 0
    4bc2:	80 81       	ld	r24, Z
    4bc4:	8f 7b       	andi	r24, 0xBF	; 191
    4bc6:	8c 93       	st	X, r24
    4bc8:	09 c0       	rjmp	.+18     	; 0x4bdc <EXTI_enu_Enable+0x222>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4bca:	a4 e5       	ldi	r26, 0x54	; 84
    4bcc:	b0 e0       	ldi	r27, 0x00	; 0
    4bce:	e4 e5       	ldi	r30, 0x54	; 84
    4bd0:	f0 e0       	ldi	r31, 0x00	; 0
    4bd2:	80 81       	ld	r24, Z
    4bd4:	80 64       	ori	r24, 0x40	; 64
    4bd6:	8c 93       	st	X, r24
    4bd8:	01 c0       	rjmp	.+2      	; 0x4bdc <EXTI_enu_Enable+0x222>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    4bda:	19 82       	std	Y+1, r1	; 0x01
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    4bdc:	ab e5       	ldi	r26, 0x5B	; 91
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	eb e5       	ldi	r30, 0x5B	; 91
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	80 81       	ld	r24, Z
    4be6:	80 62       	ori	r24, 0x20	; 32
    4be8:	8c 93       	st	X, r24
    4bea:	01 c0       	rjmp	.+2      	; 0x4bee <EXTI_enu_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4bec:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bf0:	2b 96       	adiw	r28, 0x0b	; 11
    4bf2:	0f b6       	in	r0, 0x3f	; 63
    4bf4:	f8 94       	cli
    4bf6:	de bf       	out	0x3e, r29	; 62
    4bf8:	0f be       	out	0x3f, r0	; 63
    4bfa:	cd bf       	out	0x3d, r28	; 61
    4bfc:	cf 91       	pop	r28
    4bfe:	df 91       	pop	r29
    4c00:	08 95       	ret

00004c02 <EXTI_enu_Disable>:
ES_t EXTI_enu_Disable(u8 Copy_u8_EXTI_Index)
{
    4c02:	df 93       	push	r29
    4c04:	cf 93       	push	r28
    4c06:	00 d0       	rcall	.+0      	; 0x4c08 <EXTI_enu_Disable+0x6>
    4c08:	00 d0       	rcall	.+0      	; 0x4c0a <EXTI_enu_Disable+0x8>
    4c0a:	cd b7       	in	r28, 0x3d	; 61
    4c0c:	de b7       	in	r29, 0x3e	; 62
    4c0e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    4c10:	81 e0       	ldi	r24, 0x01	; 1
    4c12:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    4c14:	8a 81       	ldd	r24, Y+2	; 0x02
    4c16:	83 30       	cpi	r24, 0x03	; 3
    4c18:	58 f5       	brcc	.+86     	; 0x4c70 <EXTI_enu_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    4c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4c1c:	28 2f       	mov	r18, r24
    4c1e:	30 e0       	ldi	r19, 0x00	; 0
    4c20:	3c 83       	std	Y+4, r19	; 0x04
    4c22:	2b 83       	std	Y+3, r18	; 0x03
    4c24:	8b 81       	ldd	r24, Y+3	; 0x03
    4c26:	9c 81       	ldd	r25, Y+4	; 0x04
    4c28:	81 30       	cpi	r24, 0x01	; 1
    4c2a:	91 05       	cpc	r25, r1
    4c2c:	89 f0       	breq	.+34     	; 0x4c50 <EXTI_enu_Disable+0x4e>
    4c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    4c30:	3c 81       	ldd	r19, Y+4	; 0x04
    4c32:	22 30       	cpi	r18, 0x02	; 2
    4c34:	31 05       	cpc	r19, r1
    4c36:	a1 f0       	breq	.+40     	; 0x4c60 <EXTI_enu_Disable+0x5e>
    4c38:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4c3c:	00 97       	sbiw	r24, 0x00	; 0
    4c3e:	c9 f4       	brne	.+50     	; 0x4c72 <EXTI_enu_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    4c40:	ab e5       	ldi	r26, 0x5B	; 91
    4c42:	b0 e0       	ldi	r27, 0x00	; 0
    4c44:	eb e5       	ldi	r30, 0x5B	; 91
    4c46:	f0 e0       	ldi	r31, 0x00	; 0
    4c48:	80 81       	ld	r24, Z
    4c4a:	8f 7b       	andi	r24, 0xBF	; 191
    4c4c:	8c 93       	st	X, r24
    4c4e:	11 c0       	rjmp	.+34     	; 0x4c72 <EXTI_enu_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    4c50:	ab e5       	ldi	r26, 0x5B	; 91
    4c52:	b0 e0       	ldi	r27, 0x00	; 0
    4c54:	eb e5       	ldi	r30, 0x5B	; 91
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	80 81       	ld	r24, Z
    4c5a:	8f 77       	andi	r24, 0x7F	; 127
    4c5c:	8c 93       	st	X, r24
    4c5e:	09 c0       	rjmp	.+18     	; 0x4c72 <EXTI_enu_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    4c60:	ab e5       	ldi	r26, 0x5B	; 91
    4c62:	b0 e0       	ldi	r27, 0x00	; 0
    4c64:	eb e5       	ldi	r30, 0x5B	; 91
    4c66:	f0 e0       	ldi	r31, 0x00	; 0
    4c68:	80 81       	ld	r24, Z
    4c6a:	8f 7d       	andi	r24, 0xDF	; 223
    4c6c:	8c 93       	st	X, r24
    4c6e:	01 c0       	rjmp	.+2      	; 0x4c72 <EXTI_enu_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4c70:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c74:	0f 90       	pop	r0
    4c76:	0f 90       	pop	r0
    4c78:	0f 90       	pop	r0
    4c7a:	0f 90       	pop	r0
    4c7c:	cf 91       	pop	r28
    4c7e:	df 91       	pop	r29
    4c80:	08 95       	ret

00004c82 <EXTI_enu_setSenseControl>:
ES_t EXTI_enu_setSenseControl(u8 Copy_u8_EXTI_Index,u8 Copy_u8_EXTI_Edge){
    4c82:	df 93       	push	r29
    4c84:	cf 93       	push	r28
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	2b 97       	sbiw	r28, 0x0b	; 11
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	de bf       	out	0x3e, r29	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	cd bf       	out	0x3d, r28	; 61
    4c96:	8a 83       	std	Y+2, r24	; 0x02
    4c98:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    4c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca0:	83 30       	cpi	r24, 0x03	; 3
    4ca2:	08 f0       	brcs	.+2      	; 0x4ca6 <EXTI_enu_setSenseControl+0x24>
    4ca4:	f2 c0       	rjmp	.+484    	; 0x4e8a <EXTI_enu_setSenseControl+0x208>
    4ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca8:	84 30       	cpi	r24, 0x04	; 4
    4caa:	08 f0       	brcs	.+2      	; 0x4cae <EXTI_enu_setSenseControl+0x2c>
    4cac:	ee c0       	rjmp	.+476    	; 0x4e8a <EXTI_enu_setSenseControl+0x208>
    {
        switch (Copy_u8_EXTI_Index)
    4cae:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb0:	28 2f       	mov	r18, r24
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	3b 87       	std	Y+11, r19	; 0x0b
    4cb6:	2a 87       	std	Y+10, r18	; 0x0a
    4cb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cba:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cbc:	81 30       	cpi	r24, 0x01	; 1
    4cbe:	91 05       	cpc	r25, r1
    4cc0:	09 f4       	brne	.+2      	; 0x4cc4 <EXTI_enu_setSenseControl+0x42>
    4cc2:	66 c0       	rjmp	.+204    	; 0x4d90 <EXTI_enu_setSenseControl+0x10e>
    4cc4:	2a 85       	ldd	r18, Y+10	; 0x0a
    4cc6:	3b 85       	ldd	r19, Y+11	; 0x0b
    4cc8:	22 30       	cpi	r18, 0x02	; 2
    4cca:	31 05       	cpc	r19, r1
    4ccc:	09 f4       	brne	.+2      	; 0x4cd0 <EXTI_enu_setSenseControl+0x4e>
    4cce:	bb c0       	rjmp	.+374    	; 0x4e46 <EXTI_enu_setSenseControl+0x1c4>
    4cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cd4:	00 97       	sbiw	r24, 0x00	; 0
    4cd6:	09 f0       	breq	.+2      	; 0x4cda <EXTI_enu_setSenseControl+0x58>
    4cd8:	d9 c0       	rjmp	.+434    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    4cda:	8b 81       	ldd	r24, Y+3	; 0x03
    4cdc:	28 2f       	mov	r18, r24
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	39 87       	std	Y+9, r19	; 0x09
    4ce2:	28 87       	std	Y+8, r18	; 0x08
    4ce4:	88 85       	ldd	r24, Y+8	; 0x08
    4ce6:	99 85       	ldd	r25, Y+9	; 0x09
    4ce8:	81 30       	cpi	r24, 0x01	; 1
    4cea:	91 05       	cpc	r25, r1
    4cec:	21 f1       	breq	.+72     	; 0x4d36 <EXTI_enu_setSenseControl+0xb4>
    4cee:	28 85       	ldd	r18, Y+8	; 0x08
    4cf0:	39 85       	ldd	r19, Y+9	; 0x09
    4cf2:	22 30       	cpi	r18, 0x02	; 2
    4cf4:	31 05       	cpc	r19, r1
    4cf6:	2c f4       	brge	.+10     	; 0x4d02 <EXTI_enu_setSenseControl+0x80>
    4cf8:	88 85       	ldd	r24, Y+8	; 0x08
    4cfa:	99 85       	ldd	r25, Y+9	; 0x09
    4cfc:	00 97       	sbiw	r24, 0x00	; 0
    4cfe:	61 f0       	breq	.+24     	; 0x4d18 <EXTI_enu_setSenseControl+0x96>
    4d00:	c5 c0       	rjmp	.+394    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
    4d02:	28 85       	ldd	r18, Y+8	; 0x08
    4d04:	39 85       	ldd	r19, Y+9	; 0x09
    4d06:	22 30       	cpi	r18, 0x02	; 2
    4d08:	31 05       	cpc	r19, r1
    4d0a:	21 f1       	breq	.+72     	; 0x4d54 <EXTI_enu_setSenseControl+0xd2>
    4d0c:	88 85       	ldd	r24, Y+8	; 0x08
    4d0e:	99 85       	ldd	r25, Y+9	; 0x09
    4d10:	83 30       	cpi	r24, 0x03	; 3
    4d12:	91 05       	cpc	r25, r1
    4d14:	71 f1       	breq	.+92     	; 0x4d72 <EXTI_enu_setSenseControl+0xf0>
    4d16:	ba c0       	rjmp	.+372    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d18:	a5 e5       	ldi	r26, 0x55	; 85
    4d1a:	b0 e0       	ldi	r27, 0x00	; 0
    4d1c:	e5 e5       	ldi	r30, 0x55	; 85
    4d1e:	f0 e0       	ldi	r31, 0x00	; 0
    4d20:	80 81       	ld	r24, Z
    4d22:	8e 7f       	andi	r24, 0xFE	; 254
    4d24:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d26:	a5 e5       	ldi	r26, 0x55	; 85
    4d28:	b0 e0       	ldi	r27, 0x00	; 0
    4d2a:	e5 e5       	ldi	r30, 0x55	; 85
    4d2c:	f0 e0       	ldi	r31, 0x00	; 0
    4d2e:	80 81       	ld	r24, Z
    4d30:	8d 7f       	andi	r24, 0xFD	; 253
    4d32:	8c 93       	st	X, r24
    4d34:	ab c0       	rjmp	.+342    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d36:	a5 e5       	ldi	r26, 0x55	; 85
    4d38:	b0 e0       	ldi	r27, 0x00	; 0
    4d3a:	e5 e5       	ldi	r30, 0x55	; 85
    4d3c:	f0 e0       	ldi	r31, 0x00	; 0
    4d3e:	80 81       	ld	r24, Z
    4d40:	81 60       	ori	r24, 0x01	; 1
    4d42:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d44:	a5 e5       	ldi	r26, 0x55	; 85
    4d46:	b0 e0       	ldi	r27, 0x00	; 0
    4d48:	e5 e5       	ldi	r30, 0x55	; 85
    4d4a:	f0 e0       	ldi	r31, 0x00	; 0
    4d4c:	80 81       	ld	r24, Z
    4d4e:	8d 7f       	andi	r24, 0xFD	; 253
    4d50:	8c 93       	st	X, r24
    4d52:	9c c0       	rjmp	.+312    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d54:	a5 e5       	ldi	r26, 0x55	; 85
    4d56:	b0 e0       	ldi	r27, 0x00	; 0
    4d58:	e5 e5       	ldi	r30, 0x55	; 85
    4d5a:	f0 e0       	ldi	r31, 0x00	; 0
    4d5c:	80 81       	ld	r24, Z
    4d5e:	8e 7f       	andi	r24, 0xFE	; 254
    4d60:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d62:	a5 e5       	ldi	r26, 0x55	; 85
    4d64:	b0 e0       	ldi	r27, 0x00	; 0
    4d66:	e5 e5       	ldi	r30, 0x55	; 85
    4d68:	f0 e0       	ldi	r31, 0x00	; 0
    4d6a:	80 81       	ld	r24, Z
    4d6c:	82 60       	ori	r24, 0x02	; 2
    4d6e:	8c 93       	st	X, r24
    4d70:	8d c0       	rjmp	.+282    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4d72:	a5 e5       	ldi	r26, 0x55	; 85
    4d74:	b0 e0       	ldi	r27, 0x00	; 0
    4d76:	e5 e5       	ldi	r30, 0x55	; 85
    4d78:	f0 e0       	ldi	r31, 0x00	; 0
    4d7a:	80 81       	ld	r24, Z
    4d7c:	81 60       	ori	r24, 0x01	; 1
    4d7e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4d80:	a5 e5       	ldi	r26, 0x55	; 85
    4d82:	b0 e0       	ldi	r27, 0x00	; 0
    4d84:	e5 e5       	ldi	r30, 0x55	; 85
    4d86:	f0 e0       	ldi	r31, 0x00	; 0
    4d88:	80 81       	ld	r24, Z
    4d8a:	82 60       	ori	r24, 0x02	; 2
    4d8c:	8c 93       	st	X, r24
    4d8e:	7e c0       	rjmp	.+252    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    4d90:	8b 81       	ldd	r24, Y+3	; 0x03
    4d92:	28 2f       	mov	r18, r24
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	3f 83       	std	Y+7, r19	; 0x07
    4d98:	2e 83       	std	Y+6, r18	; 0x06
    4d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    4d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    4d9e:	81 30       	cpi	r24, 0x01	; 1
    4da0:	91 05       	cpc	r25, r1
    4da2:	21 f1       	breq	.+72     	; 0x4dec <EXTI_enu_setSenseControl+0x16a>
    4da4:	2e 81       	ldd	r18, Y+6	; 0x06
    4da6:	3f 81       	ldd	r19, Y+7	; 0x07
    4da8:	22 30       	cpi	r18, 0x02	; 2
    4daa:	31 05       	cpc	r19, r1
    4dac:	2c f4       	brge	.+10     	; 0x4db8 <EXTI_enu_setSenseControl+0x136>
    4dae:	8e 81       	ldd	r24, Y+6	; 0x06
    4db0:	9f 81       	ldd	r25, Y+7	; 0x07
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	61 f0       	breq	.+24     	; 0x4dce <EXTI_enu_setSenseControl+0x14c>
    4db6:	6a c0       	rjmp	.+212    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
    4db8:	2e 81       	ldd	r18, Y+6	; 0x06
    4dba:	3f 81       	ldd	r19, Y+7	; 0x07
    4dbc:	22 30       	cpi	r18, 0x02	; 2
    4dbe:	31 05       	cpc	r19, r1
    4dc0:	21 f1       	breq	.+72     	; 0x4e0a <EXTI_enu_setSenseControl+0x188>
    4dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    4dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    4dc6:	83 30       	cpi	r24, 0x03	; 3
    4dc8:	91 05       	cpc	r25, r1
    4dca:	71 f1       	breq	.+92     	; 0x4e28 <EXTI_enu_setSenseControl+0x1a6>
    4dcc:	5f c0       	rjmp	.+190    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4dce:	a5 e5       	ldi	r26, 0x55	; 85
    4dd0:	b0 e0       	ldi	r27, 0x00	; 0
    4dd2:	e5 e5       	ldi	r30, 0x55	; 85
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	80 81       	ld	r24, Z
    4dd8:	8b 7f       	andi	r24, 0xFB	; 251
    4dda:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4ddc:	a5 e5       	ldi	r26, 0x55	; 85
    4dde:	b0 e0       	ldi	r27, 0x00	; 0
    4de0:	e5 e5       	ldi	r30, 0x55	; 85
    4de2:	f0 e0       	ldi	r31, 0x00	; 0
    4de4:	80 81       	ld	r24, Z
    4de6:	87 7f       	andi	r24, 0xF7	; 247
    4de8:	8c 93       	st	X, r24
    4dea:	50 c0       	rjmp	.+160    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4dec:	a5 e5       	ldi	r26, 0x55	; 85
    4dee:	b0 e0       	ldi	r27, 0x00	; 0
    4df0:	e5 e5       	ldi	r30, 0x55	; 85
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	80 81       	ld	r24, Z
    4df6:	84 60       	ori	r24, 0x04	; 4
    4df8:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4dfa:	a5 e5       	ldi	r26, 0x55	; 85
    4dfc:	b0 e0       	ldi	r27, 0x00	; 0
    4dfe:	e5 e5       	ldi	r30, 0x55	; 85
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	80 81       	ld	r24, Z
    4e04:	87 7f       	andi	r24, 0xF7	; 247
    4e06:	8c 93       	st	X, r24
    4e08:	41 c0       	rjmp	.+130    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4e0a:	a5 e5       	ldi	r26, 0x55	; 85
    4e0c:	b0 e0       	ldi	r27, 0x00	; 0
    4e0e:	e5 e5       	ldi	r30, 0x55	; 85
    4e10:	f0 e0       	ldi	r31, 0x00	; 0
    4e12:	80 81       	ld	r24, Z
    4e14:	8b 7f       	andi	r24, 0xFB	; 251
    4e16:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4e18:	a5 e5       	ldi	r26, 0x55	; 85
    4e1a:	b0 e0       	ldi	r27, 0x00	; 0
    4e1c:	e5 e5       	ldi	r30, 0x55	; 85
    4e1e:	f0 e0       	ldi	r31, 0x00	; 0
    4e20:	80 81       	ld	r24, Z
    4e22:	88 60       	ori	r24, 0x08	; 8
    4e24:	8c 93       	st	X, r24
    4e26:	32 c0       	rjmp	.+100    	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4e28:	a5 e5       	ldi	r26, 0x55	; 85
    4e2a:	b0 e0       	ldi	r27, 0x00	; 0
    4e2c:	e5 e5       	ldi	r30, 0x55	; 85
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	80 81       	ld	r24, Z
    4e32:	84 60       	ori	r24, 0x04	; 4
    4e34:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4e36:	a5 e5       	ldi	r26, 0x55	; 85
    4e38:	b0 e0       	ldi	r27, 0x00	; 0
    4e3a:	e5 e5       	ldi	r30, 0x55	; 85
    4e3c:	f0 e0       	ldi	r31, 0x00	; 0
    4e3e:	80 81       	ld	r24, Z
    4e40:	88 60       	ori	r24, 0x08	; 8
    4e42:	8c 93       	st	X, r24
    4e44:	23 c0       	rjmp	.+70     	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    4e46:	8b 81       	ldd	r24, Y+3	; 0x03
    4e48:	28 2f       	mov	r18, r24
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	3d 83       	std	Y+5, r19	; 0x05
    4e4e:	2c 83       	std	Y+4, r18	; 0x04
    4e50:	8c 81       	ldd	r24, Y+4	; 0x04
    4e52:	9d 81       	ldd	r25, Y+5	; 0x05
    4e54:	82 30       	cpi	r24, 0x02	; 2
    4e56:	91 05       	cpc	r25, r1
    4e58:	31 f0       	breq	.+12     	; 0x4e66 <EXTI_enu_setSenseControl+0x1e4>
    4e5a:	2c 81       	ldd	r18, Y+4	; 0x04
    4e5c:	3d 81       	ldd	r19, Y+5	; 0x05
    4e5e:	23 30       	cpi	r18, 0x03	; 3
    4e60:	31 05       	cpc	r19, r1
    4e62:	49 f0       	breq	.+18     	; 0x4e76 <EXTI_enu_setSenseControl+0x1f4>
    4e64:	10 c0       	rjmp	.+32     	; 0x4e86 <EXTI_enu_setSenseControl+0x204>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4e66:	a4 e5       	ldi	r26, 0x54	; 84
    4e68:	b0 e0       	ldi	r27, 0x00	; 0
    4e6a:	e4 e5       	ldi	r30, 0x54	; 84
    4e6c:	f0 e0       	ldi	r31, 0x00	; 0
    4e6e:	80 81       	ld	r24, Z
    4e70:	8f 7b       	andi	r24, 0xBF	; 191
    4e72:	8c 93       	st	X, r24
    4e74:	0b c0       	rjmp	.+22     	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4e76:	a4 e5       	ldi	r26, 0x54	; 84
    4e78:	b0 e0       	ldi	r27, 0x00	; 0
    4e7a:	e4 e5       	ldi	r30, 0x54	; 84
    4e7c:	f0 e0       	ldi	r31, 0x00	; 0
    4e7e:	80 81       	ld	r24, Z
    4e80:	80 64       	ori	r24, 0x40	; 64
    4e82:	8c 93       	st	X, r24
    4e84:	03 c0       	rjmp	.+6      	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    4e86:	19 82       	std	Y+1, r1	; 0x01
    4e88:	01 c0       	rjmp	.+2      	; 0x4e8c <EXTI_enu_setSenseControl+0x20a>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4e8a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4e8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e8e:	2b 96       	adiw	r28, 0x0b	; 11
    4e90:	0f b6       	in	r0, 0x3f	; 63
    4e92:	f8 94       	cli
    4e94:	de bf       	out	0x3e, r29	; 62
    4e96:	0f be       	out	0x3f, r0	; 63
    4e98:	cd bf       	out	0x3d, r28	; 61
    4e9a:	cf 91       	pop	r28
    4e9c:	df 91       	pop	r29
    4e9e:	08 95       	ret

00004ea0 <EXTI_enu_setCallBack>:
ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    4ea0:	df 93       	push	r29
    4ea2:	cf 93       	push	r28
    4ea4:	00 d0       	rcall	.+0      	; 0x4ea6 <EXTI_enu_setCallBack+0x6>
    4ea6:	00 d0       	rcall	.+0      	; 0x4ea8 <EXTI_enu_setCallBack+0x8>
    4ea8:	cd b7       	in	r28, 0x3d	; 61
    4eaa:	de b7       	in	r29, 0x3e	; 62
    4eac:	9b 83       	std	Y+3, r25	; 0x03
    4eae:	8a 83       	std	Y+2, r24	; 0x02
    4eb0:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    4eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eba:	00 97       	sbiw	r24, 0x00	; 0
    4ebc:	81 f0       	breq	.+32     	; 0x4ede <EXTI_enu_setCallBack+0x3e>
    4ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec0:	83 30       	cpi	r24, 0x03	; 3
    4ec2:	68 f4       	brcc	.+26     	; 0x4ede <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    4ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ec6:	88 2f       	mov	r24, r24
    4ec8:	90 e0       	ldi	r25, 0x00	; 0
    4eca:	88 0f       	add	r24, r24
    4ecc:	99 1f       	adc	r25, r25
    4ece:	fc 01       	movw	r30, r24
    4ed0:	e8 59       	subi	r30, 0x98	; 152
    4ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    4ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed8:	91 83       	std	Z+1, r25	; 0x01
    4eda:	80 83       	st	Z, r24
    4edc:	01 c0       	rjmp	.+2      	; 0x4ee0 <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4ede:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ee2:	0f 90       	pop	r0
    4ee4:	0f 90       	pop	r0
    4ee6:	0f 90       	pop	r0
    4ee8:	0f 90       	pop	r0
    4eea:	cf 91       	pop	r28
    4eec:	df 91       	pop	r29
    4eee:	08 95       	ret

00004ef0 <__vector_1>:
ISR(EXTI_INT0)
{
    4ef0:	1f 92       	push	r1
    4ef2:	0f 92       	push	r0
    4ef4:	0f b6       	in	r0, 0x3f	; 63
    4ef6:	0f 92       	push	r0
    4ef8:	11 24       	eor	r1, r1
    4efa:	2f 93       	push	r18
    4efc:	3f 93       	push	r19
    4efe:	4f 93       	push	r20
    4f00:	5f 93       	push	r21
    4f02:	6f 93       	push	r22
    4f04:	7f 93       	push	r23
    4f06:	8f 93       	push	r24
    4f08:	9f 93       	push	r25
    4f0a:	af 93       	push	r26
    4f0c:	bf 93       	push	r27
    4f0e:	ef 93       	push	r30
    4f10:	ff 93       	push	r31
    4f12:	df 93       	push	r29
    4f14:	cf 93       	push	r28
    4f16:	cd b7       	in	r28, 0x3d	; 61
    4f18:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    4f1a:	80 91 68 01 	lds	r24, 0x0168
    4f1e:	90 91 69 01 	lds	r25, 0x0169
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	29 f0       	breq	.+10     	; 0x4f30 <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    4f26:	e0 91 68 01 	lds	r30, 0x0168
    4f2a:	f0 91 69 01 	lds	r31, 0x0169
    4f2e:	09 95       	icall
}
    4f30:	cf 91       	pop	r28
    4f32:	df 91       	pop	r29
    4f34:	ff 91       	pop	r31
    4f36:	ef 91       	pop	r30
    4f38:	bf 91       	pop	r27
    4f3a:	af 91       	pop	r26
    4f3c:	9f 91       	pop	r25
    4f3e:	8f 91       	pop	r24
    4f40:	7f 91       	pop	r23
    4f42:	6f 91       	pop	r22
    4f44:	5f 91       	pop	r21
    4f46:	4f 91       	pop	r20
    4f48:	3f 91       	pop	r19
    4f4a:	2f 91       	pop	r18
    4f4c:	0f 90       	pop	r0
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	0f 90       	pop	r0
    4f52:	1f 90       	pop	r1
    4f54:	18 95       	reti

00004f56 <__vector_2>:
ISR(EXTI_INT1)
{
    4f56:	1f 92       	push	r1
    4f58:	0f 92       	push	r0
    4f5a:	0f b6       	in	r0, 0x3f	; 63
    4f5c:	0f 92       	push	r0
    4f5e:	11 24       	eor	r1, r1
    4f60:	2f 93       	push	r18
    4f62:	3f 93       	push	r19
    4f64:	4f 93       	push	r20
    4f66:	5f 93       	push	r21
    4f68:	6f 93       	push	r22
    4f6a:	7f 93       	push	r23
    4f6c:	8f 93       	push	r24
    4f6e:	9f 93       	push	r25
    4f70:	af 93       	push	r26
    4f72:	bf 93       	push	r27
    4f74:	ef 93       	push	r30
    4f76:	ff 93       	push	r31
    4f78:	df 93       	push	r29
    4f7a:	cf 93       	push	r28
    4f7c:	cd b7       	in	r28, 0x3d	; 61
    4f7e:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    4f80:	80 91 6a 01 	lds	r24, 0x016A
    4f84:	90 91 6b 01 	lds	r25, 0x016B
    4f88:	00 97       	sbiw	r24, 0x00	; 0
    4f8a:	29 f0       	breq	.+10     	; 0x4f96 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    4f8c:	e0 91 6a 01 	lds	r30, 0x016A
    4f90:	f0 91 6b 01 	lds	r31, 0x016B
    4f94:	09 95       	icall
}
    4f96:	cf 91       	pop	r28
    4f98:	df 91       	pop	r29
    4f9a:	ff 91       	pop	r31
    4f9c:	ef 91       	pop	r30
    4f9e:	bf 91       	pop	r27
    4fa0:	af 91       	pop	r26
    4fa2:	9f 91       	pop	r25
    4fa4:	8f 91       	pop	r24
    4fa6:	7f 91       	pop	r23
    4fa8:	6f 91       	pop	r22
    4faa:	5f 91       	pop	r21
    4fac:	4f 91       	pop	r20
    4fae:	3f 91       	pop	r19
    4fb0:	2f 91       	pop	r18
    4fb2:	0f 90       	pop	r0
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	0f 90       	pop	r0
    4fb8:	1f 90       	pop	r1
    4fba:	18 95       	reti

00004fbc <__vector_3>:

ISR(EXTI_INT2)
{
    4fbc:	1f 92       	push	r1
    4fbe:	0f 92       	push	r0
    4fc0:	0f b6       	in	r0, 0x3f	; 63
    4fc2:	0f 92       	push	r0
    4fc4:	11 24       	eor	r1, r1
    4fc6:	2f 93       	push	r18
    4fc8:	3f 93       	push	r19
    4fca:	4f 93       	push	r20
    4fcc:	5f 93       	push	r21
    4fce:	6f 93       	push	r22
    4fd0:	7f 93       	push	r23
    4fd2:	8f 93       	push	r24
    4fd4:	9f 93       	push	r25
    4fd6:	af 93       	push	r26
    4fd8:	bf 93       	push	r27
    4fda:	ef 93       	push	r30
    4fdc:	ff 93       	push	r31
    4fde:	df 93       	push	r29
    4fe0:	cf 93       	push	r28
    4fe2:	cd b7       	in	r28, 0x3d	; 61
    4fe4:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    4fe6:	80 91 6c 01 	lds	r24, 0x016C
    4fea:	90 91 6d 01 	lds	r25, 0x016D
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	29 f0       	breq	.+10     	; 0x4ffc <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    4ff2:	e0 91 6c 01 	lds	r30, 0x016C
    4ff6:	f0 91 6d 01 	lds	r31, 0x016D
    4ffa:	09 95       	icall
}
    4ffc:	cf 91       	pop	r28
    4ffe:	df 91       	pop	r29
    5000:	ff 91       	pop	r31
    5002:	ef 91       	pop	r30
    5004:	bf 91       	pop	r27
    5006:	af 91       	pop	r26
    5008:	9f 91       	pop	r25
    500a:	8f 91       	pop	r24
    500c:	7f 91       	pop	r23
    500e:	6f 91       	pop	r22
    5010:	5f 91       	pop	r21
    5012:	4f 91       	pop	r20
    5014:	3f 91       	pop	r19
    5016:	2f 91       	pop	r18
    5018:	0f 90       	pop	r0
    501a:	0f be       	out	0x3f, r0	; 63
    501c:	0f 90       	pop	r0
    501e:	1f 90       	pop	r1
    5020:	18 95       	reti

00005022 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    5022:	df 93       	push	r29
    5024:	cf 93       	push	r28
    5026:	cd b7       	in	r28, 0x3d	; 61
    5028:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    502a:	ea e3       	ldi	r30, 0x3A	; 58
    502c:	f0 e0       	ldi	r31, 0x00	; 0
    502e:	8f e7       	ldi	r24, 0x7F	; 127
    5030:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    5032:	e7 e3       	ldi	r30, 0x37	; 55
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	8d ef       	ldi	r24, 0xFD	; 253
    5038:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    503a:	e4 e3       	ldi	r30, 0x34	; 52
    503c:	f0 e0       	ldi	r31, 0x00	; 0
    503e:	83 e1       	ldi	r24, 0x13	; 19
    5040:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    5042:	e1 e3       	ldi	r30, 0x31	; 49
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    5048:	eb e3       	ldi	r30, 0x3B	; 59
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    504e:	e8 e3       	ldi	r30, 0x38	; 56
    5050:	f0 e0       	ldi	r31, 0x00	; 0
    5052:	84 ef       	ldi	r24, 0xF4	; 244
    5054:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    5056:	e5 e3       	ldi	r30, 0x35	; 53
    5058:	f0 e0       	ldi	r31, 0x00	; 0
    505a:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    505c:	e2 e3       	ldi	r30, 0x32	; 50
    505e:	f0 e0       	ldi	r31, 0x00	; 0
    5060:	8c e3       	ldi	r24, 0x3C	; 60
    5062:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    5064:	81 e0       	ldi	r24, 0x01	; 1
}
    5066:	cf 91       	pop	r28
    5068:	df 91       	pop	r29
    506a:	08 95       	ret

0000506c <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    506c:	df 93       	push	r29
    506e:	cf 93       	push	r28
    5070:	cd b7       	in	r28, 0x3d	; 61
    5072:	de b7       	in	r29, 0x3e	; 62
    5074:	2e 97       	sbiw	r28, 0x0e	; 14
    5076:	0f b6       	in	r0, 0x3f	; 63
    5078:	f8 94       	cli
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	cd bf       	out	0x3d, r28	; 61
    5080:	8a 83       	std	Y+2, r24	; 0x02
    5082:	6b 83       	std	Y+3, r22	; 0x03
    5084:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	84 30       	cpi	r24, 0x04	; 4
    508e:	08 f0       	brcs	.+2      	; 0x5092 <DIO_enu_SetPinDirection+0x26>
    5090:	0c c1       	rjmp	.+536    	; 0x52aa <DIO_enu_SetPinDirection+0x23e>
    5092:	8b 81       	ldd	r24, Y+3	; 0x03
    5094:	88 30       	cpi	r24, 0x08	; 8
    5096:	08 f0       	brcs	.+2      	; 0x509a <DIO_enu_SetPinDirection+0x2e>
    5098:	08 c1       	rjmp	.+528    	; 0x52aa <DIO_enu_SetPinDirection+0x23e>
    509a:	8c 81       	ldd	r24, Y+4	; 0x04
    509c:	81 30       	cpi	r24, 0x01	; 1
    509e:	21 f0       	breq	.+8      	; 0x50a8 <DIO_enu_SetPinDirection+0x3c>
    50a0:	8c 81       	ldd	r24, Y+4	; 0x04
    50a2:	88 23       	and	r24, r24
    50a4:	09 f0       	breq	.+2      	; 0x50a8 <DIO_enu_SetPinDirection+0x3c>
    50a6:	01 c1       	rjmp	.+514    	; 0x52aa <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    50a8:	8a 81       	ldd	r24, Y+2	; 0x02
    50aa:	28 2f       	mov	r18, r24
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	3e 87       	std	Y+14, r19	; 0x0e
    50b0:	2d 87       	std	Y+13, r18	; 0x0d
    50b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    50b6:	81 30       	cpi	r24, 0x01	; 1
    50b8:	91 05       	cpc	r25, r1
    50ba:	09 f4       	brne	.+2      	; 0x50be <DIO_enu_SetPinDirection+0x52>
    50bc:	4f c0       	rjmp	.+158    	; 0x515c <DIO_enu_SetPinDirection+0xf0>
    50be:	2d 85       	ldd	r18, Y+13	; 0x0d
    50c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    50c2:	22 30       	cpi	r18, 0x02	; 2
    50c4:	31 05       	cpc	r19, r1
    50c6:	2c f4       	brge	.+10     	; 0x50d2 <DIO_enu_SetPinDirection+0x66>
    50c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    50ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    50cc:	00 97       	sbiw	r24, 0x00	; 0
    50ce:	71 f0       	breq	.+28     	; 0x50ec <DIO_enu_SetPinDirection+0x80>
    50d0:	ed c0       	rjmp	.+474    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
    50d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    50d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    50d6:	22 30       	cpi	r18, 0x02	; 2
    50d8:	31 05       	cpc	r19, r1
    50da:	09 f4       	brne	.+2      	; 0x50de <DIO_enu_SetPinDirection+0x72>
    50dc:	77 c0       	rjmp	.+238    	; 0x51cc <DIO_enu_SetPinDirection+0x160>
    50de:	8d 85       	ldd	r24, Y+13	; 0x0d
    50e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    50e2:	83 30       	cpi	r24, 0x03	; 3
    50e4:	91 05       	cpc	r25, r1
    50e6:	09 f4       	brne	.+2      	; 0x50ea <DIO_enu_SetPinDirection+0x7e>
    50e8:	a9 c0       	rjmp	.+338    	; 0x523c <DIO_enu_SetPinDirection+0x1d0>
    50ea:	e0 c0       	rjmp	.+448    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    50ec:	8c 81       	ldd	r24, Y+4	; 0x04
    50ee:	28 2f       	mov	r18, r24
    50f0:	30 e0       	ldi	r19, 0x00	; 0
    50f2:	3c 87       	std	Y+12, r19	; 0x0c
    50f4:	2b 87       	std	Y+11, r18	; 0x0b
    50f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    50f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	d1 f0       	breq	.+52     	; 0x5132 <DIO_enu_SetPinDirection+0xc6>
    50fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    5100:	3c 85       	ldd	r19, Y+12	; 0x0c
    5102:	21 30       	cpi	r18, 0x01	; 1
    5104:	31 05       	cpc	r19, r1
    5106:	09 f0       	breq	.+2      	; 0x510a <DIO_enu_SetPinDirection+0x9e>
    5108:	d1 c0       	rjmp	.+418    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    510a:	aa e3       	ldi	r26, 0x3A	; 58
    510c:	b0 e0       	ldi	r27, 0x00	; 0
    510e:	ea e3       	ldi	r30, 0x3A	; 58
    5110:	f0 e0       	ldi	r31, 0x00	; 0
    5112:	80 81       	ld	r24, Z
    5114:	48 2f       	mov	r20, r24
    5116:	8b 81       	ldd	r24, Y+3	; 0x03
    5118:	28 2f       	mov	r18, r24
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	90 e0       	ldi	r25, 0x00	; 0
    5120:	02 2e       	mov	r0, r18
    5122:	02 c0       	rjmp	.+4      	; 0x5128 <DIO_enu_SetPinDirection+0xbc>
    5124:	88 0f       	add	r24, r24
    5126:	99 1f       	adc	r25, r25
    5128:	0a 94       	dec	r0
    512a:	e2 f7       	brpl	.-8      	; 0x5124 <DIO_enu_SetPinDirection+0xb8>
    512c:	84 2b       	or	r24, r20
    512e:	8c 93       	st	X, r24
    5130:	bd c0       	rjmp	.+378    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    5132:	aa e3       	ldi	r26, 0x3A	; 58
    5134:	b0 e0       	ldi	r27, 0x00	; 0
    5136:	ea e3       	ldi	r30, 0x3A	; 58
    5138:	f0 e0       	ldi	r31, 0x00	; 0
    513a:	80 81       	ld	r24, Z
    513c:	48 2f       	mov	r20, r24
    513e:	8b 81       	ldd	r24, Y+3	; 0x03
    5140:	28 2f       	mov	r18, r24
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	02 2e       	mov	r0, r18
    514a:	02 c0       	rjmp	.+4      	; 0x5150 <DIO_enu_SetPinDirection+0xe4>
    514c:	88 0f       	add	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	0a 94       	dec	r0
    5152:	e2 f7       	brpl	.-8      	; 0x514c <DIO_enu_SetPinDirection+0xe0>
    5154:	80 95       	com	r24
    5156:	84 23       	and	r24, r20
    5158:	8c 93       	st	X, r24
    515a:	a8 c0       	rjmp	.+336    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    515c:	8c 81       	ldd	r24, Y+4	; 0x04
    515e:	28 2f       	mov	r18, r24
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	3a 87       	std	Y+10, r19	; 0x0a
    5164:	29 87       	std	Y+9, r18	; 0x09
    5166:	89 85       	ldd	r24, Y+9	; 0x09
    5168:	9a 85       	ldd	r25, Y+10	; 0x0a
    516a:	00 97       	sbiw	r24, 0x00	; 0
    516c:	d1 f0       	breq	.+52     	; 0x51a2 <DIO_enu_SetPinDirection+0x136>
    516e:	29 85       	ldd	r18, Y+9	; 0x09
    5170:	3a 85       	ldd	r19, Y+10	; 0x0a
    5172:	21 30       	cpi	r18, 0x01	; 1
    5174:	31 05       	cpc	r19, r1
    5176:	09 f0       	breq	.+2      	; 0x517a <DIO_enu_SetPinDirection+0x10e>
    5178:	99 c0       	rjmp	.+306    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    517a:	a7 e3       	ldi	r26, 0x37	; 55
    517c:	b0 e0       	ldi	r27, 0x00	; 0
    517e:	e7 e3       	ldi	r30, 0x37	; 55
    5180:	f0 e0       	ldi	r31, 0x00	; 0
    5182:	80 81       	ld	r24, Z
    5184:	48 2f       	mov	r20, r24
    5186:	8b 81       	ldd	r24, Y+3	; 0x03
    5188:	28 2f       	mov	r18, r24
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	81 e0       	ldi	r24, 0x01	; 1
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	02 2e       	mov	r0, r18
    5192:	02 c0       	rjmp	.+4      	; 0x5198 <DIO_enu_SetPinDirection+0x12c>
    5194:	88 0f       	add	r24, r24
    5196:	99 1f       	adc	r25, r25
    5198:	0a 94       	dec	r0
    519a:	e2 f7       	brpl	.-8      	; 0x5194 <DIO_enu_SetPinDirection+0x128>
    519c:	84 2b       	or	r24, r20
    519e:	8c 93       	st	X, r24
    51a0:	85 c0       	rjmp	.+266    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    51a2:	a7 e3       	ldi	r26, 0x37	; 55
    51a4:	b0 e0       	ldi	r27, 0x00	; 0
    51a6:	e7 e3       	ldi	r30, 0x37	; 55
    51a8:	f0 e0       	ldi	r31, 0x00	; 0
    51aa:	80 81       	ld	r24, Z
    51ac:	48 2f       	mov	r20, r24
    51ae:	8b 81       	ldd	r24, Y+3	; 0x03
    51b0:	28 2f       	mov	r18, r24
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	02 2e       	mov	r0, r18
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <DIO_enu_SetPinDirection+0x154>
    51bc:	88 0f       	add	r24, r24
    51be:	99 1f       	adc	r25, r25
    51c0:	0a 94       	dec	r0
    51c2:	e2 f7       	brpl	.-8      	; 0x51bc <DIO_enu_SetPinDirection+0x150>
    51c4:	80 95       	com	r24
    51c6:	84 23       	and	r24, r20
    51c8:	8c 93       	st	X, r24
    51ca:	70 c0       	rjmp	.+224    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    51cc:	8c 81       	ldd	r24, Y+4	; 0x04
    51ce:	28 2f       	mov	r18, r24
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	38 87       	std	Y+8, r19	; 0x08
    51d4:	2f 83       	std	Y+7, r18	; 0x07
    51d6:	8f 81       	ldd	r24, Y+7	; 0x07
    51d8:	98 85       	ldd	r25, Y+8	; 0x08
    51da:	00 97       	sbiw	r24, 0x00	; 0
    51dc:	d1 f0       	breq	.+52     	; 0x5212 <DIO_enu_SetPinDirection+0x1a6>
    51de:	2f 81       	ldd	r18, Y+7	; 0x07
    51e0:	38 85       	ldd	r19, Y+8	; 0x08
    51e2:	21 30       	cpi	r18, 0x01	; 1
    51e4:	31 05       	cpc	r19, r1
    51e6:	09 f0       	breq	.+2      	; 0x51ea <DIO_enu_SetPinDirection+0x17e>
    51e8:	61 c0       	rjmp	.+194    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    51ea:	a4 e3       	ldi	r26, 0x34	; 52
    51ec:	b0 e0       	ldi	r27, 0x00	; 0
    51ee:	e4 e3       	ldi	r30, 0x34	; 52
    51f0:	f0 e0       	ldi	r31, 0x00	; 0
    51f2:	80 81       	ld	r24, Z
    51f4:	48 2f       	mov	r20, r24
    51f6:	8b 81       	ldd	r24, Y+3	; 0x03
    51f8:	28 2f       	mov	r18, r24
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	90 e0       	ldi	r25, 0x00	; 0
    5200:	02 2e       	mov	r0, r18
    5202:	02 c0       	rjmp	.+4      	; 0x5208 <DIO_enu_SetPinDirection+0x19c>
    5204:	88 0f       	add	r24, r24
    5206:	99 1f       	adc	r25, r25
    5208:	0a 94       	dec	r0
    520a:	e2 f7       	brpl	.-8      	; 0x5204 <DIO_enu_SetPinDirection+0x198>
    520c:	84 2b       	or	r24, r20
    520e:	8c 93       	st	X, r24
    5210:	4d c0       	rjmp	.+154    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    5212:	a4 e3       	ldi	r26, 0x34	; 52
    5214:	b0 e0       	ldi	r27, 0x00	; 0
    5216:	e4 e3       	ldi	r30, 0x34	; 52
    5218:	f0 e0       	ldi	r31, 0x00	; 0
    521a:	80 81       	ld	r24, Z
    521c:	48 2f       	mov	r20, r24
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	28 2f       	mov	r18, r24
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	02 2e       	mov	r0, r18
    522a:	02 c0       	rjmp	.+4      	; 0x5230 <DIO_enu_SetPinDirection+0x1c4>
    522c:	88 0f       	add	r24, r24
    522e:	99 1f       	adc	r25, r25
    5230:	0a 94       	dec	r0
    5232:	e2 f7       	brpl	.-8      	; 0x522c <DIO_enu_SetPinDirection+0x1c0>
    5234:	80 95       	com	r24
    5236:	84 23       	and	r24, r20
    5238:	8c 93       	st	X, r24
    523a:	38 c0       	rjmp	.+112    	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    523c:	8c 81       	ldd	r24, Y+4	; 0x04
    523e:	28 2f       	mov	r18, r24
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	3e 83       	std	Y+6, r19	; 0x06
    5244:	2d 83       	std	Y+5, r18	; 0x05
    5246:	8d 81       	ldd	r24, Y+5	; 0x05
    5248:	9e 81       	ldd	r25, Y+6	; 0x06
    524a:	00 97       	sbiw	r24, 0x00	; 0
    524c:	c9 f0       	breq	.+50     	; 0x5280 <DIO_enu_SetPinDirection+0x214>
    524e:	2d 81       	ldd	r18, Y+5	; 0x05
    5250:	3e 81       	ldd	r19, Y+6	; 0x06
    5252:	21 30       	cpi	r18, 0x01	; 1
    5254:	31 05       	cpc	r19, r1
    5256:	51 f5       	brne	.+84     	; 0x52ac <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    5258:	a1 e3       	ldi	r26, 0x31	; 49
    525a:	b0 e0       	ldi	r27, 0x00	; 0
    525c:	e1 e3       	ldi	r30, 0x31	; 49
    525e:	f0 e0       	ldi	r31, 0x00	; 0
    5260:	80 81       	ld	r24, Z
    5262:	48 2f       	mov	r20, r24
    5264:	8b 81       	ldd	r24, Y+3	; 0x03
    5266:	28 2f       	mov	r18, r24
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	02 2e       	mov	r0, r18
    5270:	02 c0       	rjmp	.+4      	; 0x5276 <DIO_enu_SetPinDirection+0x20a>
    5272:	88 0f       	add	r24, r24
    5274:	99 1f       	adc	r25, r25
    5276:	0a 94       	dec	r0
    5278:	e2 f7       	brpl	.-8      	; 0x5272 <DIO_enu_SetPinDirection+0x206>
    527a:	84 2b       	or	r24, r20
    527c:	8c 93       	st	X, r24
    527e:	16 c0       	rjmp	.+44     	; 0x52ac <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    5280:	a1 e3       	ldi	r26, 0x31	; 49
    5282:	b0 e0       	ldi	r27, 0x00	; 0
    5284:	e1 e3       	ldi	r30, 0x31	; 49
    5286:	f0 e0       	ldi	r31, 0x00	; 0
    5288:	80 81       	ld	r24, Z
    528a:	48 2f       	mov	r20, r24
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	28 2f       	mov	r18, r24
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	02 2e       	mov	r0, r18
    5298:	02 c0       	rjmp	.+4      	; 0x529e <DIO_enu_SetPinDirection+0x232>
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	0a 94       	dec	r0
    52a0:	e2 f7       	brpl	.-8      	; 0x529a <DIO_enu_SetPinDirection+0x22e>
    52a2:	80 95       	com	r24
    52a4:	84 23       	and	r24, r20
    52a6:	8c 93       	st	X, r24
    52a8:	01 c0       	rjmp	.+2      	; 0x52ac <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    52aa:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    52ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    52ae:	2e 96       	adiw	r28, 0x0e	; 14
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	cf 91       	pop	r28
    52bc:	df 91       	pop	r29
    52be:	08 95       	ret

000052c0 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    52c0:	df 93       	push	r29
    52c2:	cf 93       	push	r28
    52c4:	cd b7       	in	r28, 0x3d	; 61
    52c6:	de b7       	in	r29, 0x3e	; 62
    52c8:	2e 97       	sbiw	r28, 0x0e	; 14
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	f8 94       	cli
    52ce:	de bf       	out	0x3e, r29	; 62
    52d0:	0f be       	out	0x3f, r0	; 63
    52d2:	cd bf       	out	0x3d, r28	; 61
    52d4:	8a 83       	std	Y+2, r24	; 0x02
    52d6:	6b 83       	std	Y+3, r22	; 0x03
    52d8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    52da:	81 e0       	ldi	r24, 0x01	; 1
    52dc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	84 30       	cpi	r24, 0x04	; 4
    52e2:	08 f0       	brcs	.+2      	; 0x52e6 <DIO_enu_SetPinValue+0x26>
    52e4:	0c c1       	rjmp	.+536    	; 0x54fe <DIO_enu_SetPinValue+0x23e>
    52e6:	8b 81       	ldd	r24, Y+3	; 0x03
    52e8:	88 30       	cpi	r24, 0x08	; 8
    52ea:	08 f0       	brcs	.+2      	; 0x52ee <DIO_enu_SetPinValue+0x2e>
    52ec:	08 c1       	rjmp	.+528    	; 0x54fe <DIO_enu_SetPinValue+0x23e>
    52ee:	8c 81       	ldd	r24, Y+4	; 0x04
    52f0:	81 30       	cpi	r24, 0x01	; 1
    52f2:	21 f0       	breq	.+8      	; 0x52fc <DIO_enu_SetPinValue+0x3c>
    52f4:	8c 81       	ldd	r24, Y+4	; 0x04
    52f6:	88 23       	and	r24, r24
    52f8:	09 f0       	breq	.+2      	; 0x52fc <DIO_enu_SetPinValue+0x3c>
    52fa:	01 c1       	rjmp	.+514    	; 0x54fe <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    52fc:	8a 81       	ldd	r24, Y+2	; 0x02
    52fe:	28 2f       	mov	r18, r24
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	3e 87       	std	Y+14, r19	; 0x0e
    5304:	2d 87       	std	Y+13, r18	; 0x0d
    5306:	8d 85       	ldd	r24, Y+13	; 0x0d
    5308:	9e 85       	ldd	r25, Y+14	; 0x0e
    530a:	81 30       	cpi	r24, 0x01	; 1
    530c:	91 05       	cpc	r25, r1
    530e:	09 f4       	brne	.+2      	; 0x5312 <DIO_enu_SetPinValue+0x52>
    5310:	4f c0       	rjmp	.+158    	; 0x53b0 <DIO_enu_SetPinValue+0xf0>
    5312:	2d 85       	ldd	r18, Y+13	; 0x0d
    5314:	3e 85       	ldd	r19, Y+14	; 0x0e
    5316:	22 30       	cpi	r18, 0x02	; 2
    5318:	31 05       	cpc	r19, r1
    531a:	2c f4       	brge	.+10     	; 0x5326 <DIO_enu_SetPinValue+0x66>
    531c:	8d 85       	ldd	r24, Y+13	; 0x0d
    531e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5320:	00 97       	sbiw	r24, 0x00	; 0
    5322:	71 f0       	breq	.+28     	; 0x5340 <DIO_enu_SetPinValue+0x80>
    5324:	ed c0       	rjmp	.+474    	; 0x5500 <DIO_enu_SetPinValue+0x240>
    5326:	2d 85       	ldd	r18, Y+13	; 0x0d
    5328:	3e 85       	ldd	r19, Y+14	; 0x0e
    532a:	22 30       	cpi	r18, 0x02	; 2
    532c:	31 05       	cpc	r19, r1
    532e:	09 f4       	brne	.+2      	; 0x5332 <DIO_enu_SetPinValue+0x72>
    5330:	77 c0       	rjmp	.+238    	; 0x5420 <DIO_enu_SetPinValue+0x160>
    5332:	8d 85       	ldd	r24, Y+13	; 0x0d
    5334:	9e 85       	ldd	r25, Y+14	; 0x0e
    5336:	83 30       	cpi	r24, 0x03	; 3
    5338:	91 05       	cpc	r25, r1
    533a:	09 f4       	brne	.+2      	; 0x533e <DIO_enu_SetPinValue+0x7e>
    533c:	a9 c0       	rjmp	.+338    	; 0x5490 <DIO_enu_SetPinValue+0x1d0>
    533e:	e0 c0       	rjmp	.+448    	; 0x5500 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    5340:	8c 81       	ldd	r24, Y+4	; 0x04
    5342:	28 2f       	mov	r18, r24
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	3c 87       	std	Y+12, r19	; 0x0c
    5348:	2b 87       	std	Y+11, r18	; 0x0b
    534a:	8b 85       	ldd	r24, Y+11	; 0x0b
    534c:	9c 85       	ldd	r25, Y+12	; 0x0c
    534e:	00 97       	sbiw	r24, 0x00	; 0
    5350:	d1 f0       	breq	.+52     	; 0x5386 <DIO_enu_SetPinValue+0xc6>
    5352:	2b 85       	ldd	r18, Y+11	; 0x0b
    5354:	3c 85       	ldd	r19, Y+12	; 0x0c
    5356:	21 30       	cpi	r18, 0x01	; 1
    5358:	31 05       	cpc	r19, r1
    535a:	09 f0       	breq	.+2      	; 0x535e <DIO_enu_SetPinValue+0x9e>
    535c:	d1 c0       	rjmp	.+418    	; 0x5500 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    535e:	ab e3       	ldi	r26, 0x3B	; 59
    5360:	b0 e0       	ldi	r27, 0x00	; 0
    5362:	eb e3       	ldi	r30, 0x3B	; 59
    5364:	f0 e0       	ldi	r31, 0x00	; 0
    5366:	80 81       	ld	r24, Z
    5368:	48 2f       	mov	r20, r24
    536a:	8b 81       	ldd	r24, Y+3	; 0x03
    536c:	28 2f       	mov	r18, r24
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	81 e0       	ldi	r24, 0x01	; 1
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	02 2e       	mov	r0, r18
    5376:	02 c0       	rjmp	.+4      	; 0x537c <DIO_enu_SetPinValue+0xbc>
    5378:	88 0f       	add	r24, r24
    537a:	99 1f       	adc	r25, r25
    537c:	0a 94       	dec	r0
    537e:	e2 f7       	brpl	.-8      	; 0x5378 <DIO_enu_SetPinValue+0xb8>
    5380:	84 2b       	or	r24, r20
    5382:	8c 93       	st	X, r24
    5384:	bd c0       	rjmp	.+378    	; 0x5500 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    5386:	ab e3       	ldi	r26, 0x3B	; 59
    5388:	b0 e0       	ldi	r27, 0x00	; 0
    538a:	eb e3       	ldi	r30, 0x3B	; 59
    538c:	f0 e0       	ldi	r31, 0x00	; 0
    538e:	80 81       	ld	r24, Z
    5390:	48 2f       	mov	r20, r24
    5392:	8b 81       	ldd	r24, Y+3	; 0x03
    5394:	28 2f       	mov	r18, r24
    5396:	30 e0       	ldi	r19, 0x00	; 0
    5398:	81 e0       	ldi	r24, 0x01	; 1
    539a:	90 e0       	ldi	r25, 0x00	; 0
    539c:	02 2e       	mov	r0, r18
    539e:	02 c0       	rjmp	.+4      	; 0x53a4 <DIO_enu_SetPinValue+0xe4>
    53a0:	88 0f       	add	r24, r24
    53a2:	99 1f       	adc	r25, r25
    53a4:	0a 94       	dec	r0
    53a6:	e2 f7       	brpl	.-8      	; 0x53a0 <DIO_enu_SetPinValue+0xe0>
    53a8:	80 95       	com	r24
    53aa:	84 23       	and	r24, r20
    53ac:	8c 93       	st	X, r24
    53ae:	a8 c0       	rjmp	.+336    	; 0x5500 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    53b0:	8c 81       	ldd	r24, Y+4	; 0x04
    53b2:	28 2f       	mov	r18, r24
    53b4:	30 e0       	ldi	r19, 0x00	; 0
    53b6:	3a 87       	std	Y+10, r19	; 0x0a
    53b8:	29 87       	std	Y+9, r18	; 0x09
    53ba:	89 85       	ldd	r24, Y+9	; 0x09
    53bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    53be:	00 97       	sbiw	r24, 0x00	; 0
    53c0:	d1 f0       	breq	.+52     	; 0x53f6 <DIO_enu_SetPinValue+0x136>
    53c2:	29 85       	ldd	r18, Y+9	; 0x09
    53c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    53c6:	21 30       	cpi	r18, 0x01	; 1
    53c8:	31 05       	cpc	r19, r1
    53ca:	09 f0       	breq	.+2      	; 0x53ce <DIO_enu_SetPinValue+0x10e>
    53cc:	99 c0       	rjmp	.+306    	; 0x5500 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    53ce:	a8 e3       	ldi	r26, 0x38	; 56
    53d0:	b0 e0       	ldi	r27, 0x00	; 0
    53d2:	e8 e3       	ldi	r30, 0x38	; 56
    53d4:	f0 e0       	ldi	r31, 0x00	; 0
    53d6:	80 81       	ld	r24, Z
    53d8:	48 2f       	mov	r20, r24
    53da:	8b 81       	ldd	r24, Y+3	; 0x03
    53dc:	28 2f       	mov	r18, r24
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	81 e0       	ldi	r24, 0x01	; 1
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	02 2e       	mov	r0, r18
    53e6:	02 c0       	rjmp	.+4      	; 0x53ec <DIO_enu_SetPinValue+0x12c>
    53e8:	88 0f       	add	r24, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	0a 94       	dec	r0
    53ee:	e2 f7       	brpl	.-8      	; 0x53e8 <DIO_enu_SetPinValue+0x128>
    53f0:	84 2b       	or	r24, r20
    53f2:	8c 93       	st	X, r24
    53f4:	85 c0       	rjmp	.+266    	; 0x5500 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    53f6:	a8 e3       	ldi	r26, 0x38	; 56
    53f8:	b0 e0       	ldi	r27, 0x00	; 0
    53fa:	e8 e3       	ldi	r30, 0x38	; 56
    53fc:	f0 e0       	ldi	r31, 0x00	; 0
    53fe:	80 81       	ld	r24, Z
    5400:	48 2f       	mov	r20, r24
    5402:	8b 81       	ldd	r24, Y+3	; 0x03
    5404:	28 2f       	mov	r18, r24
    5406:	30 e0       	ldi	r19, 0x00	; 0
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	02 2e       	mov	r0, r18
    540e:	02 c0       	rjmp	.+4      	; 0x5414 <DIO_enu_SetPinValue+0x154>
    5410:	88 0f       	add	r24, r24
    5412:	99 1f       	adc	r25, r25
    5414:	0a 94       	dec	r0
    5416:	e2 f7       	brpl	.-8      	; 0x5410 <DIO_enu_SetPinValue+0x150>
    5418:	80 95       	com	r24
    541a:	84 23       	and	r24, r20
    541c:	8c 93       	st	X, r24
    541e:	70 c0       	rjmp	.+224    	; 0x5500 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    5420:	8c 81       	ldd	r24, Y+4	; 0x04
    5422:	28 2f       	mov	r18, r24
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	38 87       	std	Y+8, r19	; 0x08
    5428:	2f 83       	std	Y+7, r18	; 0x07
    542a:	8f 81       	ldd	r24, Y+7	; 0x07
    542c:	98 85       	ldd	r25, Y+8	; 0x08
    542e:	00 97       	sbiw	r24, 0x00	; 0
    5430:	d1 f0       	breq	.+52     	; 0x5466 <DIO_enu_SetPinValue+0x1a6>
    5432:	2f 81       	ldd	r18, Y+7	; 0x07
    5434:	38 85       	ldd	r19, Y+8	; 0x08
    5436:	21 30       	cpi	r18, 0x01	; 1
    5438:	31 05       	cpc	r19, r1
    543a:	09 f0       	breq	.+2      	; 0x543e <DIO_enu_SetPinValue+0x17e>
    543c:	61 c0       	rjmp	.+194    	; 0x5500 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    543e:	a5 e3       	ldi	r26, 0x35	; 53
    5440:	b0 e0       	ldi	r27, 0x00	; 0
    5442:	e5 e3       	ldi	r30, 0x35	; 53
    5444:	f0 e0       	ldi	r31, 0x00	; 0
    5446:	80 81       	ld	r24, Z
    5448:	48 2f       	mov	r20, r24
    544a:	8b 81       	ldd	r24, Y+3	; 0x03
    544c:	28 2f       	mov	r18, r24
    544e:	30 e0       	ldi	r19, 0x00	; 0
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	02 2e       	mov	r0, r18
    5456:	02 c0       	rjmp	.+4      	; 0x545c <DIO_enu_SetPinValue+0x19c>
    5458:	88 0f       	add	r24, r24
    545a:	99 1f       	adc	r25, r25
    545c:	0a 94       	dec	r0
    545e:	e2 f7       	brpl	.-8      	; 0x5458 <DIO_enu_SetPinValue+0x198>
    5460:	84 2b       	or	r24, r20
    5462:	8c 93       	st	X, r24
    5464:	4d c0       	rjmp	.+154    	; 0x5500 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    5466:	a5 e3       	ldi	r26, 0x35	; 53
    5468:	b0 e0       	ldi	r27, 0x00	; 0
    546a:	e5 e3       	ldi	r30, 0x35	; 53
    546c:	f0 e0       	ldi	r31, 0x00	; 0
    546e:	80 81       	ld	r24, Z
    5470:	48 2f       	mov	r20, r24
    5472:	8b 81       	ldd	r24, Y+3	; 0x03
    5474:	28 2f       	mov	r18, r24
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	02 2e       	mov	r0, r18
    547e:	02 c0       	rjmp	.+4      	; 0x5484 <DIO_enu_SetPinValue+0x1c4>
    5480:	88 0f       	add	r24, r24
    5482:	99 1f       	adc	r25, r25
    5484:	0a 94       	dec	r0
    5486:	e2 f7       	brpl	.-8      	; 0x5480 <DIO_enu_SetPinValue+0x1c0>
    5488:	80 95       	com	r24
    548a:	84 23       	and	r24, r20
    548c:	8c 93       	st	X, r24
    548e:	38 c0       	rjmp	.+112    	; 0x5500 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    5490:	8c 81       	ldd	r24, Y+4	; 0x04
    5492:	28 2f       	mov	r18, r24
    5494:	30 e0       	ldi	r19, 0x00	; 0
    5496:	3e 83       	std	Y+6, r19	; 0x06
    5498:	2d 83       	std	Y+5, r18	; 0x05
    549a:	8d 81       	ldd	r24, Y+5	; 0x05
    549c:	9e 81       	ldd	r25, Y+6	; 0x06
    549e:	00 97       	sbiw	r24, 0x00	; 0
    54a0:	c9 f0       	breq	.+50     	; 0x54d4 <DIO_enu_SetPinValue+0x214>
    54a2:	2d 81       	ldd	r18, Y+5	; 0x05
    54a4:	3e 81       	ldd	r19, Y+6	; 0x06
    54a6:	21 30       	cpi	r18, 0x01	; 1
    54a8:	31 05       	cpc	r19, r1
    54aa:	51 f5       	brne	.+84     	; 0x5500 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    54ac:	a2 e3       	ldi	r26, 0x32	; 50
    54ae:	b0 e0       	ldi	r27, 0x00	; 0
    54b0:	e2 e3       	ldi	r30, 0x32	; 50
    54b2:	f0 e0       	ldi	r31, 0x00	; 0
    54b4:	80 81       	ld	r24, Z
    54b6:	48 2f       	mov	r20, r24
    54b8:	8b 81       	ldd	r24, Y+3	; 0x03
    54ba:	28 2f       	mov	r18, r24
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	02 2e       	mov	r0, r18
    54c4:	02 c0       	rjmp	.+4      	; 0x54ca <DIO_enu_SetPinValue+0x20a>
    54c6:	88 0f       	add	r24, r24
    54c8:	99 1f       	adc	r25, r25
    54ca:	0a 94       	dec	r0
    54cc:	e2 f7       	brpl	.-8      	; 0x54c6 <DIO_enu_SetPinValue+0x206>
    54ce:	84 2b       	or	r24, r20
    54d0:	8c 93       	st	X, r24
    54d2:	16 c0       	rjmp	.+44     	; 0x5500 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    54d4:	a2 e3       	ldi	r26, 0x32	; 50
    54d6:	b0 e0       	ldi	r27, 0x00	; 0
    54d8:	e2 e3       	ldi	r30, 0x32	; 50
    54da:	f0 e0       	ldi	r31, 0x00	; 0
    54dc:	80 81       	ld	r24, Z
    54de:	48 2f       	mov	r20, r24
    54e0:	8b 81       	ldd	r24, Y+3	; 0x03
    54e2:	28 2f       	mov	r18, r24
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	90 e0       	ldi	r25, 0x00	; 0
    54ea:	02 2e       	mov	r0, r18
    54ec:	02 c0       	rjmp	.+4      	; 0x54f2 <DIO_enu_SetPinValue+0x232>
    54ee:	88 0f       	add	r24, r24
    54f0:	99 1f       	adc	r25, r25
    54f2:	0a 94       	dec	r0
    54f4:	e2 f7       	brpl	.-8      	; 0x54ee <DIO_enu_SetPinValue+0x22e>
    54f6:	80 95       	com	r24
    54f8:	84 23       	and	r24, r20
    54fa:	8c 93       	st	X, r24
    54fc:	01 c0       	rjmp	.+2      	; 0x5500 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    54fe:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5500:	89 81       	ldd	r24, Y+1	; 0x01
}
    5502:	2e 96       	adiw	r28, 0x0e	; 14
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	f8 94       	cli
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	0f be       	out	0x3f, r0	; 63
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	cf 91       	pop	r28
    5510:	df 91       	pop	r29
    5512:	08 95       	ret

00005514 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    5514:	df 93       	push	r29
    5516:	cf 93       	push	r28
    5518:	cd b7       	in	r28, 0x3d	; 61
    551a:	de b7       	in	r29, 0x3e	; 62
    551c:	27 97       	sbiw	r28, 0x07	; 7
    551e:	0f b6       	in	r0, 0x3f	; 63
    5520:	f8 94       	cli
    5522:	de bf       	out	0x3e, r29	; 62
    5524:	0f be       	out	0x3f, r0	; 63
    5526:	cd bf       	out	0x3d, r28	; 61
    5528:	8a 83       	std	Y+2, r24	; 0x02
    552a:	6b 83       	std	Y+3, r22	; 0x03
    552c:	5d 83       	std	Y+5, r21	; 0x05
    552e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    5534:	8a 81       	ldd	r24, Y+2	; 0x02
    5536:	84 30       	cpi	r24, 0x04	; 4
    5538:	08 f0       	brcs	.+2      	; 0x553c <DIO_enu_GetPinValue+0x28>
    553a:	7a c0       	rjmp	.+244    	; 0x5630 <DIO_enu_GetPinValue+0x11c>
    553c:	8b 81       	ldd	r24, Y+3	; 0x03
    553e:	88 30       	cpi	r24, 0x08	; 8
    5540:	08 f0       	brcs	.+2      	; 0x5544 <DIO_enu_GetPinValue+0x30>
    5542:	76 c0       	rjmp	.+236    	; 0x5630 <DIO_enu_GetPinValue+0x11c>
    5544:	8c 81       	ldd	r24, Y+4	; 0x04
    5546:	9d 81       	ldd	r25, Y+5	; 0x05
    5548:	00 97       	sbiw	r24, 0x00	; 0
    554a:	09 f4       	brne	.+2      	; 0x554e <DIO_enu_GetPinValue+0x3a>
    554c:	71 c0       	rjmp	.+226    	; 0x5630 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    554e:	8a 81       	ldd	r24, Y+2	; 0x02
    5550:	28 2f       	mov	r18, r24
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	3f 83       	std	Y+7, r19	; 0x07
    5556:	2e 83       	std	Y+6, r18	; 0x06
    5558:	4e 81       	ldd	r20, Y+6	; 0x06
    555a:	5f 81       	ldd	r21, Y+7	; 0x07
    555c:	41 30       	cpi	r20, 0x01	; 1
    555e:	51 05       	cpc	r21, r1
    5560:	59 f1       	breq	.+86     	; 0x55b8 <DIO_enu_GetPinValue+0xa4>
    5562:	8e 81       	ldd	r24, Y+6	; 0x06
    5564:	9f 81       	ldd	r25, Y+7	; 0x07
    5566:	82 30       	cpi	r24, 0x02	; 2
    5568:	91 05       	cpc	r25, r1
    556a:	34 f4       	brge	.+12     	; 0x5578 <DIO_enu_GetPinValue+0x64>
    556c:	2e 81       	ldd	r18, Y+6	; 0x06
    556e:	3f 81       	ldd	r19, Y+7	; 0x07
    5570:	21 15       	cp	r18, r1
    5572:	31 05       	cpc	r19, r1
    5574:	69 f0       	breq	.+26     	; 0x5590 <DIO_enu_GetPinValue+0x7c>
    5576:	5d c0       	rjmp	.+186    	; 0x5632 <DIO_enu_GetPinValue+0x11e>
    5578:	4e 81       	ldd	r20, Y+6	; 0x06
    557a:	5f 81       	ldd	r21, Y+7	; 0x07
    557c:	42 30       	cpi	r20, 0x02	; 2
    557e:	51 05       	cpc	r21, r1
    5580:	79 f1       	breq	.+94     	; 0x55e0 <DIO_enu_GetPinValue+0xcc>
    5582:	8e 81       	ldd	r24, Y+6	; 0x06
    5584:	9f 81       	ldd	r25, Y+7	; 0x07
    5586:	83 30       	cpi	r24, 0x03	; 3
    5588:	91 05       	cpc	r25, r1
    558a:	09 f4       	brne	.+2      	; 0x558e <DIO_enu_GetPinValue+0x7a>
    558c:	3d c0       	rjmp	.+122    	; 0x5608 <DIO_enu_GetPinValue+0xf4>
    558e:	51 c0       	rjmp	.+162    	; 0x5632 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    5590:	e9 e3       	ldi	r30, 0x39	; 57
    5592:	f0 e0       	ldi	r31, 0x00	; 0
    5594:	80 81       	ld	r24, Z
    5596:	28 2f       	mov	r18, r24
    5598:	30 e0       	ldi	r19, 0x00	; 0
    559a:	8b 81       	ldd	r24, Y+3	; 0x03
    559c:	88 2f       	mov	r24, r24
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	a9 01       	movw	r20, r18
    55a2:	02 c0       	rjmp	.+4      	; 0x55a8 <DIO_enu_GetPinValue+0x94>
    55a4:	55 95       	asr	r21
    55a6:	47 95       	ror	r20
    55a8:	8a 95       	dec	r24
    55aa:	e2 f7       	brpl	.-8      	; 0x55a4 <DIO_enu_GetPinValue+0x90>
    55ac:	ca 01       	movw	r24, r20
    55ae:	81 70       	andi	r24, 0x01	; 1
    55b0:	ec 81       	ldd	r30, Y+4	; 0x04
    55b2:	fd 81       	ldd	r31, Y+5	; 0x05
    55b4:	80 83       	st	Z, r24
    55b6:	3d c0       	rjmp	.+122    	; 0x5632 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    55b8:	e6 e3       	ldi	r30, 0x36	; 54
    55ba:	f0 e0       	ldi	r31, 0x00	; 0
    55bc:	80 81       	ld	r24, Z
    55be:	28 2f       	mov	r18, r24
    55c0:	30 e0       	ldi	r19, 0x00	; 0
    55c2:	8b 81       	ldd	r24, Y+3	; 0x03
    55c4:	88 2f       	mov	r24, r24
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	a9 01       	movw	r20, r18
    55ca:	02 c0       	rjmp	.+4      	; 0x55d0 <DIO_enu_GetPinValue+0xbc>
    55cc:	55 95       	asr	r21
    55ce:	47 95       	ror	r20
    55d0:	8a 95       	dec	r24
    55d2:	e2 f7       	brpl	.-8      	; 0x55cc <DIO_enu_GetPinValue+0xb8>
    55d4:	ca 01       	movw	r24, r20
    55d6:	81 70       	andi	r24, 0x01	; 1
    55d8:	ec 81       	ldd	r30, Y+4	; 0x04
    55da:	fd 81       	ldd	r31, Y+5	; 0x05
    55dc:	80 83       	st	Z, r24
    55de:	29 c0       	rjmp	.+82     	; 0x5632 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    55e0:	e3 e3       	ldi	r30, 0x33	; 51
    55e2:	f0 e0       	ldi	r31, 0x00	; 0
    55e4:	80 81       	ld	r24, Z
    55e6:	28 2f       	mov	r18, r24
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	8b 81       	ldd	r24, Y+3	; 0x03
    55ec:	88 2f       	mov	r24, r24
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	a9 01       	movw	r20, r18
    55f2:	02 c0       	rjmp	.+4      	; 0x55f8 <DIO_enu_GetPinValue+0xe4>
    55f4:	55 95       	asr	r21
    55f6:	47 95       	ror	r20
    55f8:	8a 95       	dec	r24
    55fa:	e2 f7       	brpl	.-8      	; 0x55f4 <DIO_enu_GetPinValue+0xe0>
    55fc:	ca 01       	movw	r24, r20
    55fe:	81 70       	andi	r24, 0x01	; 1
    5600:	ec 81       	ldd	r30, Y+4	; 0x04
    5602:	fd 81       	ldd	r31, Y+5	; 0x05
    5604:	80 83       	st	Z, r24
    5606:	15 c0       	rjmp	.+42     	; 0x5632 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    5608:	e0 e3       	ldi	r30, 0x30	; 48
    560a:	f0 e0       	ldi	r31, 0x00	; 0
    560c:	80 81       	ld	r24, Z
    560e:	28 2f       	mov	r18, r24
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	8b 81       	ldd	r24, Y+3	; 0x03
    5614:	88 2f       	mov	r24, r24
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	a9 01       	movw	r20, r18
    561a:	02 c0       	rjmp	.+4      	; 0x5620 <DIO_enu_GetPinValue+0x10c>
    561c:	55 95       	asr	r21
    561e:	47 95       	ror	r20
    5620:	8a 95       	dec	r24
    5622:	e2 f7       	brpl	.-8      	; 0x561c <DIO_enu_GetPinValue+0x108>
    5624:	ca 01       	movw	r24, r20
    5626:	81 70       	andi	r24, 0x01	; 1
    5628:	ec 81       	ldd	r30, Y+4	; 0x04
    562a:	fd 81       	ldd	r31, Y+5	; 0x05
    562c:	80 83       	st	Z, r24
    562e:	01 c0       	rjmp	.+2      	; 0x5632 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    5630:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5632:	89 81       	ldd	r24, Y+1	; 0x01
}
    5634:	27 96       	adiw	r28, 0x07	; 7
    5636:	0f b6       	in	r0, 0x3f	; 63
    5638:	f8 94       	cli
    563a:	de bf       	out	0x3e, r29	; 62
    563c:	0f be       	out	0x3f, r0	; 63
    563e:	cd bf       	out	0x3d, r28	; 61
    5640:	cf 91       	pop	r28
    5642:	df 91       	pop	r29
    5644:	08 95       	ret

00005646 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    5646:	df 93       	push	r29
    5648:	cf 93       	push	r28
    564a:	cd b7       	in	r28, 0x3d	; 61
    564c:	de b7       	in	r29, 0x3e	; 62
    564e:	2d 97       	sbiw	r28, 0x0d	; 13
    5650:	0f b6       	in	r0, 0x3f	; 63
    5652:	f8 94       	cli
    5654:	de bf       	out	0x3e, r29	; 62
    5656:	0f be       	out	0x3f, r0	; 63
    5658:	cd bf       	out	0x3d, r28	; 61
    565a:	8a 83       	std	Y+2, r24	; 0x02
    565c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    565e:	81 e0       	ldi	r24, 0x01	; 1
    5660:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    5662:	8a 81       	ldd	r24, Y+2	; 0x02
    5664:	84 30       	cpi	r24, 0x04	; 4
    5666:	08 f0       	brcs	.+2      	; 0x566a <DIO_enu_SetPortDirection+0x24>
    5668:	84 c0       	rjmp	.+264    	; 0x5772 <DIO_enu_SetPortDirection+0x12c>
    566a:	8b 81       	ldd	r24, Y+3	; 0x03
    566c:	81 30       	cpi	r24, 0x01	; 1
    566e:	21 f0       	breq	.+8      	; 0x5678 <DIO_enu_SetPortDirection+0x32>
    5670:	8b 81       	ldd	r24, Y+3	; 0x03
    5672:	88 23       	and	r24, r24
    5674:	09 f0       	breq	.+2      	; 0x5678 <DIO_enu_SetPortDirection+0x32>
    5676:	7d c0       	rjmp	.+250    	; 0x5772 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    5678:	8a 81       	ldd	r24, Y+2	; 0x02
    567a:	28 2f       	mov	r18, r24
    567c:	30 e0       	ldi	r19, 0x00	; 0
    567e:	3d 87       	std	Y+13, r19	; 0x0d
    5680:	2c 87       	std	Y+12, r18	; 0x0c
    5682:	8c 85       	ldd	r24, Y+12	; 0x0c
    5684:	9d 85       	ldd	r25, Y+13	; 0x0d
    5686:	81 30       	cpi	r24, 0x01	; 1
    5688:	91 05       	cpc	r25, r1
    568a:	71 f1       	breq	.+92     	; 0x56e8 <DIO_enu_SetPortDirection+0xa2>
    568c:	2c 85       	ldd	r18, Y+12	; 0x0c
    568e:	3d 85       	ldd	r19, Y+13	; 0x0d
    5690:	22 30       	cpi	r18, 0x02	; 2
    5692:	31 05       	cpc	r19, r1
    5694:	2c f4       	brge	.+10     	; 0x56a0 <DIO_enu_SetPortDirection+0x5a>
    5696:	8c 85       	ldd	r24, Y+12	; 0x0c
    5698:	9d 85       	ldd	r25, Y+13	; 0x0d
    569a:	00 97       	sbiw	r24, 0x00	; 0
    569c:	69 f0       	breq	.+26     	; 0x56b8 <DIO_enu_SetPortDirection+0x72>
    569e:	6a c0       	rjmp	.+212    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
    56a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    56a2:	3d 85       	ldd	r19, Y+13	; 0x0d
    56a4:	22 30       	cpi	r18, 0x02	; 2
    56a6:	31 05       	cpc	r19, r1
    56a8:	b1 f1       	breq	.+108    	; 0x5716 <DIO_enu_SetPortDirection+0xd0>
    56aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    56ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    56ae:	83 30       	cpi	r24, 0x03	; 3
    56b0:	91 05       	cpc	r25, r1
    56b2:	09 f4       	brne	.+2      	; 0x56b6 <DIO_enu_SetPortDirection+0x70>
    56b4:	47 c0       	rjmp	.+142    	; 0x5744 <DIO_enu_SetPortDirection+0xfe>
    56b6:	5e c0       	rjmp	.+188    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    56b8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ba:	28 2f       	mov	r18, r24
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	3b 87       	std	Y+11, r19	; 0x0b
    56c0:	2a 87       	std	Y+10, r18	; 0x0a
    56c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    56c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    56c6:	00 97       	sbiw	r24, 0x00	; 0
    56c8:	59 f0       	breq	.+22     	; 0x56e0 <DIO_enu_SetPortDirection+0x9a>
    56ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    56cc:	3b 85       	ldd	r19, Y+11	; 0x0b
    56ce:	21 30       	cpi	r18, 0x01	; 1
    56d0:	31 05       	cpc	r19, r1
    56d2:	09 f0       	breq	.+2      	; 0x56d6 <DIO_enu_SetPortDirection+0x90>
    56d4:	4f c0       	rjmp	.+158    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    56d6:	ea e3       	ldi	r30, 0x3A	; 58
    56d8:	f0 e0       	ldi	r31, 0x00	; 0
    56da:	8f ef       	ldi	r24, 0xFF	; 255
    56dc:	80 83       	st	Z, r24
    56de:	4a c0       	rjmp	.+148    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    56e0:	ea e3       	ldi	r30, 0x3A	; 58
    56e2:	f0 e0       	ldi	r31, 0x00	; 0
    56e4:	10 82       	st	Z, r1
    56e6:	46 c0       	rjmp	.+140    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    56e8:	8b 81       	ldd	r24, Y+3	; 0x03
    56ea:	28 2f       	mov	r18, r24
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	39 87       	std	Y+9, r19	; 0x09
    56f0:	28 87       	std	Y+8, r18	; 0x08
    56f2:	88 85       	ldd	r24, Y+8	; 0x08
    56f4:	99 85       	ldd	r25, Y+9	; 0x09
    56f6:	00 97       	sbiw	r24, 0x00	; 0
    56f8:	51 f0       	breq	.+20     	; 0x570e <DIO_enu_SetPortDirection+0xc8>
    56fa:	28 85       	ldd	r18, Y+8	; 0x08
    56fc:	39 85       	ldd	r19, Y+9	; 0x09
    56fe:	21 30       	cpi	r18, 0x01	; 1
    5700:	31 05       	cpc	r19, r1
    5702:	c1 f5       	brne	.+112    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    5704:	e7 e3       	ldi	r30, 0x37	; 55
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	8f ef       	ldi	r24, 0xFF	; 255
    570a:	80 83       	st	Z, r24
    570c:	33 c0       	rjmp	.+102    	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    570e:	e7 e3       	ldi	r30, 0x37	; 55
    5710:	f0 e0       	ldi	r31, 0x00	; 0
    5712:	10 82       	st	Z, r1
    5714:	2f c0       	rjmp	.+94     	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    5716:	8b 81       	ldd	r24, Y+3	; 0x03
    5718:	28 2f       	mov	r18, r24
    571a:	30 e0       	ldi	r19, 0x00	; 0
    571c:	3f 83       	std	Y+7, r19	; 0x07
    571e:	2e 83       	std	Y+6, r18	; 0x06
    5720:	8e 81       	ldd	r24, Y+6	; 0x06
    5722:	9f 81       	ldd	r25, Y+7	; 0x07
    5724:	00 97       	sbiw	r24, 0x00	; 0
    5726:	51 f0       	breq	.+20     	; 0x573c <DIO_enu_SetPortDirection+0xf6>
    5728:	2e 81       	ldd	r18, Y+6	; 0x06
    572a:	3f 81       	ldd	r19, Y+7	; 0x07
    572c:	21 30       	cpi	r18, 0x01	; 1
    572e:	31 05       	cpc	r19, r1
    5730:	09 f5       	brne	.+66     	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    5732:	e4 e3       	ldi	r30, 0x34	; 52
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	8f ef       	ldi	r24, 0xFF	; 255
    5738:	80 83       	st	Z, r24
    573a:	1c c0       	rjmp	.+56     	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    573c:	e4 e3       	ldi	r30, 0x34	; 52
    573e:	f0 e0       	ldi	r31, 0x00	; 0
    5740:	10 82       	st	Z, r1
    5742:	18 c0       	rjmp	.+48     	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    5744:	8b 81       	ldd	r24, Y+3	; 0x03
    5746:	28 2f       	mov	r18, r24
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	3d 83       	std	Y+5, r19	; 0x05
    574c:	2c 83       	std	Y+4, r18	; 0x04
    574e:	8c 81       	ldd	r24, Y+4	; 0x04
    5750:	9d 81       	ldd	r25, Y+5	; 0x05
    5752:	00 97       	sbiw	r24, 0x00	; 0
    5754:	51 f0       	breq	.+20     	; 0x576a <DIO_enu_SetPortDirection+0x124>
    5756:	2c 81       	ldd	r18, Y+4	; 0x04
    5758:	3d 81       	ldd	r19, Y+5	; 0x05
    575a:	21 30       	cpi	r18, 0x01	; 1
    575c:	31 05       	cpc	r19, r1
    575e:	51 f4       	brne	.+20     	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    5760:	e1 e3       	ldi	r30, 0x31	; 49
    5762:	f0 e0       	ldi	r31, 0x00	; 0
    5764:	8f ef       	ldi	r24, 0xFF	; 255
    5766:	80 83       	st	Z, r24
    5768:	05 c0       	rjmp	.+10     	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    576a:	e1 e3       	ldi	r30, 0x31	; 49
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	10 82       	st	Z, r1
    5770:	01 c0       	rjmp	.+2      	; 0x5774 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    5772:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5774:	89 81       	ldd	r24, Y+1	; 0x01
}
    5776:	2d 96       	adiw	r28, 0x0d	; 13
    5778:	0f b6       	in	r0, 0x3f	; 63
    577a:	f8 94       	cli
    577c:	de bf       	out	0x3e, r29	; 62
    577e:	0f be       	out	0x3f, r0	; 63
    5780:	cd bf       	out	0x3d, r28	; 61
    5782:	cf 91       	pop	r28
    5784:	df 91       	pop	r29
    5786:	08 95       	ret

00005788 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    5788:	df 93       	push	r29
    578a:	cf 93       	push	r28
    578c:	00 d0       	rcall	.+0      	; 0x578e <DIO_enu_SetPortValue+0x6>
    578e:	00 d0       	rcall	.+0      	; 0x5790 <DIO_enu_SetPortValue+0x8>
    5790:	0f 92       	push	r0
    5792:	cd b7       	in	r28, 0x3d	; 61
    5794:	de b7       	in	r29, 0x3e	; 62
    5796:	8a 83       	std	Y+2, r24	; 0x02
    5798:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    579a:	81 e0       	ldi	r24, 0x01	; 1
    579c:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    579e:	8a 81       	ldd	r24, Y+2	; 0x02
    57a0:	84 30       	cpi	r24, 0x04	; 4
    57a2:	98 f5       	brcc	.+102    	; 0x580a <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    57a4:	8a 81       	ldd	r24, Y+2	; 0x02
    57a6:	28 2f       	mov	r18, r24
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	3d 83       	std	Y+5, r19	; 0x05
    57ac:	2c 83       	std	Y+4, r18	; 0x04
    57ae:	8c 81       	ldd	r24, Y+4	; 0x04
    57b0:	9d 81       	ldd	r25, Y+5	; 0x05
    57b2:	81 30       	cpi	r24, 0x01	; 1
    57b4:	91 05       	cpc	r25, r1
    57b6:	d1 f0       	breq	.+52     	; 0x57ec <DIO_enu_SetPortValue+0x64>
    57b8:	2c 81       	ldd	r18, Y+4	; 0x04
    57ba:	3d 81       	ldd	r19, Y+5	; 0x05
    57bc:	22 30       	cpi	r18, 0x02	; 2
    57be:	31 05       	cpc	r19, r1
    57c0:	2c f4       	brge	.+10     	; 0x57cc <DIO_enu_SetPortValue+0x44>
    57c2:	8c 81       	ldd	r24, Y+4	; 0x04
    57c4:	9d 81       	ldd	r25, Y+5	; 0x05
    57c6:	00 97       	sbiw	r24, 0x00	; 0
    57c8:	61 f0       	breq	.+24     	; 0x57e2 <DIO_enu_SetPortValue+0x5a>
    57ca:	20 c0       	rjmp	.+64     	; 0x580c <DIO_enu_SetPortValue+0x84>
    57cc:	2c 81       	ldd	r18, Y+4	; 0x04
    57ce:	3d 81       	ldd	r19, Y+5	; 0x05
    57d0:	22 30       	cpi	r18, 0x02	; 2
    57d2:	31 05       	cpc	r19, r1
    57d4:	81 f0       	breq	.+32     	; 0x57f6 <DIO_enu_SetPortValue+0x6e>
    57d6:	8c 81       	ldd	r24, Y+4	; 0x04
    57d8:	9d 81       	ldd	r25, Y+5	; 0x05
    57da:	83 30       	cpi	r24, 0x03	; 3
    57dc:	91 05       	cpc	r25, r1
    57de:	81 f0       	breq	.+32     	; 0x5800 <DIO_enu_SetPortValue+0x78>
    57e0:	15 c0       	rjmp	.+42     	; 0x580c <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    57e2:	eb e3       	ldi	r30, 0x3B	; 59
    57e4:	f0 e0       	ldi	r31, 0x00	; 0
    57e6:	8b 81       	ldd	r24, Y+3	; 0x03
    57e8:	80 83       	st	Z, r24
    57ea:	10 c0       	rjmp	.+32     	; 0x580c <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    57ec:	e8 e3       	ldi	r30, 0x38	; 56
    57ee:	f0 e0       	ldi	r31, 0x00	; 0
    57f0:	8b 81       	ldd	r24, Y+3	; 0x03
    57f2:	80 83       	st	Z, r24
    57f4:	0b c0       	rjmp	.+22     	; 0x580c <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    57f6:	e5 e3       	ldi	r30, 0x35	; 53
    57f8:	f0 e0       	ldi	r31, 0x00	; 0
    57fa:	8b 81       	ldd	r24, Y+3	; 0x03
    57fc:	80 83       	st	Z, r24
    57fe:	06 c0       	rjmp	.+12     	; 0x580c <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    5800:	e2 e3       	ldi	r30, 0x32	; 50
    5802:	f0 e0       	ldi	r31, 0x00	; 0
    5804:	8b 81       	ldd	r24, Y+3	; 0x03
    5806:	80 83       	st	Z, r24
    5808:	01 c0       	rjmp	.+2      	; 0x580c <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    580a:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    580c:	89 81       	ldd	r24, Y+1	; 0x01
}
    580e:	0f 90       	pop	r0
    5810:	0f 90       	pop	r0
    5812:	0f 90       	pop	r0
    5814:	0f 90       	pop	r0
    5816:	0f 90       	pop	r0
    5818:	cf 91       	pop	r28
    581a:	df 91       	pop	r29
    581c:	08 95       	ret

0000581e <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    581e:	df 93       	push	r29
    5820:	cf 93       	push	r28
    5822:	00 d0       	rcall	.+0      	; 0x5824 <DIO_enu_GetPortValue+0x6>
    5824:	00 d0       	rcall	.+0      	; 0x5826 <DIO_enu_GetPortValue+0x8>
    5826:	00 d0       	rcall	.+0      	; 0x5828 <DIO_enu_GetPortValue+0xa>
    5828:	cd b7       	in	r28, 0x3d	; 61
    582a:	de b7       	in	r29, 0x3e	; 62
    582c:	8a 83       	std	Y+2, r24	; 0x02
    582e:	7c 83       	std	Y+4, r23	; 0x04
    5830:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    5836:	8a 81       	ldd	r24, Y+2	; 0x02
    5838:	84 30       	cpi	r24, 0x04	; 4
    583a:	08 f0       	brcs	.+2      	; 0x583e <DIO_enu_GetPortValue+0x20>
    583c:	3f c0       	rjmp	.+126    	; 0x58bc <DIO_enu_GetPortValue+0x9e>
    583e:	8b 81       	ldd	r24, Y+3	; 0x03
    5840:	9c 81       	ldd	r25, Y+4	; 0x04
    5842:	00 97       	sbiw	r24, 0x00	; 0
    5844:	d9 f1       	breq	.+118    	; 0x58bc <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    5846:	8a 81       	ldd	r24, Y+2	; 0x02
    5848:	28 2f       	mov	r18, r24
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	3e 83       	std	Y+6, r19	; 0x06
    584e:	2d 83       	std	Y+5, r18	; 0x05
    5850:	8d 81       	ldd	r24, Y+5	; 0x05
    5852:	9e 81       	ldd	r25, Y+6	; 0x06
    5854:	81 30       	cpi	r24, 0x01	; 1
    5856:	91 05       	cpc	r25, r1
    5858:	e1 f0       	breq	.+56     	; 0x5892 <DIO_enu_GetPortValue+0x74>
    585a:	2d 81       	ldd	r18, Y+5	; 0x05
    585c:	3e 81       	ldd	r19, Y+6	; 0x06
    585e:	22 30       	cpi	r18, 0x02	; 2
    5860:	31 05       	cpc	r19, r1
    5862:	2c f4       	brge	.+10     	; 0x586e <DIO_enu_GetPortValue+0x50>
    5864:	8d 81       	ldd	r24, Y+5	; 0x05
    5866:	9e 81       	ldd	r25, Y+6	; 0x06
    5868:	00 97       	sbiw	r24, 0x00	; 0
    586a:	61 f0       	breq	.+24     	; 0x5884 <DIO_enu_GetPortValue+0x66>
    586c:	28 c0       	rjmp	.+80     	; 0x58be <DIO_enu_GetPortValue+0xa0>
    586e:	2d 81       	ldd	r18, Y+5	; 0x05
    5870:	3e 81       	ldd	r19, Y+6	; 0x06
    5872:	22 30       	cpi	r18, 0x02	; 2
    5874:	31 05       	cpc	r19, r1
    5876:	a1 f0       	breq	.+40     	; 0x58a0 <DIO_enu_GetPortValue+0x82>
    5878:	8d 81       	ldd	r24, Y+5	; 0x05
    587a:	9e 81       	ldd	r25, Y+6	; 0x06
    587c:	83 30       	cpi	r24, 0x03	; 3
    587e:	91 05       	cpc	r25, r1
    5880:	b1 f0       	breq	.+44     	; 0x58ae <DIO_enu_GetPortValue+0x90>
    5882:	1d c0       	rjmp	.+58     	; 0x58be <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    5884:	e9 e3       	ldi	r30, 0x39	; 57
    5886:	f0 e0       	ldi	r31, 0x00	; 0
    5888:	80 81       	ld	r24, Z
    588a:	eb 81       	ldd	r30, Y+3	; 0x03
    588c:	fc 81       	ldd	r31, Y+4	; 0x04
    588e:	80 83       	st	Z, r24
    5890:	16 c0       	rjmp	.+44     	; 0x58be <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    5892:	e6 e3       	ldi	r30, 0x36	; 54
    5894:	f0 e0       	ldi	r31, 0x00	; 0
    5896:	80 81       	ld	r24, Z
    5898:	eb 81       	ldd	r30, Y+3	; 0x03
    589a:	fc 81       	ldd	r31, Y+4	; 0x04
    589c:	80 83       	st	Z, r24
    589e:	0f c0       	rjmp	.+30     	; 0x58be <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    58a0:	e3 e3       	ldi	r30, 0x33	; 51
    58a2:	f0 e0       	ldi	r31, 0x00	; 0
    58a4:	80 81       	ld	r24, Z
    58a6:	eb 81       	ldd	r30, Y+3	; 0x03
    58a8:	fc 81       	ldd	r31, Y+4	; 0x04
    58aa:	80 83       	st	Z, r24
    58ac:	08 c0       	rjmp	.+16     	; 0x58be <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    58ae:	e0 e3       	ldi	r30, 0x30	; 48
    58b0:	f0 e0       	ldi	r31, 0x00	; 0
    58b2:	80 81       	ld	r24, Z
    58b4:	eb 81       	ldd	r30, Y+3	; 0x03
    58b6:	fc 81       	ldd	r31, Y+4	; 0x04
    58b8:	80 83       	st	Z, r24
    58ba:	01 c0       	rjmp	.+2      	; 0x58be <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    58bc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    58be:	89 81       	ldd	r24, Y+1	; 0x01
}
    58c0:	26 96       	adiw	r28, 0x06	; 6
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	de bf       	out	0x3e, r29	; 62
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	cd bf       	out	0x3d, r28	; 61
    58cc:	cf 91       	pop	r28
    58ce:	df 91       	pop	r29
    58d0:	08 95       	ret

000058d2 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    58d2:	df 93       	push	r29
    58d4:	cf 93       	push	r28
    58d6:	00 d0       	rcall	.+0      	; 0x58d8 <DIO_enu_ToggPin+0x6>
    58d8:	00 d0       	rcall	.+0      	; 0x58da <DIO_enu_ToggPin+0x8>
    58da:	0f 92       	push	r0
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    58e0:	8a 83       	std	Y+2, r24	; 0x02
    58e2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    58e8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ea:	84 30       	cpi	r24, 0x04	; 4
    58ec:	08 f0       	brcs	.+2      	; 0x58f0 <DIO_enu_ToggPin+0x1e>
    58ee:	73 c0       	rjmp	.+230    	; 0x59d6 <DIO_enu_ToggPin+0x104>
    58f0:	8b 81       	ldd	r24, Y+3	; 0x03
    58f2:	88 30       	cpi	r24, 0x08	; 8
    58f4:	08 f0       	brcs	.+2      	; 0x58f8 <DIO_enu_ToggPin+0x26>
    58f6:	6f c0       	rjmp	.+222    	; 0x59d6 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    58f8:	8a 81       	ldd	r24, Y+2	; 0x02
    58fa:	28 2f       	mov	r18, r24
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	3d 83       	std	Y+5, r19	; 0x05
    5900:	2c 83       	std	Y+4, r18	; 0x04
    5902:	8c 81       	ldd	r24, Y+4	; 0x04
    5904:	9d 81       	ldd	r25, Y+5	; 0x05
    5906:	81 30       	cpi	r24, 0x01	; 1
    5908:	91 05       	cpc	r25, r1
    590a:	49 f1       	breq	.+82     	; 0x595e <DIO_enu_ToggPin+0x8c>
    590c:	2c 81       	ldd	r18, Y+4	; 0x04
    590e:	3d 81       	ldd	r19, Y+5	; 0x05
    5910:	22 30       	cpi	r18, 0x02	; 2
    5912:	31 05       	cpc	r19, r1
    5914:	2c f4       	brge	.+10     	; 0x5920 <DIO_enu_ToggPin+0x4e>
    5916:	8c 81       	ldd	r24, Y+4	; 0x04
    5918:	9d 81       	ldd	r25, Y+5	; 0x05
    591a:	00 97       	sbiw	r24, 0x00	; 0
    591c:	61 f0       	breq	.+24     	; 0x5936 <DIO_enu_ToggPin+0x64>
    591e:	5c c0       	rjmp	.+184    	; 0x59d8 <DIO_enu_ToggPin+0x106>
    5920:	2c 81       	ldd	r18, Y+4	; 0x04
    5922:	3d 81       	ldd	r19, Y+5	; 0x05
    5924:	22 30       	cpi	r18, 0x02	; 2
    5926:	31 05       	cpc	r19, r1
    5928:	71 f1       	breq	.+92     	; 0x5986 <DIO_enu_ToggPin+0xb4>
    592a:	8c 81       	ldd	r24, Y+4	; 0x04
    592c:	9d 81       	ldd	r25, Y+5	; 0x05
    592e:	83 30       	cpi	r24, 0x03	; 3
    5930:	91 05       	cpc	r25, r1
    5932:	e9 f1       	breq	.+122    	; 0x59ae <DIO_enu_ToggPin+0xdc>
    5934:	51 c0       	rjmp	.+162    	; 0x59d8 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    5936:	ab e3       	ldi	r26, 0x3B	; 59
    5938:	b0 e0       	ldi	r27, 0x00	; 0
    593a:	eb e3       	ldi	r30, 0x3B	; 59
    593c:	f0 e0       	ldi	r31, 0x00	; 0
    593e:	80 81       	ld	r24, Z
    5940:	48 2f       	mov	r20, r24
    5942:	8b 81       	ldd	r24, Y+3	; 0x03
    5944:	28 2f       	mov	r18, r24
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	81 e0       	ldi	r24, 0x01	; 1
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	02 2e       	mov	r0, r18
    594e:	02 c0       	rjmp	.+4      	; 0x5954 <DIO_enu_ToggPin+0x82>
    5950:	88 0f       	add	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	0a 94       	dec	r0
    5956:	e2 f7       	brpl	.-8      	; 0x5950 <DIO_enu_ToggPin+0x7e>
    5958:	84 27       	eor	r24, r20
    595a:	8c 93       	st	X, r24
    595c:	3d c0       	rjmp	.+122    	; 0x59d8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    595e:	a8 e3       	ldi	r26, 0x38	; 56
    5960:	b0 e0       	ldi	r27, 0x00	; 0
    5962:	e8 e3       	ldi	r30, 0x38	; 56
    5964:	f0 e0       	ldi	r31, 0x00	; 0
    5966:	80 81       	ld	r24, Z
    5968:	48 2f       	mov	r20, r24
    596a:	8b 81       	ldd	r24, Y+3	; 0x03
    596c:	28 2f       	mov	r18, r24
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	90 e0       	ldi	r25, 0x00	; 0
    5974:	02 2e       	mov	r0, r18
    5976:	02 c0       	rjmp	.+4      	; 0x597c <DIO_enu_ToggPin+0xaa>
    5978:	88 0f       	add	r24, r24
    597a:	99 1f       	adc	r25, r25
    597c:	0a 94       	dec	r0
    597e:	e2 f7       	brpl	.-8      	; 0x5978 <DIO_enu_ToggPin+0xa6>
    5980:	84 27       	eor	r24, r20
    5982:	8c 93       	st	X, r24
    5984:	29 c0       	rjmp	.+82     	; 0x59d8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    5986:	a5 e3       	ldi	r26, 0x35	; 53
    5988:	b0 e0       	ldi	r27, 0x00	; 0
    598a:	e5 e3       	ldi	r30, 0x35	; 53
    598c:	f0 e0       	ldi	r31, 0x00	; 0
    598e:	80 81       	ld	r24, Z
    5990:	48 2f       	mov	r20, r24
    5992:	8b 81       	ldd	r24, Y+3	; 0x03
    5994:	28 2f       	mov	r18, r24
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	02 2e       	mov	r0, r18
    599e:	02 c0       	rjmp	.+4      	; 0x59a4 <DIO_enu_ToggPin+0xd2>
    59a0:	88 0f       	add	r24, r24
    59a2:	99 1f       	adc	r25, r25
    59a4:	0a 94       	dec	r0
    59a6:	e2 f7       	brpl	.-8      	; 0x59a0 <DIO_enu_ToggPin+0xce>
    59a8:	84 27       	eor	r24, r20
    59aa:	8c 93       	st	X, r24
    59ac:	15 c0       	rjmp	.+42     	; 0x59d8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    59ae:	a2 e3       	ldi	r26, 0x32	; 50
    59b0:	b0 e0       	ldi	r27, 0x00	; 0
    59b2:	e2 e3       	ldi	r30, 0x32	; 50
    59b4:	f0 e0       	ldi	r31, 0x00	; 0
    59b6:	80 81       	ld	r24, Z
    59b8:	48 2f       	mov	r20, r24
    59ba:	8b 81       	ldd	r24, Y+3	; 0x03
    59bc:	28 2f       	mov	r18, r24
    59be:	30 e0       	ldi	r19, 0x00	; 0
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	90 e0       	ldi	r25, 0x00	; 0
    59c4:	02 2e       	mov	r0, r18
    59c6:	02 c0       	rjmp	.+4      	; 0x59cc <DIO_enu_ToggPin+0xfa>
    59c8:	88 0f       	add	r24, r24
    59ca:	99 1f       	adc	r25, r25
    59cc:	0a 94       	dec	r0
    59ce:	e2 f7       	brpl	.-8      	; 0x59c8 <DIO_enu_ToggPin+0xf6>
    59d0:	84 27       	eor	r24, r20
    59d2:	8c 93       	st	X, r24
    59d4:	01 c0       	rjmp	.+2      	; 0x59d8 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    59d6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    59d8:	89 81       	ldd	r24, Y+1	; 0x01


}
    59da:	0f 90       	pop	r0
    59dc:	0f 90       	pop	r0
    59de:	0f 90       	pop	r0
    59e0:	0f 90       	pop	r0
    59e2:	0f 90       	pop	r0
    59e4:	cf 91       	pop	r28
    59e6:	df 91       	pop	r29
    59e8:	08 95       	ret

000059ea <ADC_enu_Init>:
#include"ADC_Config.h"
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;
ES_t ADC_enu_Init(void){
    59ea:	df 93       	push	r29
    59ec:	cf 93       	push	r28
    59ee:	cd b7       	in	r28, 0x3d	; 61
    59f0:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    59f2:	a7 e2       	ldi	r26, 0x27	; 39
    59f4:	b0 e0       	ldi	r27, 0x00	; 0
    59f6:	e7 e2       	ldi	r30, 0x27	; 39
    59f8:	f0 e0       	ldi	r31, 0x00	; 0
    59fa:	80 81       	ld	r24, Z
    59fc:	8f 77       	andi	r24, 0x7F	; 127
    59fe:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    5a00:	a7 e2       	ldi	r26, 0x27	; 39
    5a02:	b0 e0       	ldi	r27, 0x00	; 0
    5a04:	e7 e2       	ldi	r30, 0x27	; 39
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	80 81       	ld	r24, Z
    5a0a:	80 64       	ori	r24, 0x40	; 64
    5a0c:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    5a0e:	a7 e2       	ldi	r26, 0x27	; 39
    5a10:	b0 e0       	ldi	r27, 0x00	; 0
    5a12:	e7 e2       	ldi	r30, 0x27	; 39
    5a14:	f0 e0       	ldi	r31, 0x00	; 0
    5a16:	80 81       	ld	r24, Z
    5a18:	8f 7d       	andi	r24, 0xDF	; 223
    5a1a:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == DISABLE_AUTO_TRIGG
    CLR_BIT(ADCSRA_REG,ADATE);
    5a1c:	a6 e2       	ldi	r26, 0x26	; 38
    5a1e:	b0 e0       	ldi	r27, 0x00	; 0
    5a20:	e6 e2       	ldi	r30, 0x26	; 38
    5a22:	f0 e0       	ldi	r31, 0x00	; 0
    5a24:	80 81       	ld	r24, Z
    5a26:	8f 7d       	andi	r24, 0xDF	; 223
    5a28:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    5a2a:	a6 e2       	ldi	r26, 0x26	; 38
    5a2c:	b0 e0       	ldi	r27, 0x00	; 0
    5a2e:	e6 e2       	ldi	r30, 0x26	; 38
    5a30:	f0 e0       	ldi	r31, 0x00	; 0
    5a32:	80 81       	ld	r24, Z
    5a34:	87 60       	ori	r24, 0x07	; 7
    5a36:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    5a38:	a6 e2       	ldi	r26, 0x26	; 38
    5a3a:	b0 e0       	ldi	r27, 0x00	; 0
    5a3c:	e6 e2       	ldi	r30, 0x26	; 38
    5a3e:	f0 e0       	ldi	r31, 0x00	; 0
    5a40:	80 81       	ld	r24, Z
    5a42:	80 68       	ori	r24, 0x80	; 128
    5a44:	8c 93       	st	X, r24
    return STATE_OK;
    5a46:	81 e0       	ldi	r24, 0x01	; 1
}
    5a48:	cf 91       	pop	r28
    5a4a:	df 91       	pop	r29
    5a4c:	08 95       	ret

00005a4e <ADC_enu_GetDigitalValueSynchNonBlocking>:
ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    5a4e:	df 93       	push	r29
    5a50:	cf 93       	push	r28
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62
    5a56:	28 97       	sbiw	r28, 0x08	; 8
    5a58:	0f b6       	in	r0, 0x3f	; 63
    5a5a:	f8 94       	cli
    5a5c:	de bf       	out	0x3e, r29	; 62
    5a5e:	0f be       	out	0x3f, r0	; 63
    5a60:	cd bf       	out	0x3d, r28	; 61
    5a62:	8e 83       	std	Y+6, r24	; 0x06
    5a64:	78 87       	std	Y+8, r23	; 0x08
    5a66:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    5a68:	81 e0       	ldi	r24, 0x01	; 1
    5a6a:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    5a6c:	19 82       	std	Y+1, r1	; 0x01
    5a6e:	1a 82       	std	Y+2, r1	; 0x02
    5a70:	1b 82       	std	Y+3, r1	; 0x03
    5a72:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    5a74:	8e 81       	ldd	r24, Y+6	; 0x06
    5a76:	80 32       	cpi	r24, 0x20	; 32
    5a78:	08 f0       	brcs	.+2      	; 0x5a7c <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    5a7a:	65 c0       	rjmp	.+202    	; 0x5b46 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    5a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    5a7e:	98 85       	ldd	r25, Y+8	; 0x08
    5a80:	00 97       	sbiw	r24, 0x00	; 0
    5a82:	09 f4       	brne	.+2      	; 0x5a86 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    5a84:	60 c0       	rjmp	.+192    	; 0x5b46 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    5a86:	80 91 70 01 	lds	r24, 0x0170
    5a8a:	88 23       	and	r24, r24
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    5a8e:	5b c0       	rjmp	.+182    	; 0x5b46 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	80 93 70 01 	sts	0x0170, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    5a96:	a7 e2       	ldi	r26, 0x27	; 39
    5a98:	b0 e0       	ldi	r27, 0x00	; 0
    5a9a:	e7 e2       	ldi	r30, 0x27	; 39
    5a9c:	f0 e0       	ldi	r31, 0x00	; 0
    5a9e:	80 81       	ld	r24, Z
    5aa0:	80 7e       	andi	r24, 0xE0	; 224
    5aa2:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    5aa4:	a7 e2       	ldi	r26, 0x27	; 39
    5aa6:	b0 e0       	ldi	r27, 0x00	; 0
    5aa8:	e7 e2       	ldi	r30, 0x27	; 39
    5aaa:	f0 e0       	ldi	r31, 0x00	; 0
    5aac:	90 81       	ld	r25, Z
    5aae:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab0:	89 2b       	or	r24, r25
    5ab2:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    5ab4:	a6 e2       	ldi	r26, 0x26	; 38
    5ab6:	b0 e0       	ldi	r27, 0x00	; 0
    5ab8:	e6 e2       	ldi	r30, 0x26	; 38
    5aba:	f0 e0       	ldi	r31, 0x00	; 0
    5abc:	80 81       	ld	r24, Z
    5abe:	80 64       	ori	r24, 0x40	; 64
    5ac0:	8c 93       	st	X, r24
    5ac2:	0b c0       	rjmp	.+22     	; 0x5ada <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    5ac4:	89 81       	ldd	r24, Y+1	; 0x01
    5ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac8:	ab 81       	ldd	r26, Y+3	; 0x03
    5aca:	bc 81       	ldd	r27, Y+4	; 0x04
    5acc:	01 96       	adiw	r24, 0x01	; 1
    5ace:	a1 1d       	adc	r26, r1
    5ad0:	b1 1d       	adc	r27, r1
    5ad2:	89 83       	std	Y+1, r24	; 0x01
    5ad4:	9a 83       	std	Y+2, r25	; 0x02
    5ad6:	ab 83       	std	Y+3, r26	; 0x03
    5ad8:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    5ada:	e6 e2       	ldi	r30, 0x26	; 38
    5adc:	f0 e0       	ldi	r31, 0x00	; 0
    5ade:	80 81       	ld	r24, Z
    5ae0:	82 95       	swap	r24
    5ae2:	8f 70       	andi	r24, 0x0F	; 15
    5ae4:	88 2f       	mov	r24, r24
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	81 70       	andi	r24, 0x01	; 1
    5aea:	90 70       	andi	r25, 0x00	; 0
    5aec:	00 97       	sbiw	r24, 0x00	; 0
    5aee:	61 f4       	brne	.+24     	; 0x5b08 <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    5af0:	89 81       	ldd	r24, Y+1	; 0x01
    5af2:	9a 81       	ldd	r25, Y+2	; 0x02
    5af4:	ab 81       	ldd	r26, Y+3	; 0x03
    5af6:	bc 81       	ldd	r27, Y+4	; 0x04
    5af8:	80 35       	cpi	r24, 0x50	; 80
    5afa:	23 ec       	ldi	r18, 0xC3	; 195
    5afc:	92 07       	cpc	r25, r18
    5afe:	20 e0       	ldi	r18, 0x00	; 0
    5b00:	a2 07       	cpc	r26, r18
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	b2 07       	cpc	r27, r18
    5b06:	f0 f2       	brcs	.-68     	; 0x5ac4 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    5b08:	e6 e2       	ldi	r30, 0x26	; 38
    5b0a:	f0 e0       	ldi	r31, 0x00	; 0
    5b0c:	80 81       	ld	r24, Z
    5b0e:	82 95       	swap	r24
    5b10:	8f 70       	andi	r24, 0x0F	; 15
    5b12:	88 2f       	mov	r24, r24
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	81 70       	andi	r24, 0x01	; 1
    5b18:	90 70       	andi	r25, 0x00	; 0
    5b1a:	88 23       	and	r24, r24
    5b1c:	91 f0       	breq	.+36     	; 0x5b42 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    5b1e:	10 92 70 01 	sts	0x0170, r1
            SET_BIT(ADCSRA_REG,ADIF);
    5b22:	a6 e2       	ldi	r26, 0x26	; 38
    5b24:	b0 e0       	ldi	r27, 0x00	; 0
    5b26:	e6 e2       	ldi	r30, 0x26	; 38
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	80 81       	ld	r24, Z
    5b2c:	80 61       	ori	r24, 0x10	; 16
    5b2e:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    5b30:	e4 e2       	ldi	r30, 0x24	; 36
    5b32:	f0 e0       	ldi	r31, 0x00	; 0
    5b34:	80 81       	ld	r24, Z
    5b36:	91 81       	ldd	r25, Z+1	; 0x01
    5b38:	ef 81       	ldd	r30, Y+7	; 0x07
    5b3a:	f8 85       	ldd	r31, Y+8	; 0x08
    5b3c:	91 83       	std	Z+1, r25	; 0x01
    5b3e:	80 83       	st	Z, r24
    5b40:	03 c0       	rjmp	.+6      	; 0x5b48 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    5b42:	1d 82       	std	Y+5, r1	; 0x05
    5b44:	01 c0       	rjmp	.+2      	; 0x5b48 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    5b46:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    5b48:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5b4a:	28 96       	adiw	r28, 0x08	; 8
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	f8 94       	cli
    5b50:	de bf       	out	0x3e, r29	; 62
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	cd bf       	out	0x3d, r28	; 61
    5b56:	cf 91       	pop	r28
    5b58:	df 91       	pop	r29
    5b5a:	08 95       	ret

00005b5c <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    5b5c:	df 93       	push	r29
    5b5e:	cf 93       	push	r28
    5b60:	00 d0       	rcall	.+0      	; 0x5b62 <ADC_enu_GetDigitalValueASynch+0x6>
    5b62:	00 d0       	rcall	.+0      	; 0x5b64 <ADC_enu_GetDigitalValueASynch+0x8>
    5b64:	cd b7       	in	r28, 0x3d	; 61
    5b66:	de b7       	in	r29, 0x3e	; 62
    5b68:	8a 83       	std	Y+2, r24	; 0x02
    5b6a:	7c 83       	std	Y+4, r23	; 0x04
    5b6c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    5b6e:	81 e0       	ldi	r24, 0x01	; 1
    5b70:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    5b72:	8a 81       	ldd	r24, Y+2	; 0x02
    5b74:	80 32       	cpi	r24, 0x20	; 32
    5b76:	78 f5       	brcc	.+94     	; 0x5bd6 <ADC_enu_GetDigitalValueASynch+0x7a>
    5b78:	8b 81       	ldd	r24, Y+3	; 0x03
    5b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b7c:	00 97       	sbiw	r24, 0x00	; 0
    5b7e:	59 f1       	breq	.+86     	; 0x5bd6 <ADC_enu_GetDigitalValueASynch+0x7a>
    5b80:	80 91 70 01 	lds	r24, 0x0170
    5b84:	88 23       	and	r24, r24
    5b86:	39 f5       	brne	.+78     	; 0x5bd6 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    5b88:	81 e0       	ldi	r24, 0x01	; 1
    5b8a:	80 93 70 01 	sts	0x0170, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    5b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b90:	9c 81       	ldd	r25, Y+4	; 0x04
    5b92:	90 93 6f 01 	sts	0x016F, r25
    5b96:	80 93 6e 01 	sts	0x016E, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    5b9a:	a6 e2       	ldi	r26, 0x26	; 38
    5b9c:	b0 e0       	ldi	r27, 0x00	; 0
    5b9e:	e6 e2       	ldi	r30, 0x26	; 38
    5ba0:	f0 e0       	ldi	r31, 0x00	; 0
    5ba2:	80 81       	ld	r24, Z
    5ba4:	88 60       	ori	r24, 0x08	; 8
    5ba6:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    5ba8:	a7 e2       	ldi	r26, 0x27	; 39
    5baa:	b0 e0       	ldi	r27, 0x00	; 0
    5bac:	e7 e2       	ldi	r30, 0x27	; 39
    5bae:	f0 e0       	ldi	r31, 0x00	; 0
    5bb0:	80 81       	ld	r24, Z
    5bb2:	80 7e       	andi	r24, 0xE0	; 224
    5bb4:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    5bb6:	a7 e2       	ldi	r26, 0x27	; 39
    5bb8:	b0 e0       	ldi	r27, 0x00	; 0
    5bba:	e7 e2       	ldi	r30, 0x27	; 39
    5bbc:	f0 e0       	ldi	r31, 0x00	; 0
    5bbe:	90 81       	ld	r25, Z
    5bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc2:	89 2b       	or	r24, r25
    5bc4:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    5bc6:	a6 e2       	ldi	r26, 0x26	; 38
    5bc8:	b0 e0       	ldi	r27, 0x00	; 0
    5bca:	e6 e2       	ldi	r30, 0x26	; 38
    5bcc:	f0 e0       	ldi	r31, 0x00	; 0
    5bce:	80 81       	ld	r24, Z
    5bd0:	80 64       	ori	r24, 0x40	; 64
    5bd2:	8c 93       	st	X, r24
    5bd4:	01 c0       	rjmp	.+2      	; 0x5bd8 <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    5bd6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    5bd8:	89 81       	ldd	r24, Y+1	; 0x01
}
    5bda:	0f 90       	pop	r0
    5bdc:	0f 90       	pop	r0
    5bde:	0f 90       	pop	r0
    5be0:	0f 90       	pop	r0
    5be2:	cf 91       	pop	r28
    5be4:	df 91       	pop	r29
    5be6:	08 95       	ret

00005be8 <__vector_16>:
/***************ISR Function OF ADC*************/
ISR(ADC){
    5be8:	1f 92       	push	r1
    5bea:	0f 92       	push	r0
    5bec:	0f b6       	in	r0, 0x3f	; 63
    5bee:	0f 92       	push	r0
    5bf0:	11 24       	eor	r1, r1
    5bf2:	2f 93       	push	r18
    5bf4:	3f 93       	push	r19
    5bf6:	4f 93       	push	r20
    5bf8:	5f 93       	push	r21
    5bfa:	6f 93       	push	r22
    5bfc:	7f 93       	push	r23
    5bfe:	8f 93       	push	r24
    5c00:	9f 93       	push	r25
    5c02:	af 93       	push	r26
    5c04:	bf 93       	push	r27
    5c06:	ef 93       	push	r30
    5c08:	ff 93       	push	r31
    5c0a:	df 93       	push	r29
    5c0c:	cf 93       	push	r28
    5c0e:	cd b7       	in	r28, 0x3d	; 61
    5c10:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    5c12:	80 91 6e 01 	lds	r24, 0x016E
    5c16:	90 91 6f 01 	lds	r25, 0x016F
    5c1a:	00 97       	sbiw	r24, 0x00	; 0
    5c1c:	99 f0       	breq	.+38     	; 0x5c44 <__vector_16+0x5c>
        //Disable Interrupt & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    5c1e:	a6 e2       	ldi	r26, 0x26	; 38
    5c20:	b0 e0       	ldi	r27, 0x00	; 0
    5c22:	e6 e2       	ldi	r30, 0x26	; 38
    5c24:	f0 e0       	ldi	r31, 0x00	; 0
    5c26:	80 81       	ld	r24, Z
    5c28:	87 7f       	andi	r24, 0xF7	; 247
    5c2a:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    5c2c:	10 92 70 01 	sts	0x0170, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    5c30:	20 91 6e 01 	lds	r18, 0x016E
    5c34:	30 91 6f 01 	lds	r19, 0x016F
    5c38:	e4 e2       	ldi	r30, 0x24	; 36
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	80 81       	ld	r24, Z
    5c3e:	91 81       	ldd	r25, Z+1	; 0x01
    5c40:	f9 01       	movw	r30, r18
    5c42:	09 95       	icall
    }
    5c44:	cf 91       	pop	r28
    5c46:	df 91       	pop	r29
    5c48:	ff 91       	pop	r31
    5c4a:	ef 91       	pop	r30
    5c4c:	bf 91       	pop	r27
    5c4e:	af 91       	pop	r26
    5c50:	9f 91       	pop	r25
    5c52:	8f 91       	pop	r24
    5c54:	7f 91       	pop	r23
    5c56:	6f 91       	pop	r22
    5c58:	5f 91       	pop	r21
    5c5a:	4f 91       	pop	r20
    5c5c:	3f 91       	pop	r19
    5c5e:	2f 91       	pop	r18
    5c60:	0f 90       	pop	r0
    5c62:	0f be       	out	0x3f, r0	; 63
    5c64:	0f 90       	pop	r0
    5c66:	1f 90       	pop	r1
    5c68:	18 95       	reti

00005c6a <__mulsi3>:
    5c6a:	62 9f       	mul	r22, r18
    5c6c:	d0 01       	movw	r26, r0
    5c6e:	73 9f       	mul	r23, r19
    5c70:	f0 01       	movw	r30, r0
    5c72:	82 9f       	mul	r24, r18
    5c74:	e0 0d       	add	r30, r0
    5c76:	f1 1d       	adc	r31, r1
    5c78:	64 9f       	mul	r22, r20
    5c7a:	e0 0d       	add	r30, r0
    5c7c:	f1 1d       	adc	r31, r1
    5c7e:	92 9f       	mul	r25, r18
    5c80:	f0 0d       	add	r31, r0
    5c82:	83 9f       	mul	r24, r19
    5c84:	f0 0d       	add	r31, r0
    5c86:	74 9f       	mul	r23, r20
    5c88:	f0 0d       	add	r31, r0
    5c8a:	65 9f       	mul	r22, r21
    5c8c:	f0 0d       	add	r31, r0
    5c8e:	99 27       	eor	r25, r25
    5c90:	72 9f       	mul	r23, r18
    5c92:	b0 0d       	add	r27, r0
    5c94:	e1 1d       	adc	r30, r1
    5c96:	f9 1f       	adc	r31, r25
    5c98:	63 9f       	mul	r22, r19
    5c9a:	b0 0d       	add	r27, r0
    5c9c:	e1 1d       	adc	r30, r1
    5c9e:	f9 1f       	adc	r31, r25
    5ca0:	bd 01       	movw	r22, r26
    5ca2:	cf 01       	movw	r24, r30
    5ca4:	11 24       	eor	r1, r1
    5ca6:	08 95       	ret

00005ca8 <__udivmodhi4>:
    5ca8:	aa 1b       	sub	r26, r26
    5caa:	bb 1b       	sub	r27, r27
    5cac:	51 e1       	ldi	r21, 0x11	; 17
    5cae:	07 c0       	rjmp	.+14     	; 0x5cbe <__udivmodhi4_ep>

00005cb0 <__udivmodhi4_loop>:
    5cb0:	aa 1f       	adc	r26, r26
    5cb2:	bb 1f       	adc	r27, r27
    5cb4:	a6 17       	cp	r26, r22
    5cb6:	b7 07       	cpc	r27, r23
    5cb8:	10 f0       	brcs	.+4      	; 0x5cbe <__udivmodhi4_ep>
    5cba:	a6 1b       	sub	r26, r22
    5cbc:	b7 0b       	sbc	r27, r23

00005cbe <__udivmodhi4_ep>:
    5cbe:	88 1f       	adc	r24, r24
    5cc0:	99 1f       	adc	r25, r25
    5cc2:	5a 95       	dec	r21
    5cc4:	a9 f7       	brne	.-22     	; 0x5cb0 <__udivmodhi4_loop>
    5cc6:	80 95       	com	r24
    5cc8:	90 95       	com	r25
    5cca:	bc 01       	movw	r22, r24
    5ccc:	cd 01       	movw	r24, r26
    5cce:	08 95       	ret

00005cd0 <__udivmodsi4>:
    5cd0:	a1 e2       	ldi	r26, 0x21	; 33
    5cd2:	1a 2e       	mov	r1, r26
    5cd4:	aa 1b       	sub	r26, r26
    5cd6:	bb 1b       	sub	r27, r27
    5cd8:	fd 01       	movw	r30, r26
    5cda:	0d c0       	rjmp	.+26     	; 0x5cf6 <__udivmodsi4_ep>

00005cdc <__udivmodsi4_loop>:
    5cdc:	aa 1f       	adc	r26, r26
    5cde:	bb 1f       	adc	r27, r27
    5ce0:	ee 1f       	adc	r30, r30
    5ce2:	ff 1f       	adc	r31, r31
    5ce4:	a2 17       	cp	r26, r18
    5ce6:	b3 07       	cpc	r27, r19
    5ce8:	e4 07       	cpc	r30, r20
    5cea:	f5 07       	cpc	r31, r21
    5cec:	20 f0       	brcs	.+8      	; 0x5cf6 <__udivmodsi4_ep>
    5cee:	a2 1b       	sub	r26, r18
    5cf0:	b3 0b       	sbc	r27, r19
    5cf2:	e4 0b       	sbc	r30, r20
    5cf4:	f5 0b       	sbc	r31, r21

00005cf6 <__udivmodsi4_ep>:
    5cf6:	66 1f       	adc	r22, r22
    5cf8:	77 1f       	adc	r23, r23
    5cfa:	88 1f       	adc	r24, r24
    5cfc:	99 1f       	adc	r25, r25
    5cfe:	1a 94       	dec	r1
    5d00:	69 f7       	brne	.-38     	; 0x5cdc <__udivmodsi4_loop>
    5d02:	60 95       	com	r22
    5d04:	70 95       	com	r23
    5d06:	80 95       	com	r24
    5d08:	90 95       	com	r25
    5d0a:	9b 01       	movw	r18, r22
    5d0c:	ac 01       	movw	r20, r24
    5d0e:	bd 01       	movw	r22, r26
    5d10:	cf 01       	movw	r24, r30
    5d12:	08 95       	ret

00005d14 <__divmodsi4>:
    5d14:	97 fb       	bst	r25, 7
    5d16:	09 2e       	mov	r0, r25
    5d18:	05 26       	eor	r0, r21
    5d1a:	0e d0       	rcall	.+28     	; 0x5d38 <__divmodsi4_neg1>
    5d1c:	57 fd       	sbrc	r21, 7
    5d1e:	04 d0       	rcall	.+8      	; 0x5d28 <__divmodsi4_neg2>
    5d20:	d7 df       	rcall	.-82     	; 0x5cd0 <__udivmodsi4>
    5d22:	0a d0       	rcall	.+20     	; 0x5d38 <__divmodsi4_neg1>
    5d24:	00 1c       	adc	r0, r0
    5d26:	38 f4       	brcc	.+14     	; 0x5d36 <__divmodsi4_exit>

00005d28 <__divmodsi4_neg2>:
    5d28:	50 95       	com	r21
    5d2a:	40 95       	com	r20
    5d2c:	30 95       	com	r19
    5d2e:	21 95       	neg	r18
    5d30:	3f 4f       	sbci	r19, 0xFF	; 255
    5d32:	4f 4f       	sbci	r20, 0xFF	; 255
    5d34:	5f 4f       	sbci	r21, 0xFF	; 255

00005d36 <__divmodsi4_exit>:
    5d36:	08 95       	ret

00005d38 <__divmodsi4_neg1>:
    5d38:	f6 f7       	brtc	.-4      	; 0x5d36 <__divmodsi4_exit>
    5d3a:	90 95       	com	r25
    5d3c:	80 95       	com	r24
    5d3e:	70 95       	com	r23
    5d40:	61 95       	neg	r22
    5d42:	7f 4f       	sbci	r23, 0xFF	; 255
    5d44:	8f 4f       	sbci	r24, 0xFF	; 255
    5d46:	9f 4f       	sbci	r25, 0xFF	; 255
    5d48:	08 95       	ret

00005d4a <__prologue_saves__>:
    5d4a:	2f 92       	push	r2
    5d4c:	3f 92       	push	r3
    5d4e:	4f 92       	push	r4
    5d50:	5f 92       	push	r5
    5d52:	6f 92       	push	r6
    5d54:	7f 92       	push	r7
    5d56:	8f 92       	push	r8
    5d58:	9f 92       	push	r9
    5d5a:	af 92       	push	r10
    5d5c:	bf 92       	push	r11
    5d5e:	cf 92       	push	r12
    5d60:	df 92       	push	r13
    5d62:	ef 92       	push	r14
    5d64:	ff 92       	push	r15
    5d66:	0f 93       	push	r16
    5d68:	1f 93       	push	r17
    5d6a:	cf 93       	push	r28
    5d6c:	df 93       	push	r29
    5d6e:	cd b7       	in	r28, 0x3d	; 61
    5d70:	de b7       	in	r29, 0x3e	; 62
    5d72:	ca 1b       	sub	r28, r26
    5d74:	db 0b       	sbc	r29, r27
    5d76:	0f b6       	in	r0, 0x3f	; 63
    5d78:	f8 94       	cli
    5d7a:	de bf       	out	0x3e, r29	; 62
    5d7c:	0f be       	out	0x3f, r0	; 63
    5d7e:	cd bf       	out	0x3d, r28	; 61
    5d80:	09 94       	ijmp

00005d82 <__epilogue_restores__>:
    5d82:	2a 88       	ldd	r2, Y+18	; 0x12
    5d84:	39 88       	ldd	r3, Y+17	; 0x11
    5d86:	48 88       	ldd	r4, Y+16	; 0x10
    5d88:	5f 84       	ldd	r5, Y+15	; 0x0f
    5d8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5d8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5d8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5d90:	9b 84       	ldd	r9, Y+11	; 0x0b
    5d92:	aa 84       	ldd	r10, Y+10	; 0x0a
    5d94:	b9 84       	ldd	r11, Y+9	; 0x09
    5d96:	c8 84       	ldd	r12, Y+8	; 0x08
    5d98:	df 80       	ldd	r13, Y+7	; 0x07
    5d9a:	ee 80       	ldd	r14, Y+6	; 0x06
    5d9c:	fd 80       	ldd	r15, Y+5	; 0x05
    5d9e:	0c 81       	ldd	r16, Y+4	; 0x04
    5da0:	1b 81       	ldd	r17, Y+3	; 0x03
    5da2:	aa 81       	ldd	r26, Y+2	; 0x02
    5da4:	b9 81       	ldd	r27, Y+1	; 0x01
    5da6:	ce 0f       	add	r28, r30
    5da8:	d1 1d       	adc	r29, r1
    5daa:	0f b6       	in	r0, 0x3f	; 63
    5dac:	f8 94       	cli
    5dae:	de bf       	out	0x3e, r29	; 62
    5db0:	0f be       	out	0x3f, r0	; 63
    5db2:	cd bf       	out	0x3d, r28	; 61
    5db4:	ed 01       	movw	r28, r26
    5db6:	08 95       	ret

00005db8 <_exit>:
    5db8:	f8 94       	cli

00005dba <__stop_program>:
    5dba:	ff cf       	rjmp	.-2      	; 0x5dba <__stop_program>
