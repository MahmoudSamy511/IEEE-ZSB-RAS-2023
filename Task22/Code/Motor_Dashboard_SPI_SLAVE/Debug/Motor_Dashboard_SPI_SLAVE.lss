
Motor_Dashboard_SPI_SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005a8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00005a8c  00005b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800098  00800098  00005b58  2**0
                  ALLOC
  3 .stab         00006c90  00000000  00000000  00005b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000259e  00000000  00000000  0000c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000ed86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000eee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000f075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000110ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000121bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00013140  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00013582  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013e10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <__vector_1>
       8:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__vector_2>
       c:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__vector_3>
      10:	0c 94 3a 20 	jmp	0x4074	; 0x4074 <__vector_4>
      14:	0c 94 6d 20 	jmp	0x40da	; 0x40da <__vector_5>
      18:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__vector_6>
      1c:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__vector_7>
      20:	0c 94 06 21 	jmp	0x420c	; 0x420c <__vector_8>
      24:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__vector_9>
      28:	0c 94 6c 21 	jmp	0x42d8	; 0x42d8 <__vector_10>
      2c:	0c 94 9f 21 	jmp	0x433e	; 0x433e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__vector_15>
      40:	0c 94 5c 2c 	jmp	0x58b8	; 0x58b8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 44 2d 	jmp	0x5a88	; 0x5a88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0d 2d 	jmp	0x5a1a	; 0x5a1a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 29 2d 	jmp	0x5a52	; 0x5a52 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 35 2d 	jmp	0x5a6a	; 0x5a6a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 35 2d 	jmp	0x5a6a	; 0x5a6a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0d 2d 	jmp	0x5a1a	; 0x5a1a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 29 2d 	jmp	0x5a52	; 0x5a52 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 15 2d 	jmp	0x5a2a	; 0x5a2a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 31 2d 	jmp	0x5a62	; 0x5a62 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 35 2d 	jmp	0x5a6a	; 0x5a6a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 35 2d 	jmp	0x5a6a	; 0x5a6a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 19 2d 	jmp	0x5a32	; 0x5a32 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 35 2d 	jmp	0x5a6a	; 0x5a6a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1d 2d 	jmp	0x5a3a	; 0x5a3a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 39 2d 	jmp	0x5a72	; 0x5a72 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
//HAL Layer
#include"../2-HAL/DC_Motor/DC_Motor_Interface.h"
#include"../2-HAL/Stepper_Motor/Stepper_Motor_Interface.h"
#include"../2-HAL/Servo_Motor/Servo_Interface.h"

int main(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <main+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <main+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <main+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	u8 Angle = 0 , Data = 0;
     cac:	19 82       	std	Y+1, r1	; 0x01
     cae:	1a 82       	std	Y+2, r1	; 0x02
	SPI_enu_Init();
     cb0:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <SPI_enu_Init>
	DC_Motor_enu_Init(1, 1);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <DC_Motor_enu_Init>
	STEP_Motor_enu_Init();
     cbc:	0e 94 f9 07 	call	0xff2	; 0xff2 <STEP_Motor_enu_Init>
	Servo_enu_Init(0,1);
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <Servo_enu_Init>
	while(1){

		SPI_enu_Transceive(10, &Data);
     cc8:	9e 01       	movw	r18, r28
     cca:	2e 5f       	subi	r18, 0xFE	; 254
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	b9 01       	movw	r22, r18
     cd2:	0e 94 26 22 	call	0x444c	; 0x444c <SPI_enu_Transceive>
		if('1'== Data){
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	81 33       	cpi	r24, 0x31	; 49
     cda:	49 f5       	brne	.+82     	; 0xd2e <main+0x90>
			SPI_enu_Transceive(10, &Data);
     cdc:	9e 01       	movw	r18, r28
     cde:	2e 5f       	subi	r18, 0xFE	; 254
     ce0:	3f 4f       	sbci	r19, 0xFF	; 255
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	b9 01       	movw	r22, r18
     ce6:	0e 94 26 22 	call	0x444c	; 0x444c <SPI_enu_Transceive>
			switch(Data){
     cea:	8a 81       	ldd	r24, Y+2	; 0x02
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3e 83       	std	Y+6, r19	; 0x06
     cf2:	2d 83       	std	Y+5, r18	; 0x05
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	81 33       	cpi	r24, 0x31	; 49
     cfa:	91 05       	cpc	r25, r1
     cfc:	31 f0       	breq	.+12     	; 0xd0a <main+0x6c>
     cfe:	2d 81       	ldd	r18, Y+5	; 0x05
     d00:	3e 81       	ldd	r19, Y+6	; 0x06
     d02:	22 33       	cpi	r18, 0x32	; 50
     d04:	31 05       	cpc	r19, r1
     d06:	51 f0       	breq	.+20     	; 0xd1c <main+0x7e>
     d08:	df cf       	rjmp	.-66     	; 0xcc8 <main+0x2a>
			case '1':
				DC_Motor_enu_Rotate(MOTOR1, CW);
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <DC_Motor_enu_Rotate>
				DC_Motor_enu_Rotate(MOTOR2, CW);
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	61 e0       	ldi	r22, 0x01	; 1
     d16:	0e 94 82 16 	call	0x2d04	; 0x2d04 <DC_Motor_enu_Rotate>
     d1a:	d6 cf       	rjmp	.-84     	; 0xcc8 <main+0x2a>
			break;
			case '2':
				DC_Motor_enu_Rotate(MOTOR1, CCW);
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	0e 94 82 16 	call	0x2d04	; 0x2d04 <DC_Motor_enu_Rotate>
				DC_Motor_enu_Rotate(MOTOR2, CCW);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	0e 94 82 16 	call	0x2d04	; 0x2d04 <DC_Motor_enu_Rotate>
     d2c:	cd cf       	rjmp	.-102    	; 0xcc8 <main+0x2a>
			break;
			}
		}else if ('2'== Data){
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	82 33       	cpi	r24, 0x32	; 50
     d32:	a9 f5       	brne	.+106    	; 0xd9e <main+0x100>
			SPI_enu_Transceive(10, &Data);
     d34:	9e 01       	movw	r18, r28
     d36:	2e 5f       	subi	r18, 0xFE	; 254
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
     d3a:	8a e0       	ldi	r24, 0x0A	; 10
     d3c:	b9 01       	movw	r22, r18
     d3e:	0e 94 26 22 	call	0x444c	; 0x444c <SPI_enu_Transceive>
			switch(Data){
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	3c 83       	std	Y+4, r19	; 0x04
     d4a:	2b 83       	std	Y+3, r18	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	81 33       	cpi	r24, 0x31	; 49
     d52:	91 05       	cpc	r25, r1
     d54:	31 f0       	breq	.+12     	; 0xd62 <main+0xc4>
     d56:	2b 81       	ldd	r18, Y+3	; 0x03
     d58:	3c 81       	ldd	r19, Y+4	; 0x04
     d5a:	22 33       	cpi	r18, 0x32	; 50
     d5c:	31 05       	cpc	r19, r1
     d5e:	81 f0       	breq	.+32     	; 0xd80 <main+0xe2>
     d60:	b3 cf       	rjmp	.-154    	; 0xcc8 <main+0x2a>
			case '1':
				SPI_enu_Transceive(10, &Angle);
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	9e 01       	movw	r18, r28
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 26 22 	call	0x444c	; 0x444c <SPI_enu_Transceive>
				STEP_Motor_enu_Rotate(CW, Angle);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	b9 01       	movw	r22, r18
     d7a:	0e 94 29 08 	call	0x1052	; 0x1052 <STEP_Motor_enu_Rotate>
     d7e:	a4 cf       	rjmp	.-184    	; 0xcc8 <main+0x2a>
				break;
			case '2':
				SPI_enu_Transceive(10, &Angle);
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	9e 01       	movw	r18, r28
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	b9 01       	movw	r22, r18
     d8a:	0e 94 26 22 	call	0x444c	; 0x444c <SPI_enu_Transceive>
				STEP_Motor_enu_Rotate(CW, Angle);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	b9 01       	movw	r22, r18
     d98:	0e 94 29 08 	call	0x1052	; 0x1052 <STEP_Motor_enu_Rotate>
     d9c:	95 cf       	rjmp	.-214    	; 0xcc8 <main+0x2a>
				break;
			}
		}else if ('3'== Data){
     d9e:	8a 81       	ldd	r24, Y+2	; 0x02
     da0:	83 33       	cpi	r24, 0x33	; 51
     da2:	69 f4       	brne	.+26     	; 0xdbe <main+0x120>
			SPI_enu_Transceive(10, &Angle);
     da4:	8a e0       	ldi	r24, 0x0A	; 10
     da6:	9e 01       	movw	r18, r28
     da8:	2f 5f       	subi	r18, 0xFF	; 255
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	b9 01       	movw	r22, r18
     dae:	0e 94 26 22 	call	0x444c	; 0x444c <SPI_enu_Transceive>
			Servo_enu_SetAngle(MOTOR_2, Angle);
     db2:	99 81       	ldd	r25, Y+1	; 0x01
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	69 2f       	mov	r22, r25
     db8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <Servo_enu_SetAngle>
     dbc:	85 cf       	rjmp	.-246    	; 0xcc8 <main+0x2a>
		}else if('4'== Data){
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	84 33       	cpi	r24, 0x34	; 52
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <main+0x128>
     dc4:	81 cf       	rjmp	.-254    	; 0xcc8 <main+0x2a>
			DC_Motor_enu_Stop(MOTOR1);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DC_Motor_enu_Stop>
			DC_Motor_enu_Stop(MOTOR2);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <DC_Motor_enu_Stop>
			STEP_Motor_enu_Stop();
     dd2:	0e 94 ef 09 	call	0x13de	; 0x13de <STEP_Motor_enu_Stop>
			Servo_enu_SetAngle(MOTOR_2,0);
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 0c 0b 	call	0x1618	; 0x1618 <Servo_enu_SetAngle>
     dde:	74 cf       	rjmp	.-280    	; 0xcc8 <main+0x2a>

00000de0 <SW_enu_Init>:
#include "Switch_Config.h"
#include "Switch_Private.h"


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	00 d0       	rcall	.+0      	; 0xde6 <SW_enu_Init+0x6>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <SW_enu_Init+0x8>
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9b 83       	std	Y+3, r25	; 0x03
     dee:	8a 83       	std	Y+2, r24	; 0x02

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
     df0:	19 82       	std	Y+1, r1	; 0x01
     df2:	53 c0       	rjmp	.+166    	; 0xe9a <SW_enu_Init+0xba>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	c9 01       	movw	r24, r18
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	28 0f       	add	r18, r24
     e02:	39 1f       	adc	r19, r25
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	fc 01       	movw	r30, r24
     e0a:	e2 0f       	add	r30, r18
     e0c:	f3 1f       	adc	r31, r19
     e0e:	40 81       	ld	r20, Z
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	c9 01       	movw	r24, r18
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	28 0f       	add	r18, r24
     e1e:	39 1f       	adc	r19, r25
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	9b 81       	ldd	r25, Y+3	; 0x03
     e24:	fc 01       	movw	r30, r24
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	84 2f       	mov	r24, r20
     e2e:	69 2f       	mov	r22, r25
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	c9 01       	movw	r24, r18
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	28 0f       	add	r18, r24
     e44:	39 1f       	adc	r19, r25
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	9b 81       	ldd	r25, Y+3	; 0x03
     e4a:	fc 01       	movw	r30, r24
     e4c:	e2 0f       	add	r30, r18
     e4e:	f3 1f       	adc	r31, r19
     e50:	50 81       	ld	r21, Z
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	c9 01       	movw	r24, r18
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	28 0f       	add	r18, r24
     e60:	39 1f       	adc	r19, r25
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	9b 81       	ldd	r25, Y+3	; 0x03
     e66:	fc 01       	movw	r30, r24
     e68:	e2 0f       	add	r30, r18
     e6a:	f3 1f       	adc	r31, r19
     e6c:	41 81       	ldd	r20, Z+1	; 0x01
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	c9 01       	movw	r24, r18
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	28 0f       	add	r18, r24
     e7c:	39 1f       	adc	r19, r25
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	9b 81       	ldd	r25, Y+3	; 0x03
     e82:	fc 01       	movw	r30, r24
     e84:	e2 0f       	add	r30, r18
     e86:	f3 1f       	adc	r31, r19
     e88:	92 81       	ldd	r25, Z+2	; 0x02
     e8a:	85 2f       	mov	r24, r21
     e8c:	64 2f       	mov	r22, r20
     e8e:	49 2f       	mov	r20, r25
     e90:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 83       	std	Y+1, r24	; 0x01
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	82 30       	cpi	r24, 0x02	; 2
     e9e:	08 f4       	brcc	.+2      	; 0xea2 <SW_enu_Init+0xc2>
     ea0:	a9 cf       	rjmp	.-174    	; 0xdf4 <SW_enu_Init+0x14>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    }

}
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <SW_enu_getValue>:

ES_t SW_enu_getValue(u8 * Copy_u8_Value,SW_t * Copy_Au8_Switchs)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	63 97       	sbiw	r28, 0x13	; 19
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	98 8b       	std	Y+16, r25	; 0x10
     ec6:	8f 87       	std	Y+15, r24	; 0x0f
     ec8:	7a 8b       	std	Y+18, r23	; 0x12
     eca:	69 8b       	std	Y+17, r22	; 0x11

    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
     ecc:	e9 89       	ldd	r30, Y+17	; 0x11
     ece:	fa 89       	ldd	r31, Y+18	; 0x12
     ed0:	80 81       	ld	r24, Z
     ed2:	e9 89       	ldd	r30, Y+17	; 0x11
     ed4:	fa 89       	ldd	r31, Y+18	; 0x12
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	2f 85       	ldd	r18, Y+15	; 0x0f
     eda:	38 89       	ldd	r19, Y+16	; 0x10
     edc:	69 2f       	mov	r22, r25
     ede:	a9 01       	movw	r20, r18
     ee0:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <DIO_enu_GetPinValue>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a8 ec       	ldi	r26, 0xC8	; 200
     eea:	b1 e4       	ldi	r27, 0x41	; 65
     eec:	8b 87       	std	Y+11, r24	; 0x0b
     eee:	9c 87       	std	Y+12, r25	; 0x0c
     ef0:	ad 87       	std	Y+13, r26	; 0x0d
     ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
     efa:	9e 85       	ldd	r25, Y+14	; 0x0e
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	55 e4       	ldi	r21, 0x45	; 69
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8f 83       	std	Y+7, r24	; 0x07
     f0e:	98 87       	std	Y+8, r25	; 0x08
     f10:	a9 87       	std	Y+9, r26	; 0x09
     f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f14:	6f 81       	ldd	r22, Y+7	; 0x07
     f16:	78 85       	ldd	r23, Y+8	; 0x08
     f18:	89 85       	ldd	r24, Y+9	; 0x09
     f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <SW_enu_getValue+0x86>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <SW_enu_getValue+0x104>
	else if (__tmp > 65535)
     f36:	6f 81       	ldd	r22, Y+7	; 0x07
     f38:	78 85       	ldd	r23, Y+8	; 0x08
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <SW_enu_getValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f50:	7c 85       	ldd	r23, Y+12	; 0x0c
     f52:	8d 85       	ldd	r24, Y+13	; 0x0d
     f54:	9e 85       	ldd	r25, Y+14	; 0x0e
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <SW_enu_getValue+0xe6>
     f78:	80 e9       	ldi	r24, 0x90	; 144
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <SW_enu_getValue+0xd4>
     f88:	9c 83       	std	Y+4, r25	; 0x04
     f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	8d 81       	ldd	r24, Y+5	; 0x05
     f8e:	9e 81       	ldd	r25, Y+6	; 0x06
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9e 83       	std	Y+6, r25	; 0x06
     f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	8d 81       	ldd	r24, Y+5	; 0x05
     f98:	9e 81       	ldd	r25, Y+6	; 0x06
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <SW_enu_getValue+0xc8>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <SW_enu_getValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6f 81       	ldd	r22, Y+7	; 0x07
     fa2:	78 85       	ldd	r23, Y+8	; 0x08
     fa4:	89 85       	ldd	r24, Y+9	; 0x09
     fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9e 83       	std	Y+6, r25	; 0x06
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	8d 81       	ldd	r24, Y+5	; 0x05
     fb6:	9e 81       	ldd	r25, Y+6	; 0x06
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <SW_enu_getValue+0x110>
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(25);
    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
     fc8:	e9 89       	ldd	r30, Y+17	; 0x11
     fca:	fa 89       	ldd	r31, Y+18	; 0x12
     fcc:	80 81       	ld	r24, Z
     fce:	e9 89       	ldd	r30, Y+17	; 0x11
     fd0:	fa 89       	ldd	r31, Y+18	; 0x12
     fd2:	91 81       	ldd	r25, Z+1	; 0x01
     fd4:	2f 85       	ldd	r18, Y+15	; 0x0f
     fd6:	38 89       	ldd	r19, Y+16	; 0x10
     fd8:	69 2f       	mov	r22, r25
     fda:	a9 01       	movw	r20, r18
     fdc:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <DIO_enu_GetPinValue>
    
}
     fe0:	63 96       	adiw	r28, 0x13	; 19
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	61 e0       	ldi	r22, 0x01	; 1
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	63 e0       	ldi	r22, 0x03	; 3
    101c:	41 e0       	ldi	r20, 0x01	; 1
    101e:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	63 e0       	ldi	r22, 0x03	; 3
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>

    return STATE_OK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	a5 97       	sbiw	r28, 0x25	; 37
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	8b a3       	std	Y+35, r24	; 0x23
    1068:	7d a3       	std	Y+37, r23	; 0x25
    106a:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1070:	8b a1       	ldd	r24, Y+35	; 0x23
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	21 f0       	breq	.+8      	; 0x107e <STEP_Motor_enu_Rotate+0x2c>
    1076:	8b a1       	ldd	r24, Y+35	; 0x23
    1078:	88 23       	and	r24, r24
    107a:	09 f0       	breq	.+2      	; 0x107e <STEP_Motor_enu_Rotate+0x2c>
    107c:	a5 c1       	rjmp	.+842    	; 0x13c8 <STEP_Motor_enu_Rotate+0x376>
    107e:	8c a1       	ldd	r24, Y+36	; 0x24
    1080:	9d a1       	ldd	r25, Y+37	; 0x25
    1082:	21 e0       	ldi	r18, 0x01	; 1
    1084:	89 36       	cpi	r24, 0x69	; 105
    1086:	92 07       	cpc	r25, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <STEP_Motor_enu_Rotate+0x3a>
    108a:	9e c1       	rjmp	.+828    	; 0x13c8 <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    108c:	8f e0       	ldi	r24, 0x0F	; 15
    108e:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1090:	8c a1       	ldd	r24, Y+36	; 0x24
    1092:	9d a1       	ldd	r25, Y+37	; 0x25
    1094:	2a e5       	ldi	r18, 0x5A	; 90
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	b9 01       	movw	r22, r18
    109a:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__udivmodhi4>
    109e:	cb 01       	movw	r24, r22
    10a0:	98 a3       	std	Y+32, r25	; 0x20
    10a2:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    10a4:	8b a1       	ldd	r24, Y+35	; 0x23
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	09 f0       	breq	.+2      	; 0x10ac <STEP_Motor_enu_Rotate+0x5a>
    10aa:	c5 c0       	rjmp	.+394    	; 0x1236 <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    10ac:	1e 8e       	std	Y+30, r1	; 0x1e
    10ae:	b9 c0       	rjmp	.+370    	; 0x1222 <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    10b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9c 01       	movw	r18, r24
    10b8:	23 70       	andi	r18, 0x03	; 3
    10ba:	30 70       	andi	r19, 0x00	; 0
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <STEP_Motor_enu_Rotate+0x76>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <STEP_Motor_enu_Rotate+0x72>
    10cc:	98 2f       	mov	r25, r24
    10ce:	89 a1       	ldd	r24, Y+33	; 0x21
    10d0:	89 23       	and	r24, r25
    10d2:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    10d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	83 70       	andi	r24, 0x03	; 3
    10dc:	90 70       	andi	r25, 0x00	; 0
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	11 f4       	brne	.+4      	; 0x10e8 <STEP_Motor_enu_Rotate+0x96>
    10e4:	89 e0       	ldi	r24, 0x09	; 9
    10e6:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    10e8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ea:	98 2f       	mov	r25, r24
    10ec:	91 70       	andi	r25, 0x01	; 1
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	63 e0       	ldi	r22, 0x03	; 3
    10f2:	49 2f       	mov	r20, r25
    10f4:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    10f8:	89 a1       	ldd	r24, Y+33	; 0x21
    10fa:	86 95       	lsr	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	91 70       	andi	r25, 0x01	; 1
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	62 e0       	ldi	r22, 0x02	; 2
    1104:	49 2f       	mov	r20, r25
    1106:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    110a:	89 a1       	ldd	r24, Y+33	; 0x21
    110c:	86 95       	lsr	r24
    110e:	86 95       	lsr	r24
    1110:	98 2f       	mov	r25, r24
    1112:	91 70       	andi	r25, 0x01	; 1
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	49 2f       	mov	r20, r25
    111a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    111e:	89 a1       	ldd	r24, Y+33	; 0x21
    1120:	86 95       	lsr	r24
    1122:	86 95       	lsr	r24
    1124:	86 95       	lsr	r24
    1126:	98 2f       	mov	r25, r24
    1128:	91 70       	andi	r25, 0x01	; 1
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	49 2f       	mov	r20, r25
    1130:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	aa ef       	ldi	r26, 0xFA	; 250
    113a:	b2 e4       	ldi	r27, 0x42	; 66
    113c:	89 8f       	std	Y+25, r24	; 0x19
    113e:	9a 8f       	std	Y+26, r25	; 0x1a
    1140:	ab 8f       	std	Y+27, r26	; 0x1b
    1142:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1144:	69 8d       	ldd	r22, Y+25	; 0x19
    1146:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1148:	8b 8d       	ldd	r24, Y+27	; 0x1b
    114a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	4a e7       	ldi	r20, 0x7A	; 122
    1152:	55 e4       	ldi	r21, 0x45	; 69
    1154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8d 8b       	std	Y+21, r24	; 0x15
    115e:	9e 8b       	std	Y+22, r25	; 0x16
    1160:	af 8b       	std	Y+23, r26	; 0x17
    1162:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1164:	6d 89       	ldd	r22, Y+21	; 0x15
    1166:	7e 89       	ldd	r23, Y+22	; 0x16
    1168:	8f 89       	ldd	r24, Y+23	; 0x17
    116a:	98 8d       	ldd	r25, Y+24	; 0x18
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5f e3       	ldi	r21, 0x3F	; 63
    1174:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1178:	88 23       	and	r24, r24
    117a:	2c f4       	brge	.+10     	; 0x1186 <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9c 8b       	std	Y+20, r25	; 0x14
    1182:	8b 8b       	std	Y+19, r24	; 0x13
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    1186:	6d 89       	ldd	r22, Y+21	; 0x15
    1188:	7e 89       	ldd	r23, Y+22	; 0x16
    118a:	8f 89       	ldd	r24, Y+23	; 0x17
    118c:	98 8d       	ldd	r25, Y+24	; 0x18
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	4c f5       	brge	.+82     	; 0x11f0 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119e:	69 8d       	ldd	r22, Y+25	; 0x19
    11a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e2       	ldi	r20, 0x20	; 32
    11ac:	51 e4       	ldi	r21, 0x41	; 65
    11ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	9c 8b       	std	Y+20, r25	; 0x14
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <STEP_Motor_enu_Rotate+0x194>
    11c8:	80 e9       	ldi	r24, 0x90	; 144
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	9a 8b       	std	Y+18, r25	; 0x12
    11ce:	89 8b       	std	Y+17, r24	; 0x11
    11d0:	89 89       	ldd	r24, Y+17	; 0x11
    11d2:	9a 89       	ldd	r25, Y+18	; 0x12
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <STEP_Motor_enu_Rotate+0x182>
    11d8:	9a 8b       	std	Y+18, r25	; 0x12
    11da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11dc:	8b 89       	ldd	r24, Y+19	; 0x13
    11de:	9c 89       	ldd	r25, Y+20	; 0x14
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	9c 8b       	std	Y+20, r25	; 0x14
    11e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	8b 89       	ldd	r24, Y+19	; 0x13
    11e8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	69 f7       	brne	.-38     	; 0x11c8 <STEP_Motor_enu_Rotate+0x176>
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f0:	6d 89       	ldd	r22, Y+21	; 0x15
    11f2:	7e 89       	ldd	r23, Y+22	; 0x16
    11f4:	8f 89       	ldd	r24, Y+23	; 0x17
    11f6:	98 8d       	ldd	r25, Y+24	; 0x18
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9c 8b       	std	Y+20, r25	; 0x14
    1202:	8b 8b       	std	Y+19, r24	; 0x13
    1204:	8b 89       	ldd	r24, Y+19	; 0x13
    1206:	9c 89       	ldd	r25, Y+20	; 0x14
    1208:	98 8b       	std	Y+16, r25	; 0x10
    120a:	8f 87       	std	Y+15, r24	; 0x0f
    120c:	8f 85       	ldd	r24, Y+15	; 0x0f
    120e:	98 89       	ldd	r25, Y+16	; 0x10
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <STEP_Motor_enu_Rotate+0x1be>
    1214:	98 8b       	std	Y+16, r25	; 0x10
    1216:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    1218:	8f e0       	ldi	r24, 0x0F	; 15
    121a:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    121c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    121e:	8f 5f       	subi	r24, 0xFF	; 255
    1220:	8e 8f       	std	Y+30, r24	; 0x1e
    1222:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8f 8d       	ldd	r24, Y+31	; 0x1f
    122a:	98 a1       	ldd	r25, Y+32	; 0x20
    122c:	28 17       	cp	r18, r24
    122e:	39 07       	cpc	r19, r25
    1230:	08 f4       	brcc	.+2      	; 0x1234 <STEP_Motor_enu_Rotate+0x1e2>
    1232:	3e cf       	rjmp	.-388    	; 0x10b0 <STEP_Motor_enu_Rotate+0x5e>
    1234:	ca c0       	rjmp	.+404    	; 0x13ca <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    1236:	8b a1       	ldd	r24, Y+35	; 0x23
    1238:	88 23       	and	r24, r24
    123a:	09 f0       	breq	.+2      	; 0x123e <STEP_Motor_enu_Rotate+0x1ec>
    123c:	c6 c0       	rjmp	.+396    	; 0x13ca <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    123e:	1d 8e       	std	Y+29, r1	; 0x1d
    1240:	b9 c0       	rjmp	.+370    	; 0x13b4 <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9c 01       	movw	r18, r24
    124a:	23 70       	andi	r18, 0x03	; 3
    124c:	30 70       	andi	r19, 0x00	; 0
    124e:	83 e0       	ldi	r24, 0x03	; 3
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <STEP_Motor_enu_Rotate+0x208>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <STEP_Motor_enu_Rotate+0x204>
    125e:	98 2f       	mov	r25, r24
    1260:	89 a1       	ldd	r24, Y+33	; 0x21
    1262:	89 23       	and	r24, r25
    1264:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1266:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	83 70       	andi	r24, 0x03	; 3
    126e:	90 70       	andi	r25, 0x00	; 0
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	11 f4       	brne	.+4      	; 0x127a <STEP_Motor_enu_Rotate+0x228>
    1276:	89 e0       	ldi	r24, 0x09	; 9
    1278:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    127a:	89 a1       	ldd	r24, Y+33	; 0x21
    127c:	98 2f       	mov	r25, r24
    127e:	91 70       	andi	r25, 0x01	; 1
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	49 2f       	mov	r20, r25
    1286:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    128a:	89 a1       	ldd	r24, Y+33	; 0x21
    128c:	86 95       	lsr	r24
    128e:	98 2f       	mov	r25, r24
    1290:	91 70       	andi	r25, 0x01	; 1
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	49 2f       	mov	r20, r25
    1298:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    129c:	89 a1       	ldd	r24, Y+33	; 0x21
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	98 2f       	mov	r25, r24
    12a4:	91 70       	andi	r25, 0x01	; 1
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	62 e0       	ldi	r22, 0x02	; 2
    12aa:	49 2f       	mov	r20, r25
    12ac:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    12b0:	89 a1       	ldd	r24, Y+33	; 0x21
    12b2:	86 95       	lsr	r24
    12b4:	86 95       	lsr	r24
    12b6:	86 95       	lsr	r24
    12b8:	98 2f       	mov	r25, r24
    12ba:	91 70       	andi	r25, 0x01	; 1
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	63 e0       	ldi	r22, 0x03	; 3
    12c0:	49 2f       	mov	r20, r25
    12c2:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	aa ef       	ldi	r26, 0xFA	; 250
    12cc:	b2 e4       	ldi	r27, 0x42	; 66
    12ce:	8b 87       	std	Y+11, r24	; 0x0b
    12d0:	9c 87       	std	Y+12, r25	; 0x0c
    12d2:	ad 87       	std	Y+13, r26	; 0x0d
    12d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a e7       	ldi	r20, 0x7A	; 122
    12e4:	55 e4       	ldi	r21, 0x45	; 69
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8f 83       	std	Y+7, r24	; 0x07
    12f0:	98 87       	std	Y+8, r25	; 0x08
    12f2:	a9 87       	std	Y+9, r26	; 0x09
    12f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f6:	6f 81       	ldd	r22, Y+7	; 0x07
    12f8:	78 85       	ldd	r23, Y+8	; 0x08
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	2c f4       	brge	.+10     	; 0x1318 <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	4c f5       	brge	.+82     	; 0x1382 <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	51 e4       	ldi	r21, 0x41	; 65
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <STEP_Motor_enu_Rotate+0x326>
    135a:	80 e9       	ldi	r24, 0x90	; 144
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <STEP_Motor_enu_Rotate+0x314>
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	69 f7       	brne	.-38     	; 0x135a <STEP_Motor_enu_Rotate+0x308>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <STEP_Motor_enu_Rotate+0x350>
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    13aa:	8f e0       	ldi	r24, 0x0F	; 15
    13ac:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    13ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b0:	8f 5f       	subi	r24, 0xFF	; 255
    13b2:	8d 8f       	std	Y+29, r24	; 0x1d
    13b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13bc:	98 a1       	ldd	r25, Y+32	; 0x20
    13be:	28 17       	cp	r18, r24
    13c0:	39 07       	cpc	r19, r25
    13c2:	08 f4       	brcc	.+2      	; 0x13c6 <STEP_Motor_enu_Rotate+0x374>
    13c4:	3e cf       	rjmp	.-388    	; 0x1242 <STEP_Motor_enu_Rotate+0x1f0>
    13c6:	01 c0       	rjmp	.+2      	; 0x13ca <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    13c8:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    13ca:	8a a1       	ldd	r24, Y+34	; 0x22
}
    13cc:	a5 96       	adiw	r28, 0x25	; 37
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	2e 97       	sbiw	r28, 0x0e	; 14
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	62 e0       	ldi	r22, 0x02	; 2
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	63 e0       	ldi	r22, 0x03	; 3
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	aa ef       	ldi	r26, 0xFA	; 250
    1420:	b2 e4       	ldi	r27, 0x42	; 66
    1422:	8b 87       	std	Y+11, r24	; 0x0b
    1424:	9c 87       	std	Y+12, r25	; 0x0c
    1426:	ad 87       	std	Y+13, r26	; 0x0d
    1428:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	6b 85       	ldd	r22, Y+11	; 0x0b
    142c:	7c 85       	ldd	r23, Y+12	; 0x0c
    142e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1430:	9e 85       	ldd	r25, Y+14	; 0x0e
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	4a e7       	ldi	r20, 0x7A	; 122
    1438:	55 e4       	ldi	r21, 0x45	; 69
    143a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8f 83       	std	Y+7, r24	; 0x07
    1444:	98 87       	std	Y+8, r25	; 0x08
    1446:	a9 87       	std	Y+9, r26	; 0x09
    1448:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	2c f4       	brge	.+10     	; 0x146c <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	3f c0       	rjmp	.+126    	; 0x14ea <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    146c:	6f 81       	ldd	r22, Y+7	; 0x07
    146e:	78 85       	ldd	r23, Y+8	; 0x08
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	4c f5       	brge	.+82     	; 0x14d6 <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1484:	6b 85       	ldd	r22, Y+11	; 0x0b
    1486:	7c 85       	ldd	r23, Y+12	; 0x0c
    1488:	8d 85       	ldd	r24, Y+13	; 0x0d
    148a:	9e 85       	ldd	r25, Y+14	; 0x0e
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	0f c0       	rjmp	.+30     	; 0x14cc <STEP_Motor_enu_Stop+0xee>
    14ae:	80 e9       	ldi	r24, 0x90	; 144
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <STEP_Motor_enu_Stop+0xdc>
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c2:	8d 81       	ldd	r24, Y+5	; 0x05
    14c4:	9e 81       	ldd	r25, Y+6	; 0x06
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	9e 83       	std	Y+6, r25	; 0x06
    14ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	69 f7       	brne	.-38     	; 0x14ae <STEP_Motor_enu_Stop+0xd0>
    14d4:	14 c0       	rjmp	.+40     	; 0x14fe <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d6:	6f 81       	ldd	r22, Y+7	; 0x07
    14d8:	78 85       	ldd	r23, Y+8	; 0x08
    14da:	89 85       	ldd	r24, Y+9	; 0x09
    14dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	8d 83       	std	Y+5, r24	; 0x05
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	9a 81       	ldd	r25, Y+2	; 0x02
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <STEP_Motor_enu_Stop+0x118>
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
}
    1500:	2e 96       	adiw	r28, 0x0e	; 14
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <sevenSeg_enu_displayNum+0x6>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    1520:	82 e0       	ldi	r24, 0x02	; 2
    1522:	66 e0       	ldi	r22, 0x06	; 6
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	0e 94 8b 29 	call	0x5316	; 0x5316 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	8a 30       	cpi	r24, 0x0A	; 10
    153a:	78 f5       	brcc	.+94     	; 0x159a <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	66 e0       	ldi	r22, 0x06	; 6
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1546:	19 82       	std	Y+1, r1	; 0x01
    1548:	24 c0       	rjmp	.+72     	; 0x1592 <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	fc 01       	movw	r30, r24
    1552:	e8 58       	subi	r30, 0x88	; 136
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	40 81       	ld	r20, Z
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	fc 01       	movw	r30, r24
    1560:	e2 59       	subi	r30, 0x92	; 146
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	80 81       	ld	r24, Z
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	88 2f       	mov	r24, r24
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	b9 01       	movw	r22, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <sevenSeg_enu_displayNum+0x66>
    1574:	75 95       	asr	r23
    1576:	67 95       	ror	r22
    1578:	8a 95       	dec	r24
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <sevenSeg_enu_displayNum+0x62>
    157c:	cb 01       	movw	r24, r22
    157e:	98 2f       	mov	r25, r24
    1580:	91 70       	andi	r25, 0x01	; 1
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	64 2f       	mov	r22, r20
    1586:	49 2f       	mov	r20, r25
    1588:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	8f 5f       	subi	r24, 0xFF	; 255
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	87 30       	cpi	r24, 0x07	; 7
    1596:	c8 f2       	brcs	.-78     	; 0x154a <sevenSeg_enu_displayNum+0x38>
    1598:	01 c0       	rjmp	.+2      	; 0x159c <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    159a:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <Servo_enu_Init>:
#include"../../1-MCAL/Timers/Timer_Interface.h"

#include"Servo_Config.h"
#include"Servo_Private.h"

ES_t Servo_enu_Init(u8 Copy_Motor_PD4_State,u8 Copy_Motor_PD5_State){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <Servo_enu_Init+0x6>
    15b0:	0f 92       	push	r0
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_Motor_PD4_State<2)&&(Copy_Motor_PD5_State<2)){
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	10 f5       	brcc	.+68     	; 0x1608 <Servo_enu_Init+0x5e>
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	f8 f4       	brcc	.+62     	; 0x1608 <Servo_enu_Init+0x5e>
        if(Copy_Motor_PD4_State == CONNECTED){
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	51 f4       	brne	.+20     	; 0x15e4 <Servo_enu_Init+0x3a>
            DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN4, DIO_U8_OUTPUT);
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	64 e0       	ldi	r22, 0x04	; 4
    15d4:	41 e0       	ldi	r20, 0x01	; 1
    15d6:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
            Timers_enu_Init(TIMER1, FAST_PWM_NON_INVERTING_COMB, CLK_8);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	68 e0       	ldi	r22, 0x08	; 8
    15de:	42 e0       	ldi	r20, 0x02	; 2
    15e0:	0e 94 87 19 	call	0x330e	; 0x330e <Timers_enu_Init>
        }
        if(Copy_Motor_PD5_State == CONNECTED){
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	51 f4       	brne	.+20     	; 0x15fe <Servo_enu_Init+0x54>
            DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN5, DIO_U8_OUTPUT);
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	65 e0       	ldi	r22, 0x05	; 5
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
            Timers_enu_Init(TIMER1, FAST_PWM_NON_INVERTING_COMA, CLK_8);
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	67 e0       	ldi	r22, 0x07	; 7
    15f8:	42 e0       	ldi	r20, 0x02	; 2
    15fa:	0e 94 87 19 	call	0x330e	; 0x330e <Timers_enu_Init>
        }
        Timers_enu_Timer1_setTopValue(SERVO_COMPLETE_CYCLE_TICKS - 1);
    15fe:	8f e3       	ldi	r24, 0x3F	; 63
    1600:	9c e9       	ldi	r25, 0x9C	; 156
    1602:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <Timers_enu_Timer1_setTopValue>
    1606:	01 c0       	rjmp	.+2      	; 0x160a <Servo_enu_Init+0x60>
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    1608:	19 82       	std	Y+1, r1	; 0x01
    }
    return STATE_NOT_OK;
    160a:	80 e0       	ldi	r24, 0x00	; 0
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <Servo_enu_SetAngle>:
ES_t Servo_enu_SetAngle(u8 Copy_Motor,u8 Copy_u8_Angle){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	27 97       	sbiw	r28, 0x07	; 7
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	f8 94       	cli
    1626:	de bf       	out	0x3e, r29	; 62
    1628:	0f be       	out	0x3f, r0	; 63
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	8c 83       	std	Y+4, r24	; 0x04
    162e:	6d 83       	std	Y+5, r22	; 0x05
    ES_t Local_u8_errorState = STATE_OK;
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	8b 83       	std	Y+3, r24	; 0x03
    if((Copy_Motor<=NUM_OF_MOTORS)&&(Copy_u8_Angle<=SERVO_MAX_ANGLE)){
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	83 30       	cpi	r24, 0x03	; 3
    1638:	08 f0       	brcs	.+2      	; 0x163c <Servo_enu_SetAngle+0x24>
    163a:	46 c0       	rjmp	.+140    	; 0x16c8 <Servo_enu_SetAngle+0xb0>
    163c:	8d 81       	ldd	r24, Y+5	; 0x05
    163e:	85 3b       	cpi	r24, 0xB5	; 181
    1640:	08 f0       	brcs	.+2      	; 0x1644 <Servo_enu_SetAngle+0x2c>
    1642:	42 c0       	rjmp	.+132    	; 0x16c8 <Servo_enu_SetAngle+0xb0>
        u16 Servo_u16_OCR_Value = ((SERVO_MIN_TIME+(Copy_u8_Angle*SERVO_MIN_TIME)/SERVO_MAX_ANGLE)*2)-1;
    1644:	8d 81       	ldd	r24, Y+5	; 0x05
    1646:	88 2f       	mov	r24, r24
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	28 ee       	ldi	r18, 0xE8	; 232
    1650:	33 e0       	ldi	r19, 0x03	; 3
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 9d 2c 	call	0x593a	; 0x593a <__mulsi3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	24 eb       	ldi	r18, 0xB4	; 180
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	50 e0       	ldi	r21, 0x00	; 0
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__udivmodsi4>
    1672:	da 01       	movw	r26, r20
    1674:	c9 01       	movw	r24, r18
    1676:	88 51       	subi	r24, 0x18	; 24
    1678:	9c 4f       	sbci	r25, 0xFC	; 252
    167a:	af 4f       	sbci	r26, 0xFF	; 255
    167c:	bf 4f       	sbci	r27, 0xFF	; 255
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	aa 1f       	adc	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
        switch (Copy_Motor)
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	3f 83       	std	Y+7, r19	; 0x07
    1694:	2e 83       	std	Y+6, r18	; 0x06
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9f 81       	ldd	r25, Y+7	; 0x07
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	31 f0       	breq	.+12     	; 0x16ac <Servo_enu_SetAngle+0x94>
    16a0:	2e 81       	ldd	r18, Y+6	; 0x06
    16a2:	3f 81       	ldd	r19, Y+7	; 0x07
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	41 f0       	breq	.+16     	; 0x16ba <Servo_enu_SetAngle+0xa2>
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <Servo_enu_SetAngle+0xb2>
        {
        case MOTOR_1:Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_B,Servo_u16_OCR_Value); break;
    16ac:	29 81       	ldd	r18, Y+1	; 0x01
    16ae:	3a 81       	ldd	r19, Y+2	; 0x02
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	b9 01       	movw	r22, r18
    16b4:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <Timers_enu_Timer1SetCompareValue>
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <Servo_enu_SetAngle+0xb2>
        case MOTOR_2:Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_A,Servo_u16_OCR_Value); break;
    16ba:	29 81       	ldd	r18, Y+1	; 0x01
    16bc:	3a 81       	ldd	r19, Y+2	; 0x02
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	b9 01       	movw	r22, r18
    16c2:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <Timers_enu_Timer1SetCompareValue>
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <Servo_enu_SetAngle+0xb2>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    16c8:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16cc:	27 96       	adiw	r28, 0x07	; 7
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	de bf       	out	0x3e, r29	; 62
    16d4:	0f be       	out	0x3f, r0	; 63
    16d6:	cd bf       	out	0x3d, r28	; 61
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <Servos_enu_Stop>:
ES_t Servos_enu_Stop(void){
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    Timers_enu_Stop(TIMER1);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <Timers_enu_Stop>
    return STATE_OK;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <LCD_enu_SendCmnd>:
#include "../../1-MCAL/DIO/DIO_interface.h"
/*HAL*/
#include "../../2-HAL/LCD/LCD_Private.h"
#include "../../2-HAL/LCD/LCD_Config.h"
ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	e1 97       	sbiw	r28, 0x31	; 49
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	89 ab       	std	Y+49, r24	; 0x31
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
    /* RS = 0 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_LOW);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /*Write Command*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_7BIT) & MASK_BIT);
    171e:	89 a9       	ldd	r24, Y+49	; 0x31
    1720:	98 2f       	mov	r25, r24
    1722:	99 1f       	adc	r25, r25
    1724:	99 27       	eor	r25, r25
    1726:	99 1f       	adc	r25, r25
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	66 e0       	ldi	r22, 0x06	; 6
    172c:	49 2f       	mov	r20, r25
    172e:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_6BIT) & MASK_BIT);
    1732:	89 a9       	ldd	r24, Y+49	; 0x31
    1734:	82 95       	swap	r24
    1736:	86 95       	lsr	r24
    1738:	86 95       	lsr	r24
    173a:	83 70       	andi	r24, 0x03	; 3
    173c:	98 2f       	mov	r25, r24
    173e:	91 70       	andi	r25, 0x01	; 1
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	49 2f       	mov	r20, r25
    1746:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_5BIT) & MASK_BIT);
    174a:	89 a9       	ldd	r24, Y+49	; 0x31
    174c:	82 95       	swap	r24
    174e:	86 95       	lsr	r24
    1750:	87 70       	andi	r24, 0x07	; 7
    1752:	98 2f       	mov	r25, r24
    1754:	91 70       	andi	r25, 0x01	; 1
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	64 e0       	ldi	r22, 0x04	; 4
    175a:	49 2f       	mov	r20, r25
    175c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_4BIT) & MASK_BIT);
    1760:	89 a9       	ldd	r24, Y+49	; 0x31
    1762:	82 95       	swap	r24
    1764:	8f 70       	andi	r24, 0x0F	; 15
    1766:	98 2f       	mov	r25, r24
    1768:	91 70       	andi	r25, 0x01	; 1
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	63 e0       	ldi	r22, 0x03	; 3
    176e:	49 2f       	mov	r20, r25
    1770:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	62 e0       	ldi	r22, 0x02	; 2
    1778:	41 e0       	ldi	r20, 0x01	; 1
    177a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e8       	ldi	r26, 0x80	; 128
    1784:	bf e3       	ldi	r27, 0x3F	; 63
    1786:	8d a7       	std	Y+45, r24	; 0x2d
    1788:	9e a7       	std	Y+46, r25	; 0x2e
    178a:	af a7       	std	Y+47, r26	; 0x2f
    178c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    178e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1790:	7e a5       	ldd	r23, Y+46	; 0x2e
    1792:	8f a5       	ldd	r24, Y+47	; 0x2f
    1794:	98 a9       	ldd	r25, Y+48	; 0x30
    1796:	2b ea       	ldi	r18, 0xAB	; 171
    1798:	3a ea       	ldi	r19, 0xAA	; 170
    179a:	4a ea       	ldi	r20, 0xAA	; 170
    179c:	50 e4       	ldi	r21, 0x40	; 64
    179e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	89 a7       	std	Y+41, r24	; 0x29
    17a8:	9a a7       	std	Y+42, r25	; 0x2a
    17aa:	ab a7       	std	Y+43, r26	; 0x2b
    17ac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    17ae:	69 a5       	ldd	r22, Y+41	; 0x29
    17b0:	7a a5       	ldd	r23, Y+42	; 0x2a
    17b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e8       	ldi	r20, 0x80	; 128
    17bc:	5f e3       	ldi	r21, 0x3F	; 63
    17be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c2:	88 23       	and	r24, r24
    17c4:	1c f4       	brge	.+6      	; 0x17cc <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	88 a7       	std	Y+40, r24	; 0x28
    17ca:	91 c0       	rjmp	.+290    	; 0x18ee <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    17cc:	69 a5       	ldd	r22, Y+41	; 0x29
    17ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    17d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	4f e7       	ldi	r20, 0x7F	; 127
    17da:	53 e4       	ldi	r21, 0x43	; 67
    17dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17e0:	18 16       	cp	r1, r24
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <LCD_enu_SendCmnd+0xf2>
    17e4:	7b c0       	rjmp	.+246    	; 0x18dc <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    17e6:	6d a5       	ldd	r22, Y+45	; 0x2d
    17e8:	7e a5       	ldd	r23, Y+46	; 0x2e
    17ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ec:	98 a9       	ldd	r25, Y+48	; 0x30
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	4a e7       	ldi	r20, 0x7A	; 122
    17f4:	54 e4       	ldi	r21, 0x44	; 68
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8c a3       	std	Y+36, r24	; 0x24
    1800:	9d a3       	std	Y+37, r25	; 0x25
    1802:	ae a3       	std	Y+38, r26	; 0x26
    1804:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6c a1       	ldd	r22, Y+36	; 0x24
    1808:	7d a1       	ldd	r23, Y+37	; 0x25
    180a:	8e a1       	ldd	r24, Y+38	; 0x26
    180c:	9f a1       	ldd	r25, Y+39	; 0x27
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a e7       	ldi	r20, 0x7A	; 122
    1814:	55 e4       	ldi	r21, 0x45	; 69
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	88 a3       	std	Y+32, r24	; 0x20
    1820:	99 a3       	std	Y+33, r25	; 0x21
    1822:	aa a3       	std	Y+34, r26	; 0x22
    1824:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1826:	68 a1       	ldd	r22, Y+32	; 0x20
    1828:	79 a1       	ldd	r23, Y+33	; 0x21
    182a:	8a a1       	ldd	r24, Y+34	; 0x22
    182c:	9b a1       	ldd	r25, Y+35	; 0x23
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9f 8f       	std	Y+31, r25	; 0x1f
    1844:	8e 8f       	std	Y+30, r24	; 0x1e
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1848:	68 a1       	ldd	r22, Y+32	; 0x20
    184a:	79 a1       	ldd	r23, Y+33	; 0x21
    184c:	8a a1       	ldd	r24, Y+34	; 0x22
    184e:	9b a1       	ldd	r25, Y+35	; 0x23
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6c a1       	ldd	r22, Y+36	; 0x24
    1862:	7d a1       	ldd	r23, Y+37	; 0x25
    1864:	8e a1       	ldd	r24, Y+38	; 0x26
    1866:	9f a1       	ldd	r25, Y+39	; 0x27
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9f 8f       	std	Y+31, r25	; 0x1f
    1886:	8e 8f       	std	Y+30, r24	; 0x1e
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <LCD_enu_SendCmnd+0x1b4>
    188a:	80 e9       	ldi	r24, 0x90	; 144
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	9d 8f       	std	Y+29, r25	; 0x1d
    1890:	8c 8f       	std	Y+28, r24	; 0x1c
    1892:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1894:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <LCD_enu_SendCmnd+0x1a2>
    189a:	9d 8f       	std	Y+29, r25	; 0x1d
    189c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18a0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9f 8f       	std	Y+31, r25	; 0x1f
    18a6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <LCD_enu_SendCmnd+0x196>
    18b0:	24 c0       	rjmp	.+72     	; 0x18fa <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	68 a1       	ldd	r22, Y+32	; 0x20
    18b4:	79 a1       	ldd	r23, Y+33	; 0x21
    18b6:	8a a1       	ldd	r24, Y+34	; 0x22
    18b8:	9b a1       	ldd	r25, Y+35	; 0x23
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9f 8f       	std	Y+31, r25	; 0x1f
    18c4:	8e 8f       	std	Y+30, r24	; 0x1e
    18c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    18ca:	9b 8f       	std	Y+27, r25	; 0x1b
    18cc:	8a 8f       	std	Y+26, r24	; 0x1a
    18ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    18d0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <LCD_enu_SendCmnd+0x1de>
    18d6:	9b 8f       	std	Y+27, r25	; 0x1b
    18d8:	8a 8f       	std	Y+26, r24	; 0x1a
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18dc:	69 a5       	ldd	r22, Y+41	; 0x29
    18de:	7a a5       	ldd	r23, Y+42	; 0x2a
    18e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	88 a7       	std	Y+40, r24	; 0x28
    18ee:	88 a5       	ldd	r24, Y+40	; 0x28
    18f0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18f2:	89 8d       	ldd	r24, Y+25	; 0x19
    18f4:	8a 95       	dec	r24
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_enu_SendCmnd+0x200>
    18f8:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	62 e0       	ldi	r22, 0x02	; 2
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /*Write the rest of the cmnd*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_3BIT) & MASK_BIT);
    1904:	89 a9       	ldd	r24, Y+49	; 0x31
    1906:	86 95       	lsr	r24
    1908:	86 95       	lsr	r24
    190a:	86 95       	lsr	r24
    190c:	98 2f       	mov	r25, r24
    190e:	91 70       	andi	r25, 0x01	; 1
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	66 e0       	ldi	r22, 0x06	; 6
    1914:	49 2f       	mov	r20, r25
    1916:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_2BIT) & MASK_BIT);
    191a:	89 a9       	ldd	r24, Y+49	; 0x31
    191c:	86 95       	lsr	r24
    191e:	86 95       	lsr	r24
    1920:	98 2f       	mov	r25, r24
    1922:	91 70       	andi	r25, 0x01	; 1
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	49 2f       	mov	r20, r25
    192a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_1BIT) & MASK_BIT);
    192e:	89 a9       	ldd	r24, Y+49	; 0x31
    1930:	86 95       	lsr	r24
    1932:	98 2f       	mov	r25, r24
    1934:	91 70       	andi	r25, 0x01	; 1
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	64 e0       	ldi	r22, 0x04	; 4
    193a:	49 2f       	mov	r20, r25
    193c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_0BIT) & MASK_BIT);
    1940:	89 a9       	ldd	r24, Y+49	; 0x31
    1942:	98 2f       	mov	r25, r24
    1944:	91 70       	andi	r25, 0x01	; 1
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	63 e0       	ldi	r22, 0x03	; 3
    194a:	49 2f       	mov	r20, r25
    194c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	62 e0       	ldi	r22, 0x02	; 2
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e8       	ldi	r26, 0x80	; 128
    1960:	bf e3       	ldi	r27, 0x3F	; 63
    1962:	8d 8b       	std	Y+21, r24	; 0x15
    1964:	9e 8b       	std	Y+22, r25	; 0x16
    1966:	af 8b       	std	Y+23, r26	; 0x17
    1968:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    196a:	6d 89       	ldd	r22, Y+21	; 0x15
    196c:	7e 89       	ldd	r23, Y+22	; 0x16
    196e:	8f 89       	ldd	r24, Y+23	; 0x17
    1970:	98 8d       	ldd	r25, Y+24	; 0x18
    1972:	2b ea       	ldi	r18, 0xAB	; 171
    1974:	3a ea       	ldi	r19, 0xAA	; 170
    1976:	4a ea       	ldi	r20, 0xAA	; 170
    1978:	50 e4       	ldi	r21, 0x40	; 64
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	89 8b       	std	Y+17, r24	; 0x11
    1984:	9a 8b       	std	Y+18, r25	; 0x12
    1986:	ab 8b       	std	Y+19, r26	; 0x13
    1988:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    198a:	69 89       	ldd	r22, Y+17	; 0x11
    198c:	7a 89       	ldd	r23, Y+18	; 0x12
    198e:	8b 89       	ldd	r24, Y+19	; 0x13
    1990:	9c 89       	ldd	r25, Y+20	; 0x14
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	1c f4       	brge	.+6      	; 0x19a8 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	88 8b       	std	Y+16, r24	; 0x10
    19a6:	91 c0       	rjmp	.+290    	; 0x1aca <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    19a8:	69 89       	ldd	r22, Y+17	; 0x11
    19aa:	7a 89       	ldd	r23, Y+18	; 0x12
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4f e7       	ldi	r20, 0x7F	; 127
    19b6:	53 e4       	ldi	r21, 0x43	; 67
    19b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <LCD_enu_SendCmnd+0x2ce>
    19c0:	7b c0       	rjmp	.+246    	; 0x1ab8 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    19c2:	6d 89       	ldd	r22, Y+21	; 0x15
    19c4:	7e 89       	ldd	r23, Y+22	; 0x16
    19c6:	8f 89       	ldd	r24, Y+23	; 0x17
    19c8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	54 e4       	ldi	r21, 0x44	; 68
    19d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8c 87       	std	Y+12, r24	; 0x0c
    19dc:	9d 87       	std	Y+13, r25	; 0x0d
    19de:	ae 87       	std	Y+14, r26	; 0x0e
    19e0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    19e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    19e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    19e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a e7       	ldi	r20, 0x7A	; 122
    19f0:	55 e4       	ldi	r21, 0x45	; 69
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	88 87       	std	Y+8, r24	; 0x08
    19fc:	99 87       	std	Y+9, r25	; 0x09
    19fe:	aa 87       	std	Y+10, r26	; 0x0a
    1a00:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a02:	68 85       	ldd	r22, Y+8	; 0x08
    1a04:	79 85       	ldd	r23, Y+9	; 0x09
    1a06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9f 83       	std	Y+7, r25	; 0x07
    1a20:	8e 83       	std	Y+6, r24	; 0x06
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1a24:	68 85       	ldd	r22, Y+8	; 0x08
    1a26:	79 85       	ldd	r23, Y+9	; 0x09
    1a28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9f 83       	std	Y+7, r25	; 0x07
    1a62:	8e 83       	std	Y+6, r24	; 0x06
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <LCD_enu_SendCmnd+0x390>
    1a66:	80 e9       	ldi	r24, 0x90	; 144
    1a68:	91 e0       	ldi	r25, 0x01	; 1
    1a6a:	9d 83       	std	Y+5, r25	; 0x05
    1a6c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	9d 81       	ldd	r25, Y+5	; 0x05
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LCD_enu_SendCmnd+0x37e>
    1a76:	9d 83       	std	Y+5, r25	; 0x05
    1a78:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8e 81       	ldd	r24, Y+6	; 0x06
    1a86:	9f 81       	ldd	r25, Y+7	; 0x07
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <LCD_enu_SendCmnd+0x372>
    1a8c:	24 c0       	rjmp	.+72     	; 0x1ad6 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	68 85       	ldd	r22, Y+8	; 0x08
    1a90:	79 85       	ldd	r23, Y+9	; 0x09
    1a92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9f 83       	std	Y+7, r25	; 0x07
    1aa0:	8e 83       	std	Y+6, r24	; 0x06
    1aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa6:	9b 83       	std	Y+3, r25	; 0x03
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	9b 81       	ldd	r25, Y+3	; 0x03
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_enu_SendCmnd+0x3ba>
    1ab2:	9b 83       	std	Y+3, r25	; 0x03
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
    1ab6:	0f c0       	rjmp	.+30     	; 0x1ad6 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ab8:	69 89       	ldd	r22, Y+17	; 0x11
    1aba:	7a 89       	ldd	r23, Y+18	; 0x12
    1abc:	8b 89       	ldd	r24, Y+19	; 0x13
    1abe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	88 8b       	std	Y+16, r24	; 0x10
    1aca:	88 89       	ldd	r24, Y+16	; 0x10
    1acc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	8a 95       	dec	r24
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <LCD_enu_SendCmnd+0x3dc>
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	62 e0       	ldi	r22, 0x02	; 2
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    return STATE_OK;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    1ae2:	e1 96       	adiw	r28, 0x31	; 49
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <LCD_enu_SendChar>:
ES_t LCD_enu_SendChar(u8 Copy_u8_Char)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	e1 97       	sbiw	r28, 0x31	; 49
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_HIGH);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_7BIT) & MASK_BIT);
    1b1e:	89 a9       	ldd	r24, Y+49	; 0x31
    1b20:	98 2f       	mov	r25, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	99 27       	eor	r25, r25
    1b26:	99 1f       	adc	r25, r25
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	66 e0       	ldi	r22, 0x06	; 6
    1b2c:	49 2f       	mov	r20, r25
    1b2e:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_6BIT) & MASK_BIT);
    1b32:	89 a9       	ldd	r24, Y+49	; 0x31
    1b34:	82 95       	swap	r24
    1b36:	86 95       	lsr	r24
    1b38:	86 95       	lsr	r24
    1b3a:	83 70       	andi	r24, 0x03	; 3
    1b3c:	98 2f       	mov	r25, r24
    1b3e:	91 70       	andi	r25, 0x01	; 1
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	65 e0       	ldi	r22, 0x05	; 5
    1b44:	49 2f       	mov	r20, r25
    1b46:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_5BIT) & MASK_BIT);
    1b4a:	89 a9       	ldd	r24, Y+49	; 0x31
    1b4c:	82 95       	swap	r24
    1b4e:	86 95       	lsr	r24
    1b50:	87 70       	andi	r24, 0x07	; 7
    1b52:	98 2f       	mov	r25, r24
    1b54:	91 70       	andi	r25, 0x01	; 1
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	49 2f       	mov	r20, r25
    1b5c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_4BIT) & MASK_BIT);
    1b60:	89 a9       	ldd	r24, Y+49	; 0x31
    1b62:	82 95       	swap	r24
    1b64:	8f 70       	andi	r24, 0x0F	; 15
    1b66:	98 2f       	mov	r25, r24
    1b68:	91 70       	andi	r25, 0x01	; 1
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	63 e0       	ldi	r22, 0x03	; 3
    1b6e:	49 2f       	mov	r20, r25
    1b70:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e8       	ldi	r26, 0x80	; 128
    1b84:	bf e3       	ldi	r27, 0x3F	; 63
    1b86:	8d a7       	std	Y+45, r24	; 0x2d
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	af a7       	std	Y+47, r26	; 0x2f
    1b8c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b90:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b92:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b94:	98 a9       	ldd	r25, Y+48	; 0x30
    1b96:	2b ea       	ldi	r18, 0xAB	; 171
    1b98:	3a ea       	ldi	r19, 0xAA	; 170
    1b9a:	4a ea       	ldi	r20, 0xAA	; 170
    1b9c:	50 e4       	ldi	r21, 0x40	; 64
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	89 a7       	std	Y+41, r24	; 0x29
    1ba8:	9a a7       	std	Y+42, r25	; 0x2a
    1baa:	ab a7       	std	Y+43, r26	; 0x2b
    1bac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1bae:	69 a5       	ldd	r22, Y+41	; 0x29
    1bb0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	1c f4       	brge	.+6      	; 0x1bcc <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	88 a7       	std	Y+40, r24	; 0x28
    1bca:	91 c0       	rjmp	.+290    	; 0x1cee <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    1bcc:	69 a5       	ldd	r22, Y+41	; 0x29
    1bce:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	53 e4       	ldi	r21, 0x43	; 67
    1bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	0c f0       	brlt	.+2      	; 0x1be6 <LCD_enu_SendChar+0xf2>
    1be4:	7b c0       	rjmp	.+246    	; 0x1cdc <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1be6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1be8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bec:	98 a9       	ldd	r25, Y+48	; 0x30
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8c a3       	std	Y+36, r24	; 0x24
    1c00:	9d a3       	std	Y+37, r25	; 0x25
    1c02:	ae a3       	std	Y+38, r26	; 0x26
    1c04:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6c a1       	ldd	r22, Y+36	; 0x24
    1c08:	7d a1       	ldd	r23, Y+37	; 0x25
    1c0a:	8e a1       	ldd	r24, Y+38	; 0x26
    1c0c:	9f a1       	ldd	r25, Y+39	; 0x27
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a e7       	ldi	r20, 0x7A	; 122
    1c14:	55 e4       	ldi	r21, 0x45	; 69
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	88 a3       	std	Y+32, r24	; 0x20
    1c20:	99 a3       	std	Y+33, r25	; 0x21
    1c22:	aa a3       	std	Y+34, r26	; 0x22
    1c24:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c26:	68 a1       	ldd	r22, Y+32	; 0x20
    1c28:	79 a1       	ldd	r23, Y+33	; 0x21
    1c2a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c2c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9f 8f       	std	Y+31, r25	; 0x1f
    1c44:	8e 8f       	std	Y+30, r24	; 0x1e
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1c48:	68 a1       	ldd	r22, Y+32	; 0x20
    1c4a:	79 a1       	ldd	r23, Y+33	; 0x21
    1c4c:	8a a1       	ldd	r24, Y+34	; 0x22
    1c4e:	9b a1       	ldd	r25, Y+35	; 0x23
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6c a1       	ldd	r22, Y+36	; 0x24
    1c62:	7d a1       	ldd	r23, Y+37	; 0x25
    1c64:	8e a1       	ldd	r24, Y+38	; 0x26
    1c66:	9f a1       	ldd	r25, Y+39	; 0x27
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9f 8f       	std	Y+31, r25	; 0x1f
    1c86:	8e 8f       	std	Y+30, r24	; 0x1e
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_enu_SendChar+0x1b4>
    1c8a:	80 e9       	ldi	r24, 0x90	; 144
    1c8c:	91 e0       	ldi	r25, 0x01	; 1
    1c8e:	9d 8f       	std	Y+29, r25	; 0x1d
    1c90:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_enu_SendChar+0x1a2>
    1c9a:	9d 8f       	std	Y+29, r25	; 0x1d
    1c9c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ca6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1caa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_enu_SendChar+0x196>
    1cb0:	24 c0       	rjmp	.+72     	; 0x1cfa <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	68 a1       	ldd	r22, Y+32	; 0x20
    1cb4:	79 a1       	ldd	r23, Y+33	; 0x21
    1cb6:	8a a1       	ldd	r24, Y+34	; 0x22
    1cb8:	9b a1       	ldd	r25, Y+35	; 0x23
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9f 8f       	std	Y+31, r25	; 0x1f
    1cc4:	8e 8f       	std	Y+30, r24	; 0x1e
    1cc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cc8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cca:	9b 8f       	std	Y+27, r25	; 0x1b
    1ccc:	8a 8f       	std	Y+26, r24	; 0x1a
    1cce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_enu_SendChar+0x1de>
    1cd6:	9b 8f       	std	Y+27, r25	; 0x1b
    1cd8:	8a 8f       	std	Y+26, r24	; 0x1a
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cdc:	69 a5       	ldd	r22, Y+41	; 0x29
    1cde:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ce0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	88 a7       	std	Y+40, r24	; 0x28
    1cee:	88 a5       	ldd	r24, Y+40	; 0x28
    1cf0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cf2:	89 8d       	ldd	r24, Y+25	; 0x19
    1cf4:	8a 95       	dec	r24
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_enu_SendChar+0x200>
    1cf8:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	62 e0       	ldi	r22, 0x02	; 2
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_3BIT) & MASK_BIT);
    1d04:	89 a9       	ldd	r24, Y+49	; 0x31
    1d06:	86 95       	lsr	r24
    1d08:	86 95       	lsr	r24
    1d0a:	86 95       	lsr	r24
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	91 70       	andi	r25, 0x01	; 1
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	66 e0       	ldi	r22, 0x06	; 6
    1d14:	49 2f       	mov	r20, r25
    1d16:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_2BIT) & MASK_BIT);
    1d1a:	89 a9       	ldd	r24, Y+49	; 0x31
    1d1c:	86 95       	lsr	r24
    1d1e:	86 95       	lsr	r24
    1d20:	98 2f       	mov	r25, r24
    1d22:	91 70       	andi	r25, 0x01	; 1
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	65 e0       	ldi	r22, 0x05	; 5
    1d28:	49 2f       	mov	r20, r25
    1d2a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_1BIT) & MASK_BIT);
    1d2e:	89 a9       	ldd	r24, Y+49	; 0x31
    1d30:	86 95       	lsr	r24
    1d32:	98 2f       	mov	r25, r24
    1d34:	91 70       	andi	r25, 0x01	; 1
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_0BIT) & MASK_BIT);
    1d40:	89 a9       	ldd	r24, Y+49	; 0x31
    1d42:	98 2f       	mov	r25, r24
    1d44:	91 70       	andi	r25, 0x01	; 1
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	49 2f       	mov	r20, r25
    1d4c:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e8       	ldi	r26, 0x80	; 128
    1d60:	bf e3       	ldi	r27, 0x3F	; 63
    1d62:	8d 8b       	std	Y+21, r24	; 0x15
    1d64:	9e 8b       	std	Y+22, r25	; 0x16
    1d66:	af 8b       	std	Y+23, r26	; 0x17
    1d68:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d70:	98 8d       	ldd	r25, Y+24	; 0x18
    1d72:	2b ea       	ldi	r18, 0xAB	; 171
    1d74:	3a ea       	ldi	r19, 0xAA	; 170
    1d76:	4a ea       	ldi	r20, 0xAA	; 170
    1d78:	50 e4       	ldi	r21, 0x40	; 64
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	89 8b       	std	Y+17, r24	; 0x11
    1d84:	9a 8b       	std	Y+18, r25	; 0x12
    1d86:	ab 8b       	std	Y+19, r26	; 0x13
    1d88:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d8a:	69 89       	ldd	r22, Y+17	; 0x11
    1d8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d90:	9c 89       	ldd	r25, Y+20	; 0x14
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	1c f4       	brge	.+6      	; 0x1da8 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	88 8b       	std	Y+16, r24	; 0x10
    1da6:	91 c0       	rjmp	.+290    	; 0x1eca <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    1da8:	69 89       	ldd	r22, Y+17	; 0x11
    1daa:	7a 89       	ldd	r23, Y+18	; 0x12
    1dac:	8b 89       	ldd	r24, Y+19	; 0x13
    1dae:	9c 89       	ldd	r25, Y+20	; 0x14
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	53 e4       	ldi	r21, 0x43	; 67
    1db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	0c f0       	brlt	.+2      	; 0x1dc2 <LCD_enu_SendChar+0x2ce>
    1dc0:	7b c0       	rjmp	.+246    	; 0x1eb8 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a e7       	ldi	r20, 0x7A	; 122
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8c 87       	std	Y+12, r24	; 0x0c
    1ddc:	9d 87       	std	Y+13, r25	; 0x0d
    1dde:	ae 87       	std	Y+14, r26	; 0x0e
    1de0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1de4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1de6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a e7       	ldi	r20, 0x7A	; 122
    1df0:	55 e4       	ldi	r21, 0x45	; 69
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	88 87       	std	Y+8, r24	; 0x08
    1dfc:	99 87       	std	Y+9, r25	; 0x09
    1dfe:	aa 87       	std	Y+10, r26	; 0x0a
    1e00:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e02:	68 85       	ldd	r22, Y+8	; 0x08
    1e04:	79 85       	ldd	r23, Y+9	; 0x09
    1e06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e08:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9f 83       	std	Y+7, r25	; 0x07
    1e20:	8e 83       	std	Y+6, r24	; 0x06
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    1e24:	68 85       	ldd	r22, Y+8	; 0x08
    1e26:	79 85       	ldd	r23, Y+9	; 0x09
    1e28:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e2a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e3e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e40:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e42:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9f 83       	std	Y+7, r25	; 0x07
    1e62:	8e 83       	std	Y+6, r24	; 0x06
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_enu_SendChar+0x390>
    1e66:	80 e9       	ldi	r24, 0x90	; 144
    1e68:	91 e0       	ldi	r25, 0x01	; 1
    1e6a:	9d 83       	std	Y+5, r25	; 0x05
    1e6c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_enu_SendChar+0x37e>
    1e76:	9d 83       	std	Y+5, r25	; 0x05
    1e78:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9f 83       	std	Y+7, r25	; 0x07
    1e82:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8e 81       	ldd	r24, Y+6	; 0x06
    1e86:	9f 81       	ldd	r25, Y+7	; 0x07
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_enu_SendChar+0x372>
    1e8c:	24 c0       	rjmp	.+72     	; 0x1ed6 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	68 85       	ldd	r22, Y+8	; 0x08
    1e90:	79 85       	ldd	r23, Y+9	; 0x09
    1e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e94:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9f 83       	std	Y+7, r25	; 0x07
    1ea0:	8e 83       	std	Y+6, r24	; 0x06
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_enu_SendChar+0x3ba>
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eb8:	69 89       	ldd	r22, Y+17	; 0x11
    1eba:	7a 89       	ldd	r23, Y+18	; 0x12
    1ebc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ebe:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	88 8b       	std	Y+16, r24	; 0x10
    1eca:	88 89       	ldd	r24, Y+16	; 0x10
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	8a 95       	dec	r24
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_enu_SendChar+0x3dc>
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	62 e0       	ldi	r22, 0x02	; 2
    1eda:	40 e0       	ldi	r20, 0x00	; 0
    1edc:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    return STATE_OK;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    1ee2:	e1 96       	adiw	r28, 0x31	; 49
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <LCD_enu_SendString+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <LCD_enu_SendString+0x8>
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    if (Copy_pu8_String != NULL)
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	e1 f0       	breq	.+56     	; 0x1f48 <LCD_enu_SendString+0x54>
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    1f10:	19 82       	std	Y+1, r1	; 0x01
    1f12:	0e c0       	rjmp	.+28     	; 0x1f30 <LCD_enu_SendString+0x3c>
        {
            LCD_enu_SendChar(Copy_pu8_String[i]);
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	fc 01       	movw	r30, r24
    1f20:	e2 0f       	add	r30, r18
    1f22:	f3 1f       	adc	r31, r19
    1f24:	80 81       	ld	r24, Z
    1f26:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <LCD_enu_SendChar>
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    u8 Local_u8_errorState = STATE_OK;
    if (Copy_pu8_String != NULL)
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	80 81       	ld	r24, Z
    1f42:	88 23       	and	r24, r24
    1f44:	39 f7       	brne	.-50     	; 0x1f14 <LCD_enu_SendString+0x20>
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <LCD_enu_SendString+0x56>
            LCD_enu_SendChar(Copy_pu8_String[i]);
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1f48:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <LCD_enu_SendNum>:
ES_t LCD_enu_SendNum(u32 Copy_u32_Num)
{
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	60 97       	sbiw	r28, 0x10	; 16
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	de bf       	out	0x3e, r29	; 62
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	cd bf       	out	0x3d, r28	; 61
    1f72:	6d 87       	std	Y+13, r22	; 0x0d
    1f74:	7e 87       	std	Y+14, r23	; 0x0e
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0;
    1f7a:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    1f7c:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u32_Num == 0)
    1f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f82:	af 85       	ldd	r26, Y+15	; 0x0f
    1f84:	b8 89       	ldd	r27, Y+16	; 0x10
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	a1 05       	cpc	r26, r1
    1f8a:	b1 05       	cpc	r27, r1
    1f8c:	89 f5       	brne	.+98     	; 0x1ff0 <LCD_enu_SendNum+0x96>
        LCD_enu_SendChar('0');
    1f8e:	80 e3       	ldi	r24, 0x30	; 48
    1f90:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <LCD_enu_SendChar>
    1f94:	4d c0       	rjmp	.+154    	; 0x2030 <LCD_enu_SendNum+0xd6>
    else
    {
        while (Copy_u32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	08 2f       	mov	r16, r24
    1f9a:	10 e0       	ldi	r17, 0x00	; 0
    1f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa0:	af 85       	ldd	r26, Y+15	; 0x0f
    1fa2:	b8 89       	ldd	r27, Y+16	; 0x10
    1fa4:	2a e0       	ldi	r18, 0x0A	; 10
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__udivmodsi4>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	28 2f       	mov	r18, r24
    1fba:	ce 01       	movw	r24, r28
    1fbc:	03 96       	adiw	r24, 0x03	; 3
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	e0 0f       	add	r30, r16
    1fc2:	f1 1f       	adc	r31, r17
    1fc4:	20 83       	st	Z, r18
            Copy_u32_Num /= 10;
    1fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fca:	af 85       	ldd	r26, Y+15	; 0x0f
    1fcc:	b8 89       	ldd	r27, Y+16	; 0x10
    1fce:	2a e0       	ldi	r18, 0x0A	; 10
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	50 e0       	ldi	r21, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__udivmodsi4>
    1fde:	da 01       	movw	r26, r20
    1fe0:	c9 01       	movw	r24, r18
    1fe2:	8d 87       	std	Y+13, r24	; 0x0d
    1fe4:	9e 87       	std	Y+14, r25	; 0x0e
    1fe6:	af 87       	std	Y+15, r26	; 0x0f
    1fe8:	b8 8b       	std	Y+16, r27	; 0x10
            Local_u8_iterator1++;
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	8a 83       	std	Y+2, r24	; 0x02
    s8 Local_u8_iterator2 = 0;
    if (Copy_u32_Num == 0)
        LCD_enu_SendChar('0');
    else
    {
        while (Copy_u32_Num != 0)
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	af 85       	ldd	r26, Y+15	; 0x0f
    1ff6:	b8 89       	ldd	r27, Y+16	; 0x10
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	a1 05       	cpc	r26, r1
    1ffc:	b1 05       	cpc	r27, r1
    1ffe:	59 f6       	brne	.-106    	; 0x1f96 <LCD_enu_SendNum+0x3c>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	81 50       	subi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	11 c0       	rjmp	.+34     	; 0x202a <LCD_enu_SendNum+0xd0>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	28 2f       	mov	r18, r24
    200c:	33 27       	eor	r19, r19
    200e:	27 fd       	sbrc	r18, 7
    2010:	30 95       	com	r19
    2012:	ce 01       	movw	r24, r28
    2014:	03 96       	adiw	r24, 0x03	; 3
    2016:	fc 01       	movw	r30, r24
    2018:	e2 0f       	add	r30, r18
    201a:	f3 1f       	adc	r31, r19
    201c:	80 81       	ld	r24, Z
    201e:	80 5d       	subi	r24, 0xD0	; 208
    2020:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <LCD_enu_SendChar>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	81 50       	subi	r24, 0x01	; 1
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	88 23       	and	r24, r24
    202e:	64 f7       	brge	.-40     	; 0x2008 <LCD_enu_SendNum+0xae>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
        }
    }
    return STATE_OK;
    2030:	81 e0       	ldi	r24, 0x01	; 1
}
    2032:	60 96       	adiw	r28, 0x10	; 16
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <LCD_enu_SetCursor+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <LCD_enu_SetCursor+0x8>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	8a 83       	std	Y+2, r24	; 0x02
    2058:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Location < MAX_NUM_OF_LOCATIONS)
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 32       	cpi	r24, 0x28	; 40
    2062:	d8 f4       	brcc	.+54     	; 0x209a <LCD_enu_SetCursor+0x52>
    {
        switch (Copy_u8_lineNum)
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3d 83       	std	Y+5, r19	; 0x05
    206c:	2c 83       	std	Y+4, r18	; 0x04
    206e:	8c 81       	ldd	r24, Y+4	; 0x04
    2070:	9d 81       	ldd	r25, Y+5	; 0x05
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	31 f0       	breq	.+12     	; 0x2082 <LCD_enu_SetCursor+0x3a>
    2076:	2c 81       	ldd	r18, Y+4	; 0x04
    2078:	3d 81       	ldd	r19, Y+5	; 0x05
    207a:	21 30       	cpi	r18, 0x01	; 1
    207c:	31 05       	cpc	r19, r1
    207e:	31 f0       	breq	.+12     	; 0x208c <LCD_enu_SetCursor+0x44>
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <LCD_enu_SetCursor+0x4e>
        {
        case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	80 58       	subi	r24, 0x80	; 128
    2086:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    208a:	08 c0       	rjmp	.+16     	; 0x209c <LCD_enu_SetCursor+0x54>
        case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	80 54       	subi	r24, 0x40	; 64
    2090:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    2094:	03 c0       	rjmp	.+6      	; 0x209c <LCD_enu_SetCursor+0x54>
        default:Local_u8_errorState = STATE_NOT_OK;break;
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	01 c0       	rjmp	.+2      	; 0x209c <LCD_enu_SetCursor+0x54>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    209a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    209c:	89 81       	ldd	r24, Y+1	; 0x01
}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <LCD_enu_Init>:
ES_t LCD_enu_Init(void)
{
    20ae:	0f 93       	push	r16
    20b0:	1f 93       	push	r17
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	cc 54       	subi	r28, 0x4C	; 76
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_OUTPUT);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_OUTPUT);
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	60 e0       	ldi	r22, 0x00	; 0
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_OUTPUT);
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	62 e0       	ldi	r22, 0x02	; 2
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D7, DIO_U8_OUTPUT);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	66 e0       	ldi	r22, 0x06	; 6
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D6, DIO_U8_OUTPUT);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	65 e0       	ldi	r22, 0x05	; 5
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D5, DIO_U8_OUTPUT);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D4, DIO_U8_OUTPUT);
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	63 e0       	ldi	r22, 0x03	; 3
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    210e:	fe 01       	movw	r30, r28
    2110:	e7 5b       	subi	r30, 0xB7	; 183
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	ac e0       	ldi	r26, 0x0C	; 12
    211a:	b2 e4       	ldi	r27, 0x42	; 66
    211c:	80 83       	st	Z, r24
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	a2 83       	std	Z+2, r26	; 0x02
    2122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2124:	8e 01       	movw	r16, r28
    2126:	0b 5b       	subi	r16, 0xBB	; 187
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	e7 5b       	subi	r30, 0xB7	; 183
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a e7       	ldi	r20, 0x7A	; 122
    213e:	55 e4       	ldi	r21, 0x45	; 69
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	f8 01       	movw	r30, r16
    214a:	80 83       	st	Z, r24
    214c:	91 83       	std	Z+1, r25	; 0x01
    214e:	a2 83       	std	Z+2, r26	; 0x02
    2150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2152:	fe 01       	movw	r30, r28
    2154:	eb 5b       	subi	r30, 0xBB	; 187
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	60 81       	ld	r22, Z
    215a:	71 81       	ldd	r23, Z+1	; 0x01
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	44 f4       	brge	.+16     	; 0x2180 <LCD_enu_Init+0xd2>
		__ticks = 1;
    2170:	fe 01       	movw	r30, r28
    2172:	ed 5b       	subi	r30, 0xBD	; 189
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
    217e:	64 c0       	rjmp	.+200    	; 0x2248 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    2180:	fe 01       	movw	r30, r28
    2182:	eb 5b       	subi	r30, 0xBB	; 187
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	60 81       	ld	r22, Z
    2188:	71 81       	ldd	r23, Z+1	; 0x01
    218a:	82 81       	ldd	r24, Z+2	; 0x02
    218c:	93 81       	ldd	r25, Z+3	; 0x03
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	3f ef       	ldi	r19, 0xFF	; 255
    2192:	4f e7       	ldi	r20, 0x7F	; 127
    2194:	57 e4       	ldi	r21, 0x47	; 71
    2196:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219a:	18 16       	cp	r1, r24
    219c:	0c f0       	brlt	.+2      	; 0x21a0 <LCD_enu_Init+0xf2>
    219e:	43 c0       	rjmp	.+134    	; 0x2226 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	fe 01       	movw	r30, r28
    21a2:	e7 5b       	subi	r30, 0xB7	; 183
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8e 01       	movw	r16, r28
    21c0:	0d 5b       	subi	r16, 0xBD	; 189
    21c2:	1f 4f       	sbci	r17, 0xFF	; 255
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	f8 01       	movw	r30, r16
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	80 83       	st	Z, r24
    21d6:	1f c0       	rjmp	.+62     	; 0x2216 <LCD_enu_Init+0x168>
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 5b       	subi	r30, 0xBF	; 191
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 e9       	ldi	r24, 0x90	; 144
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21e6:	fe 01       	movw	r30, r28
    21e8:	ef 5b       	subi	r30, 0xBF	; 191
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	f1 f7       	brne	.-4      	; 0x21f0 <LCD_enu_Init+0x142>
    21f4:	fe 01       	movw	r30, r28
    21f6:	ef 5b       	subi	r30, 0xBF	; 191
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	de 01       	movw	r26, r28
    2200:	ad 5b       	subi	r26, 0xBD	; 189
    2202:	bf 4f       	sbci	r27, 0xFF	; 255
    2204:	fe 01       	movw	r30, r28
    2206:	ed 5b       	subi	r30, 0xBD	; 189
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	11 96       	adiw	r26, 0x01	; 1
    2212:	9c 93       	st	X, r25
    2214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2216:	fe 01       	movw	r30, r28
    2218:	ed 5b       	subi	r30, 0xBD	; 189
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	80 81       	ld	r24, Z
    221e:	91 81       	ldd	r25, Z+1	; 0x01
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	d1 f6       	brne	.-76     	; 0x21d8 <LCD_enu_Init+0x12a>
    2224:	24 c0       	rjmp	.+72     	; 0x226e <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	8e 01       	movw	r16, r28
    2228:	0d 5b       	subi	r16, 0xBD	; 189
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	fe 01       	movw	r30, r28
    222e:	eb 5b       	subi	r30, 0xBB	; 187
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	60 81       	ld	r22, Z
    2234:	71 81       	ldd	r23, Z+1	; 0x01
    2236:	82 81       	ldd	r24, Z+2	; 0x02
    2238:	93 81       	ldd	r25, Z+3	; 0x03
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	f8 01       	movw	r30, r16
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
    2248:	fe 01       	movw	r30, r28
    224a:	ed 5b       	subi	r30, 0xBD	; 189
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	fe 01       	movw	r30, r28
    2254:	ff 96       	adiw	r30, 0x3f	; 63
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	fe 01       	movw	r30, r28
    225c:	ff 96       	adiw	r30, 0x3f	; 63
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_enu_Init+0x1b4>
    2266:	fe 01       	movw	r30, r28
    2268:	ff 96       	adiw	r30, 0x3f	; 63
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    226e:	83 e3       	ldi	r24, 0x33	; 51
    2270:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    2274:	82 e3       	ldi	r24, 0x32	; 50
    2276:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    227a:	88 e2       	ldi	r24, 0x28	; 40
    227c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e2       	ldi	r26, 0x20	; 32
    2286:	b2 e4       	ldi	r27, 0x42	; 66
    2288:	8b af       	std	Y+59, r24	; 0x3b
    228a:	9c af       	std	Y+60, r25	; 0x3c
    228c:	ad af       	std	Y+61, r26	; 0x3d
    228e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2290:	6b ad       	ldd	r22, Y+59	; 0x3b
    2292:	7c ad       	ldd	r23, Y+60	; 0x3c
    2294:	8d ad       	ldd	r24, Y+61	; 0x3d
    2296:	9e ad       	ldd	r25, Y+62	; 0x3e
    2298:	2b ea       	ldi	r18, 0xAB	; 171
    229a:	3a ea       	ldi	r19, 0xAA	; 170
    229c:	4a ea       	ldi	r20, 0xAA	; 170
    229e:	50 e4       	ldi	r21, 0x40	; 64
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8f ab       	std	Y+55, r24	; 0x37
    22aa:	98 af       	std	Y+56, r25	; 0x38
    22ac:	a9 af       	std	Y+57, r26	; 0x39
    22ae:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    22b0:	6f a9       	ldd	r22, Y+55	; 0x37
    22b2:	78 ad       	ldd	r23, Y+56	; 0x38
    22b4:	89 ad       	ldd	r24, Y+57	; 0x39
    22b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	1c f4       	brge	.+6      	; 0x22ce <LCD_enu_Init+0x220>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	8e ab       	std	Y+54, r24	; 0x36
    22cc:	91 c0       	rjmp	.+290    	; 0x23f0 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    22ce:	6f a9       	ldd	r22, Y+55	; 0x37
    22d0:	78 ad       	ldd	r23, Y+56	; 0x38
    22d2:	89 ad       	ldd	r24, Y+57	; 0x39
    22d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4f e7       	ldi	r20, 0x7F	; 127
    22dc:	53 e4       	ldi	r21, 0x43	; 67
    22de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e2:	18 16       	cp	r1, r24
    22e4:	0c f0       	brlt	.+2      	; 0x22e8 <LCD_enu_Init+0x23a>
    22e6:	7b c0       	rjmp	.+246    	; 0x23de <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    22e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    22ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    22ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a e7       	ldi	r20, 0x7A	; 122
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8a ab       	std	Y+50, r24	; 0x32
    2302:	9b ab       	std	Y+51, r25	; 0x33
    2304:	ac ab       	std	Y+52, r26	; 0x34
    2306:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2308:	6a a9       	ldd	r22, Y+50	; 0x32
    230a:	7b a9       	ldd	r23, Y+51	; 0x33
    230c:	8c a9       	ldd	r24, Y+52	; 0x34
    230e:	9d a9       	ldd	r25, Y+53	; 0x35
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4a e7       	ldi	r20, 0x7A	; 122
    2316:	55 e4       	ldi	r21, 0x45	; 69
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e a7       	std	Y+46, r24	; 0x2e
    2322:	9f a7       	std	Y+47, r25	; 0x2f
    2324:	a8 ab       	std	Y+48, r26	; 0x30
    2326:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2328:	6e a5       	ldd	r22, Y+46	; 0x2e
    232a:	7f a5       	ldd	r23, Y+47	; 0x2f
    232c:	88 a9       	ldd	r24, Y+48	; 0x30
    232e:	99 a9       	ldd	r25, Y+49	; 0x31
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e8       	ldi	r20, 0x80	; 128
    2336:	5f e3       	ldi	r21, 0x3F	; 63
    2338:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233c:	88 23       	and	r24, r24
    233e:	2c f4       	brge	.+10     	; 0x234a <LCD_enu_Init+0x29c>
		__ticks = 1;
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9d a7       	std	Y+45, r25	; 0x2d
    2346:	8c a7       	std	Y+44, r24	; 0x2c
    2348:	3f c0       	rjmp	.+126    	; 0x23c8 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    234a:	6e a5       	ldd	r22, Y+46	; 0x2e
    234c:	7f a5       	ldd	r23, Y+47	; 0x2f
    234e:	88 a9       	ldd	r24, Y+48	; 0x30
    2350:	99 a9       	ldd	r25, Y+49	; 0x31
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	3f ef       	ldi	r19, 0xFF	; 255
    2356:	4f e7       	ldi	r20, 0x7F	; 127
    2358:	57 e4       	ldi	r21, 0x47	; 71
    235a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235e:	18 16       	cp	r1, r24
    2360:	4c f5       	brge	.+82     	; 0x23b4 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2362:	6a a9       	ldd	r22, Y+50	; 0x32
    2364:	7b a9       	ldd	r23, Y+51	; 0x33
    2366:	8c a9       	ldd	r24, Y+52	; 0x34
    2368:	9d a9       	ldd	r25, Y+53	; 0x35
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e2       	ldi	r20, 0x20	; 32
    2370:	51 e4       	ldi	r21, 0x41	; 65
    2372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	bc 01       	movw	r22, r24
    237c:	cd 01       	movw	r24, r26
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9d a7       	std	Y+45, r25	; 0x2d
    2388:	8c a7       	std	Y+44, r24	; 0x2c
    238a:	0f c0       	rjmp	.+30     	; 0x23aa <LCD_enu_Init+0x2fc>
    238c:	80 e9       	ldi	r24, 0x90	; 144
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	9b a7       	std	Y+43, r25	; 0x2b
    2392:	8a a7       	std	Y+42, r24	; 0x2a
    2394:	8a a5       	ldd	r24, Y+42	; 0x2a
    2396:	9b a5       	ldd	r25, Y+43	; 0x2b
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_enu_Init+0x2ea>
    239c:	9b a7       	std	Y+43, r25	; 0x2b
    239e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    23a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	9d a7       	std	Y+45, r25	; 0x2d
    23a8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    23ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	69 f7       	brne	.-38     	; 0x238c <LCD_enu_Init+0x2de>
    23b2:	24 c0       	rjmp	.+72     	; 0x23fc <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    23b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    23b8:	88 a9       	ldd	r24, Y+48	; 0x30
    23ba:	99 a9       	ldd	r25, Y+49	; 0x31
    23bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	9d a7       	std	Y+45, r25	; 0x2d
    23c6:	8c a7       	std	Y+44, r24	; 0x2c
    23c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    23ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    23cc:	99 a7       	std	Y+41, r25	; 0x29
    23ce:	88 a7       	std	Y+40, r24	; 0x28
    23d0:	88 a5       	ldd	r24, Y+40	; 0x28
    23d2:	99 a5       	ldd	r25, Y+41	; 0x29
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <LCD_enu_Init+0x326>
    23d8:	99 a7       	std	Y+41, r25	; 0x29
    23da:	88 a7       	std	Y+40, r24	; 0x28
    23dc:	0f c0       	rjmp	.+30     	; 0x23fc <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23de:	6f a9       	ldd	r22, Y+55	; 0x37
    23e0:	78 ad       	ldd	r23, Y+56	; 0x38
    23e2:	89 ad       	ldd	r24, Y+57	; 0x39
    23e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	8e ab       	std	Y+54, r24	; 0x36
    23f0:	8e a9       	ldd	r24, Y+54	; 0x36
    23f2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f4:	8f a1       	ldd	r24, Y+39	; 0x27
    23f6:	8a 95       	dec	r24
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <LCD_enu_Init+0x348>
    23fa:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(LCD_U8_CURSOR);
    23fc:	8f e0       	ldi	r24, 0x0F	; 15
    23fe:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e2       	ldi	r26, 0x20	; 32
    2408:	b2 e4       	ldi	r27, 0x42	; 66
    240a:	8b a3       	std	Y+35, r24	; 0x23
    240c:	9c a3       	std	Y+36, r25	; 0x24
    240e:	ad a3       	std	Y+37, r26	; 0x25
    2410:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2412:	6b a1       	ldd	r22, Y+35	; 0x23
    2414:	7c a1       	ldd	r23, Y+36	; 0x24
    2416:	8d a1       	ldd	r24, Y+37	; 0x25
    2418:	9e a1       	ldd	r25, Y+38	; 0x26
    241a:	2b ea       	ldi	r18, 0xAB	; 171
    241c:	3a ea       	ldi	r19, 0xAA	; 170
    241e:	4a ea       	ldi	r20, 0xAA	; 170
    2420:	50 e4       	ldi	r21, 0x40	; 64
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	8f 8f       	std	Y+31, r24	; 0x1f
    242c:	98 a3       	std	Y+32, r25	; 0x20
    242e:	a9 a3       	std	Y+33, r26	; 0x21
    2430:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2432:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2434:	78 a1       	ldd	r23, Y+32	; 0x20
    2436:	89 a1       	ldd	r24, Y+33	; 0x21
    2438:	9a a1       	ldd	r25, Y+34	; 0x22
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	1c f4       	brge	.+6      	; 0x2450 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	8e 8f       	std	Y+30, r24	; 0x1e
    244e:	91 c0       	rjmp	.+290    	; 0x2572 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2450:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2452:	78 a1       	ldd	r23, Y+32	; 0x20
    2454:	89 a1       	ldd	r24, Y+33	; 0x21
    2456:	9a a1       	ldd	r25, Y+34	; 0x22
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	53 e4       	ldi	r21, 0x43	; 67
    2460:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	0c f0       	brlt	.+2      	; 0x246a <LCD_enu_Init+0x3bc>
    2468:	7b c0       	rjmp	.+246    	; 0x2560 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    246a:	6b a1       	ldd	r22, Y+35	; 0x23
    246c:	7c a1       	ldd	r23, Y+36	; 0x24
    246e:	8d a1       	ldd	r24, Y+37	; 0x25
    2470:	9e a1       	ldd	r25, Y+38	; 0x26
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a e7       	ldi	r20, 0x7A	; 122
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8a 8f       	std	Y+26, r24	; 0x1a
    2484:	9b 8f       	std	Y+27, r25	; 0x1b
    2486:	ac 8f       	std	Y+28, r26	; 0x1c
    2488:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    248c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    248e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2490:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a e7       	ldi	r20, 0x7A	; 122
    2498:	55 e4       	ldi	r21, 0x45	; 69
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8e 8b       	std	Y+22, r24	; 0x16
    24a4:	9f 8b       	std	Y+23, r25	; 0x17
    24a6:	a8 8f       	std	Y+24, r26	; 0x18
    24a8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    24aa:	6e 89       	ldd	r22, Y+22	; 0x16
    24ac:	7f 89       	ldd	r23, Y+23	; 0x17
    24ae:	88 8d       	ldd	r24, Y+24	; 0x18
    24b0:	99 8d       	ldd	r25, Y+25	; 0x19
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_enu_Init+0x41e>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9d 8b       	std	Y+21, r25	; 0x15
    24c8:	8c 8b       	std	Y+20, r24	; 0x14
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    24cc:	6e 89       	ldd	r22, Y+22	; 0x16
    24ce:	7f 89       	ldd	r23, Y+23	; 0x17
    24d0:	88 8d       	ldd	r24, Y+24	; 0x18
    24d2:	99 8d       	ldd	r25, Y+25	; 0x19
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9d 8b       	std	Y+21, r25	; 0x15
    250a:	8c 8b       	std	Y+20, r24	; 0x14
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_enu_Init+0x47e>
    250e:	80 e9       	ldi	r24, 0x90	; 144
    2510:	91 e0       	ldi	r25, 0x01	; 1
    2512:	9b 8b       	std	Y+19, r25	; 0x13
    2514:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2516:	8a 89       	ldd	r24, Y+18	; 0x12
    2518:	9b 89       	ldd	r25, Y+19	; 0x13
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_enu_Init+0x46c>
    251e:	9b 8b       	std	Y+19, r25	; 0x13
    2520:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8c 89       	ldd	r24, Y+20	; 0x14
    2524:	9d 89       	ldd	r25, Y+21	; 0x15
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9d 8b       	std	Y+21, r25	; 0x15
    252a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8c 89       	ldd	r24, Y+20	; 0x14
    252e:	9d 89       	ldd	r25, Y+21	; 0x15
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_enu_Init+0x460>
    2534:	24 c0       	rjmp	.+72     	; 0x257e <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6e 89       	ldd	r22, Y+22	; 0x16
    2538:	7f 89       	ldd	r23, Y+23	; 0x17
    253a:	88 8d       	ldd	r24, Y+24	; 0x18
    253c:	99 8d       	ldd	r25, Y+25	; 0x19
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9d 8b       	std	Y+21, r25	; 0x15
    2548:	8c 8b       	std	Y+20, r24	; 0x14
    254a:	8c 89       	ldd	r24, Y+20	; 0x14
    254c:	9d 89       	ldd	r25, Y+21	; 0x15
    254e:	99 8b       	std	Y+17, r25	; 0x11
    2550:	88 8b       	std	Y+16, r24	; 0x10
    2552:	88 89       	ldd	r24, Y+16	; 0x10
    2554:	99 89       	ldd	r25, Y+17	; 0x11
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_enu_Init+0x4a8>
    255a:	99 8b       	std	Y+17, r25	; 0x11
    255c:	88 8b       	std	Y+16, r24	; 0x10
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2560:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2562:	78 a1       	ldd	r23, Y+32	; 0x20
    2564:	89 a1       	ldd	r24, Y+33	; 0x21
    2566:	9a a1       	ldd	r25, Y+34	; 0x22
    2568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8e 8f       	std	Y+30, r24	; 0x1e
    2572:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2574:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2576:	8f 85       	ldd	r24, Y+15	; 0x0f
    2578:	8a 95       	dec	r24
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_enu_Init+0x4ca>
    257c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e0       	ldi	r26, 0x00	; 0
    258a:	b0 e4       	ldi	r27, 0x40	; 64
    258c:	8b 87       	std	Y+11, r24	; 0x0b
    258e:	9c 87       	std	Y+12, r25	; 0x0c
    2590:	ad 87       	std	Y+13, r26	; 0x0d
    2592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	6b 85       	ldd	r22, Y+11	; 0x0b
    2596:	7c 85       	ldd	r23, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8f 83       	std	Y+7, r24	; 0x07
    25ae:	98 87       	std	Y+8, r25	; 0x08
    25b0:	a9 87       	std	Y+9, r26	; 0x09
    25b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b4:	6f 81       	ldd	r22, Y+7	; 0x07
    25b6:	78 85       	ldd	r23, Y+8	; 0x08
    25b8:	89 85       	ldd	r24, Y+9	; 0x09
    25ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_enu_Init+0x528>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    25d6:	6f 81       	ldd	r22, Y+7	; 0x07
    25d8:	78 85       	ldd	r23, Y+8	; 0x08
    25da:	89 85       	ldd	r24, Y+9	; 0x09
    25dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_enu_Init+0x588>
    2618:	80 e9       	ldi	r24, 0x90	; 144
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_enu_Init+0x576>
    2628:	9c 83       	std	Y+4, r25	; 0x04
    262a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8d 81       	ldd	r24, Y+5	; 0x05
    2638:	9e 81       	ldd	r25, Y+6	; 0x06
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_enu_Init+0x56a>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	9a 83       	std	Y+2, r25	; 0x02
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	9a 81       	ldd	r25, Y+2	; 0x02
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_enu_Init+0x5b2>
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2668:	86 e0       	ldi	r24, 0x06	; 6
    266a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    return STATE_OK;
    266e:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    2670:	c4 5b       	subi	r28, 0xB4	; 180
    2672:	df 4f       	sbci	r29, 0xFF	; 255
    2674:	0f b6       	in	r0, 0x3f	; 63
    2676:	f8 94       	cli
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	cd bf       	out	0x3d, r28	; 61
    267e:	cf 91       	pop	r28
    2680:	df 91       	pop	r29
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	08 95       	ret

00002688 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void)
{
    2688:	df 93       	push	r29
    268a:	cf 93       	push	r28
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	2e 97       	sbiw	r28, 0x0e	; 14
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	a0 e0       	ldi	r26, 0x00	; 0
    26a8:	b0 e4       	ldi	r27, 0x40	; 64
    26aa:	8b 87       	std	Y+11, r24	; 0x0b
    26ac:	9c 87       	std	Y+12, r25	; 0x0c
    26ae:	ad 87       	std	Y+13, r26	; 0x0d
    26b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	4a e7       	ldi	r20, 0x7A	; 122
    26c0:	55 e4       	ldi	r21, 0x45	; 69
    26c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	8f 83       	std	Y+7, r24	; 0x07
    26cc:	98 87       	std	Y+8, r25	; 0x08
    26ce:	a9 87       	std	Y+9, r26	; 0x09
    26d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d2:	6f 81       	ldd	r22, Y+7	; 0x07
    26d4:	78 85       	ldd	r23, Y+8	; 0x08
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e8       	ldi	r20, 0x80	; 128
    26e0:	5f e3       	ldi	r21, 0x3F	; 63
    26e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e6:	88 23       	and	r24, r24
    26e8:	2c f4       	brge	.+10     	; 0x26f4 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
    26f2:	3f c0       	rjmp	.+126    	; 0x2772 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	3f ef       	ldi	r19, 0xFF	; 255
    2700:	4f e7       	ldi	r20, 0x7F	; 127
    2702:	57 e4       	ldi	r21, 0x47	; 71
    2704:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2708:	18 16       	cp	r1, r24
    270a:	4c f5       	brge	.+82     	; 0x275e <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270c:	6b 85       	ldd	r22, Y+11	; 0x0b
    270e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2710:	8d 85       	ldd	r24, Y+13	; 0x0d
    2712:	9e 85       	ldd	r25, Y+14	; 0x0e
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e2       	ldi	r20, 0x20	; 32
    271a:	51 e4       	ldi	r21, 0x41	; 65
    271c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	bc 01       	movw	r22, r24
    2726:	cd 01       	movw	r24, r26
    2728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	0f c0       	rjmp	.+30     	; 0x2754 <LCD_enu_Clear+0xcc>
    2736:	80 e9       	ldi	r24, 0x90	; 144
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	9c 83       	std	Y+4, r25	; 0x04
    273c:	8b 83       	std	Y+3, r24	; 0x03
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_enu_Clear+0xba>
    2746:	9c 83       	std	Y+4, r25	; 0x04
    2748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274a:	8d 81       	ldd	r24, Y+5	; 0x05
    274c:	9e 81       	ldd	r25, Y+6	; 0x06
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	9e 83       	std	Y+6, r25	; 0x06
    2752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	69 f7       	brne	.-38     	; 0x2736 <LCD_enu_Clear+0xae>
    275c:	14 c0       	rjmp	.+40     	; 0x2786 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275e:	6f 81       	ldd	r22, Y+7	; 0x07
    2760:	78 85       	ldd	r23, Y+8	; 0x08
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	9a 85       	ldd	r25, Y+10	; 0x0a
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8d 83       	std	Y+5, r24	; 0x05
    2772:	8d 81       	ldd	r24, Y+5	; 0x05
    2774:	9e 81       	ldd	r25, Y+6	; 0x06
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <LCD_enu_Clear+0xf6>
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    return STATE_OK;
    2786:	81 e0       	ldi	r24, 0x01	; 1
}
    2788:	2e 96       	adiw	r28, 0x0e	; 14
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <LCD_enu_sendCustomChar>:
ES_t LCD_enu_sendCustomChar(u8 Copy_u8_charNum, u8 *Copy_pu8_charArray, u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	27 97       	sbiw	r28, 0x07	; 7
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	7d 83       	std	Y+5, r23	; 0x05
    27b2:	6c 83       	std	Y+4, r22	; 0x04
    27b4:	4e 83       	std	Y+6, r20	; 0x06
    27b6:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8a 83       	std	Y+2, r24	; 0x02
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	9d 81       	ldd	r25, Y+5	; 0x05
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	81 f1       	breq	.+96     	; 0x2824 <LCD_enu_sendCustomChar+0x8a>
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	88 30       	cpi	r24, 0x08	; 8
    27c8:	68 f5       	brcc	.+90     	; 0x2824 <LCD_enu_sendCustomChar+0x8a>
    27ca:	8e 81       	ldd	r24, Y+6	; 0x06
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	50 f5       	brcc	.+84     	; 0x2824 <LCD_enu_sendCustomChar+0x8a>
    27d0:	8f 81       	ldd	r24, Y+7	; 0x07
    27d2:	88 32       	cpi	r24, 0x28	; 40
    27d4:	38 f5       	brcc	.+78     	; 0x2824 <LCD_enu_sendCustomChar+0x8a>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	88 2f       	mov	r24, r24
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	08 96       	adiw	r24, 0x08	; 8
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    27ee:	19 82       	std	Y+1, r1	; 0x01
    27f0:	0e c0       	rjmp	.+28     	; 0x280e <LCD_enu_sendCustomChar+0x74>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	28 2f       	mov	r18, r24
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	9d 81       	ldd	r25, Y+5	; 0x05
    27fc:	fc 01       	movw	r30, r24
    27fe:	e2 0f       	add	r30, r18
    2800:	f3 1f       	adc	r31, r19
    2802:	80 81       	ld	r24, Z
    2804:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <LCD_enu_SendChar>
{
    u8 Local_u8_errorState = STATE_OK;
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	89 83       	std	Y+1, r24	; 0x01
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	78 f3       	brcs	.-34     	; 0x27f2 <LCD_enu_sendCustomChar+0x58>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(Copy_u8_lineNum, Copy_u8_Location);
    2814:	8e 81       	ldd	r24, Y+6	; 0x06
    2816:	6f 81       	ldd	r22, Y+7	; 0x07
    2818:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enu_SetCursor>
        LCD_enu_SendChar(Copy_u8_charNum);
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <LCD_enu_SendChar>
    2822:	01 c0       	rjmp	.+2      	; 0x2826 <LCD_enu_sendCustomChar+0x8c>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2824:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2828:	27 96       	adiw	r28, 0x07	; 7
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	0f 92       	push	r0
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2844:	19 82       	std	Y+1, r1	; 0x01
    2846:	33 c0       	rjmp	.+102    	; 0x28ae <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	fc 01       	movw	r30, r24
    2850:	e1 57       	subi	r30, 0x71	; 113
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	90 81       	ld	r25, Z
    2856:	81 e0       	ldi	r24, 0x01	; 1
    2858:	69 2f       	mov	r22, r25
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	88 2f       	mov	r24, r24
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	fc 01       	movw	r30, r24
    2868:	e1 57       	subi	r30, 0x71	; 113
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	90 81       	ld	r25, Z
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	69 2f       	mov	r22, r25
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	fc 01       	movw	r30, r24
    2880:	ed 56       	subi	r30, 0x6D	; 109
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	90 81       	ld	r25, Z
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	69 2f       	mov	r22, r25
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	fc 01       	movw	r30, r24
    2898:	ed 56       	subi	r30, 0x6D	; 109
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	90 81       	ld	r25, Z
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	69 2f       	mov	r22, r25
    28a2:	41 e0       	ldi	r20, 0x01	; 1
    28a4:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	8f 5f       	subi	r24, 0xFF	; 255
    28ac:	89 83       	std	Y+1, r24	; 0x01
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	84 30       	cpi	r24, 0x04	; 4
    28b2:	50 f2       	brcs	.-108    	; 0x2848 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
}
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	65 97       	sbiw	r28, 0x15	; 21
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	de bf       	out	0x3e, r29	; 62
    28ce:	0f be       	out	0x3f, r0	; 63
    28d0:	cd bf       	out	0x3d, r28	; 61
    28d2:	9d 8b       	std	Y+21, r25	; 0x15
    28d4:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	8a 8b       	std	Y+18, r24	; 0x12
    28da:	1b 8a       	std	Y+19, r1	; 0x13
    28dc:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    28de:	8c 89       	ldd	r24, Y+20	; 0x14
    28e0:	9d 89       	ldd	r25, Y+21	; 0x15
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <Keypad_enu_getKey+0x2a>
    28e6:	f0 c0       	rjmp	.+480    	; 0x2ac8 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    28e8:	ec 89       	ldd	r30, Y+20	; 0x14
    28ea:	fd 89       	ldd	r31, Y+21	; 0x15
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    28f0:	19 8a       	std	Y+17, r1	; 0x11
    28f2:	e5 c0       	rjmp	.+458    	; 0x2abe <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    28f4:	89 89       	ldd	r24, Y+17	; 0x11
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	fc 01       	movw	r30, r24
    28fc:	e1 57       	subi	r30, 0x71	; 113
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	90 81       	ld	r25, Z
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	69 2f       	mov	r22, r25
    2906:	40 e0       	ldi	r20, 0x00	; 0
    2908:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    290c:	18 8a       	std	Y+16, r1	; 0x10
    290e:	c1 c0       	rjmp	.+386    	; 0x2a92 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2910:	88 89       	ldd	r24, Y+16	; 0x10
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	fc 01       	movw	r30, r24
    2918:	ed 56       	subi	r30, 0x6D	; 109
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	90 81       	ld	r25, Z
    291e:	9e 01       	movw	r18, r28
    2920:	2d 5e       	subi	r18, 0xED	; 237
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	83 e0       	ldi	r24, 0x03	; 3
    2926:	69 2f       	mov	r22, r25
    2928:	a9 01       	movw	r20, r18
    292a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    292e:	8b 89       	ldd	r24, Y+19	; 0x13
    2930:	88 23       	and	r24, r24
    2932:	09 f0       	breq	.+2      	; 0x2936 <Keypad_enu_getKey+0x78>
    2934:	ab c0       	rjmp	.+342    	; 0x2a8c <Keypad_enu_getKey+0x1ce>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 ea       	ldi	r26, 0xA0	; 160
    293c:	b1 e4       	ldi	r27, 0x41	; 65
    293e:	8b 87       	std	Y+11, r24	; 0x0b
    2940:	9c 87       	std	Y+12, r25	; 0x0c
    2942:	ad 87       	std	Y+13, r26	; 0x0d
    2944:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6b 85       	ldd	r22, Y+11	; 0x0b
    2948:	7c 85       	ldd	r23, Y+12	; 0x0c
    294a:	8d 85       	ldd	r24, Y+13	; 0x0d
    294c:	9e 85       	ldd	r25, Y+14	; 0x0e
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a e7       	ldi	r20, 0x7A	; 122
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8f 83       	std	Y+7, r24	; 0x07
    2960:	98 87       	std	Y+8, r25	; 0x08
    2962:	a9 87       	std	Y+9, r26	; 0x09
    2964:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	3f c0       	rjmp	.+126    	; 0x2a06 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	4f e7       	ldi	r20, 0x7F	; 127
    2996:	57 e4       	ldi	r21, 0x47	; 71
    2998:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299c:	18 16       	cp	r1, r24
    299e:	4c f5       	brge	.+82     	; 0x29f2 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <Keypad_enu_getKey+0x12a>
    29ca:	80 e9       	ldi	r24, 0x90	; 144
    29cc:	91 e0       	ldi	r25, 0x01	; 1
    29ce:	9c 83       	std	Y+4, r25	; 0x04
    29d0:	8b 83       	std	Y+3, r24	; 0x03
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	9c 81       	ldd	r25, Y+4	; 0x04
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <Keypad_enu_getKey+0x118>
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <Keypad_enu_getKey+0x10c>
    29f0:	14 c0       	rjmp	.+40     	; 0x2a1a <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <Keypad_enu_getKey+0x154>
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2a1a:	88 89       	ldd	r24, Y+16	; 0x10
    2a1c:	88 2f       	mov	r24, r24
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	fc 01       	movw	r30, r24
    2a22:	ed 56       	subi	r30, 0x6D	; 109
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	90 81       	ld	r25, Z
    2a28:	9e 01       	movw	r18, r28
    2a2a:	2d 5e       	subi	r18, 0xED	; 237
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	83 e0       	ldi	r24, 0x03	; 3
    2a30:	69 2f       	mov	r22, r25
    2a32:	a9 01       	movw	r20, r18
    2a34:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <DIO_enu_GetPinValue>
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2a3a:	88 89       	ldd	r24, Y+16	; 0x10
    2a3c:	88 2f       	mov	r24, r24
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	fc 01       	movw	r30, r24
    2a42:	ed 56       	subi	r30, 0x6D	; 109
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	90 81       	ld	r25, Z
    2a48:	9e 01       	movw	r18, r28
    2a4a:	2d 5e       	subi	r18, 0xED	; 237
    2a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4e:	83 e0       	ldi	r24, 0x03	; 3
    2a50:	69 2f       	mov	r22, r25
    2a52:	a9 01       	movw	r20, r18
    2a54:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2a58:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5a:	88 23       	and	r24, r24
    2a5c:	71 f3       	breq	.-36     	; 0x2a3a <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2a5e:	89 89       	ldd	r24, Y+17	; 0x11
    2a60:	48 2f       	mov	r20, r24
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	88 89       	ldd	r24, Y+16	; 0x10
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	ca 01       	movw	r24, r20
    2a6c:	88 0f       	add	r24, r24
    2a6e:	99 1f       	adc	r25, r25
    2a70:	88 0f       	add	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	82 0f       	add	r24, r18
    2a76:	93 1f       	adc	r25, r19
    2a78:	fc 01       	movw	r30, r24
    2a7a:	e1 58       	subi	r30, 0x81	; 129
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	ec 89       	ldd	r30, Y+20	; 0x14
    2a82:	fd 89       	ldd	r31, Y+21	; 0x15
    2a84:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
    2a8a:	07 c0       	rjmp	.+14     	; 0x2a9a <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2a8c:	88 89       	ldd	r24, Y+16	; 0x10
    2a8e:	8f 5f       	subi	r24, 0xFF	; 255
    2a90:	88 8b       	std	Y+16, r24	; 0x10
    2a92:	88 89       	ldd	r24, Y+16	; 0x10
    2a94:	84 30       	cpi	r24, 0x04	; 4
    2a96:	08 f4       	brcc	.+2      	; 0x2a9a <Keypad_enu_getKey+0x1dc>
    2a98:	3b cf       	rjmp	.-394    	; 0x2910 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2a9a:	89 89       	ldd	r24, Y+17	; 0x11
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	fc 01       	movw	r30, r24
    2aa2:	e1 57       	subi	r30, 0x71	; 113
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	90 81       	ld	r25, Z
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	69 2f       	mov	r22, r25
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2ab2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab4:	88 23       	and	r24, r24
    2ab6:	49 f4       	brne	.+18     	; 0x2aca <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2ab8:	89 89       	ldd	r24, Y+17	; 0x11
    2aba:	8f 5f       	subi	r24, 0xFF	; 255
    2abc:	89 8b       	std	Y+17, r24	; 0x11
    2abe:	89 89       	ldd	r24, Y+17	; 0x11
    2ac0:	84 30       	cpi	r24, 0x04	; 4
    2ac2:	08 f4       	brcc	.+2      	; 0x2ac6 <Keypad_enu_getKey+0x208>
    2ac4:	17 cf       	rjmp	.-466    	; 0x28f4 <Keypad_enu_getKey+0x36>
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2ac8:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2aca:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2acc:	65 96       	adiw	r28, 0x15	; 21
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	cf 91       	pop	r28
    2ada:	df 91       	pop	r29
    2adc:	08 95       	ret

00002ade <EEPROM_enu_Write>:
#include"../../1-MCAL/I2C/I2C_Interface.h"

#include"EEPROM_Config.h"
#include"EEPROM_Private.h"

ES_t EEPROM_enu_Write(u16 Copy_u8_Location,u8 Copy_u8_Data){
    2ade:	df 93       	push	r29
    2ae0:	cf 93       	push	r28
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
    2ae6:	61 97       	sbiw	r28, 0x11	; 17
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	98 8b       	std	Y+16, r25	; 0x10
    2af4:	8f 87       	std	Y+15, r24	; 0x0f
    2af6:	69 8b       	std	Y+17, r22	; 0x11
    I2C_enu_Start();
    2af8:	0e 94 90 22 	call	0x4520	; 0x4520 <I2C_enu_Start>
    I2C_enu_writeData(0x50|(A2_PIN <<2)|(Copy_u8_Location>>8),(u8)Copy_u8_Location);
    2afc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afe:	98 89       	ldd	r25, Y+16	; 0x10
    2b00:	89 2f       	mov	r24, r25
    2b02:	99 27       	eor	r25, r25
    2b04:	80 65       	ori	r24, 0x50	; 80
    2b06:	2f 85       	ldd	r18, Y+15	; 0x0f
    2b08:	62 2f       	mov	r22, r18
    2b0a:	0e 94 b7 22 	call	0x456e	; 0x456e <I2C_enu_writeData>
    I2C_enu_writeData(NONE,Copy_u8_Data);
    2b0e:	88 ee       	ldi	r24, 0xE8	; 232
    2b10:	93 e0       	ldi	r25, 0x03	; 3
    2b12:	69 89       	ldd	r22, Y+17	; 0x11
    2b14:	0e 94 b7 22 	call	0x456e	; 0x456e <I2C_enu_writeData>
    I2C_enu_Stop();
    2b18:	0e 94 a1 22 	call	0x4542	; 0x4542 <I2C_enu_Stop>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e2       	ldi	r26, 0x20	; 32
    2b22:	b1 e4       	ldi	r27, 0x41	; 65
    2b24:	8b 87       	std	Y+11, r24	; 0x0b
    2b26:	9c 87       	std	Y+12, r25	; 0x0c
    2b28:	ad 87       	std	Y+13, r26	; 0x0d
    2b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a e7       	ldi	r20, 0x7A	; 122
    2b3a:	55 e4       	ldi	r21, 0x45	; 69
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	8f 83       	std	Y+7, r24	; 0x07
    2b46:	98 87       	std	Y+8, r25	; 0x08
    2b48:	a9 87       	std	Y+9, r26	; 0x09
    2b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4e:	78 85       	ldd	r23, Y+8	; 0x08
    2b50:	89 85       	ldd	r24, Y+9	; 0x09
    2b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <EEPROM_enu_Write+0x90>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9e 83       	std	Y+6, r25	; 0x06
    2b6a:	8d 83       	std	Y+5, r24	; 0x05
    2b6c:	3f c0       	rjmp	.+126    	; 0x2bec <EEPROM_enu_Write+0x10e>
	else if (__tmp > 65535)
    2b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b70:	78 85       	ldd	r23, Y+8	; 0x08
    2b72:	89 85       	ldd	r24, Y+9	; 0x09
    2b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	4c f5       	brge	.+82     	; 0x2bd8 <EEPROM_enu_Write+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e2       	ldi	r20, 0x20	; 32
    2b94:	51 e4       	ldi	r21, 0x41	; 65
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <EEPROM_enu_Write+0xf0>
    2bb0:	80 e9       	ldi	r24, 0x90	; 144
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	9c 83       	std	Y+4, r25	; 0x04
    2bb6:	8b 83       	std	Y+3, r24	; 0x03
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <EEPROM_enu_Write+0xde>
    2bc0:	9c 83       	std	Y+4, r25	; 0x04
    2bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	9e 83       	std	Y+6, r25	; 0x06
    2bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <EEPROM_enu_Write+0xd2>
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <EEPROM_enu_Write+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bda:	78 85       	ldd	r23, Y+8	; 0x08
    2bdc:	89 85       	ldd	r24, Y+9	; 0x09
    2bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	9e 83       	std	Y+6, r25	; 0x06
    2bea:	8d 83       	std	Y+5, r24	; 0x05
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	9a 83       	std	Y+2, r25	; 0x02
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <EEPROM_enu_Write+0x11a>
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
    return STATE_OK;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
}
    2c02:	61 96       	adiw	r28, 0x11	; 17
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <EEPROM_enu_Read>:
ES_t EEPROM_enu_Read(u16 Copy_u8_Location,u8 *Copy_u8_receivedData){
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <EEPROM_enu_Read+0x6>
    2c1a:	00 d0       	rcall	.+0      	; 0x2c1c <EEPROM_enu_Read+0x8>
    2c1c:	0f 92       	push	r0
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	9b 83       	std	Y+3, r25	; 0x03
    2c24:	8a 83       	std	Y+2, r24	; 0x02
    2c26:	7d 83       	std	Y+5, r23	; 0x05
    2c28:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_receivedData != NULL)
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	9d 81       	ldd	r25, Y+5	; 0x05
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	d1 f0       	breq	.+52     	; 0x2c6a <EEPROM_enu_Read+0x56>
    {
        I2C_enu_Start();
    2c36:	0e 94 90 22 	call	0x4520	; 0x4520 <I2C_enu_Start>
        I2C_enu_writeData(0x50 | (A2_PIN << 2) | (Copy_u8_Location >> 8), (u8)Copy_u8_Location);
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	89 2f       	mov	r24, r25
    2c40:	99 27       	eor	r25, r25
    2c42:	80 65       	ori	r24, 0x50	; 80
    2c44:	2a 81       	ldd	r18, Y+2	; 0x02
    2c46:	62 2f       	mov	r22, r18
    2c48:	0e 94 b7 22 	call	0x456e	; 0x456e <I2C_enu_writeData>
        I2C_enu_Start();
    2c4c:	0e 94 90 22 	call	0x4520	; 0x4520 <I2C_enu_Start>
        I2C_enu_readData(0x50 | (A2_PIN << 2) | (Copy_u8_Location >> 8), Copy_u8_receivedData);
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	89 2f       	mov	r24, r25
    2c56:	99 27       	eor	r25, r25
    2c58:	80 65       	ori	r24, 0x50	; 80
    2c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c5e:	b9 01       	movw	r22, r18
    2c60:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <I2C_enu_readData>
        I2C_enu_Stop();
    2c64:	0e 94 a1 22 	call	0x4542	; 0x4542 <I2C_enu_Stop>
    2c68:	01 c0       	rjmp	.+2      	; 0x2c6c <EEPROM_enu_Read+0x58>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2c6a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <DC_Motor_enu_Init+0x6>
    2c84:	0f 92       	push	r0
    2c86:	cd b7       	in	r28, 0x3d	; 61
    2c88:	de b7       	in	r29, 0x3e	; 62
    2c8a:	8a 83       	std	Y+2, r24	; 0x02
    2c8c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	19 f0       	breq	.+6      	; 0x2c9e <DC_Motor_enu_Init+0x20>
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	88 23       	and	r24, r24
    2c9c:	59 f5       	brne	.+86     	; 0x2cf4 <DC_Motor_enu_Init+0x76>
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	81 30       	cpi	r24, 0x01	; 1
    2ca2:	19 f0       	breq	.+6      	; 0x2caa <DC_Motor_enu_Init+0x2c>
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	88 23       	and	r24, r24
    2ca8:	29 f5       	brne	.+74     	; 0x2cf4 <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	81 30       	cpi	r24, 0x01	; 1
    2cae:	79 f4       	brne	.+30     	; 0x2cce <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	64 e0       	ldi	r22, 0x04	; 4
    2cb4:	41 e0       	ldi	r20, 0x01	; 1
    2cb6:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	61 e0       	ldi	r22, 0x01	; 1
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    2cce:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd0:	81 30       	cpi	r24, 0x01	; 1
    2cd2:	89 f4       	brne	.+34     	; 0x2cf6 <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	65 e0       	ldi	r22, 0x05	; 5
    2cd8:	41 e0       	ldi	r20, 0x01	; 1
    2cda:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    2cde:	82 e0       	ldi	r24, 0x02	; 2
    2ce0:	62 e0       	ldi	r22, 0x02	; 2
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    2ce8:	82 e0       	ldi	r24, 0x02	; 2
    2cea:	63 e0       	ldi	r22, 0x03	; 3
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2cf4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	29 97       	sbiw	r28, 0x09	; 9
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	8a 83       	std	Y+2, r24	; 0x02
    2d1a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	39 87       	std	Y+9, r19	; 0x09
    2d28:	28 87       	std	Y+8, r18	; 0x08
    2d2a:	88 85       	ldd	r24, Y+8	; 0x08
    2d2c:	99 85       	ldd	r25, Y+9	; 0x09
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	31 f0       	breq	.+12     	; 0x2d3e <DC_Motor_enu_Rotate+0x3a>
    2d32:	28 85       	ldd	r18, Y+8	; 0x08
    2d34:	39 85       	ldd	r19, Y+9	; 0x09
    2d36:	21 30       	cpi	r18, 0x01	; 1
    2d38:	31 05       	cpc	r19, r1
    2d3a:	89 f1       	breq	.+98     	; 0x2d9e <DC_Motor_enu_Rotate+0x9a>
    2d3c:	60 c0       	rjmp	.+192    	; 0x2dfe <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    2d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d40:	28 2f       	mov	r18, r24
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	3f 83       	std	Y+7, r19	; 0x07
    2d46:	2e 83       	std	Y+6, r18	; 0x06
    2d48:	8e 81       	ldd	r24, Y+6	; 0x06
    2d4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	a9 f0       	breq	.+42     	; 0x2d7a <DC_Motor_enu_Rotate+0x76>
    2d50:	2e 81       	ldd	r18, Y+6	; 0x06
    2d52:	3f 81       	ldd	r19, Y+7	; 0x07
    2d54:	21 30       	cpi	r18, 0x01	; 1
    2d56:	31 05       	cpc	r19, r1
    2d58:	01 f5       	brne	.+64     	; 0x2d9a <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	64 e0       	ldi	r22, 0x04	; 4
    2d5e:	41 e0       	ldi	r20, 0x01	; 1
    2d60:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	60 e0       	ldi	r22, 0x00	; 0
    2d68:	41 e0       	ldi	r20, 0x01	; 1
    2d6a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    2d6e:	82 e0       	ldi	r24, 0x02	; 2
    2d70:	61 e0       	ldi	r22, 0x01	; 1
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    2d78:	43 c0       	rjmp	.+134    	; 0x2e00 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    2d7a:	82 e0       	ldi	r24, 0x02	; 2
    2d7c:	64 e0       	ldi	r22, 0x04	; 4
    2d7e:	41 e0       	ldi	r20, 0x01	; 1
    2d80:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	60 e0       	ldi	r22, 0x00	; 0
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    2d8e:	82 e0       	ldi	r24, 0x02	; 2
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	41 e0       	ldi	r20, 0x01	; 1
    2d94:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    2d98:	33 c0       	rjmp	.+102    	; 0x2e00 <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    2d9a:	19 82       	std	Y+1, r1	; 0x01
    2d9c:	31 c0       	rjmp	.+98     	; 0x2e00 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	3d 83       	std	Y+5, r19	; 0x05
    2da6:	2c 83       	std	Y+4, r18	; 0x04
    2da8:	8c 81       	ldd	r24, Y+4	; 0x04
    2daa:	9d 81       	ldd	r25, Y+5	; 0x05
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	a9 f0       	breq	.+42     	; 0x2dda <DC_Motor_enu_Rotate+0xd6>
    2db0:	2c 81       	ldd	r18, Y+4	; 0x04
    2db2:	3d 81       	ldd	r19, Y+5	; 0x05
    2db4:	21 30       	cpi	r18, 0x01	; 1
    2db6:	31 05       	cpc	r19, r1
    2db8:	01 f5       	brne	.+64     	; 0x2dfa <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	65 e0       	ldi	r22, 0x05	; 5
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    2dc4:	82 e0       	ldi	r24, 0x02	; 2
    2dc6:	62 e0       	ldi	r22, 0x02	; 2
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	63 e0       	ldi	r22, 0x03	; 3
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    2dd8:	13 c0       	rjmp	.+38     	; 0x2e00 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    2dda:	82 e0       	ldi	r24, 0x02	; 2
    2ddc:	65 e0       	ldi	r22, 0x05	; 5
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    2de4:	82 e0       	ldi	r24, 0x02	; 2
    2de6:	62 e0       	ldi	r22, 0x02	; 2
    2de8:	40 e0       	ldi	r20, 0x00	; 0
    2dea:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	63 e0       	ldi	r22, 0x03	; 3
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    2df8:	03 c0       	rjmp	.+6      	; 0x2e00 <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    2dfa:	19 82       	std	Y+1, r1	; 0x01
    2dfc:	01 c0       	rjmp	.+2      	; 0x2e00 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    2dfe:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e02:	29 96       	adiw	r28, 0x09	; 9
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <DC_Motor_enu_Stop+0x6>
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	88 23       	and	r24, r24
    2e28:	31 f4       	brne	.+12     	; 0x2e36 <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    2e2a:	82 e0       	ldi	r24, 0x02	; 2
    2e2c:	64 e0       	ldi	r22, 0x04	; 4
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    2e34:	0a c0       	rjmp	.+20     	; 0x2e4a <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	31 f4       	brne	.+12     	; 0x2e48 <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	65 e0       	ldi	r22, 0x05	; 5
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <DIO_enu_SetPinValue>
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2e48:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <WDT_enu_Enable>:
#include"../../5-LIB/BIT_MATH.h"
#include"WDT_Config.h"
#include"WDT_Private.h"


ES_t WDT_enu_Enable(u8 Copy_u8_Time){
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <WDT_enu_Enable+0x6>
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_enu_errorState = STATE_OK;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Time<8){
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	88 30       	cpi	r24, 0x08	; 8
    2e6a:	80 f4       	brcc	.+32     	; 0x2e8c <WDT_enu_Enable+0x36>
        /*Enable With Input Time*/
        WDT_WDTCR_REG |= Copy_u8_Time;
    2e6c:	a1 e4       	ldi	r26, 0x41	; 65
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e1 e4       	ldi	r30, 0x41	; 65
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	90 81       	ld	r25, Z
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	89 2b       	or	r24, r25
    2e7a:	8c 93       	st	X, r24
        SET_BIT(WDT_WDTCR_REG,WDE);
    2e7c:	a1 e4       	ldi	r26, 0x41	; 65
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	e1 e4       	ldi	r30, 0x41	; 65
    2e82:	f0 e0       	ldi	r31, 0x00	; 0
    2e84:	80 81       	ld	r24, Z
    2e86:	88 60       	ori	r24, 0x08	; 8
    2e88:	8c 93       	st	X, r24
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <WDT_enu_Enable+0x38>
    }else{
        Local_enu_errorState = STATE_NOT_OK;
    2e8c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_enu_errorState;
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <WDT_enu_Disable>:
ES_t WDT_enu_Disable(void){
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    /*Disable Sequance*/
    WDT_WDTCR_REG |= ((1<<WDTOE) | (1<<WDE));
    2ea2:	a1 e4       	ldi	r26, 0x41	; 65
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e1 e4       	ldi	r30, 0x41	; 65
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	88 61       	ori	r24, 0x18	; 24
    2eae:	8c 93       	st	X, r24
    WDT_WDTCR_REG = 0x00;
    2eb0:	e1 e4       	ldi	r30, 0x41	; 65
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	10 82       	st	Z, r1
    return STATE_OK;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <UART_enu_Init>:
#include"UART_Private.h"
static void(*UART_pf_TX)(void) =NULL;
static void(*UART_pf_RX)(void) =NULL;
static u8 *UART_pu8_String = NULL;

ES_t UART_enu_Init(void){
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <UART_enu_Init+0x6>
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <UART_enu_Init+0x8>
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    u16 Local_u16_UBRRValue = 0;
    2eca:	1b 82       	std	Y+3, r1	; 0x03
    2ecc:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_UCSRCValue = UCSRC_INITIAL_VALUE;
    2ece:	80 e8       	ldi	r24, 0x80	; 128
    2ed0:	89 83       	std	Y+1, r24	; 0x01
/****************** UART Mode ****************/
    #if UART_MODE == ASYNCH_NORMAL_MODE
    CLR_BIT(UART_UCSRA_REG,U2X);
    2ed2:	ab e2       	ldi	r26, 0x2B	; 43
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	eb e2       	ldi	r30, 0x2B	; 43
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	8d 7f       	andi	r24, 0xFD	; 253
    2ede:	8c 93       	st	X, r24
    //CLR_BIT(UART_UCSRA_REG,MPCM);
    CLR_BIT(Local_u8_UCSRCValue,UMSEL);
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	8f 7b       	andi	r24, 0xBF	; 191
    2ee4:	89 83       	std	Y+1, r24	; 0x01
    Local_u16_UBRRValue = (F_CPU/(16UL*UART_BAUD_RATE))-1;
    2ee6:	87 e6       	ldi	r24, 0x67	; 103
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	9b 83       	std	Y+3, r25	; 0x03
    2eec:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(Local_u8_UCSRCValue,UMSEL);
    Local_u16_boudRateValue = (F_CPU/(2UL*UART_BAUD_RATE))-1;
    #endif
/****************** UART Stop Bits ****************/
    #if UART_STOP_BITS == ONE_BIT
    CLR_BIT(Local_u8_UCSRCValue,USBS);
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	87 7f       	andi	r24, 0xF7	; 247
    2ef2:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_DATA_BITS == _7_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    CLR_BIT(Local_u8_UCSRCValue,UCZ0);
    #elif UART_DATA_BITS == _8_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    2ef4:	aa e2       	ldi	r26, 0x2A	; 42
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	ea e2       	ldi	r30, 0x2A	; 42
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	8b 7f       	andi	r24, 0xFB	; 251
    2f00:	8c 93       	st	X, r24
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	84 60       	ori	r24, 0x04	; 4
    2f06:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	82 60       	ori	r24, 0x02	; 2
    2f0c:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    #endif
/******************UART Parity Bit****************/
    #if UART_PARITY_BIT == NONE
    CLR_BIT(Local_u8_UCSRCValue,UPM1);
    2f0e:	89 81       	ldd	r24, Y+1	; 0x01
    2f10:	8f 7d       	andi	r24, 0xDF	; 223
    2f12:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	8f 7e       	andi	r24, 0xEF	; 239
    2f18:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_PARITY_BIT == EVEN_PARITY
    SET_BIT(Local_u8_UCSRCValue,UPM1);
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    #endif   
/************** Update UCSRC REG ********************/
    UART_UCSRC_REG = Local_u8_UCSRCValue;
    2f1a:	e0 e4       	ldi	r30, 0x40	; 64
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	80 83       	st	Z, r24
/************** Baud Rate Value***********************/
    UART_UBRRL_REG = (u8)Local_u16_UBRRValue;
    2f22:	e9 e2       	ldi	r30, 0x29	; 41
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	8a 81       	ldd	r24, Y+2	; 0x02
    2f28:	80 83       	st	Z, r24
    UART_UBRRH_REG = (u8)(Local_u16_UBRRValue>>8);
    2f2a:	e0 e4       	ldi	r30, 0x40	; 64
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	89 2f       	mov	r24, r25
    2f34:	99 27       	eor	r25, r25
    2f36:	80 83       	st	Z, r24
/************** Enable (RX-TX) ************************/
    SET_BIT(UART_UCSRB_REG,RXEN);
    2f38:	aa e2       	ldi	r26, 0x2A	; 42
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	ea e2       	ldi	r30, 0x2A	; 42
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	80 61       	ori	r24, 0x10	; 16
    2f44:	8c 93       	st	X, r24
    SET_BIT(UART_UCSRB_REG,TXEN);
    2f46:	aa e2       	ldi	r26, 0x2A	; 42
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	ea e2       	ldi	r30, 0x2A	; 42
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	88 60       	ori	r24, 0x08	; 8
    2f52:	8c 93       	st	X, r24
}
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <UART_enu_sendChar>:
ES_t UART_enu_sendChar(u8 Copy_u8_Char){
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	00 d0       	rcall	.+0      	; 0x2f68 <UART_enu_sendChar+0x6>
    2f68:	cd b7       	in	r28, 0x3d	; 61
    2f6a:	de b7       	in	r29, 0x3e	; 62
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    /*Wait Transmit register is empty*/
    while(!GET_BIT(UART_UCSRA_REG,UDRE));
    2f6e:	eb e2       	ldi	r30, 0x2B	; 43
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	82 95       	swap	r24
    2f76:	86 95       	lsr	r24
    2f78:	87 70       	andi	r24, 0x07	; 7
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	81 70       	andi	r24, 0x01	; 1
    2f80:	90 70       	andi	r25, 0x00	; 0
    2f82:	00 97       	sbiw	r24, 0x00	; 0
    2f84:	a1 f3       	breq	.-24     	; 0x2f6e <UART_enu_sendChar+0xc>
    /*Send Byte Value*/
    UART_UDR_REG = Copy_u8_Char;
    2f86:	ec e2       	ldi	r30, 0x2C	; 44
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	80 83       	st	Z, r24
}
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <UART_enu_recieveChar>:
ES_t UART_enu_recieveChar(u8 *Copy_pu8_recievedChar){
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <UART_enu_recieveChar+0x6>
    2f9e:	0f 92       	push	r0
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	9b 83       	std	Y+3, r25	; 0x03
    2fa6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedChar!= NULL){
    2fac:	8a 81       	ldd	r24, Y+2	; 0x02
    2fae:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	61 f0       	breq	.+24     	; 0x2fcc <UART_enu_recieveChar+0x34>
        /*Wait The Data Is Recieved */
        while(!GET_BIT(UART_UCSRA_REG,RXC));
    2fb4:	eb e2       	ldi	r30, 0x2B	; 43
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	80 81       	ld	r24, Z
    2fba:	88 23       	and	r24, r24
    2fbc:	dc f7       	brge	.-10     	; 0x2fb4 <UART_enu_recieveChar+0x1c>
        *Copy_pu8_recievedChar = UART_UDR_REG;
    2fbe:	ec e2       	ldi	r30, 0x2C	; 44
    2fc0:	f0 e0       	ldi	r31, 0x00	; 0
    2fc2:	80 81       	ld	r24, Z
    2fc4:	ea 81       	ldd	r30, Y+2	; 0x02
    2fc6:	fb 81       	ldd	r31, Y+3	; 0x03
    2fc8:	80 83       	st	Z, r24
    2fca:	01 c0       	rjmp	.+2      	; 0x2fce <UART_enu_recieveChar+0x36>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2fcc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <UART_enu_sendString>:
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	00 d0       	rcall	.+0      	; 0x2fe2 <UART_enu_sendString+0x6>
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <UART_enu_sendString+0x8>
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	9c 83       	std	Y+4, r25	; 0x04
    2fea:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_pu8_String!=NULL){
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	c9 f1       	breq	.+114    	; 0x306a <UART_enu_sendString+0x8e>
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    2ff8:	19 82       	std	Y+1, r1	; 0x01
    2ffa:	1b c0       	rjmp	.+54     	; 0x3032 <UART_enu_sendString+0x56>
        /*Wait Transmit register is empty*/
        while(!GET_BIT(UART_UCSRA_REG,UDRE));
    2ffc:	eb e2       	ldi	r30, 0x2B	; 43
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	82 95       	swap	r24
    3004:	86 95       	lsr	r24
    3006:	87 70       	andi	r24, 0x07	; 7
    3008:	88 2f       	mov	r24, r24
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	81 70       	andi	r24, 0x01	; 1
    300e:	90 70       	andi	r25, 0x00	; 0
    3010:	00 97       	sbiw	r24, 0x00	; 0
    3012:	a1 f3       	breq	.-24     	; 0x2ffc <UART_enu_sendString+0x20>
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    3014:	ac e2       	ldi	r26, 0x2C	; 44
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	28 2f       	mov	r18, r24
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	fc 01       	movw	r30, r24
    3024:	e2 0f       	add	r30, r18
    3026:	f3 1f       	adc	r31, r19
    3028:	80 81       	ld	r24, Z
    302a:	8c 93       	st	X, r24
    return Local_u8_errorState;
}
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_String!=NULL){
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	8f 5f       	subi	r24, 0xFF	; 255
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	28 2f       	mov	r18, r24
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	8b 81       	ldd	r24, Y+3	; 0x03
    303a:	9c 81       	ldd	r25, Y+4	; 0x04
    303c:	fc 01       	movw	r30, r24
    303e:	e2 0f       	add	r30, r18
    3040:	f3 1f       	adc	r31, r19
    3042:	80 81       	ld	r24, Z
    3044:	88 23       	and	r24, r24
    3046:	d1 f6       	brne	.-76     	; 0x2ffc <UART_enu_sendString+0x20>
        /*Wait Transmit register is empty*/
        while(!GET_BIT(UART_UCSRA_REG,UDRE));
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    }
    while((!GET_BIT(UART_UCSRA_REG,UDRE)));
    3048:	eb e2       	ldi	r30, 0x2B	; 43
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	82 95       	swap	r24
    3050:	86 95       	lsr	r24
    3052:	87 70       	andi	r24, 0x07	; 7
    3054:	88 2f       	mov	r24, r24
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	81 70       	andi	r24, 0x01	; 1
    305a:	90 70       	andi	r25, 0x00	; 0
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	a1 f3       	breq	.-24     	; 0x3048 <UART_enu_sendString+0x6c>
    UART_UDR_REG = '\r';
    3060:	ec e2       	ldi	r30, 0x2C	; 44
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	8d e0       	ldi	r24, 0x0D	; 13
    3066:	80 83       	st	Z, r24
    3068:	01 c0       	rjmp	.+2      	; 0x306c <UART_enu_sendString+0x90>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    306a:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    306c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <UART_enu_recieveString>:
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	00 d0       	rcall	.+0      	; 0x3082 <UART_enu_recieveString+0x6>
    3082:	00 d0       	rcall	.+0      	; 0x3084 <UART_enu_recieveString+0x8>
    3084:	0f 92       	push	r0
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	9c 83       	std	Y+4, r25	; 0x04
    308c:	8b 83       	std	Y+3, r24	; 0x03
    308e:	6d 83       	std	Y+5, r22	; 0x05
    u8 Local_u8_Iterator = 0;
    3090:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedString!= NULL){
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	9c 81       	ldd	r25, Y+4	; 0x04
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	19 f1       	breq	.+70     	; 0x30e4 <UART_enu_recieveString+0x68>
    309e:	14 c0       	rjmp	.+40     	; 0x30c8 <UART_enu_recieveString+0x4c>
        while(Local_u8_Iterator < Copy_u8_messageSize){
            while(!GET_BIT(UART_UCSRA_REG,RXC));
    30a0:	eb e2       	ldi	r30, 0x2B	; 43
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	80 81       	ld	r24, Z
    30a6:	88 23       	and	r24, r24
    30a8:	dc f7       	brge	.-10     	; 0x30a0 <UART_enu_recieveString+0x24>
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	dc 01       	movw	r26, r24
    30b6:	a2 0f       	add	r26, r18
    30b8:	b3 1f       	adc	r27, r19
    30ba:	ec e2       	ldi	r30, 0x2C	; 44
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	8c 93       	st	X, r24
            Local_u8_Iterator++;
    30c2:	8a 81       	ldd	r24, Y+2	; 0x02
    30c4:	8f 5f       	subi	r24, 0xFF	; 255
    30c6:	8a 83       	std	Y+2, r24	; 0x02
}
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    u8 Local_u8_Iterator = 0;
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_recievedString!= NULL){
        while(Local_u8_Iterator < Copy_u8_messageSize){
    30c8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ca:	8d 81       	ldd	r24, Y+5	; 0x05
    30cc:	98 17       	cp	r25, r24
    30ce:	40 f3       	brcs	.-48     	; 0x30a0 <UART_enu_recieveString+0x24>
            while(!GET_BIT(UART_UCSRA_REG,RXC));
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
            Local_u8_Iterator++;
        }
        Copy_pu8_recievedString[Local_u8_Iterator] = '\0';
    30d0:	8a 81       	ldd	r24, Y+2	; 0x02
    30d2:	28 2f       	mov	r18, r24
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	8b 81       	ldd	r24, Y+3	; 0x03
    30d8:	9c 81       	ldd	r25, Y+4	; 0x04
    30da:	fc 01       	movw	r30, r24
    30dc:	e2 0f       	add	r30, r18
    30de:	f3 1f       	adc	r31, r19
    30e0:	10 82       	st	Z, r1
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <UART_enu_recieveString+0x6a>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    30e4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	cf 91       	pop	r28
    30f4:	df 91       	pop	r29
    30f6:	08 95       	ret

000030f8 <UART_enu_sendNUmber>:
ES_t UART_enu_sendNUmber(s32 Copy_s32_Num){
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	61 97       	sbiw	r28, 0x11	; 17
    3106:	0f b6       	in	r0, 0x3f	; 63
    3108:	f8 94       	cli
    310a:	de bf       	out	0x3e, r29	; 62
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	cd bf       	out	0x3d, r28	; 61
    3110:	6e 87       	std	Y+14, r22	; 0x0e
    3112:	7f 87       	std	Y+15, r23	; 0x0f
    3114:	88 8b       	std	Y+16, r24	; 0x10
    3116:	99 8b       	std	Y+17, r25	; 0x11
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0,flag = 0;
    3118:	1b 82       	std	Y+3, r1	; 0x03
    311a:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    311c:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_s32_Num < 0){
    311e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3120:	9f 85       	ldd	r25, Y+15	; 0x0f
    3122:	a8 89       	ldd	r26, Y+16	; 0x10
    3124:	b9 89       	ldd	r27, Y+17	; 0x11
    3126:	bb 23       	and	r27, r27
    3128:	8c f4       	brge	.+34     	; 0x314c <UART_enu_sendNUmber+0x54>
        Copy_s32_Num *= -1;
    312a:	8e 85       	ldd	r24, Y+14	; 0x0e
    312c:	9f 85       	ldd	r25, Y+15	; 0x0f
    312e:	a8 89       	ldd	r26, Y+16	; 0x10
    3130:	b9 89       	ldd	r27, Y+17	; 0x11
    3132:	b0 95       	com	r27
    3134:	a0 95       	com	r26
    3136:	90 95       	com	r25
    3138:	81 95       	neg	r24
    313a:	9f 4f       	sbci	r25, 0xFF	; 255
    313c:	af 4f       	sbci	r26, 0xFF	; 255
    313e:	bf 4f       	sbci	r27, 0xFF	; 255
    3140:	8e 87       	std	Y+14, r24	; 0x0e
    3142:	9f 87       	std	Y+15, r25	; 0x0f
    3144:	a8 8b       	std	Y+16, r26	; 0x10
    3146:	b9 8b       	std	Y+17, r27	; 0x11
        flag =1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	8a 83       	std	Y+2, r24	; 0x02
    }
    if (Copy_s32_Num == 0){
    314c:	8e 85       	ldd	r24, Y+14	; 0x0e
    314e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3150:	a8 89       	ldd	r26, Y+16	; 0x10
    3152:	b9 89       	ldd	r27, Y+17	; 0x11
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	a1 05       	cpc	r26, r1
    3158:	b1 05       	cpc	r27, r1
    315a:	a9 f5       	brne	.+106    	; 0x31c6 <UART_enu_sendNUmber+0xce>
        UART_enu_sendChar('0');
    315c:	80 e3       	ldi	r24, 0x30	; 48
    315e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <UART_enu_sendChar>
        UART_enu_sendChar('\r');
    3162:	8d e0       	ldi	r24, 0x0D	; 13
    3164:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <UART_enu_sendChar>
    3168:	60 c0       	rjmp	.+192    	; 0x322a <UART_enu_sendNUmber+0x132>
    }
    else
    {
        while (Copy_s32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = (Copy_s32_Num % 10) + '0';
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	08 2f       	mov	r16, r24
    316e:	10 e0       	ldi	r17, 0x00	; 0
    3170:	8e 85       	ldd	r24, Y+14	; 0x0e
    3172:	9f 85       	ldd	r25, Y+15	; 0x0f
    3174:	a8 89       	ldd	r26, Y+16	; 0x10
    3176:	b9 89       	ldd	r27, Y+17	; 0x11
    3178:	2a e0       	ldi	r18, 0x0A	; 10
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e0       	ldi	r20, 0x00	; 0
    317e:	50 e0       	ldi	r21, 0x00	; 0
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <__divmodsi4>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	28 2f       	mov	r18, r24
    318e:	20 5d       	subi	r18, 0xD0	; 208
    3190:	ce 01       	movw	r24, r28
    3192:	04 96       	adiw	r24, 0x04	; 4
    3194:	fc 01       	movw	r30, r24
    3196:	e0 0f       	add	r30, r16
    3198:	f1 1f       	adc	r31, r17
    319a:	20 83       	st	Z, r18
            Copy_s32_Num /= 10;
    319c:	8e 85       	ldd	r24, Y+14	; 0x0e
    319e:	9f 85       	ldd	r25, Y+15	; 0x0f
    31a0:	a8 89       	ldd	r26, Y+16	; 0x10
    31a2:	b9 89       	ldd	r27, Y+17	; 0x11
    31a4:	2a e0       	ldi	r18, 0x0A	; 10
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e0       	ldi	r20, 0x00	; 0
    31aa:	50 e0       	ldi	r21, 0x00	; 0
    31ac:	bc 01       	movw	r22, r24
    31ae:	cd 01       	movw	r24, r26
    31b0:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <__divmodsi4>
    31b4:	da 01       	movw	r26, r20
    31b6:	c9 01       	movw	r24, r18
    31b8:	8e 87       	std	Y+14, r24	; 0x0e
    31ba:	9f 87       	std	Y+15, r25	; 0x0f
    31bc:	a8 8b       	std	Y+16, r26	; 0x10
    31be:	b9 8b       	std	Y+17, r27	; 0x11
            Local_u8_iterator1++;
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	8f 5f       	subi	r24, 0xFF	; 255
    31c4:	8b 83       	std	Y+3, r24	; 0x03
        UART_enu_sendChar('0');
        UART_enu_sendChar('\r');
    }
    else
    {
        while (Copy_s32_Num != 0)
    31c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31ca:	a8 89       	ldd	r26, Y+16	; 0x10
    31cc:	b9 89       	ldd	r27, Y+17	; 0x11
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	a1 05       	cpc	r26, r1
    31d2:	b1 05       	cpc	r27, r1
    31d4:	51 f6       	brne	.-108    	; 0x316a <UART_enu_sendNUmber+0x72>
        {
            Local_u8_numArr[Local_u8_iterator1] = (Copy_s32_Num % 10) + '0';
            Copy_s32_Num /= 10;
            Local_u8_iterator1++;
        }
        if(flag){
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	88 23       	and	r24, r24
    31da:	69 f0       	breq	.+26     	; 0x31f6 <UART_enu_sendNUmber+0xfe>
        Local_u8_numArr[Local_u8_iterator1] = '-';
    31dc:	8b 81       	ldd	r24, Y+3	; 0x03
    31de:	28 2f       	mov	r18, r24
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	ce 01       	movw	r24, r28
    31e4:	04 96       	adiw	r24, 0x04	; 4
    31e6:	fc 01       	movw	r30, r24
    31e8:	e2 0f       	add	r30, r18
    31ea:	f3 1f       	adc	r31, r19
    31ec:	8d e2       	ldi	r24, 0x2D	; 45
    31ee:	80 83       	st	Z, r24
        Local_u8_iterator1++;
    31f0:	8b 81       	ldd	r24, Y+3	; 0x03
    31f2:	8f 5f       	subi	r24, 0xFF	; 255
    31f4:	8b 83       	std	Y+3, r24	; 0x03
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	81 50       	subi	r24, 0x01	; 1
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	10 c0       	rjmp	.+32     	; 0x321e <UART_enu_sendNUmber+0x126>
        {
            UART_enu_sendChar(Local_u8_numArr[Local_u8_iterator2]);
    31fe:	89 81       	ldd	r24, Y+1	; 0x01
    3200:	28 2f       	mov	r18, r24
    3202:	33 27       	eor	r19, r19
    3204:	27 fd       	sbrc	r18, 7
    3206:	30 95       	com	r19
    3208:	ce 01       	movw	r24, r28
    320a:	04 96       	adiw	r24, 0x04	; 4
    320c:	fc 01       	movw	r30, r24
    320e:	e2 0f       	add	r30, r18
    3210:	f3 1f       	adc	r31, r19
    3212:	80 81       	ld	r24, Z
    3214:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <UART_enu_sendChar>
        }
        if(flag){
        Local_u8_numArr[Local_u8_iterator1] = '-';
        Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	81 50       	subi	r24, 0x01	; 1
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	88 23       	and	r24, r24
    3222:	6c f7       	brge	.-38     	; 0x31fe <UART_enu_sendNUmber+0x106>
        {
            UART_enu_sendChar(Local_u8_numArr[Local_u8_iterator2]);
        }
        UART_enu_sendChar('\r');
    3224:	8d e0       	ldi	r24, 0x0D	; 13
    3226:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <UART_enu_sendChar>
    }
    return STATE_OK;
    322a:	81 e0       	ldi	r24, 0x01	; 1
}
    322c:	61 96       	adiw	r28, 0x11	; 17
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	cf 91       	pop	r28
    323a:	df 91       	pop	r29
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	08 95       	ret

00003242 <__vector_13>:
/*************ISR(Recieve)**********/
ISR(UART_RX){
    3242:	1f 92       	push	r1
    3244:	0f 92       	push	r0
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	0f 92       	push	r0
    324a:	11 24       	eor	r1, r1
    324c:	2f 93       	push	r18
    324e:	3f 93       	push	r19
    3250:	4f 93       	push	r20
    3252:	5f 93       	push	r21
    3254:	6f 93       	push	r22
    3256:	7f 93       	push	r23
    3258:	8f 93       	push	r24
    325a:	9f 93       	push	r25
    325c:	af 93       	push	r26
    325e:	bf 93       	push	r27
    3260:	ef 93       	push	r30
    3262:	ff 93       	push	r31
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_RX != NULL)
    326c:	80 91 9a 00 	lds	r24, 0x009A
    3270:	90 91 9b 00 	lds	r25, 0x009B
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	29 f0       	breq	.+10     	; 0x3282 <__vector_13+0x40>
        UART_pf_RX();
    3278:	e0 91 9a 00 	lds	r30, 0x009A
    327c:	f0 91 9b 00 	lds	r31, 0x009B
    3280:	09 95       	icall
}
    3282:	cf 91       	pop	r28
    3284:	df 91       	pop	r29
    3286:	ff 91       	pop	r31
    3288:	ef 91       	pop	r30
    328a:	bf 91       	pop	r27
    328c:	af 91       	pop	r26
    328e:	9f 91       	pop	r25
    3290:	8f 91       	pop	r24
    3292:	7f 91       	pop	r23
    3294:	6f 91       	pop	r22
    3296:	5f 91       	pop	r21
    3298:	4f 91       	pop	r20
    329a:	3f 91       	pop	r19
    329c:	2f 91       	pop	r18
    329e:	0f 90       	pop	r0
    32a0:	0f be       	out	0x3f, r0	; 63
    32a2:	0f 90       	pop	r0
    32a4:	1f 90       	pop	r1
    32a6:	18 95       	reti

000032a8 <__vector_15>:
/*************ISR(Transmit)**********/
ISR(UART_TX){
    32a8:	1f 92       	push	r1
    32aa:	0f 92       	push	r0
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	0f 92       	push	r0
    32b0:	11 24       	eor	r1, r1
    32b2:	2f 93       	push	r18
    32b4:	3f 93       	push	r19
    32b6:	4f 93       	push	r20
    32b8:	5f 93       	push	r21
    32ba:	6f 93       	push	r22
    32bc:	7f 93       	push	r23
    32be:	8f 93       	push	r24
    32c0:	9f 93       	push	r25
    32c2:	af 93       	push	r26
    32c4:	bf 93       	push	r27
    32c6:	ef 93       	push	r30
    32c8:	ff 93       	push	r31
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_TX != NULL)
    32d2:	80 91 98 00 	lds	r24, 0x0098
    32d6:	90 91 99 00 	lds	r25, 0x0099
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	29 f0       	breq	.+10     	; 0x32e8 <__vector_15+0x40>
        UART_pf_RX();
    32de:	e0 91 9a 00 	lds	r30, 0x009A
    32e2:	f0 91 9b 00 	lds	r31, 0x009B
    32e6:	09 95       	icall

}
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	ff 91       	pop	r31
    32ee:	ef 91       	pop	r30
    32f0:	bf 91       	pop	r27
    32f2:	af 91       	pop	r26
    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	7f 91       	pop	r23
    32fa:	6f 91       	pop	r22
    32fc:	5f 91       	pop	r21
    32fe:	4f 91       	pop	r20
    3300:	3f 91       	pop	r19
    3302:	2f 91       	pop	r18
    3304:	0f 90       	pop	r0
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	0f 90       	pop	r0
    330a:	1f 90       	pop	r1
    330c:	18 95       	reti

0000330e <Timers_enu_Init>:
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[4])(void)= {NULL};
static  void(*Timers_pf_Timer2[2])(void)= {NULL};

ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	2c 97       	sbiw	r28, 0x0c	; 12
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	8a 83       	std	Y+2, r24	; 0x02
    3324:	6b 83       	std	Y+3, r22	; 0x03
    3326:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<3)&& (Copy_u8_Mode < 9)&&(Copy_u8_Prescaler<8)){
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	83 30       	cpi	r24, 0x03	; 3
    3330:	08 f0       	brcs	.+2      	; 0x3334 <Timers_enu_Init+0x26>
    3332:	ca c2       	rjmp	.+1428   	; 0x38c8 <Timers_enu_Init+0x5ba>
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	89 30       	cpi	r24, 0x09	; 9
    3338:	08 f0       	brcs	.+2      	; 0x333c <Timers_enu_Init+0x2e>
    333a:	c6 c2       	rjmp	.+1420   	; 0x38c8 <Timers_enu_Init+0x5ba>
    333c:	8c 81       	ldd	r24, Y+4	; 0x04
    333e:	88 30       	cpi	r24, 0x08	; 8
    3340:	08 f0       	brcs	.+2      	; 0x3344 <Timers_enu_Init+0x36>
    3342:	c2 c2       	rjmp	.+1412   	; 0x38c8 <Timers_enu_Init+0x5ba>
    switch (Copy_u8_TimerNo)
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	3c 87       	std	Y+12, r19	; 0x0c
    334c:	2b 87       	std	Y+11, r18	; 0x0b
    334e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3350:	9c 85       	ldd	r25, Y+12	; 0x0c
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	91 05       	cpc	r25, r1
    3356:	09 f4       	brne	.+2      	; 0x335a <Timers_enu_Init+0x4c>
    3358:	d5 c0       	rjmp	.+426    	; 0x3504 <Timers_enu_Init+0x1f6>
    335a:	2b 85       	ldd	r18, Y+11	; 0x0b
    335c:	3c 85       	ldd	r19, Y+12	; 0x0c
    335e:	22 30       	cpi	r18, 0x02	; 2
    3360:	31 05       	cpc	r19, r1
    3362:	09 f4       	brne	.+2      	; 0x3366 <Timers_enu_Init+0x58>
    3364:	ea c1       	rjmp	.+980    	; 0x373a <Timers_enu_Init+0x42c>
    3366:	8b 85       	ldd	r24, Y+11	; 0x0b
    3368:	9c 85       	ldd	r25, Y+12	; 0x0c
    336a:	00 97       	sbiw	r24, 0x00	; 0
    336c:	09 f0       	breq	.+2      	; 0x3370 <Timers_enu_Init+0x62>
    336e:	ad c2       	rjmp	.+1370   	; 0x38ca <Timers_enu_Init+0x5bc>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	3a 87       	std	Y+10, r19	; 0x0a
    3378:	29 87       	std	Y+9, r18	; 0x09
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	83 30       	cpi	r24, 0x03	; 3
    3380:	91 05       	cpc	r25, r1
    3382:	09 f4       	brne	.+2      	; 0x3386 <Timers_enu_Init+0x78>
    3384:	40 c0       	rjmp	.+128    	; 0x3406 <Timers_enu_Init+0xf8>
    3386:	29 85       	ldd	r18, Y+9	; 0x09
    3388:	3a 85       	ldd	r19, Y+10	; 0x0a
    338a:	24 30       	cpi	r18, 0x04	; 4
    338c:	31 05       	cpc	r19, r1
    338e:	54 f4       	brge	.+20     	; 0x33a4 <Timers_enu_Init+0x96>
    3390:	89 85       	ldd	r24, Y+9	; 0x09
    3392:	9a 85       	ldd	r25, Y+10	; 0x0a
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	c9 f0       	breq	.+50     	; 0x33ca <Timers_enu_Init+0xbc>
    3398:	29 85       	ldd	r18, Y+9	; 0x09
    339a:	3a 85       	ldd	r19, Y+10	; 0x0a
    339c:	21 30       	cpi	r18, 0x01	; 1
    339e:	31 05       	cpc	r19, r1
    33a0:	19 f1       	breq	.+70     	; 0x33e8 <Timers_enu_Init+0xda>
    33a2:	a4 c0       	rjmp	.+328    	; 0x34ec <Timers_enu_Init+0x1de>
    33a4:	89 85       	ldd	r24, Y+9	; 0x09
    33a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33a8:	85 30       	cpi	r24, 0x05	; 5
    33aa:	91 05       	cpc	r25, r1
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <Timers_enu_Init+0xa2>
    33ae:	65 c0       	rjmp	.+202    	; 0x347a <Timers_enu_Init+0x16c>
    33b0:	29 85       	ldd	r18, Y+9	; 0x09
    33b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    33b4:	25 30       	cpi	r18, 0x05	; 5
    33b6:	31 05       	cpc	r19, r1
    33b8:	0c f4       	brge	.+2      	; 0x33bc <Timers_enu_Init+0xae>
    33ba:	42 c0       	rjmp	.+132    	; 0x3440 <Timers_enu_Init+0x132>
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	9a 85       	ldd	r25, Y+10	; 0x0a
    33c0:	86 30       	cpi	r24, 0x06	; 6
    33c2:	91 05       	cpc	r25, r1
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <Timers_enu_Init+0xba>
    33c6:	76 c0       	rjmp	.+236    	; 0x34b4 <Timers_enu_Init+0x1a6>
    33c8:	91 c0       	rjmp	.+290    	; 0x34ec <Timers_enu_Init+0x1de>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    33ca:	a3 e5       	ldi	r26, 0x53	; 83
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	e3 e5       	ldi	r30, 0x53	; 83
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	8f 7b       	andi	r24, 0xBF	; 191
    33d6:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    33d8:	a3 e5       	ldi	r26, 0x53	; 83
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e3 e5       	ldi	r30, 0x53	; 83
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	87 7f       	andi	r24, 0xF7	; 247
    33e4:	8c 93       	st	X, r24
    33e6:	82 c0       	rjmp	.+260    	; 0x34ec <Timers_enu_Init+0x1de>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    33e8:	a3 e5       	ldi	r26, 0x53	; 83
    33ea:	b0 e0       	ldi	r27, 0x00	; 0
    33ec:	e3 e5       	ldi	r30, 0x53	; 83
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	80 81       	ld	r24, Z
    33f2:	8f 7b       	andi	r24, 0xBF	; 191
    33f4:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    33f6:	a3 e5       	ldi	r26, 0x53	; 83
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e3 e5       	ldi	r30, 0x53	; 83
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	88 60       	ori	r24, 0x08	; 8
    3402:	8c 93       	st	X, r24
    3404:	73 c0       	rjmp	.+230    	; 0x34ec <Timers_enu_Init+0x1de>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3406:	a3 e5       	ldi	r26, 0x53	; 83
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e3 e5       	ldi	r30, 0x53	; 83
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	80 64       	ori	r24, 0x40	; 64
    3412:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3414:	a3 e5       	ldi	r26, 0x53	; 83
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e3 e5       	ldi	r30, 0x53	; 83
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	88 60       	ori	r24, 0x08	; 8
    3420:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3422:	a3 e5       	ldi	r26, 0x53	; 83
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e3 e5       	ldi	r30, 0x53	; 83
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	80 62       	ori	r24, 0x20	; 32
    342e:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    3430:	a3 e5       	ldi	r26, 0x53	; 83
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e3 e5       	ldi	r30, 0x53	; 83
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	80 61       	ori	r24, 0x10	; 16
    343c:	8c 93       	st	X, r24
    343e:	56 c0       	rjmp	.+172    	; 0x34ec <Timers_enu_Init+0x1de>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3440:	a3 e5       	ldi	r26, 0x53	; 83
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	e3 e5       	ldi	r30, 0x53	; 83
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	80 64       	ori	r24, 0x40	; 64
    344c:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    344e:	a3 e5       	ldi	r26, 0x53	; 83
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	e3 e5       	ldi	r30, 0x53	; 83
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	88 60       	ori	r24, 0x08	; 8
    345a:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    345c:	a3 e5       	ldi	r26, 0x53	; 83
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e3 e5       	ldi	r30, 0x53	; 83
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	80 62       	ori	r24, 0x20	; 32
    3468:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    346a:	a3 e5       	ldi	r26, 0x53	; 83
    346c:	b0 e0       	ldi	r27, 0x00	; 0
    346e:	e3 e5       	ldi	r30, 0x53	; 83
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	80 81       	ld	r24, Z
    3474:	8f 7e       	andi	r24, 0xEF	; 239
    3476:	8c 93       	st	X, r24
    3478:	39 c0       	rjmp	.+114    	; 0x34ec <Timers_enu_Init+0x1de>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    347a:	a3 e5       	ldi	r26, 0x53	; 83
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	e3 e5       	ldi	r30, 0x53	; 83
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	80 64       	ori	r24, 0x40	; 64
    3486:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    3488:	a3 e5       	ldi	r26, 0x53	; 83
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e3 e5       	ldi	r30, 0x53	; 83
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	87 7f       	andi	r24, 0xF7	; 247
    3494:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3496:	a3 e5       	ldi	r26, 0x53	; 83
    3498:	b0 e0       	ldi	r27, 0x00	; 0
    349a:	e3 e5       	ldi	r30, 0x53	; 83
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	80 81       	ld	r24, Z
    34a0:	80 62       	ori	r24, 0x20	; 32
    34a2:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    34a4:	a3 e5       	ldi	r26, 0x53	; 83
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e3 e5       	ldi	r30, 0x53	; 83
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	80 61       	ori	r24, 0x10	; 16
    34b0:	8c 93       	st	X, r24
    34b2:	1c c0       	rjmp	.+56     	; 0x34ec <Timers_enu_Init+0x1de>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    34b4:	a3 e5       	ldi	r26, 0x53	; 83
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e3 e5       	ldi	r30, 0x53	; 83
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	80 64       	ori	r24, 0x40	; 64
    34c0:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    34c2:	a3 e5       	ldi	r26, 0x53	; 83
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e3 e5       	ldi	r30, 0x53	; 83
    34c8:	f0 e0       	ldi	r31, 0x00	; 0
    34ca:	80 81       	ld	r24, Z
    34cc:	87 7f       	andi	r24, 0xF7	; 247
    34ce:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    34d0:	a3 e5       	ldi	r26, 0x53	; 83
    34d2:	b0 e0       	ldi	r27, 0x00	; 0
    34d4:	e3 e5       	ldi	r30, 0x53	; 83
    34d6:	f0 e0       	ldi	r31, 0x00	; 0
    34d8:	80 81       	ld	r24, Z
    34da:	80 62       	ori	r24, 0x20	; 32
    34dc:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    34de:	a3 e5       	ldi	r26, 0x53	; 83
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	e3 e5       	ldi	r30, 0x53	; 83
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	8f 7e       	andi	r24, 0xEF	; 239
    34ea:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    34ec:	a3 e5       	ldi	r26, 0x53	; 83
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	e3 e5       	ldi	r30, 0x53	; 83
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	90 81       	ld	r25, Z
    34f6:	8c 81       	ldd	r24, Y+4	; 0x04
    34f8:	89 2b       	or	r24, r25
    34fa:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    34fc:	8c 81       	ldd	r24, Y+4	; 0x04
    34fe:	80 93 ae 00 	sts	0x00AE, r24
    3502:	e3 c1       	rjmp	.+966    	; 0x38ca <Timers_enu_Init+0x5bc>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	38 87       	std	Y+8, r19	; 0x08
    350c:	2f 83       	std	Y+7, r18	; 0x07
    350e:	8f 81       	ldd	r24, Y+7	; 0x07
    3510:	98 85       	ldd	r25, Y+8	; 0x08
    3512:	87 30       	cpi	r24, 0x07	; 7
    3514:	91 05       	cpc	r25, r1
    3516:	09 f4       	brne	.+2      	; 0x351a <Timers_enu_Init+0x20c>
    3518:	5c c0       	rjmp	.+184    	; 0x35d2 <Timers_enu_Init+0x2c4>
    351a:	2f 81       	ldd	r18, Y+7	; 0x07
    351c:	38 85       	ldd	r19, Y+8	; 0x08
    351e:	28 30       	cpi	r18, 0x08	; 8
    3520:	31 05       	cpc	r19, r1
    3522:	54 f4       	brge	.+20     	; 0x3538 <Timers_enu_Init+0x22a>
    3524:	8f 81       	ldd	r24, Y+7	; 0x07
    3526:	98 85       	ldd	r25, Y+8	; 0x08
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	c9 f0       	breq	.+50     	; 0x355e <Timers_enu_Init+0x250>
    352c:	2f 81       	ldd	r18, Y+7	; 0x07
    352e:	38 85       	ldd	r19, Y+8	; 0x08
    3530:	21 30       	cpi	r18, 0x01	; 1
    3532:	31 05       	cpc	r19, r1
    3534:	89 f1       	breq	.+98     	; 0x3598 <Timers_enu_Init+0x28a>
    3536:	f8 c0       	rjmp	.+496    	; 0x3728 <Timers_enu_Init+0x41a>
    3538:	8f 81       	ldd	r24, Y+7	; 0x07
    353a:	98 85       	ldd	r25, Y+8	; 0x08
    353c:	89 30       	cpi	r24, 0x09	; 9
    353e:	91 05       	cpc	r25, r1
    3540:	09 f4       	brne	.+2      	; 0x3544 <Timers_enu_Init+0x236>
    3542:	9d c0       	rjmp	.+314    	; 0x367e <Timers_enu_Init+0x370>
    3544:	2f 81       	ldd	r18, Y+7	; 0x07
    3546:	38 85       	ldd	r19, Y+8	; 0x08
    3548:	29 30       	cpi	r18, 0x09	; 9
    354a:	31 05       	cpc	r19, r1
    354c:	0c f4       	brge	.+2      	; 0x3550 <Timers_enu_Init+0x242>
    354e:	6c c0       	rjmp	.+216    	; 0x3628 <Timers_enu_Init+0x31a>
    3550:	8f 81       	ldd	r24, Y+7	; 0x07
    3552:	98 85       	ldd	r25, Y+8	; 0x08
    3554:	8a 30       	cpi	r24, 0x0A	; 10
    3556:	91 05       	cpc	r25, r1
    3558:	09 f4       	brne	.+2      	; 0x355c <Timers_enu_Init+0x24e>
    355a:	bc c0       	rjmp	.+376    	; 0x36d4 <Timers_enu_Init+0x3c6>
    355c:	e5 c0       	rjmp	.+458    	; 0x3728 <Timers_enu_Init+0x41a>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    355e:	af e4       	ldi	r26, 0x4F	; 79
    3560:	b0 e0       	ldi	r27, 0x00	; 0
    3562:	ef e4       	ldi	r30, 0x4F	; 79
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
    3568:	8e 7f       	andi	r24, 0xFE	; 254
    356a:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    356c:	af e4       	ldi	r26, 0x4F	; 79
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	ef e4       	ldi	r30, 0x4F	; 79
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	8d 7f       	andi	r24, 0xFD	; 253
    3578:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    357a:	ae e4       	ldi	r26, 0x4E	; 78
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	ee e4       	ldi	r30, 0x4E	; 78
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	87 7f       	andi	r24, 0xF7	; 247
    3586:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3588:	ae e4       	ldi	r26, 0x4E	; 78
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	ee e4       	ldi	r30, 0x4E	; 78
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	8f 7e       	andi	r24, 0xEF	; 239
    3594:	8c 93       	st	X, r24
    3596:	c8 c0       	rjmp	.+400    	; 0x3728 <Timers_enu_Init+0x41a>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3598:	af e4       	ldi	r26, 0x4F	; 79
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	ef e4       	ldi	r30, 0x4F	; 79
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	8e 7f       	andi	r24, 0xFE	; 254
    35a4:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    35a6:	af e4       	ldi	r26, 0x4F	; 79
    35a8:	b0 e0       	ldi	r27, 0x00	; 0
    35aa:	ef e4       	ldi	r30, 0x4F	; 79
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	8d 7f       	andi	r24, 0xFD	; 253
    35b2:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    35b4:	ae e4       	ldi	r26, 0x4E	; 78
    35b6:	b0 e0       	ldi	r27, 0x00	; 0
    35b8:	ee e4       	ldi	r30, 0x4E	; 78
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	80 81       	ld	r24, Z
    35be:	88 60       	ori	r24, 0x08	; 8
    35c0:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    35c2:	ae e4       	ldi	r26, 0x4E	; 78
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	ee e4       	ldi	r30, 0x4E	; 78
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	8f 7e       	andi	r24, 0xEF	; 239
    35ce:	8c 93       	st	X, r24
    35d0:	ab c0       	rjmp	.+342    	; 0x3728 <Timers_enu_Init+0x41a>
        break;
        case FAST_PWM_NON_INVERTING_COMA:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    35d2:	af e4       	ldi	r26, 0x4F	; 79
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ef e4       	ldi	r30, 0x4F	; 79
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	8e 7f       	andi	r24, 0xFE	; 254
    35de:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    35e0:	af e4       	ldi	r26, 0x4F	; 79
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	ef e4       	ldi	r30, 0x4F	; 79
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	82 60       	ori	r24, 0x02	; 2
    35ec:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    35ee:	ae e4       	ldi	r26, 0x4E	; 78
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	ee e4       	ldi	r30, 0x4E	; 78
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	88 60       	ori	r24, 0x08	; 8
    35fa:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    35fc:	ae e4       	ldi	r26, 0x4E	; 78
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	ee e4       	ldi	r30, 0x4E	; 78
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	80 61       	ori	r24, 0x10	; 16
    3608:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    360a:	af e4       	ldi	r26, 0x4F	; 79
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	ef e4       	ldi	r30, 0x4F	; 79
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	80 68       	ori	r24, 0x80	; 128
    3616:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    3618:	af e4       	ldi	r26, 0x4F	; 79
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	ef e4       	ldi	r30, 0x4F	; 79
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	8f 7b       	andi	r24, 0xBF	; 191
    3624:	8c 93       	st	X, r24
    3626:	80 c0       	rjmp	.+256    	; 0x3728 <Timers_enu_Init+0x41a>
        break;
        case FAST_PWM_NON_INVERTING_COMB:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3628:	af e4       	ldi	r26, 0x4F	; 79
    362a:	b0 e0       	ldi	r27, 0x00	; 0
    362c:	ef e4       	ldi	r30, 0x4F	; 79
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	8e 7f       	andi	r24, 0xFE	; 254
    3634:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3636:	af e4       	ldi	r26, 0x4F	; 79
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	ef e4       	ldi	r30, 0x4F	; 79
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	82 60       	ori	r24, 0x02	; 2
    3642:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    3644:	ae e4       	ldi	r26, 0x4E	; 78
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	ee e4       	ldi	r30, 0x4E	; 78
    364a:	f0 e0       	ldi	r31, 0x00	; 0
    364c:	80 81       	ld	r24, Z
    364e:	88 60       	ori	r24, 0x08	; 8
    3650:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3652:	ae e4       	ldi	r26, 0x4E	; 78
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	ee e4       	ldi	r30, 0x4E	; 78
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
    365c:	80 61       	ori	r24, 0x10	; 16
    365e:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1B1);
    3660:	af e4       	ldi	r26, 0x4F	; 79
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	ef e4       	ldi	r30, 0x4F	; 79
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	80 62       	ori	r24, 0x20	; 32
    366c:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1B0);
    366e:	af e4       	ldi	r26, 0x4F	; 79
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	ef e4       	ldi	r30, 0x4F	; 79
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	8f 7e       	andi	r24, 0xEF	; 239
    367a:	8c 93       	st	X, r24
    367c:	55 c0       	rjmp	.+170    	; 0x3728 <Timers_enu_Init+0x41a>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING_COMA:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    367e:	af e4       	ldi	r26, 0x4F	; 79
    3680:	b0 e0       	ldi	r27, 0x00	; 0
    3682:	ef e4       	ldi	r30, 0x4F	; 79
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	80 81       	ld	r24, Z
    3688:	81 60       	ori	r24, 0x01	; 1
    368a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    368c:	af e4       	ldi	r26, 0x4F	; 79
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	ef e4       	ldi	r30, 0x4F	; 79
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	80 81       	ld	r24, Z
    3696:	82 60       	ori	r24, 0x02	; 2
    3698:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    369a:	ae e4       	ldi	r26, 0x4E	; 78
    369c:	b0 e0       	ldi	r27, 0x00	; 0
    369e:	ee e4       	ldi	r30, 0x4E	; 78
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	80 81       	ld	r24, Z
    36a4:	87 7f       	andi	r24, 0xF7	; 247
    36a6:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    36a8:	ae e4       	ldi	r26, 0x4E	; 78
    36aa:	b0 e0       	ldi	r27, 0x00	; 0
    36ac:	ee e4       	ldi	r30, 0x4E	; 78
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	80 81       	ld	r24, Z
    36b2:	80 61       	ori	r24, 0x10	; 16
    36b4:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    36b6:	af e4       	ldi	r26, 0x4F	; 79
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
    36ba:	ef e4       	ldi	r30, 0x4F	; 79
    36bc:	f0 e0       	ldi	r31, 0x00	; 0
    36be:	80 81       	ld	r24, Z
    36c0:	80 68       	ori	r24, 0x80	; 128
    36c2:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    36c4:	af e4       	ldi	r26, 0x4F	; 79
    36c6:	b0 e0       	ldi	r27, 0x00	; 0
    36c8:	ef e4       	ldi	r30, 0x4F	; 79
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	8f 7b       	andi	r24, 0xBF	; 191
    36d0:	8c 93       	st	X, r24
    36d2:	2a c0       	rjmp	.+84     	; 0x3728 <Timers_enu_Init+0x41a>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING_COMB:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    36d4:	af e4       	ldi	r26, 0x4F	; 79
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	ef e4       	ldi	r30, 0x4F	; 79
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	81 60       	ori	r24, 0x01	; 1
    36e0:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    36e2:	af e4       	ldi	r26, 0x4F	; 79
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	ef e4       	ldi	r30, 0x4F	; 79
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	82 60       	ori	r24, 0x02	; 2
    36ee:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    36f0:	ae e4       	ldi	r26, 0x4E	; 78
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	ee e4       	ldi	r30, 0x4E	; 78
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	87 7f       	andi	r24, 0xF7	; 247
    36fc:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    36fe:	ae e4       	ldi	r26, 0x4E	; 78
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	ee e4       	ldi	r30, 0x4E	; 78
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	80 61       	ori	r24, 0x10	; 16
    370a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1B1);
    370c:	af e4       	ldi	r26, 0x4F	; 79
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	ef e4       	ldi	r30, 0x4F	; 79
    3712:	f0 e0       	ldi	r31, 0x00	; 0
    3714:	80 81       	ld	r24, Z
    3716:	80 62       	ori	r24, 0x20	; 32
    3718:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1B0);
    371a:	af e4       	ldi	r26, 0x4F	; 79
    371c:	b0 e0       	ldi	r27, 0x00	; 0
    371e:	ef e4       	ldi	r30, 0x4F	; 79
    3720:	f0 e0       	ldi	r31, 0x00	; 0
    3722:	80 81       	ld	r24, Z
    3724:	8f 7e       	andi	r24, 0xEF	; 239
    3726:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    3728:	ae e4       	ldi	r26, 0x4E	; 78
    372a:	b0 e0       	ldi	r27, 0x00	; 0
    372c:	ee e4       	ldi	r30, 0x4E	; 78
    372e:	f0 e0       	ldi	r31, 0x00	; 0
    3730:	90 81       	ld	r25, Z
    3732:	8c 81       	ldd	r24, Y+4	; 0x04
    3734:	89 2b       	or	r24, r25
    3736:	8c 93       	st	X, r24
    3738:	c8 c0       	rjmp	.+400    	; 0x38ca <Timers_enu_Init+0x5bc>
    break;
    case TIMER2:
        switch (Copy_u8_Mode)
    373a:	8b 81       	ldd	r24, Y+3	; 0x03
    373c:	28 2f       	mov	r18, r24
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	3e 83       	std	Y+6, r19	; 0x06
    3742:	2d 83       	std	Y+5, r18	; 0x05
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	83 30       	cpi	r24, 0x03	; 3
    374a:	91 05       	cpc	r25, r1
    374c:	09 f4       	brne	.+2      	; 0x3750 <Timers_enu_Init+0x442>
    374e:	40 c0       	rjmp	.+128    	; 0x37d0 <Timers_enu_Init+0x4c2>
    3750:	2d 81       	ldd	r18, Y+5	; 0x05
    3752:	3e 81       	ldd	r19, Y+6	; 0x06
    3754:	24 30       	cpi	r18, 0x04	; 4
    3756:	31 05       	cpc	r19, r1
    3758:	54 f4       	brge	.+20     	; 0x376e <Timers_enu_Init+0x460>
    375a:	8d 81       	ldd	r24, Y+5	; 0x05
    375c:	9e 81       	ldd	r25, Y+6	; 0x06
    375e:	00 97       	sbiw	r24, 0x00	; 0
    3760:	c9 f0       	breq	.+50     	; 0x3794 <Timers_enu_Init+0x486>
    3762:	2d 81       	ldd	r18, Y+5	; 0x05
    3764:	3e 81       	ldd	r19, Y+6	; 0x06
    3766:	21 30       	cpi	r18, 0x01	; 1
    3768:	31 05       	cpc	r19, r1
    376a:	19 f1       	breq	.+70     	; 0x37b2 <Timers_enu_Init+0x4a4>
    376c:	a4 c0       	rjmp	.+328    	; 0x38b6 <Timers_enu_Init+0x5a8>
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	9e 81       	ldd	r25, Y+6	; 0x06
    3772:	85 30       	cpi	r24, 0x05	; 5
    3774:	91 05       	cpc	r25, r1
    3776:	09 f4       	brne	.+2      	; 0x377a <Timers_enu_Init+0x46c>
    3778:	65 c0       	rjmp	.+202    	; 0x3844 <Timers_enu_Init+0x536>
    377a:	2d 81       	ldd	r18, Y+5	; 0x05
    377c:	3e 81       	ldd	r19, Y+6	; 0x06
    377e:	25 30       	cpi	r18, 0x05	; 5
    3780:	31 05       	cpc	r19, r1
    3782:	0c f4       	brge	.+2      	; 0x3786 <Timers_enu_Init+0x478>
    3784:	42 c0       	rjmp	.+132    	; 0x380a <Timers_enu_Init+0x4fc>
    3786:	8d 81       	ldd	r24, Y+5	; 0x05
    3788:	9e 81       	ldd	r25, Y+6	; 0x06
    378a:	86 30       	cpi	r24, 0x06	; 6
    378c:	91 05       	cpc	r25, r1
    378e:	09 f4       	brne	.+2      	; 0x3792 <Timers_enu_Init+0x484>
    3790:	76 c0       	rjmp	.+236    	; 0x387e <Timers_enu_Init+0x570>
    3792:	91 c0       	rjmp	.+290    	; 0x38b6 <Timers_enu_Init+0x5a8>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER2_TCCR2_REG, WGM20);
    3794:	a5 e4       	ldi	r26, 0x45	; 69
    3796:	b0 e0       	ldi	r27, 0x00	; 0
    3798:	e5 e4       	ldi	r30, 0x45	; 69
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	80 81       	ld	r24, Z
    379e:	8f 7b       	andi	r24, 0xBF	; 191
    37a0:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    37a2:	a5 e4       	ldi	r26, 0x45	; 69
    37a4:	b0 e0       	ldi	r27, 0x00	; 0
    37a6:	e5 e4       	ldi	r30, 0x45	; 69
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	80 81       	ld	r24, Z
    37ac:	87 7f       	andi	r24, 0xF7	; 247
    37ae:	8c 93       	st	X, r24
    37b0:	82 c0       	rjmp	.+260    	; 0x38b6 <Timers_enu_Init+0x5a8>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER2_TCCR2_REG, WGM20);
    37b2:	a5 e4       	ldi	r26, 0x45	; 69
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e5 e4       	ldi	r30, 0x45	; 69
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	8f 7b       	andi	r24, 0xBF	; 191
    37be:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    37c0:	a5 e4       	ldi	r26, 0x45	; 69
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e5 e4       	ldi	r30, 0x45	; 69
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	88 60       	ori	r24, 0x08	; 8
    37cc:	8c 93       	st	X, r24
    37ce:	73 c0       	rjmp	.+230    	; 0x38b6 <Timers_enu_Init+0x5a8>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    37d0:	a5 e4       	ldi	r26, 0x45	; 69
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	e5 e4       	ldi	r30, 0x45	; 69
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
    37da:	80 64       	ori	r24, 0x40	; 64
    37dc:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    37de:	a5 e4       	ldi	r26, 0x45	; 69
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	e5 e4       	ldi	r30, 0x45	; 69
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	80 81       	ld	r24, Z
    37e8:	88 60       	ori	r24, 0x08	; 8
    37ea:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    37ec:	a5 e4       	ldi	r26, 0x45	; 69
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	e5 e4       	ldi	r30, 0x45	; 69
    37f2:	f0 e0       	ldi	r31, 0x00	; 0
    37f4:	80 81       	ld	r24, Z
    37f6:	80 62       	ori	r24, 0x20	; 32
    37f8:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, COM20);
    37fa:	a5 e4       	ldi	r26, 0x45	; 69
    37fc:	b0 e0       	ldi	r27, 0x00	; 0
    37fe:	e5 e4       	ldi	r30, 0x45	; 69
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	80 61       	ori	r24, 0x10	; 16
    3806:	8c 93       	st	X, r24
    3808:	56 c0       	rjmp	.+172    	; 0x38b6 <Timers_enu_Init+0x5a8>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    380a:	a5 e4       	ldi	r26, 0x45	; 69
    380c:	b0 e0       	ldi	r27, 0x00	; 0
    380e:	e5 e4       	ldi	r30, 0x45	; 69
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	80 81       	ld	r24, Z
    3814:	80 64       	ori	r24, 0x40	; 64
    3816:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, WGM21);
    3818:	a5 e4       	ldi	r26, 0x45	; 69
    381a:	b0 e0       	ldi	r27, 0x00	; 0
    381c:	e5 e4       	ldi	r30, 0x45	; 69
    381e:	f0 e0       	ldi	r31, 0x00	; 0
    3820:	80 81       	ld	r24, Z
    3822:	88 60       	ori	r24, 0x08	; 8
    3824:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3826:	a5 e4       	ldi	r26, 0x45	; 69
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	e5 e4       	ldi	r30, 0x45	; 69
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	80 81       	ld	r24, Z
    3830:	80 62       	ori	r24, 0x20	; 32
    3832:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, COM20);
    3834:	a5 e4       	ldi	r26, 0x45	; 69
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	e5 e4       	ldi	r30, 0x45	; 69
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	80 81       	ld	r24, Z
    383e:	8f 7e       	andi	r24, 0xEF	; 239
    3840:	8c 93       	st	X, r24
    3842:	39 c0       	rjmp	.+114    	; 0x38b6 <Timers_enu_Init+0x5a8>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    3844:	a5 e4       	ldi	r26, 0x45	; 69
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e5 e4       	ldi	r30, 0x45	; 69
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	80 64       	ori	r24, 0x40	; 64
    3850:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    3852:	a5 e4       	ldi	r26, 0x45	; 69
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e5 e4       	ldi	r30, 0x45	; 69
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	87 7f       	andi	r24, 0xF7	; 247
    385e:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    3860:	a5 e4       	ldi	r26, 0x45	; 69
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e5 e4       	ldi	r30, 0x45	; 69
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	80 62       	ori	r24, 0x20	; 32
    386c:	8c 93       	st	X, r24
            SET_BIT(TIMER2_TCCR2_REG, COM20);
    386e:	a5 e4       	ldi	r26, 0x45	; 69
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	e5 e4       	ldi	r30, 0x45	; 69
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	80 81       	ld	r24, Z
    3878:	80 61       	ori	r24, 0x10	; 16
    387a:	8c 93       	st	X, r24
    387c:	1c c0       	rjmp	.+56     	; 0x38b6 <Timers_enu_Init+0x5a8>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER2_TCCR2_REG, WGM20);
    387e:	a5 e4       	ldi	r26, 0x45	; 69
    3880:	b0 e0       	ldi	r27, 0x00	; 0
    3882:	e5 e4       	ldi	r30, 0x45	; 69
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	80 81       	ld	r24, Z
    3888:	80 64       	ori	r24, 0x40	; 64
    388a:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, WGM21);
    388c:	a5 e4       	ldi	r26, 0x45	; 69
    388e:	b0 e0       	ldi	r27, 0x00	; 0
    3890:	e5 e4       	ldi	r30, 0x45	; 69
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	80 81       	ld	r24, Z
    3896:	87 7f       	andi	r24, 0xF7	; 247
    3898:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER2_TCCR2_REG, COM21);
    389a:	a5 e4       	ldi	r26, 0x45	; 69
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	e5 e4       	ldi	r30, 0x45	; 69
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	80 81       	ld	r24, Z
    38a4:	80 62       	ori	r24, 0x20	; 32
    38a6:	8c 93       	st	X, r24
            CLR_BIT(TIMER2_TCCR2_REG, COM20);
    38a8:	a5 e4       	ldi	r26, 0x45	; 69
    38aa:	b0 e0       	ldi	r27, 0x00	; 0
    38ac:	e5 e4       	ldi	r30, 0x45	; 69
    38ae:	f0 e0       	ldi	r31, 0x00	; 0
    38b0:	80 81       	ld	r24, Z
    38b2:	8f 7e       	andi	r24, 0xEF	; 239
    38b4:	8c 93       	st	X, r24
        break;
        }
    /*******Select Prescaler******/
    TIMER2_TCCR2_REG |= Copy_u8_Prescaler;
    38b6:	a5 e4       	ldi	r26, 0x45	; 69
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	e5 e4       	ldi	r30, 0x45	; 69
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	90 81       	ld	r25, Z
    38c0:	8c 81       	ldd	r24, Y+4	; 0x04
    38c2:	89 2b       	or	r24, r25
    38c4:	8c 93       	st	X, r24
    38c6:	01 c0       	rjmp	.+2      	; 0x38ca <Timers_enu_Init+0x5bc>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    38c8:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    38cc:	2c 96       	adiw	r28, 0x0c	; 12
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	2f 97       	sbiw	r28, 0x0f	; 15
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	8a 83       	std	Y+2, r24	; 0x02
    38f4:	7c 83       	std	Y+4, r23	; 0x04
    38f6:	6b 83       	std	Y+3, r22	; 0x03
    38f8:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo< 3)&(Copy_pf != NULL) && (Copy_u8_Mode< 3)){
    38fe:	1f 86       	std	Y+15, r1	; 0x0f
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	83 30       	cpi	r24, 0x03	; 3
    3904:	10 f4       	brcc	.+4      	; 0x390a <Timers_enu_SetCallBack+0x2c>
    3906:	21 e0       	ldi	r18, 0x01	; 1
    3908:	2f 87       	std	Y+15, r18	; 0x0f
    390a:	1e 86       	std	Y+14, r1	; 0x0e
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	9c 81       	ldd	r25, Y+4	; 0x04
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	11 f0       	breq	.+4      	; 0x3918 <Timers_enu_SetCallBack+0x3a>
    3914:	31 e0       	ldi	r19, 0x01	; 1
    3916:	3e 87       	std	Y+14, r19	; 0x0e
    3918:	8f 85       	ldd	r24, Y+15	; 0x0f
    391a:	9e 85       	ldd	r25, Y+14	; 0x0e
    391c:	89 23       	and	r24, r25
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	89 27       	eor	r24, r25
    3922:	88 23       	and	r24, r24
    3924:	09 f0       	breq	.+2      	; 0x3928 <Timers_enu_SetCallBack+0x4a>
    3926:	a6 c0       	rjmp	.+332    	; 0x3a74 <Timers_enu_SetCallBack+0x196>
    3928:	8d 81       	ldd	r24, Y+5	; 0x05
    392a:	83 30       	cpi	r24, 0x03	; 3
    392c:	08 f0       	brcs	.+2      	; 0x3930 <Timers_enu_SetCallBack+0x52>
    392e:	a2 c0       	rjmp	.+324    	; 0x3a74 <Timers_enu_SetCallBack+0x196>
        switch (Copy_u8_TimerNo)
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	28 2f       	mov	r18, r24
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	3d 87       	std	Y+13, r19	; 0x0d
    3938:	2c 87       	std	Y+12, r18	; 0x0c
    393a:	8c 85       	ldd	r24, Y+12	; 0x0c
    393c:	9d 85       	ldd	r25, Y+13	; 0x0d
    393e:	81 30       	cpi	r24, 0x01	; 1
    3940:	91 05       	cpc	r25, r1
    3942:	b1 f1       	breq	.+108    	; 0x39b0 <Timers_enu_SetCallBack+0xd2>
    3944:	2c 85       	ldd	r18, Y+12	; 0x0c
    3946:	3d 85       	ldd	r19, Y+13	; 0x0d
    3948:	22 30       	cpi	r18, 0x02	; 2
    394a:	31 05       	cpc	r19, r1
    394c:	09 f4       	brne	.+2      	; 0x3950 <Timers_enu_SetCallBack+0x72>
    394e:	67 c0       	rjmp	.+206    	; 0x3a1e <Timers_enu_SetCallBack+0x140>
    3950:	8c 85       	ldd	r24, Y+12	; 0x0c
    3952:	9d 85       	ldd	r25, Y+13	; 0x0d
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	09 f0       	breq	.+2      	; 0x395a <Timers_enu_SetCallBack+0x7c>
    3958:	8e c0       	rjmp	.+284    	; 0x3a76 <Timers_enu_SetCallBack+0x198>
        {
        case TIMER0:
        switch (Copy_u8_Mode)
    395a:	8d 81       	ldd	r24, Y+5	; 0x05
    395c:	28 2f       	mov	r18, r24
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	3b 87       	std	Y+11, r19	; 0x0b
    3962:	2a 87       	std	Y+10, r18	; 0x0a
    3964:	8a 85       	ldd	r24, Y+10	; 0x0a
    3966:	9b 85       	ldd	r25, Y+11	; 0x0b
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	31 f0       	breq	.+12     	; 0x3978 <Timers_enu_SetCallBack+0x9a>
    396c:	2a 85       	ldd	r18, Y+10	; 0x0a
    396e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3970:	21 30       	cpi	r18, 0x01	; 1
    3972:	31 05       	cpc	r19, r1
    3974:	49 f0       	breq	.+18     	; 0x3988 <Timers_enu_SetCallBack+0xaa>
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <Timers_enu_SetCallBack+0xb8>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE0);break;
    3978:	a9 e5       	ldi	r26, 0x59	; 89
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e9 e5       	ldi	r30, 0x59	; 89
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	80 81       	ld	r24, Z
    3982:	81 60       	ori	r24, 0x01	; 1
    3984:	8c 93       	st	X, r24
    3986:	07 c0       	rjmp	.+14     	; 0x3996 <Timers_enu_SetCallBack+0xb8>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE0);break;
    3988:	a9 e5       	ldi	r26, 0x59	; 89
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e9 e5       	ldi	r30, 0x59	; 89
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	82 60       	ori	r24, 0x02	; 2
    3994:	8c 93       	st	X, r24
        }
        Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    3996:	8d 81       	ldd	r24, Y+5	; 0x05
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	fc 01       	movw	r30, r24
    39a2:	e2 56       	subi	r30, 0x62	; 98
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	8b 81       	ldd	r24, Y+3	; 0x03
    39a8:	9c 81       	ldd	r25, Y+4	; 0x04
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	80 83       	st	Z, r24
    39ae:	63 c0       	rjmp	.+198    	; 0x3a76 <Timers_enu_SetCallBack+0x198>
        break;
        case TIMER1:
        switch (Copy_u8_Mode)
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	28 2f       	mov	r18, r24
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	39 87       	std	Y+9, r19	; 0x09
    39b8:	28 87       	std	Y+8, r18	; 0x08
    39ba:	88 85       	ldd	r24, Y+8	; 0x08
    39bc:	99 85       	ldd	r25, Y+9	; 0x09
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	91 05       	cpc	r25, r1
    39c2:	89 f0       	breq	.+34     	; 0x39e6 <Timers_enu_SetCallBack+0x108>
    39c4:	28 85       	ldd	r18, Y+8	; 0x08
    39c6:	39 85       	ldd	r19, Y+9	; 0x09
    39c8:	22 30       	cpi	r18, 0x02	; 2
    39ca:	31 05       	cpc	r19, r1
    39cc:	a1 f0       	breq	.+40     	; 0x39f6 <Timers_enu_SetCallBack+0x118>
    39ce:	88 85       	ldd	r24, Y+8	; 0x08
    39d0:	99 85       	ldd	r25, Y+9	; 0x09
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	b9 f4       	brne	.+46     	; 0x3a04 <Timers_enu_SetCallBack+0x126>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE1);break;
    39d6:	a9 e5       	ldi	r26, 0x59	; 89
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	e9 e5       	ldi	r30, 0x59	; 89
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	84 60       	ori	r24, 0x04	; 4
    39e2:	8c 93       	st	X, r24
    39e4:	0f c0       	rjmp	.+30     	; 0x3a04 <Timers_enu_SetCallBack+0x126>
        case CTC_MODE_A:SET_BIT(TIMER_TIMSK_REG, OCIE1A);break;
    39e6:	a9 e5       	ldi	r26, 0x59	; 89
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e9 e5       	ldi	r30, 0x59	; 89
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 61       	ori	r24, 0x10	; 16
    39f2:	8c 93       	st	X, r24
    39f4:	07 c0       	rjmp	.+14     	; 0x3a04 <Timers_enu_SetCallBack+0x126>
        case CTC_MODE_B:SET_BIT(TIMER_TIMSK_REG, OCIE1B);break;
    39f6:	a9 e5       	ldi	r26, 0x59	; 89
    39f8:	b0 e0       	ldi	r27, 0x00	; 0
    39fa:	e9 e5       	ldi	r30, 0x59	; 89
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	80 81       	ld	r24, Z
    3a00:	88 60       	ori	r24, 0x08	; 8
    3a02:	8c 93       	st	X, r24
        }
        Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    3a04:	8d 81       	ldd	r24, Y+5	; 0x05
    3a06:	88 2f       	mov	r24, r24
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	88 0f       	add	r24, r24
    3a0c:	99 1f       	adc	r25, r25
    3a0e:	fc 01       	movw	r30, r24
    3a10:	ee 55       	subi	r30, 0x5E	; 94
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	8b 81       	ldd	r24, Y+3	; 0x03
    3a16:	9c 81       	ldd	r25, Y+4	; 0x04
    3a18:	91 83       	std	Z+1, r25	; 0x01
    3a1a:	80 83       	st	Z, r24
    3a1c:	2c c0       	rjmp	.+88     	; 0x3a76 <Timers_enu_SetCallBack+0x198>
        break;
        case TIMER2:
        switch (Copy_u8_Mode)
    3a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a20:	28 2f       	mov	r18, r24
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	3f 83       	std	Y+7, r19	; 0x07
    3a26:	2e 83       	std	Y+6, r18	; 0x06
    3a28:	8e 81       	ldd	r24, Y+6	; 0x06
    3a2a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a2c:	00 97       	sbiw	r24, 0x00	; 0
    3a2e:	31 f0       	breq	.+12     	; 0x3a3c <Timers_enu_SetCallBack+0x15e>
    3a30:	2e 81       	ldd	r18, Y+6	; 0x06
    3a32:	3f 81       	ldd	r19, Y+7	; 0x07
    3a34:	21 30       	cpi	r18, 0x01	; 1
    3a36:	31 05       	cpc	r19, r1
    3a38:	49 f0       	breq	.+18     	; 0x3a4c <Timers_enu_SetCallBack+0x16e>
    3a3a:	0f c0       	rjmp	.+30     	; 0x3a5a <Timers_enu_SetCallBack+0x17c>
        {
        // Enable Interrupts
        case NORMAL_MODE:SET_BIT(TIMER_TIMSK_REG, TOIE2);break;
    3a3c:	a9 e5       	ldi	r26, 0x59	; 89
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e9 e5       	ldi	r30, 0x59	; 89
    3a42:	f0 e0       	ldi	r31, 0x00	; 0
    3a44:	80 81       	ld	r24, Z
    3a46:	80 64       	ori	r24, 0x40	; 64
    3a48:	8c 93       	st	X, r24
    3a4a:	07 c0       	rjmp	.+14     	; 0x3a5a <Timers_enu_SetCallBack+0x17c>
        case CTC_MODE:SET_BIT(TIMER_TIMSK_REG, OCIE2);break;
    3a4c:	a9 e5       	ldi	r26, 0x59	; 89
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	e9 e5       	ldi	r30, 0x59	; 89
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	80 68       	ori	r24, 0x80	; 128
    3a58:	8c 93       	st	X, r24
        }
        Timers_pf_Timer2[Copy_u8_Mode] = Copy_pf;
    3a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a5c:	88 2f       	mov	r24, r24
    3a5e:	90 e0       	ldi	r25, 0x00	; 0
    3a60:	88 0f       	add	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	fc 01       	movw	r30, r24
    3a66:	e6 55       	subi	r30, 0x56	; 86
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	01 c0       	rjmp	.+2      	; 0x3a76 <Timers_enu_SetCallBack+0x198>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3a74:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a78:	2f 96       	adiw	r28, 0x0f	; 15
    3a7a:	0f b6       	in	r0, 0x3f	; 63
    3a7c:	f8 94       	cli
    3a7e:	de bf       	out	0x3e, r29	; 62
    3a80:	0f be       	out	0x3f, r0	; 63
    3a82:	cd bf       	out	0x3d, r28	; 61
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <Timers_enu_SetCLKSource+0x6>
    3a90:	00 d0       	rcall	.+0      	; 0x3a92 <Timers_enu_SetCLKSource+0x8>
    3a92:	0f 92       	push	r0
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
    3a98:	8a 83       	std	Y+2, r24	; 0x02
    3a9a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 3)){
    3aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa2:	88 30       	cpi	r24, 0x08	; 8
    3aa4:	08 f0       	brcs	.+2      	; 0x3aa8 <Timers_enu_SetCLKSource+0x1e>
    3aa6:	4a c0       	rjmp	.+148    	; 0x3b3c <Timers_enu_SetCLKSource+0xb2>
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	83 30       	cpi	r24, 0x03	; 3
    3aac:	08 f0       	brcs	.+2      	; 0x3ab0 <Timers_enu_SetCLKSource+0x26>
    3aae:	46 c0       	rjmp	.+140    	; 0x3b3c <Timers_enu_SetCLKSource+0xb2>
        switch (Copy_u8_TimerNo)
    3ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab2:	28 2f       	mov	r18, r24
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	3d 83       	std	Y+5, r19	; 0x05
    3ab8:	2c 83       	std	Y+4, r18	; 0x04
    3aba:	8c 81       	ldd	r24, Y+4	; 0x04
    3abc:	9d 81       	ldd	r25, Y+5	; 0x05
    3abe:	81 30       	cpi	r24, 0x01	; 1
    3ac0:	91 05       	cpc	r25, r1
    3ac2:	e1 f0       	breq	.+56     	; 0x3afc <Timers_enu_SetCLKSource+0x72>
    3ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ac8:	22 30       	cpi	r18, 0x02	; 2
    3aca:	31 05       	cpc	r19, r1
    3acc:	39 f1       	breq	.+78     	; 0x3b1c <Timers_enu_SetCLKSource+0x92>
    3ace:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ad2:	00 97       	sbiw	r24, 0x00	; 0
    3ad4:	a1 f5       	brne	.+104    	; 0x3b3e <Timers_enu_SetCLKSource+0xb4>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3ad6:	a3 e5       	ldi	r26, 0x53	; 83
    3ad8:	b0 e0       	ldi	r27, 0x00	; 0
    3ada:	e3 e5       	ldi	r30, 0x53	; 83
    3adc:	f0 e0       	ldi	r31, 0x00	; 0
    3ade:	80 81       	ld	r24, Z
    3ae0:	88 7f       	andi	r24, 0xF8	; 248
    3ae2:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    3ae4:	a3 e5       	ldi	r26, 0x53	; 83
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	e3 e5       	ldi	r30, 0x53	; 83
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	90 81       	ld	r25, Z
    3aee:	8b 81       	ldd	r24, Y+3	; 0x03
    3af0:	89 2b       	or	r24, r25
    3af2:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	80 93 ae 00 	sts	0x00AE, r24
    3afa:	21 c0       	rjmp	.+66     	; 0x3b3e <Timers_enu_SetCLKSource+0xb4>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3afc:	ae e4       	ldi	r26, 0x4E	; 78
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	ee e4       	ldi	r30, 0x4E	; 78
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	88 7f       	andi	r24, 0xF8	; 248
    3b08:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    3b0a:	ae e4       	ldi	r26, 0x4E	; 78
    3b0c:	b0 e0       	ldi	r27, 0x00	; 0
    3b0e:	ee e4       	ldi	r30, 0x4E	; 78
    3b10:	f0 e0       	ldi	r31, 0x00	; 0
    3b12:	90 81       	ld	r25, Z
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	89 2b       	or	r24, r25
    3b18:	8c 93       	st	X, r24
    3b1a:	11 c0       	rjmp	.+34     	; 0x3b3e <Timers_enu_SetCLKSource+0xb4>
        break;
        case TIMER2:
            // Clear Old Value of Prescaler
            TIMER2_TCCR2_REG &= CLEAR_CLK_SOURCE;
    3b1c:	a5 e4       	ldi	r26, 0x45	; 69
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	e5 e4       	ldi	r30, 0x45	; 69
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	80 81       	ld	r24, Z
    3b26:	88 7f       	andi	r24, 0xF8	; 248
    3b28:	8c 93       	st	X, r24
            TIMER2_TCCR2_REG |= Copy_u8_CLK_Source;
    3b2a:	a5 e4       	ldi	r26, 0x45	; 69
    3b2c:	b0 e0       	ldi	r27, 0x00	; 0
    3b2e:	e5 e4       	ldi	r30, 0x45	; 69
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	90 81       	ld	r25, Z
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	89 2b       	or	r24, r25
    3b38:	8c 93       	st	X, r24
    3b3a:	01 c0       	rjmp	.+2      	; 0x3b3e <Timers_enu_SetCLKSource+0xb4>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3b3c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b40:	0f 90       	pop	r0
    3b42:	0f 90       	pop	r0
    3b44:	0f 90       	pop	r0
    3b46:	0f 90       	pop	r0
    3b48:	0f 90       	pop	r0
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	08 95       	ret

00003b50 <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)     // Using Timer 0 
{
    3b50:	ef 92       	push	r14
    3b52:	ff 92       	push	r15
    3b54:	0f 93       	push	r16
    3b56:	1f 93       	push	r17
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
    3b60:	2c 97       	sbiw	r28, 0x0c	; 12
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	69 87       	std	Y+9, r22	; 0x09
    3b6e:	7a 87       	std	Y+10, r23	; 0x0a
    3b70:	8b 87       	std	Y+11, r24	; 0x0b
    3b72:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    3b74:	a3 e5       	ldi	r26, 0x53	; 83
    3b76:	b0 e0       	ldi	r27, 0x00	; 0
    3b78:	e3 e5       	ldi	r30, 0x53	; 83
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	90 81       	ld	r25, Z
    3b7e:	80 91 ae 00 	lds	r24, 0x00AE
    3b82:	89 2b       	or	r24, r25
    3b84:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    3b86:	80 e8       	ldi	r24, 0x80	; 128
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	98 87       	std	Y+8, r25	; 0x08
    3b8c:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    3b8e:	89 85       	ldd	r24, Y+9	; 0x09
    3b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b92:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b94:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b96:	28 ee       	ldi	r18, 0xE8	; 232
    3b98:	33 e0       	ldi	r19, 0x03	; 3
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	bc 01       	movw	r22, r24
    3ba0:	cd 01       	movw	r24, r26
    3ba2:	0e 94 9d 2c 	call	0x593a	; 0x593a <__mulsi3>
    3ba6:	7b 01       	movw	r14, r22
    3ba8:	8c 01       	movw	r16, r24
    3baa:	8f 81       	ldd	r24, Y+7	; 0x07
    3bac:	98 85       	ldd	r25, Y+8	; 0x08
    3bae:	9c 01       	movw	r18, r24
    3bb0:	40 e0       	ldi	r20, 0x00	; 0
    3bb2:	50 e0       	ldi	r21, 0x00	; 0
    3bb4:	c8 01       	movw	r24, r16
    3bb6:	b7 01       	movw	r22, r14
    3bb8:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__udivmodsi4>
    3bbc:	da 01       	movw	r26, r20
    3bbe:	c9 01       	movw	r24, r18
    3bc0:	9e 83       	std	Y+6, r25	; 0x06
    3bc2:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    3bc4:	89 85       	ldd	r24, Y+9	; 0x09
    3bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc8:	ab 85       	ldd	r26, Y+11	; 0x0b
    3bca:	bc 85       	ldd	r27, Y+12	; 0x0c
    3bcc:	28 ee       	ldi	r18, 0xE8	; 232
    3bce:	33 e0       	ldi	r19, 0x03	; 3
    3bd0:	40 e0       	ldi	r20, 0x00	; 0
    3bd2:	50 e0       	ldi	r21, 0x00	; 0
    3bd4:	bc 01       	movw	r22, r24
    3bd6:	cd 01       	movw	r24, r26
    3bd8:	0e 94 9d 2c 	call	0x593a	; 0x593a <__mulsi3>
    3bdc:	7b 01       	movw	r14, r22
    3bde:	8c 01       	movw	r16, r24
    3be0:	8f 81       	ldd	r24, Y+7	; 0x07
    3be2:	98 85       	ldd	r25, Y+8	; 0x08
    3be4:	9c 01       	movw	r18, r24
    3be6:	40 e0       	ldi	r20, 0x00	; 0
    3be8:	50 e0       	ldi	r21, 0x00	; 0
    3bea:	c8 01       	movw	r24, r16
    3bec:	b7 01       	movw	r22, r14
    3bee:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__udivmodsi4>
    3bf2:	dc 01       	movw	r26, r24
    3bf4:	cb 01       	movw	r24, r22
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	34 e2       	ldi	r19, 0x24	; 36
    3bfa:	44 ef       	ldi	r20, 0xF4	; 244
    3bfc:	50 e0       	ldi	r21, 0x00	; 0
    3bfe:	bc 01       	movw	r22, r24
    3c00:	cd 01       	movw	r24, r26
    3c02:	0e 94 9d 2c 	call	0x593a	; 0x593a <__mulsi3>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	32 e1       	ldi	r19, 0x12	; 18
    3c0e:	4a e7       	ldi	r20, 0x7A	; 122
    3c10:	50 e0       	ldi	r21, 0x00	; 0
    3c12:	bc 01       	movw	r22, r24
    3c14:	cd 01       	movw	r24, r26
    3c16:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__udivmodsi4>
    3c1a:	da 01       	movw	r26, r20
    3c1c:	c9 01       	movw	r24, r18
    3c1e:	9c 83       	std	Y+4, r25	; 0x04
    3c20:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    3c22:	e2 e5       	ldi	r30, 0x52	; 82
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	8b 81       	ldd	r24, Y+3	; 0x03
    3c28:	81 95       	neg	r24
    3c2a:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    3c2c:	1a 82       	std	Y+2, r1	; 0x02
    3c2e:	19 82       	std	Y+1, r1	; 0x01
    3c30:	15 c0       	rjmp	.+42     	; 0x3c5c <Timers_enu_delay_ms+0x10c>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    3c32:	a8 e5       	ldi	r26, 0x58	; 88
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	e8 e5       	ldi	r30, 0x58	; 88
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	80 81       	ld	r24, Z
    3c3c:	81 60       	ori	r24, 0x01	; 1
    3c3e:	8c 93       	st	X, r24
        local_u16_counter++;
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	9a 81       	ldd	r25, Y+2	; 0x02
    3c44:	01 96       	adiw	r24, 0x01	; 1
    3c46:	9a 83       	std	Y+2, r25	; 0x02
    3c48:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    3c4a:	e8 e5       	ldi	r30, 0x58	; 88
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	88 2f       	mov	r24, r24
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	81 70       	andi	r24, 0x01	; 1
    3c56:	90 70       	andi	r25, 0x00	; 0
    3c58:	88 23       	and	r24, r24
    3c5a:	59 f7       	brne	.-42     	; 0x3c32 <Timers_enu_delay_ms+0xe2>
    u16 local_u16_OVF_Time = (256 * PRESCALER) / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000UL) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000UL) % local_u16_OVF_Time) * F_CPU) / PRESCALER;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	9c 01       	movw	r18, r24
    3c62:	2f 5f       	subi	r18, 0xFF	; 255
    3c64:	3f 4f       	sbci	r19, 0xFF	; 255
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	28 17       	cp	r18, r24
    3c6c:	39 07       	cpc	r19, r25
    3c6e:	69 f7       	brne	.-38     	; 0x3c4a <Timers_enu_delay_ms+0xfa>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3c70:	a3 e5       	ldi	r26, 0x53	; 83
    3c72:	b0 e0       	ldi	r27, 0x00	; 0
    3c74:	e3 e5       	ldi	r30, 0x53	; 83
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	88 7f       	andi	r24, 0xF8	; 248
    3c7c:	8c 93       	st	X, r24
    return STATE_OK;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
}
    3c80:	2c 96       	adiw	r28, 0x0c	; 12
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	1f 91       	pop	r17
    3c92:	0f 91       	pop	r16
    3c94:	ff 90       	pop	r15
    3c96:	ef 90       	pop	r14
    3c98:	08 95       	ret

00003c9a <Timers_enu_SetTimerValue>:
ES_t Timers_enu_SetTimerValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	00 d0       	rcall	.+0      	; 0x3ca0 <Timers_enu_SetTimerValue+0x6>
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <Timers_enu_SetTimerValue+0x8>
    3ca2:	00 d0       	rcall	.+0      	; 0x3ca4 <Timers_enu_SetTimerValue+0xa>
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
    3ca8:	8a 83       	std	Y+2, r24	; 0x02
    3caa:	7c 83       	std	Y+4, r23	; 0x04
    3cac:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	83 30       	cpi	r24, 0x03	; 3
    3cb6:	20 f5       	brcc	.+72     	; 0x3d00 <Timers_enu_SetTimerValue+0x66>
        switch (Copy_u8_TimerNo)
    3cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cba:	28 2f       	mov	r18, r24
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	3e 83       	std	Y+6, r19	; 0x06
    3cc0:	2d 83       	std	Y+5, r18	; 0x05
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	81 30       	cpi	r24, 0x01	; 1
    3cc8:	91 05       	cpc	r25, r1
    3cca:	71 f0       	breq	.+28     	; 0x3ce8 <Timers_enu_SetTimerValue+0x4e>
    3ccc:	2d 81       	ldd	r18, Y+5	; 0x05
    3cce:	3e 81       	ldd	r19, Y+6	; 0x06
    3cd0:	22 30       	cpi	r18, 0x02	; 2
    3cd2:	31 05       	cpc	r19, r1
    3cd4:	81 f0       	breq	.+32     	; 0x3cf6 <Timers_enu_SetTimerValue+0x5c>
    3cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	91 f4       	brne	.+36     	; 0x3d02 <Timers_enu_SetTimerValue+0x68>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    3cde:	e2 e5       	ldi	r30, 0x52	; 82
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce4:	80 83       	st	Z, r24
    3ce6:	0d c0       	rjmp	.+26     	; 0x3d02 <Timers_enu_SetTimerValue+0x68>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    3ce8:	ec e4       	ldi	r30, 0x4C	; 76
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	80 83       	st	Z, r24
    3cf4:	06 c0       	rjmp	.+12     	; 0x3d02 <Timers_enu_SetTimerValue+0x68>
        break;
        case TIMER2:
            TIMER2_TCNT2_REG = Copy_u8_Value;
    3cf6:	e4 e4       	ldi	r30, 0x44	; 68
    3cf8:	f0 e0       	ldi	r31, 0x00	; 0
    3cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfc:	80 83       	st	Z, r24
    3cfe:	01 c0       	rjmp	.+2      	; 0x3d02 <Timers_enu_SetTimerValue+0x68>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3d00:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d02:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d04:	26 96       	adiw	r28, 0x06	; 6
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	f8 94       	cli
    3d0a:	de bf       	out	0x3e, r29	; 62
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	cf 91       	pop	r28
    3d12:	df 91       	pop	r29
    3d14:	08 95       	ret

00003d16 <Timers_enu_GetTimerValue>:
ES_t Timers_enu_GetTimerValue(u8 Copy_u8_TimerNo,u16 *Copy_u8_Value){
    3d16:	df 93       	push	r29
    3d18:	cf 93       	push	r28
    3d1a:	00 d0       	rcall	.+0      	; 0x3d1c <Timers_enu_GetTimerValue+0x6>
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <Timers_enu_GetTimerValue+0x8>
    3d1e:	00 d0       	rcall	.+0      	; 0x3d20 <Timers_enu_GetTimerValue+0xa>
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	8a 83       	std	Y+2, r24	; 0x02
    3d26:	7c 83       	std	Y+4, r23	; 0x04
    3d28:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	83 30       	cpi	r24, 0x03	; 3
    3d32:	80 f5       	brcc	.+96     	; 0x3d94 <Timers_enu_GetTimerValue+0x7e>
        switch (Copy_u8_TimerNo)
    3d34:	8a 81       	ldd	r24, Y+2	; 0x02
    3d36:	28 2f       	mov	r18, r24
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	3e 83       	std	Y+6, r19	; 0x06
    3d3c:	2d 83       	std	Y+5, r18	; 0x05
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	91 05       	cpc	r25, r1
    3d46:	99 f0       	breq	.+38     	; 0x3d6e <Timers_enu_GetTimerValue+0x58>
    3d48:	2d 81       	ldd	r18, Y+5	; 0x05
    3d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    3d4c:	22 30       	cpi	r18, 0x02	; 2
    3d4e:	31 05       	cpc	r19, r1
    3d50:	b9 f0       	breq	.+46     	; 0x3d80 <Timers_enu_GetTimerValue+0x6a>
    3d52:	8d 81       	ldd	r24, Y+5	; 0x05
    3d54:	9e 81       	ldd	r25, Y+6	; 0x06
    3d56:	00 97       	sbiw	r24, 0x00	; 0
    3d58:	f1 f4       	brne	.+60     	; 0x3d96 <Timers_enu_GetTimerValue+0x80>
        {
        case TIMER0:
            *Copy_u8_Value = TIMER0_TCNT0_REG;
    3d5a:	e2 e5       	ldi	r30, 0x52	; 82
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	88 2f       	mov	r24, r24
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	eb 81       	ldd	r30, Y+3	; 0x03
    3d66:	fc 81       	ldd	r31, Y+4	; 0x04
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	80 83       	st	Z, r24
    3d6c:	14 c0       	rjmp	.+40     	; 0x3d96 <Timers_enu_GetTimerValue+0x80>
        break;
        case TIMER1:
            *Copy_u8_Value = TIMER1_TCNT1_REG;
    3d6e:	ec e4       	ldi	r30, 0x4C	; 76
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	91 81       	ldd	r25, Z+1	; 0x01
    3d76:	eb 81       	ldd	r30, Y+3	; 0x03
    3d78:	fc 81       	ldd	r31, Y+4	; 0x04
    3d7a:	91 83       	std	Z+1, r25	; 0x01
    3d7c:	80 83       	st	Z, r24
    3d7e:	0b c0       	rjmp	.+22     	; 0x3d96 <Timers_enu_GetTimerValue+0x80>
        break;
        case TIMER2:
            *Copy_u8_Value = TIMER2_TCNT2_REG;
    3d80:	e4 e4       	ldi	r30, 0x44	; 68
    3d82:	f0 e0       	ldi	r31, 0x00	; 0
    3d84:	80 81       	ld	r24, Z
    3d86:	88 2f       	mov	r24, r24
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    3d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <Timers_enu_GetTimerValue+0x80>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3d94:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d96:	89 81       	ldd	r24, Y+1	; 0x01

}
    3d98:	26 96       	adiw	r28, 0x06	; 6
    3d9a:	0f b6       	in	r0, 0x3f	; 63
    3d9c:	f8 94       	cli
    3d9e:	de bf       	out	0x3e, r29	; 62
    3da0:	0f be       	out	0x3f, r0	; 63
    3da2:	cd bf       	out	0x3d, r28	; 61
    3da4:	cf 91       	pop	r28
    3da6:	df 91       	pop	r29
    3da8:	08 95       	ret

00003daa <Timers_enu_TimerSetCompareValue>:
ES_t Timers_enu_TimerSetCompareValue(u8 Copy_u8_TimerNo, u8 Copy_u8_Value){
    3daa:	df 93       	push	r29
    3dac:	cf 93       	push	r28
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <Timers_enu_TimerSetCompareValue+0x6>
    3db0:	00 d0       	rcall	.+0      	; 0x3db2 <Timers_enu_TimerSetCompareValue+0x8>
    3db2:	0f 92       	push	r0
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	8a 83       	std	Y+2, r24	; 0x02
    3dba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_TimerNo)
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	28 2f       	mov	r18, r24
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	3d 83       	std	Y+5, r19	; 0x05
    3dc8:	2c 83       	std	Y+4, r18	; 0x04
    3dca:	8c 81       	ldd	r24, Y+4	; 0x04
    3dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	31 f0       	breq	.+12     	; 0x3dde <Timers_enu_TimerSetCompareValue+0x34>
    3dd2:	2c 81       	ldd	r18, Y+4	; 0x04
    3dd4:	3d 81       	ldd	r19, Y+5	; 0x05
    3dd6:	22 30       	cpi	r18, 0x02	; 2
    3dd8:	31 05       	cpc	r19, r1
    3dda:	31 f0       	breq	.+12     	; 0x3de8 <Timers_enu_TimerSetCompareValue+0x3e>
    3ddc:	0a c0       	rjmp	.+20     	; 0x3df2 <Timers_enu_TimerSetCompareValue+0x48>
    {
    case TIMER0:TIMER0_OCR0_REG = Copy_u8_Value;break;
    3dde:	ec e5       	ldi	r30, 0x5C	; 92
    3de0:	f0 e0       	ldi	r31, 0x00	; 0
    3de2:	8b 81       	ldd	r24, Y+3	; 0x03
    3de4:	80 83       	st	Z, r24
    3de6:	06 c0       	rjmp	.+12     	; 0x3df4 <Timers_enu_TimerSetCompareValue+0x4a>
    case TIMER2:TIMER2_OCR2_REG = Copy_u8_Value;break;  
    3de8:	e3 e4       	ldi	r30, 0x43	; 67
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	8b 81       	ldd	r24, Y+3	; 0x03
    3dee:	80 83       	st	Z, r24
    3df0:	01 c0       	rjmp	.+2      	; 0x3df4 <Timers_enu_TimerSetCompareValue+0x4a>
    default:Local_u8_errorState = STATE_NOT_OK;break;
    3df2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
}
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	0f 90       	pop	r0
    3e00:	cf 91       	pop	r28
    3e02:	df 91       	pop	r29
    3e04:	08 95       	ret

00003e06 <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    3e06:	df 93       	push	r29
    3e08:	cf 93       	push	r28
    3e0a:	00 d0       	rcall	.+0      	; 0x3e0c <Timers_enu_Timer1_setTopValue+0x6>
    3e0c:	cd b7       	in	r28, 0x3d	; 61
    3e0e:	de b7       	in	r29, 0x3e	; 62
    3e10:	9a 83       	std	Y+2, r25	; 0x02
    3e12:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    3e14:	e6 e4       	ldi	r30, 0x46	; 70
    3e16:	f0 e0       	ldi	r31, 0x00	; 0
    3e18:	89 81       	ldd	r24, Y+1	; 0x01
    3e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1c:	91 83       	std	Z+1, r25	; 0x01
    3e1e:	80 83       	st	Z, r24
        return STATE_OK;
    3e20:	81 e0       	ldi	r24, 0x01	; 1
}
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	cf 91       	pop	r28
    3e28:	df 91       	pop	r29
    3e2a:	08 95       	ret

00003e2c <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    3e2c:	df 93       	push	r29
    3e2e:	cf 93       	push	r28
    3e30:	00 d0       	rcall	.+0      	; 0x3e32 <Timers_enu_Timer1SetCompareValue+0x6>
    3e32:	00 d0       	rcall	.+0      	; 0x3e34 <Timers_enu_Timer1SetCompareValue+0x8>
    3e34:	00 d0       	rcall	.+0      	; 0x3e36 <Timers_enu_Timer1SetCompareValue+0xa>
    3e36:	cd b7       	in	r28, 0x3d	; 61
    3e38:	de b7       	in	r29, 0x3e	; 62
    3e3a:	8a 83       	std	Y+2, r24	; 0x02
    3e3c:	7c 83       	std	Y+4, r23	; 0x04
    3e3e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    3e44:	8a 81       	ldd	r24, Y+2	; 0x02
    3e46:	82 30       	cpi	r24, 0x02	; 2
    3e48:	e8 f4       	brcc	.+58     	; 0x3e84 <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    3e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4c:	28 2f       	mov	r18, r24
    3e4e:	30 e0       	ldi	r19, 0x00	; 0
    3e50:	3e 83       	std	Y+6, r19	; 0x06
    3e52:	2d 83       	std	Y+5, r18	; 0x05
    3e54:	8d 81       	ldd	r24, Y+5	; 0x05
    3e56:	9e 81       	ldd	r25, Y+6	; 0x06
    3e58:	00 97       	sbiw	r24, 0x00	; 0
    3e5a:	31 f0       	breq	.+12     	; 0x3e68 <Timers_enu_Timer1SetCompareValue+0x3c>
    3e5c:	2d 81       	ldd	r18, Y+5	; 0x05
    3e5e:	3e 81       	ldd	r19, Y+6	; 0x06
    3e60:	21 30       	cpi	r18, 0x01	; 1
    3e62:	31 05       	cpc	r19, r1
    3e64:	41 f0       	breq	.+16     	; 0x3e76 <Timers_enu_Timer1SetCompareValue+0x4a>
    3e66:	0f c0       	rjmp	.+30     	; 0x3e86 <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    3e68:	ea e4       	ldi	r30, 0x4A	; 74
    3e6a:	f0 e0       	ldi	r31, 0x00	; 0
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	80 83       	st	Z, r24
    3e74:	08 c0       	rjmp	.+16     	; 0x3e86 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    3e76:	e8 e4       	ldi	r30, 0x48	; 72
    3e78:	f0 e0       	ldi	r31, 0x00	; 0
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
    3e82:	01 c0       	rjmp	.+2      	; 0x3e86 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3e84:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e88:	26 96       	adiw	r28, 0x06	; 6
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	cf 91       	pop	r28
    3e96:	df 91       	pop	r29
    3e98:	08 95       	ret

00003e9a <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    3e9a:	df 93       	push	r29
    3e9c:	cf 93       	push	r28
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <Timers_enu_Stop+0x6>
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <Timers_enu_Stop+0x8>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<3){
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	83 30       	cpi	r24, 0x03	; 3
    3eb0:	08 f0       	brcs	.+2      	; 0x3eb4 <Timers_enu_Stop+0x1a>
    3eb2:	4d c0       	rjmp	.+154    	; 0x3f4e <Timers_enu_Stop+0xb4>
        switch (Copy_u8_TimerNo)
    3eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb6:	28 2f       	mov	r18, r24
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	3c 83       	std	Y+4, r19	; 0x04
    3ebc:	2b 83       	std	Y+3, r18	; 0x03
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec2:	81 30       	cpi	r24, 0x01	; 1
    3ec4:	91 05       	cpc	r25, r1
    3ec6:	c9 f0       	breq	.+50     	; 0x3efa <Timers_enu_Stop+0x60>
    3ec8:	eb 81       	ldd	r30, Y+3	; 0x03
    3eca:	fc 81       	ldd	r31, Y+4	; 0x04
    3ecc:	e2 30       	cpi	r30, 0x02	; 2
    3ece:	f1 05       	cpc	r31, r1
    3ed0:	79 f1       	breq	.+94     	; 0x3f30 <Timers_enu_Stop+0x96>
    3ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    3ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    3ed6:	21 15       	cp	r18, r1
    3ed8:	31 05       	cpc	r19, r1
    3eda:	d1 f5       	brne	.+116    	; 0x3f50 <Timers_enu_Stop+0xb6>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3edc:	a3 e5       	ldi	r26, 0x53	; 83
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	e3 e5       	ldi	r30, 0x53	; 83
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	80 81       	ld	r24, Z
    3ee6:	88 7f       	andi	r24, 0xF8	; 248
    3ee8:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    3eea:	a2 e5       	ldi	r26, 0x52	; 82
    3eec:	b0 e0       	ldi	r27, 0x00	; 0
    3eee:	ec e5       	ldi	r30, 0x5C	; 92
    3ef0:	f0 e0       	ldi	r31, 0x00	; 0
    3ef2:	10 82       	st	Z, r1
    3ef4:	80 81       	ld	r24, Z
    3ef6:	8c 93       	st	X, r24
    3ef8:	2b c0       	rjmp	.+86     	; 0x3f50 <Timers_enu_Stop+0xb6>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3efa:	ae e4       	ldi	r26, 0x4E	; 78
    3efc:	b0 e0       	ldi	r27, 0x00	; 0
    3efe:	ee e4       	ldi	r30, 0x4E	; 78
    3f00:	f0 e0       	ldi	r31, 0x00	; 0
    3f02:	80 81       	ld	r24, Z
    3f04:	88 7f       	andi	r24, 0xF8	; 248
    3f06:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    3f08:	2c e4       	ldi	r18, 0x4C	; 76
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	aa e4       	ldi	r26, 0x4A	; 74
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	e8 e4       	ldi	r30, 0x48	; 72
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	11 82       	std	Z+1, r1	; 0x01
    3f16:	10 82       	st	Z, r1
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	11 96       	adiw	r26, 0x01	; 1
    3f1e:	9c 93       	st	X, r25
    3f20:	8e 93       	st	-X, r24
    3f22:	8d 91       	ld	r24, X+
    3f24:	9c 91       	ld	r25, X
    3f26:	11 97       	sbiw	r26, 0x01	; 1
    3f28:	f9 01       	movw	r30, r18
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	80 83       	st	Z, r24
    3f2e:	10 c0       	rjmp	.+32     	; 0x3f50 <Timers_enu_Stop+0xb6>
        break;
        case TIMER2:
        TIMER2_TCCR2_REG &= CLEAR_CLK_SOURCE;
    3f30:	a5 e4       	ldi	r26, 0x45	; 69
    3f32:	b0 e0       	ldi	r27, 0x00	; 0
    3f34:	e5 e4       	ldi	r30, 0x45	; 69
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	88 7f       	andi	r24, 0xF8	; 248
    3f3c:	8c 93       	st	X, r24
        TIMER2_TCNT2_REG = TIMER2_OCR2_REG = 0;
    3f3e:	a4 e4       	ldi	r26, 0x44	; 68
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	e3 e4       	ldi	r30, 0x43	; 67
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	10 82       	st	Z, r1
    3f48:	80 81       	ld	r24, Z
    3f4a:	8c 93       	st	X, r24
    3f4c:	01 c0       	rjmp	.+2      	; 0x3f50 <Timers_enu_Stop+0xb6>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    3f4e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f52:	0f 90       	pop	r0
    3f54:	0f 90       	pop	r0
    3f56:	0f 90       	pop	r0
    3f58:	0f 90       	pop	r0
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <Timers_enu_ICUReadValue>:

/*************** ICU ******************/
ES_t Timers_enu_ICUReadValue(u16 * Copy_ICR1_Value){
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	00 d0       	rcall	.+0      	; 0x3f66 <Timers_enu_ICUReadValue+0x6>
    3f66:	0f 92       	push	r0
    3f68:	cd b7       	in	r28, 0x3d	; 61
    3f6a:	de b7       	in	r29, 0x3e	; 62
    3f6c:	9b 83       	std	Y+3, r25	; 0x03
    3f6e:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_ICR1_Value != NULL){
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	9b 81       	ldd	r25, Y+3	; 0x03
    3f78:	00 97       	sbiw	r24, 0x00	; 0
    3f7a:	49 f0       	breq	.+18     	; 0x3f8e <Timers_enu_ICUReadValue+0x2e>
        *Copy_ICR1_Value = TIMER1_ICR1_REG;
    3f7c:	e6 e4       	ldi	r30, 0x46	; 70
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	91 81       	ldd	r25, Z+1	; 0x01
    3f84:	ea 81       	ldd	r30, Y+2	; 0x02
    3f86:	fb 81       	ldd	r31, Y+3	; 0x03
    3f88:	91 83       	std	Z+1, r25	; 0x01
    3f8a:	80 83       	st	Z, r24
    3f8c:	01 c0       	rjmp	.+2      	; 0x3f90 <Timers_enu_ICUReadValue+0x30>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3f8e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	0f 90       	pop	r0
    3f98:	cf 91       	pop	r28
    3f9a:	df 91       	pop	r29
    3f9c:	08 95       	ret

00003f9e <Timers_enu_ICUSetTriggerEdge>:
ES_t Timers_enu_ICUSetTriggerEdge(u8 Copy_Trigger){
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <Timers_enu_ICUSetTriggerEdge+0x6>
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <Timers_enu_ICUSetTriggerEdge+0x8>
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_Trigger)
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	28 2f       	mov	r18, r24
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	3c 83       	std	Y+4, r19	; 0x04
    3fb8:	2b 83       	std	Y+3, r18	; 0x03
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fbe:	00 97       	sbiw	r24, 0x00	; 0
    3fc0:	69 f0       	breq	.+26     	; 0x3fdc <Timers_enu_ICUSetTriggerEdge+0x3e>
    3fc2:	2b 81       	ldd	r18, Y+3	; 0x03
    3fc4:	3c 81       	ldd	r19, Y+4	; 0x04
    3fc6:	21 30       	cpi	r18, 0x01	; 1
    3fc8:	31 05       	cpc	r19, r1
    3fca:	81 f4       	brne	.+32     	; 0x3fec <Timers_enu_ICUSetTriggerEdge+0x4e>
    {
    case ICU_RISING_EDGE:SET_BIT(TIMER1_TCCR1B_REG, ICES1);break;
    3fcc:	ae e4       	ldi	r26, 0x4E	; 78
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	ee e4       	ldi	r30, 0x4E	; 78
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	80 81       	ld	r24, Z
    3fd6:	80 64       	ori	r24, 0x40	; 64
    3fd8:	8c 93       	st	X, r24
    3fda:	09 c0       	rjmp	.+18     	; 0x3fee <Timers_enu_ICUSetTriggerEdge+0x50>
    case ICU_FALLING_EDGE:CLR_BIT(TIMER1_TCCR1B_REG, ICES1);break;
    3fdc:	ae e4       	ldi	r26, 0x4E	; 78
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	ee e4       	ldi	r30, 0x4E	; 78
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	8f 7b       	andi	r24, 0xBF	; 191
    3fe8:	8c 93       	st	X, r24
    3fea:	01 c0       	rjmp	.+2      	; 0x3fee <Timers_enu_ICUSetTriggerEdge+0x50>
    default:Local_u8_errorState = STATE_NOT_OK ;break;
    3fec:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3fee:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ff0:	0f 90       	pop	r0
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	08 95       	ret

00003ffe <Timers_enu_ICUSetCallBack>:
ES_t Timers_enu_ICUSetCallBack(void (*Copy_pf_ICU)(void)){
    3ffe:	df 93       	push	r29
    4000:	cf 93       	push	r28
    4002:	00 d0       	rcall	.+0      	; 0x4004 <Timers_enu_ICUSetCallBack+0x6>
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	9b 83       	std	Y+3, r25	; 0x03
    400c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pf_ICU != NULL){
    4012:	8a 81       	ldd	r24, Y+2	; 0x02
    4014:	9b 81       	ldd	r25, Y+3	; 0x03
    4016:	00 97       	sbiw	r24, 0x00	; 0
    4018:	39 f0       	breq	.+14     	; 0x4028 <Timers_enu_ICUSetCallBack+0x2a>
        Timers_pf_Timer1[3]  = Copy_pf_ICU;
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	9b 81       	ldd	r25, Y+3	; 0x03
    401e:	90 93 a9 00 	sts	0x00A9, r25
    4022:	80 93 a8 00 	sts	0x00A8, r24
    4026:	01 c0       	rjmp	.+2      	; 0x402a <Timers_enu_ICUSetCallBack+0x2c>
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    4028:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    402a:	89 81       	ldd	r24, Y+1	; 0x01
}
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	0f 90       	pop	r0
    4032:	cf 91       	pop	r28
    4034:	df 91       	pop	r29
    4036:	08 95       	ret

00004038 <Timers_enu_ICUInterruptEnabled>:
ES_t Timers_enu_ICUInterruptEnabled(){
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMER_TIMSK_REG,TICIE1);
    4040:	a9 e5       	ldi	r26, 0x59	; 89
    4042:	b0 e0       	ldi	r27, 0x00	; 0
    4044:	e9 e5       	ldi	r30, 0x59	; 89
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	80 81       	ld	r24, Z
    404a:	80 62       	ori	r24, 0x20	; 32
    404c:	8c 93       	st	X, r24
    return STATE_OK;
    404e:	81 e0       	ldi	r24, 0x01	; 1
}
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <Timers_enu_ICUInterruptDisabled>:
ES_t Timers_enu_ICUInterruptDisabled(){
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMER_TIMSK_REG,TICIE1);
    405e:	a9 e5       	ldi	r26, 0x59	; 89
    4060:	b0 e0       	ldi	r27, 0x00	; 0
    4062:	e9 e5       	ldi	r30, 0x59	; 89
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	80 81       	ld	r24, Z
    4068:	8f 7d       	andi	r24, 0xDF	; 223
    406a:	8c 93       	st	X, r24
    return STATE_OK;
    406c:	81 e0       	ldi	r24, 0x01	; 1
}
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	08 95       	ret

00004074 <__vector_4>:
/*****ISR(Timer2) CTC Mode*****/
ISR(TIMER2_COMP){
    4074:	1f 92       	push	r1
    4076:	0f 92       	push	r0
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	0f 92       	push	r0
    407c:	11 24       	eor	r1, r1
    407e:	2f 93       	push	r18
    4080:	3f 93       	push	r19
    4082:	4f 93       	push	r20
    4084:	5f 93       	push	r21
    4086:	6f 93       	push	r22
    4088:	7f 93       	push	r23
    408a:	8f 93       	push	r24
    408c:	9f 93       	push	r25
    408e:	af 93       	push	r26
    4090:	bf 93       	push	r27
    4092:	ef 93       	push	r30
    4094:	ff 93       	push	r31
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	cd b7       	in	r28, 0x3d	; 61
    409c:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer2[CTC_MODE] != NULL)
    409e:	80 91 ac 00 	lds	r24, 0x00AC
    40a2:	90 91 ad 00 	lds	r25, 0x00AD
    40a6:	00 97       	sbiw	r24, 0x00	; 0
    40a8:	29 f0       	breq	.+10     	; 0x40b4 <__vector_4+0x40>
        Timers_pf_Timer2[CTC_MODE]();
    40aa:	e0 91 ac 00 	lds	r30, 0x00AC
    40ae:	f0 91 ad 00 	lds	r31, 0x00AD
    40b2:	09 95       	icall
}
    40b4:	cf 91       	pop	r28
    40b6:	df 91       	pop	r29
    40b8:	ff 91       	pop	r31
    40ba:	ef 91       	pop	r30
    40bc:	bf 91       	pop	r27
    40be:	af 91       	pop	r26
    40c0:	9f 91       	pop	r25
    40c2:	8f 91       	pop	r24
    40c4:	7f 91       	pop	r23
    40c6:	6f 91       	pop	r22
    40c8:	5f 91       	pop	r21
    40ca:	4f 91       	pop	r20
    40cc:	3f 91       	pop	r19
    40ce:	2f 91       	pop	r18
    40d0:	0f 90       	pop	r0
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	0f 90       	pop	r0
    40d6:	1f 90       	pop	r1
    40d8:	18 95       	reti

000040da <__vector_5>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER2_OVF){
    40da:	1f 92       	push	r1
    40dc:	0f 92       	push	r0
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	0f 92       	push	r0
    40e2:	11 24       	eor	r1, r1
    40e4:	2f 93       	push	r18
    40e6:	3f 93       	push	r19
    40e8:	4f 93       	push	r20
    40ea:	5f 93       	push	r21
    40ec:	6f 93       	push	r22
    40ee:	7f 93       	push	r23
    40f0:	8f 93       	push	r24
    40f2:	9f 93       	push	r25
    40f4:	af 93       	push	r26
    40f6:	bf 93       	push	r27
    40f8:	ef 93       	push	r30
    40fa:	ff 93       	push	r31
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer2[NORMAL_MODE] != NULL)
    4104:	80 91 aa 00 	lds	r24, 0x00AA
    4108:	90 91 ab 00 	lds	r25, 0x00AB
    410c:	00 97       	sbiw	r24, 0x00	; 0
    410e:	29 f0       	breq	.+10     	; 0x411a <__vector_5+0x40>
        Timers_pf_Timer2[NORMAL_MODE]();
    4110:	e0 91 aa 00 	lds	r30, 0x00AA
    4114:	f0 91 ab 00 	lds	r31, 0x00AB
    4118:	09 95       	icall
}
    411a:	cf 91       	pop	r28
    411c:	df 91       	pop	r29
    411e:	ff 91       	pop	r31
    4120:	ef 91       	pop	r30
    4122:	bf 91       	pop	r27
    4124:	af 91       	pop	r26
    4126:	9f 91       	pop	r25
    4128:	8f 91       	pop	r24
    412a:	7f 91       	pop	r23
    412c:	6f 91       	pop	r22
    412e:	5f 91       	pop	r21
    4130:	4f 91       	pop	r20
    4132:	3f 91       	pop	r19
    4134:	2f 91       	pop	r18
    4136:	0f 90       	pop	r0
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	0f 90       	pop	r0
    413c:	1f 90       	pop	r1
    413e:	18 95       	reti

00004140 <__vector_6>:
/*****ISR(Timer1) ICU *****/
ISR(TIMER1_CAPT){
    4140:	1f 92       	push	r1
    4142:	0f 92       	push	r0
    4144:	0f b6       	in	r0, 0x3f	; 63
    4146:	0f 92       	push	r0
    4148:	11 24       	eor	r1, r1
    414a:	2f 93       	push	r18
    414c:	3f 93       	push	r19
    414e:	4f 93       	push	r20
    4150:	5f 93       	push	r21
    4152:	6f 93       	push	r22
    4154:	7f 93       	push	r23
    4156:	8f 93       	push	r24
    4158:	9f 93       	push	r25
    415a:	af 93       	push	r26
    415c:	bf 93       	push	r27
    415e:	ef 93       	push	r30
    4160:	ff 93       	push	r31
    4162:	df 93       	push	r29
    4164:	cf 93       	push	r28
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62
    if(Timers_pf_Timer1[3] != NULL)
    416a:	80 91 a8 00 	lds	r24, 0x00A8
    416e:	90 91 a9 00 	lds	r25, 0x00A9
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	29 f0       	breq	.+10     	; 0x4180 <__vector_6+0x40>
        Timers_pf_Timer1[3]();
    4176:	e0 91 a8 00 	lds	r30, 0x00A8
    417a:	f0 91 a9 00 	lds	r31, 0x00A9
    417e:	09 95       	icall
}
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	ff 91       	pop	r31
    4186:	ef 91       	pop	r30
    4188:	bf 91       	pop	r27
    418a:	af 91       	pop	r26
    418c:	9f 91       	pop	r25
    418e:	8f 91       	pop	r24
    4190:	7f 91       	pop	r23
    4192:	6f 91       	pop	r22
    4194:	5f 91       	pop	r21
    4196:	4f 91       	pop	r20
    4198:	3f 91       	pop	r19
    419a:	2f 91       	pop	r18
    419c:	0f 90       	pop	r0
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	0f 90       	pop	r0
    41a2:	1f 90       	pop	r1
    41a4:	18 95       	reti

000041a6 <__vector_7>:
/*****ISR(Timer1) CTC Mode A*****/
ISR(TIMER1_COMPA){
    41a6:	1f 92       	push	r1
    41a8:	0f 92       	push	r0
    41aa:	0f b6       	in	r0, 0x3f	; 63
    41ac:	0f 92       	push	r0
    41ae:	11 24       	eor	r1, r1
    41b0:	2f 93       	push	r18
    41b2:	3f 93       	push	r19
    41b4:	4f 93       	push	r20
    41b6:	5f 93       	push	r21
    41b8:	6f 93       	push	r22
    41ba:	7f 93       	push	r23
    41bc:	8f 93       	push	r24
    41be:	9f 93       	push	r25
    41c0:	af 93       	push	r26
    41c2:	bf 93       	push	r27
    41c4:	ef 93       	push	r30
    41c6:	ff 93       	push	r31
    41c8:	df 93       	push	r29
    41ca:	cf 93       	push	r28
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    41d0:	80 91 a4 00 	lds	r24, 0x00A4
    41d4:	90 91 a5 00 	lds	r25, 0x00A5
    41d8:	00 97       	sbiw	r24, 0x00	; 0
    41da:	29 f0       	breq	.+10     	; 0x41e6 <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    41dc:	e0 91 a4 00 	lds	r30, 0x00A4
    41e0:	f0 91 a5 00 	lds	r31, 0x00A5
    41e4:	09 95       	icall
}
    41e6:	cf 91       	pop	r28
    41e8:	df 91       	pop	r29
    41ea:	ff 91       	pop	r31
    41ec:	ef 91       	pop	r30
    41ee:	bf 91       	pop	r27
    41f0:	af 91       	pop	r26
    41f2:	9f 91       	pop	r25
    41f4:	8f 91       	pop	r24
    41f6:	7f 91       	pop	r23
    41f8:	6f 91       	pop	r22
    41fa:	5f 91       	pop	r21
    41fc:	4f 91       	pop	r20
    41fe:	3f 91       	pop	r19
    4200:	2f 91       	pop	r18
    4202:	0f 90       	pop	r0
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	0f 90       	pop	r0
    4208:	1f 90       	pop	r1
    420a:	18 95       	reti

0000420c <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
ISR(TIMER1_COMPB){
    420c:	1f 92       	push	r1
    420e:	0f 92       	push	r0
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	0f 92       	push	r0
    4214:	11 24       	eor	r1, r1
    4216:	2f 93       	push	r18
    4218:	3f 93       	push	r19
    421a:	4f 93       	push	r20
    421c:	5f 93       	push	r21
    421e:	6f 93       	push	r22
    4220:	7f 93       	push	r23
    4222:	8f 93       	push	r24
    4224:	9f 93       	push	r25
    4226:	af 93       	push	r26
    4228:	bf 93       	push	r27
    422a:	ef 93       	push	r30
    422c:	ff 93       	push	r31
    422e:	df 93       	push	r29
    4230:	cf 93       	push	r28
    4232:	cd b7       	in	r28, 0x3d	; 61
    4234:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    4236:	80 91 a6 00 	lds	r24, 0x00A6
    423a:	90 91 a7 00 	lds	r25, 0x00A7
    423e:	00 97       	sbiw	r24, 0x00	; 0
    4240:	29 f0       	breq	.+10     	; 0x424c <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    4242:	e0 91 a6 00 	lds	r30, 0x00A6
    4246:	f0 91 a7 00 	lds	r31, 0x00A7
    424a:	09 95       	icall
}
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	ff 91       	pop	r31
    4252:	ef 91       	pop	r30
    4254:	bf 91       	pop	r27
    4256:	af 91       	pop	r26
    4258:	9f 91       	pop	r25
    425a:	8f 91       	pop	r24
    425c:	7f 91       	pop	r23
    425e:	6f 91       	pop	r22
    4260:	5f 91       	pop	r21
    4262:	4f 91       	pop	r20
    4264:	3f 91       	pop	r19
    4266:	2f 91       	pop	r18
    4268:	0f 90       	pop	r0
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	0f 90       	pop	r0
    426e:	1f 90       	pop	r1
    4270:	18 95       	reti

00004272 <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
ISR(TIMER1_OVF){
    4272:	1f 92       	push	r1
    4274:	0f 92       	push	r0
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	0f 92       	push	r0
    427a:	11 24       	eor	r1, r1
    427c:	2f 93       	push	r18
    427e:	3f 93       	push	r19
    4280:	4f 93       	push	r20
    4282:	5f 93       	push	r21
    4284:	6f 93       	push	r22
    4286:	7f 93       	push	r23
    4288:	8f 93       	push	r24
    428a:	9f 93       	push	r25
    428c:	af 93       	push	r26
    428e:	bf 93       	push	r27
    4290:	ef 93       	push	r30
    4292:	ff 93       	push	r31
    4294:	df 93       	push	r29
    4296:	cf 93       	push	r28
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    429c:	80 91 a2 00 	lds	r24, 0x00A2
    42a0:	90 91 a3 00 	lds	r25, 0x00A3
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	29 f0       	breq	.+10     	; 0x42b2 <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    42a8:	e0 91 a2 00 	lds	r30, 0x00A2
    42ac:	f0 91 a3 00 	lds	r31, 0x00A3
    42b0:	09 95       	icall
}
    42b2:	cf 91       	pop	r28
    42b4:	df 91       	pop	r29
    42b6:	ff 91       	pop	r31
    42b8:	ef 91       	pop	r30
    42ba:	bf 91       	pop	r27
    42bc:	af 91       	pop	r26
    42be:	9f 91       	pop	r25
    42c0:	8f 91       	pop	r24
    42c2:	7f 91       	pop	r23
    42c4:	6f 91       	pop	r22
    42c6:	5f 91       	pop	r21
    42c8:	4f 91       	pop	r20
    42ca:	3f 91       	pop	r19
    42cc:	2f 91       	pop	r18
    42ce:	0f 90       	pop	r0
    42d0:	0f be       	out	0x3f, r0	; 63
    42d2:	0f 90       	pop	r0
    42d4:	1f 90       	pop	r1
    42d6:	18 95       	reti

000042d8 <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
ISR(TIMER0_COMP){
    42d8:	1f 92       	push	r1
    42da:	0f 92       	push	r0
    42dc:	0f b6       	in	r0, 0x3f	; 63
    42de:	0f 92       	push	r0
    42e0:	11 24       	eor	r1, r1
    42e2:	2f 93       	push	r18
    42e4:	3f 93       	push	r19
    42e6:	4f 93       	push	r20
    42e8:	5f 93       	push	r21
    42ea:	6f 93       	push	r22
    42ec:	7f 93       	push	r23
    42ee:	8f 93       	push	r24
    42f0:	9f 93       	push	r25
    42f2:	af 93       	push	r26
    42f4:	bf 93       	push	r27
    42f6:	ef 93       	push	r30
    42f8:	ff 93       	push	r31
    42fa:	df 93       	push	r29
    42fc:	cf 93       	push	r28
    42fe:	cd b7       	in	r28, 0x3d	; 61
    4300:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    4302:	80 91 a0 00 	lds	r24, 0x00A0
    4306:	90 91 a1 00 	lds	r25, 0x00A1
    430a:	00 97       	sbiw	r24, 0x00	; 0
    430c:	29 f0       	breq	.+10     	; 0x4318 <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    430e:	e0 91 a0 00 	lds	r30, 0x00A0
    4312:	f0 91 a1 00 	lds	r31, 0x00A1
    4316:	09 95       	icall
}
    4318:	cf 91       	pop	r28
    431a:	df 91       	pop	r29
    431c:	ff 91       	pop	r31
    431e:	ef 91       	pop	r30
    4320:	bf 91       	pop	r27
    4322:	af 91       	pop	r26
    4324:	9f 91       	pop	r25
    4326:	8f 91       	pop	r24
    4328:	7f 91       	pop	r23
    432a:	6f 91       	pop	r22
    432c:	5f 91       	pop	r21
    432e:	4f 91       	pop	r20
    4330:	3f 91       	pop	r19
    4332:	2f 91       	pop	r18
    4334:	0f 90       	pop	r0
    4336:	0f be       	out	0x3f, r0	; 63
    4338:	0f 90       	pop	r0
    433a:	1f 90       	pop	r1
    433c:	18 95       	reti

0000433e <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
ISR(TIMER0_OVF){
    433e:	1f 92       	push	r1
    4340:	0f 92       	push	r0
    4342:	0f b6       	in	r0, 0x3f	; 63
    4344:	0f 92       	push	r0
    4346:	11 24       	eor	r1, r1
    4348:	2f 93       	push	r18
    434a:	3f 93       	push	r19
    434c:	4f 93       	push	r20
    434e:	5f 93       	push	r21
    4350:	6f 93       	push	r22
    4352:	7f 93       	push	r23
    4354:	8f 93       	push	r24
    4356:	9f 93       	push	r25
    4358:	af 93       	push	r26
    435a:	bf 93       	push	r27
    435c:	ef 93       	push	r30
    435e:	ff 93       	push	r31
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    4368:	80 91 9e 00 	lds	r24, 0x009E
    436c:	90 91 9f 00 	lds	r25, 0x009F
    4370:	00 97       	sbiw	r24, 0x00	; 0
    4372:	29 f0       	breq	.+10     	; 0x437e <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    4374:	e0 91 9e 00 	lds	r30, 0x009E
    4378:	f0 91 9f 00 	lds	r31, 0x009F
    437c:	09 95       	icall
}
    437e:	cf 91       	pop	r28
    4380:	df 91       	pop	r29
    4382:	ff 91       	pop	r31
    4384:	ef 91       	pop	r30
    4386:	bf 91       	pop	r27
    4388:	af 91       	pop	r26
    438a:	9f 91       	pop	r25
    438c:	8f 91       	pop	r24
    438e:	7f 91       	pop	r23
    4390:	6f 91       	pop	r22
    4392:	5f 91       	pop	r21
    4394:	4f 91       	pop	r20
    4396:	3f 91       	pop	r19
    4398:	2f 91       	pop	r18
    439a:	0f 90       	pop	r0
    439c:	0f be       	out	0x3f, r0	; 63
    439e:	0f 90       	pop	r0
    43a0:	1f 90       	pop	r1
    43a2:	18 95       	reti

000043a4 <SPI_enu_Init>:
#include"../../1-MCAL/DIO/DIO_interface.h"

#include"SPI_Config.h"
#include"SPI_Private.h"

ES_t SPI_enu_Init(void){
    43a4:	df 93       	push	r29
    43a6:	cf 93       	push	r28
    43a8:	cd b7       	in	r28, 0x3d	; 61
    43aa:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_OUTPUT);
    DIO_enu_SetPinValue(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_HIGH);
    SET_BIT(SPI_SPCR,MSTR);
    #elif  SPI_MODE == SPI_SLAVE
    //MOSI --> INPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN5,DIO_U8_INPUT);
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	65 e0       	ldi	r22, 0x05	; 5
    43b0:	40 e0       	ldi	r20, 0x00	; 0
    43b2:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    //MISO --> OUTPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN6,DIO_U8_OUTPUT);
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	66 e0       	ldi	r22, 0x06	; 6
    43ba:	41 e0       	ldi	r20, 0x01	; 1
    43bc:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    //CLK --> INPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN7,DIO_U8_INPUT);
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	67 e0       	ldi	r22, 0x07	; 7
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    //SS --> INPUT
    DIO_enu_SetPinDirection(DIO_U8_PORTB,DIO_U8_PIN4,DIO_U8_INPUT);
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	64 e0       	ldi	r22, 0x04	; 4
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <DIO_enu_SetPinDirection>
    CLR_BIT(SPI_SPCR,MSTR);
    43d4:	ad e2       	ldi	r26, 0x2D	; 45
    43d6:	b0 e0       	ldi	r27, 0x00	; 0
    43d8:	ed e2       	ldi	r30, 0x2D	; 45
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	80 81       	ld	r24, Z
    43de:	8f 7e       	andi	r24, 0xEF	; 239
    43e0:	8c 93       	st	X, r24
    #endif
    //Data Order
    #if SPI_DATA_ORDER == LSB
    SET_BIT(SPI_SPCR,DORD);
    43e2:	ad e2       	ldi	r26, 0x2D	; 45
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	ed e2       	ldi	r30, 0x2D	; 45
    43e8:	f0 e0       	ldi	r31, 0x00	; 0
    43ea:	80 81       	ld	r24, Z
    43ec:	80 62       	ori	r24, 0x20	; 32
    43ee:	8c 93       	st	X, r24
    #elif  SPI_DATA_ORDER == MSB
    CLR_BIT(SPI_SPCR,DORD);
    #endif
    //Clock Polarity 
    #if SPI_CLOCK_POLARITY == LEADING_RISING
    CLR_BIT(SPI_SPCR,CPOL);
    43f0:	ad e2       	ldi	r26, 0x2D	; 45
    43f2:	b0 e0       	ldi	r27, 0x00	; 0
    43f4:	ed e2       	ldi	r30, 0x2D	; 45
    43f6:	f0 e0       	ldi	r31, 0x00	; 0
    43f8:	80 81       	ld	r24, Z
    43fa:	87 7f       	andi	r24, 0xF7	; 247
    43fc:	8c 93       	st	X, r24
    #endif
    //Clock Phase 
    #if SPI_CLOCK_PHASE== LEADING_SAMPLE
    CLR_BIT(SPI_SPCR,CPHA);
    #elif SPI_CLOCK_PHASE== LEADING_SETUP
    SET_BIT(SPI_SPCR,CPHA);
    43fe:	ad e2       	ldi	r26, 0x2D	; 45
    4400:	b0 e0       	ldi	r27, 0x00	; 0
    4402:	ed e2       	ldi	r30, 0x2D	; 45
    4404:	f0 e0       	ldi	r31, 0x00	; 0
    4406:	80 81       	ld	r24, Z
    4408:	84 60       	ori	r24, 0x04	; 4
    440a:	8c 93       	st	X, r24
    #elif SPI_CLOCK_PRESCALER == DIV_64
    SET_BIT(SPI_SPCR,SPR0);
    SET_BIT(SPI_SPCR,SPR1);
    SET_BIT(SPI_SPSR,SPI2X);
    #elif SPI_CLOCK_PRESCALER == DIV_128
    SET_BIT(SPI_SPCR,SPR0);
    440c:	ad e2       	ldi	r26, 0x2D	; 45
    440e:	b0 e0       	ldi	r27, 0x00	; 0
    4410:	ed e2       	ldi	r30, 0x2D	; 45
    4412:	f0 e0       	ldi	r31, 0x00	; 0
    4414:	80 81       	ld	r24, Z
    4416:	81 60       	ori	r24, 0x01	; 1
    4418:	8c 93       	st	X, r24
    SET_BIT(SPI_SPCR,SPR1);
    441a:	ad e2       	ldi	r26, 0x2D	; 45
    441c:	b0 e0       	ldi	r27, 0x00	; 0
    441e:	ed e2       	ldi	r30, 0x2D	; 45
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	80 81       	ld	r24, Z
    4424:	82 60       	ori	r24, 0x02	; 2
    4426:	8c 93       	st	X, r24
    CLR_BIT(SPI_SPSR,SPI2X);
    4428:	ae e2       	ldi	r26, 0x2E	; 46
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	ee e2       	ldi	r30, 0x2E	; 46
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	8e 7f       	andi	r24, 0xFE	; 254
    4434:	8c 93       	st	X, r24
    #endif
    //Enable SPI
    SET_BIT(SPI_SPCR,SPE);
    4436:	ad e2       	ldi	r26, 0x2D	; 45
    4438:	b0 e0       	ldi	r27, 0x00	; 0
    443a:	ed e2       	ldi	r30, 0x2D	; 45
    443c:	f0 e0       	ldi	r31, 0x00	; 0
    443e:	80 81       	ld	r24, Z
    4440:	80 64       	ori	r24, 0x40	; 64
    4442:	8c 93       	st	X, r24
    return STATE_OK;
    4444:	81 e0       	ldi	r24, 0x01	; 1
}
    4446:	cf 91       	pop	r28
    4448:	df 91       	pop	r29
    444a:	08 95       	ret

0000444c <SPI_enu_Transceive>:
ES_t SPI_enu_Transceive(u8 Copy_u8_Data ,u8 *Copy_u8_recievedData){
    444c:	df 93       	push	r29
    444e:	cf 93       	push	r28
    4450:	00 d0       	rcall	.+0      	; 0x4452 <SPI_enu_Transceive+0x6>
    4452:	0f 92       	push	r0
    4454:	cd b7       	in	r28, 0x3d	; 61
    4456:	de b7       	in	r29, 0x3e	; 62
    4458:	89 83       	std	Y+1, r24	; 0x01
    445a:	7b 83       	std	Y+3, r23	; 0x03
    445c:	6a 83       	std	Y+2, r22	; 0x02
        //Send Data
        SPI_SPDR = Copy_u8_Data;
    445e:	ef e2       	ldi	r30, 0x2F	; 47
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	89 81       	ldd	r24, Y+1	; 0x01
    4464:	80 83       	st	Z, r24
        while ((!GET_BIT(SPI_SPSR,SPIF)));
    4466:	ee e2       	ldi	r30, 0x2E	; 46
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	80 81       	ld	r24, Z
    446c:	88 23       	and	r24, r24
    446e:	dc f7       	brge	.-10     	; 0x4466 <SPI_enu_Transceive+0x1a>
        //Receive Data
        *Copy_u8_recievedData = SPI_SPDR;
    4470:	ef e2       	ldi	r30, 0x2F	; 47
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	80 81       	ld	r24, Z
    4476:	ea 81       	ldd	r30, Y+2	; 0x02
    4478:	fb 81       	ldd	r31, Y+3	; 0x03
    447a:	80 83       	st	Z, r24
        return STATE_OK;
    447c:	81 e0       	ldi	r24, 0x01	; 1
}
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	08 95       	ret

0000448a <I2C_enu_clearAndCheckFlag>:
#include"../../1-MCAL/WDT/WDT_Interface.h"

#include"I2C_Config.h"
#include"I2C_Private.h"

static void I2C_enu_clearAndCheckFlag(void){
    448a:	df 93       	push	r29
    448c:	cf 93       	push	r28
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    //Clear Flag
    SET_BIT(I2C_TWCR,TWINT);
    4492:	a6 e5       	ldi	r26, 0x56	; 86
    4494:	b0 e0       	ldi	r27, 0x00	; 0
    4496:	e6 e5       	ldi	r30, 0x56	; 86
    4498:	f0 e0       	ldi	r31, 0x00	; 0
    449a:	80 81       	ld	r24, Z
    449c:	80 68       	ori	r24, 0x80	; 128
    449e:	8c 93       	st	X, r24
    //Wait Flag
    while((!GET_BIT(I2C_TWCR,TWINT)));
    44a0:	e6 e5       	ldi	r30, 0x56	; 86
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	80 81       	ld	r24, Z
    44a6:	88 23       	and	r24, r24
    44a8:	dc f7       	brge	.-10     	; 0x44a0 <I2C_enu_clearAndCheckFlag+0x16>
}
    44aa:	cf 91       	pop	r28
    44ac:	df 91       	pop	r29
    44ae:	08 95       	ret

000044b0 <I2C_enu_Init>:
ES_t I2C_enu_Init(void){
    44b0:	df 93       	push	r29
    44b2:	cf 93       	push	r28
    44b4:	cd b7       	in	r28, 0x3d	; 61
    44b6:	de b7       	in	r29, 0x3e	; 62
    3- Enable ACK
    4- Enable I2C
*/
    #if I2C_MODE == I2C_MASTER
    //1-Select Prescaler
    CLR_BIT(I2C_TWSR,TWPS0);
    44b8:	a1 e2       	ldi	r26, 0x21	; 33
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	e1 e2       	ldi	r30, 0x21	; 33
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	8e 7f       	andi	r24, 0xFE	; 254
    44c4:	8c 93       	st	X, r24
    CLR_BIT(I2C_TWSR,TWPS1);
    44c6:	a1 e2       	ldi	r26, 0x21	; 33
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	e1 e2       	ldi	r30, 0x21	; 33
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	8d 7f       	andi	r24, 0xFD	; 253
    44d2:	8c 93       	st	X, r24
    //2-Set TWBR REG
    I2C_TWBR = ((F_CPU/I2C_SPEED)-16)/(2*I2C_PRESCALER);
    44d4:	e0 e2       	ldi	r30, 0x20	; 32
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	88 e3       	ldi	r24, 0x38	; 56
    44da:	80 83       	st	Z, r24
    //3- Enable ACK
    SET_BIT(I2C_TWCR,TWEA);
    44dc:	a6 e5       	ldi	r26, 0x56	; 86
    44de:	b0 e0       	ldi	r27, 0x00	; 0
    44e0:	e6 e5       	ldi	r30, 0x56	; 86
    44e2:	f0 e0       	ldi	r31, 0x00	; 0
    44e4:	80 81       	ld	r24, Z
    44e6:	80 64       	ori	r24, 0x40	; 64
    44e8:	8c 93       	st	X, r24
    //4- Enable I2C
    SET_BIT(I2C_TWCR,TWEN);
    44ea:	a6 e5       	ldi	r26, 0x56	; 86
    44ec:	b0 e0       	ldi	r27, 0x00	; 0
    44ee:	e6 e5       	ldi	r30, 0x56	; 86
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	80 81       	ld	r24, Z
    44f4:	84 60       	ori	r24, 0x04	; 4
    44f6:	8c 93       	st	X, r24
    //1- Enable ACK
    SET_BIT(I2C_TWCR,TWEA);
    //2- Enable I2C
    SET_BIT(I2C_TWCR,TWEN);
    #endif
    return STATE_OK;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
}
    44fa:	cf 91       	pop	r28
    44fc:	df 91       	pop	r29
    44fe:	08 95       	ret

00004500 <I2C_enu_setSlaveAddress>:
ES_t I2C_enu_setSlaveAddress(u8 Copy_u8_slaveAddress){
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	0f 92       	push	r0
    4506:	cd b7       	in	r28, 0x3d	; 61
    4508:	de b7       	in	r29, 0x3e	; 62
    450a:	89 83       	std	Y+1, r24	; 0x01
    // Set Slave Address
    I2C_TWAR = (Copy_u8_slaveAddress<<1);
    450c:	e2 e2       	ldi	r30, 0x22	; 34
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	88 0f       	add	r24, r24
    4514:	80 83       	st	Z, r24
    return STATE_OK;
    4516:	81 e0       	ldi	r24, 0x01	; 1
}
    4518:	0f 90       	pop	r0
    451a:	cf 91       	pop	r28
    451c:	df 91       	pop	r29
    451e:	08 95       	ret

00004520 <I2C_enu_Start>:
ES_t I2C_enu_Start(void){
    4520:	df 93       	push	r29
    4522:	cf 93       	push	r28
    4524:	cd b7       	in	r28, 0x3d	; 61
    4526:	de b7       	in	r29, 0x3e	; 62
    //1- Enable Start Condition
    SET_BIT(I2C_TWCR,TWSTA);
    4528:	a6 e5       	ldi	r26, 0x56	; 86
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	e6 e5       	ldi	r30, 0x56	; 86
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	80 81       	ld	r24, Z
    4532:	80 62       	ori	r24, 0x20	; 32
    4534:	8c 93       	st	X, r24
    I2C_enu_clearAndCheckFlag();
    4536:	0e 94 45 22 	call	0x448a	; 0x448a <I2C_enu_clearAndCheckFlag>
    return STATE_OK;
    453a:	81 e0       	ldi	r24, 0x01	; 1
}
    453c:	cf 91       	pop	r28
    453e:	df 91       	pop	r29
    4540:	08 95       	ret

00004542 <I2C_enu_Stop>:
ES_t I2C_enu_Stop(void){
    4542:	df 93       	push	r29
    4544:	cf 93       	push	r28
    4546:	cd b7       	in	r28, 0x3d	; 61
    4548:	de b7       	in	r29, 0x3e	; 62
    //1- Enable Stop Condition
    SET_BIT(I2C_TWCR,TWSTO);
    454a:	a6 e5       	ldi	r26, 0x56	; 86
    454c:	b0 e0       	ldi	r27, 0x00	; 0
    454e:	e6 e5       	ldi	r30, 0x56	; 86
    4550:	f0 e0       	ldi	r31, 0x00	; 0
    4552:	80 81       	ld	r24, Z
    4554:	80 61       	ori	r24, 0x10	; 16
    4556:	8c 93       	st	X, r24
    //2- Clear Flag
    SET_BIT(I2C_TWCR,TWINT);
    4558:	a6 e5       	ldi	r26, 0x56	; 86
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	e6 e5       	ldi	r30, 0x56	; 86
    455e:	f0 e0       	ldi	r31, 0x00	; 0
    4560:	80 81       	ld	r24, Z
    4562:	80 68       	ori	r24, 0x80	; 128
    4564:	8c 93       	st	X, r24
    return STATE_OK;
    4566:	81 e0       	ldi	r24, 0x01	; 1
}
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	08 95       	ret

0000456e <I2C_enu_writeData>:
ES_t I2C_enu_writeData(u16 Copy_u8_slaveAddress ,u8 Copy_u8_Data){
    456e:	df 93       	push	r29
    4570:	cf 93       	push	r28
    4572:	00 d0       	rcall	.+0      	; 0x4574 <I2C_enu_writeData+0x6>
    4574:	0f 92       	push	r0
    4576:	cd b7       	in	r28, 0x3d	; 61
    4578:	de b7       	in	r29, 0x3e	; 62
    457a:	9a 83       	std	Y+2, r25	; 0x02
    457c:	89 83       	std	Y+1, r24	; 0x01
    457e:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_u8_slaveAddress != NONE)
    4580:	89 81       	ldd	r24, Y+1	; 0x01
    4582:	9a 81       	ldd	r25, Y+2	; 0x02
    4584:	23 e0       	ldi	r18, 0x03	; 3
    4586:	88 3e       	cpi	r24, 0xE8	; 232
    4588:	92 07       	cpc	r25, r18
    458a:	a9 f0       	breq	.+42     	; 0x45b6 <I2C_enu_writeData+0x48>
    {
        // 1- Write Slave Address
        I2C_TWDR = (Copy_u8_slaveAddress << 1);
    458c:	e3 e2       	ldi	r30, 0x23	; 35
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	89 81       	ldd	r24, Y+1	; 0x01
    4592:	88 0f       	add	r24, r24
    4594:	80 83       	st	Z, r24
        // 2-Set Write Operation
        CLR_BIT(I2C_TWDR, TWD0);
    4596:	a3 e2       	ldi	r26, 0x23	; 35
    4598:	b0 e0       	ldi	r27, 0x00	; 0
    459a:	e3 e2       	ldi	r30, 0x23	; 35
    459c:	f0 e0       	ldi	r31, 0x00	; 0
    459e:	80 81       	ld	r24, Z
    45a0:	8e 7f       	andi	r24, 0xFE	; 254
    45a2:	8c 93       	st	X, r24
        // 3-Start Bit
        CLR_BIT(I2C_TWCR, TWSTA);
    45a4:	a6 e5       	ldi	r26, 0x56	; 86
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e6 e5       	ldi	r30, 0x56	; 86
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	80 81       	ld	r24, Z
    45ae:	8f 7d       	andi	r24, 0xDF	; 223
    45b0:	8c 93       	st	X, r24
        I2C_enu_clearAndCheckFlag();
    45b2:	0e 94 45 22 	call	0x448a	; 0x448a <I2C_enu_clearAndCheckFlag>
    }
        // 4- Write Data
        I2C_TWDR = Copy_u8_Data;
    45b6:	e3 e2       	ldi	r30, 0x23	; 35
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	8b 81       	ldd	r24, Y+3	; 0x03
    45bc:	80 83       	st	Z, r24
        I2C_enu_clearAndCheckFlag();
    45be:	0e 94 45 22 	call	0x448a	; 0x448a <I2C_enu_clearAndCheckFlag>
    return STATE_OK;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
}
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	cf 91       	pop	r28
    45cc:	df 91       	pop	r29
    45ce:	08 95       	ret

000045d0 <I2C_enu_readData>:
ES_t I2C_enu_readData(u8 Copy_u8_slaveAddress,u8 *Copy_pu8_receivedByte){
    45d0:	df 93       	push	r29
    45d2:	cf 93       	push	r28
    45d4:	00 d0       	rcall	.+0      	; 0x45d6 <I2C_enu_readData+0x6>
    45d6:	00 d0       	rcall	.+0      	; 0x45d8 <I2C_enu_readData+0x8>
    45d8:	cd b7       	in	r28, 0x3d	; 61
    45da:	de b7       	in	r29, 0x3e	; 62
    45dc:	8a 83       	std	Y+2, r24	; 0x02
    45de:	7c 83       	std	Y+4, r23	; 0x04
    45e0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_receivedByte != NULL){
    45e6:	8b 81       	ldd	r24, Y+3	; 0x03
    45e8:	9c 81       	ldd	r25, Y+4	; 0x04
    45ea:	00 97       	sbiw	r24, 0x00	; 0
    45ec:	39 f1       	breq	.+78     	; 0x463c <I2C_enu_readData+0x6c>
        #if I2C_MODE == I2C_MASTER
        //1- Write Slave Address
        I2C_TWDR = (Copy_u8_slaveAddress<<1);
    45ee:	e3 e2       	ldi	r30, 0x23	; 35
    45f0:	f0 e0       	ldi	r31, 0x00	; 0
    45f2:	8a 81       	ldd	r24, Y+2	; 0x02
    45f4:	88 0f       	add	r24, r24
    45f6:	80 83       	st	Z, r24
        //2- Set Read Operation
        SET_BIT(I2C_TWDR,TWD0);
    45f8:	a3 e2       	ldi	r26, 0x23	; 35
    45fa:	b0 e0       	ldi	r27, 0x00	; 0
    45fc:	e3 e2       	ldi	r30, 0x23	; 35
    45fe:	f0 e0       	ldi	r31, 0x00	; 0
    4600:	80 81       	ld	r24, Z
    4602:	81 60       	ori	r24, 0x01	; 1
    4604:	8c 93       	st	X, r24
        //3-Start Bit
        CLR_BIT(I2C_TWCR,TWSTA);
    4606:	a6 e5       	ldi	r26, 0x56	; 86
    4608:	b0 e0       	ldi	r27, 0x00	; 0
    460a:	e6 e5       	ldi	r30, 0x56	; 86
    460c:	f0 e0       	ldi	r31, 0x00	; 0
    460e:	80 81       	ld	r24, Z
    4610:	8f 7d       	andi	r24, 0xDF	; 223
    4612:	8c 93       	st	X, r24
        I2C_enu_clearAndCheckFlag();
    4614:	0e 94 45 22 	call	0x448a	; 0x448a <I2C_enu_clearAndCheckFlag>
        //4- Check Data Received
        I2C_enu_clearAndCheckFlag();
    4618:	0e 94 45 22 	call	0x448a	; 0x448a <I2C_enu_clearAndCheckFlag>
        //5-Read Data
        *Copy_pu8_receivedByte= I2C_TWDR;
    461c:	e3 e2       	ldi	r30, 0x23	; 35
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	eb 81       	ldd	r30, Y+3	; 0x03
    4624:	fc 81       	ldd	r31, Y+4	; 0x04
    4626:	80 83       	st	Z, r24
        //6- Send NACK
        CLR_BIT(I2C_TWCR,TWEA);
    4628:	a6 e5       	ldi	r26, 0x56	; 86
    462a:	b0 e0       	ldi	r27, 0x00	; 0
    462c:	e6 e5       	ldi	r30, 0x56	; 86
    462e:	f0 e0       	ldi	r31, 0x00	; 0
    4630:	80 81       	ld	r24, Z
    4632:	8f 7b       	andi	r24, 0xBF	; 191
    4634:	8c 93       	st	X, r24
        //7- Check Flag
        I2C_enu_clearAndCheckFlag();
    4636:	0e 94 45 22 	call	0x448a	; 0x448a <I2C_enu_clearAndCheckFlag>
    463a:	01 c0       	rjmp	.+2      	; 0x463e <I2C_enu_readData+0x6e>
        //Wait to recieve Data
        while( (TWSR & 0xf8) != 0x80);
        *Copy_pu8_receivedByte = I2C_TWDR;
        #endif
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    463c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    463e:	89 81       	ldd	r24, Y+1	; 0x01

}
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	cf 91       	pop	r28
    464a:	df 91       	pop	r29
    464c:	08 95       	ret

0000464e <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    464e:	df 93       	push	r29
    4650:	cf 93       	push	r28
    4652:	cd b7       	in	r28, 0x3d	; 61
    4654:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    4656:	af e5       	ldi	r26, 0x5F	; 95
    4658:	b0 e0       	ldi	r27, 0x00	; 0
    465a:	ef e5       	ldi	r30, 0x5F	; 95
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	80 81       	ld	r24, Z
    4660:	80 68       	ori	r24, 0x80	; 128
    4662:	8c 93       	st	X, r24
    return STATE_OK;
    4664:	81 e0       	ldi	r24, 0x01	; 1
}
    4666:	cf 91       	pop	r28
    4668:	df 91       	pop	r29
    466a:	08 95       	ret

0000466c <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    466c:	df 93       	push	r29
    466e:	cf 93       	push	r28
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    4674:	af e5       	ldi	r26, 0x5F	; 95
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	ef e5       	ldi	r30, 0x5F	; 95
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	80 81       	ld	r24, Z
    467e:	8f 77       	andi	r24, 0x7F	; 127
    4680:	8c 93       	st	X, r24
    return STATE_OK;
    4682:	81 e0       	ldi	r24, 0x01	; 1
}
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <EXTI_enu_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
    4692:	2b 97       	sbiw	r28, 0x0b	; 11
    4694:	0f b6       	in	r0, 0x3f	; 63
    4696:	f8 94       	cli
    4698:	de bf       	out	0x3e, r29	; 62
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	cd bf       	out	0x3d, r28	; 61
    469e:	8a 83       	std	Y+2, r24	; 0x02
    46a0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    46a6:	8a 81       	ldd	r24, Y+2	; 0x02
    46a8:	83 30       	cpi	r24, 0x03	; 3
    46aa:	08 f0       	brcs	.+2      	; 0x46ae <EXTI_enu_Enable+0x24>
    46ac:	07 c1       	rjmp	.+526    	; 0x48bc <EXTI_enu_Enable+0x232>
    46ae:	8b 81       	ldd	r24, Y+3	; 0x03
    46b0:	84 30       	cpi	r24, 0x04	; 4
    46b2:	08 f0       	brcs	.+2      	; 0x46b6 <EXTI_enu_Enable+0x2c>
    46b4:	03 c1       	rjmp	.+518    	; 0x48bc <EXTI_enu_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    46b6:	8a 81       	ldd	r24, Y+2	; 0x02
    46b8:	28 2f       	mov	r18, r24
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	3b 87       	std	Y+11, r19	; 0x0b
    46be:	2a 87       	std	Y+10, r18	; 0x0a
    46c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    46c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    46c4:	81 30       	cpi	r24, 0x01	; 1
    46c6:	91 05       	cpc	r25, r1
    46c8:	09 f4       	brne	.+2      	; 0x46cc <EXTI_enu_Enable+0x42>
    46ca:	6d c0       	rjmp	.+218    	; 0x47a6 <EXTI_enu_Enable+0x11c>
    46cc:	2a 85       	ldd	r18, Y+10	; 0x0a
    46ce:	3b 85       	ldd	r19, Y+11	; 0x0b
    46d0:	22 30       	cpi	r18, 0x02	; 2
    46d2:	31 05       	cpc	r19, r1
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <EXTI_enu_Enable+0x4e>
    46d6:	c9 c0       	rjmp	.+402    	; 0x486a <EXTI_enu_Enable+0x1e0>
    46d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    46da:	9b 85       	ldd	r25, Y+11	; 0x0b
    46dc:	00 97       	sbiw	r24, 0x00	; 0
    46de:	09 f0       	breq	.+2      	; 0x46e2 <EXTI_enu_Enable+0x58>
    46e0:	ee c0       	rjmp	.+476    	; 0x48be <EXTI_enu_Enable+0x234>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    46e2:	8b 81       	ldd	r24, Y+3	; 0x03
    46e4:	28 2f       	mov	r18, r24
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	39 87       	std	Y+9, r19	; 0x09
    46ea:	28 87       	std	Y+8, r18	; 0x08
    46ec:	88 85       	ldd	r24, Y+8	; 0x08
    46ee:	99 85       	ldd	r25, Y+9	; 0x09
    46f0:	81 30       	cpi	r24, 0x01	; 1
    46f2:	91 05       	cpc	r25, r1
    46f4:	21 f1       	breq	.+72     	; 0x473e <EXTI_enu_Enable+0xb4>
    46f6:	28 85       	ldd	r18, Y+8	; 0x08
    46f8:	39 85       	ldd	r19, Y+9	; 0x09
    46fa:	22 30       	cpi	r18, 0x02	; 2
    46fc:	31 05       	cpc	r19, r1
    46fe:	2c f4       	brge	.+10     	; 0x470a <EXTI_enu_Enable+0x80>
    4700:	88 85       	ldd	r24, Y+8	; 0x08
    4702:	99 85       	ldd	r25, Y+9	; 0x09
    4704:	00 97       	sbiw	r24, 0x00	; 0
    4706:	61 f0       	breq	.+24     	; 0x4720 <EXTI_enu_Enable+0x96>
    4708:	46 c0       	rjmp	.+140    	; 0x4796 <EXTI_enu_Enable+0x10c>
    470a:	28 85       	ldd	r18, Y+8	; 0x08
    470c:	39 85       	ldd	r19, Y+9	; 0x09
    470e:	22 30       	cpi	r18, 0x02	; 2
    4710:	31 05       	cpc	r19, r1
    4712:	21 f1       	breq	.+72     	; 0x475c <EXTI_enu_Enable+0xd2>
    4714:	88 85       	ldd	r24, Y+8	; 0x08
    4716:	99 85       	ldd	r25, Y+9	; 0x09
    4718:	83 30       	cpi	r24, 0x03	; 3
    471a:	91 05       	cpc	r25, r1
    471c:	71 f1       	breq	.+92     	; 0x477a <EXTI_enu_Enable+0xf0>
    471e:	3b c0       	rjmp	.+118    	; 0x4796 <EXTI_enu_Enable+0x10c>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4720:	a5 e5       	ldi	r26, 0x55	; 85
    4722:	b0 e0       	ldi	r27, 0x00	; 0
    4724:	e5 e5       	ldi	r30, 0x55	; 85
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	80 81       	ld	r24, Z
    472a:	8e 7f       	andi	r24, 0xFE	; 254
    472c:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    472e:	a5 e5       	ldi	r26, 0x55	; 85
    4730:	b0 e0       	ldi	r27, 0x00	; 0
    4732:	e5 e5       	ldi	r30, 0x55	; 85
    4734:	f0 e0       	ldi	r31, 0x00	; 0
    4736:	80 81       	ld	r24, Z
    4738:	8d 7f       	andi	r24, 0xFD	; 253
    473a:	8c 93       	st	X, r24
    473c:	2c c0       	rjmp	.+88     	; 0x4796 <EXTI_enu_Enable+0x10c>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    473e:	a5 e5       	ldi	r26, 0x55	; 85
    4740:	b0 e0       	ldi	r27, 0x00	; 0
    4742:	e5 e5       	ldi	r30, 0x55	; 85
    4744:	f0 e0       	ldi	r31, 0x00	; 0
    4746:	80 81       	ld	r24, Z
    4748:	81 60       	ori	r24, 0x01	; 1
    474a:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    474c:	a5 e5       	ldi	r26, 0x55	; 85
    474e:	b0 e0       	ldi	r27, 0x00	; 0
    4750:	e5 e5       	ldi	r30, 0x55	; 85
    4752:	f0 e0       	ldi	r31, 0x00	; 0
    4754:	80 81       	ld	r24, Z
    4756:	8d 7f       	andi	r24, 0xFD	; 253
    4758:	8c 93       	st	X, r24
    475a:	1d c0       	rjmp	.+58     	; 0x4796 <EXTI_enu_Enable+0x10c>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    475c:	a5 e5       	ldi	r26, 0x55	; 85
    475e:	b0 e0       	ldi	r27, 0x00	; 0
    4760:	e5 e5       	ldi	r30, 0x55	; 85
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	80 81       	ld	r24, Z
    4766:	8e 7f       	andi	r24, 0xFE	; 254
    4768:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    476a:	a5 e5       	ldi	r26, 0x55	; 85
    476c:	b0 e0       	ldi	r27, 0x00	; 0
    476e:	e5 e5       	ldi	r30, 0x55	; 85
    4770:	f0 e0       	ldi	r31, 0x00	; 0
    4772:	80 81       	ld	r24, Z
    4774:	82 60       	ori	r24, 0x02	; 2
    4776:	8c 93       	st	X, r24
    4778:	0e c0       	rjmp	.+28     	; 0x4796 <EXTI_enu_Enable+0x10c>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    477a:	a5 e5       	ldi	r26, 0x55	; 85
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	e5 e5       	ldi	r30, 0x55	; 85
    4780:	f0 e0       	ldi	r31, 0x00	; 0
    4782:	80 81       	ld	r24, Z
    4784:	81 60       	ori	r24, 0x01	; 1
    4786:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4788:	a5 e5       	ldi	r26, 0x55	; 85
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	e5 e5       	ldi	r30, 0x55	; 85
    478e:	f0 e0       	ldi	r31, 0x00	; 0
    4790:	80 81       	ld	r24, Z
    4792:	82 60       	ori	r24, 0x02	; 2
    4794:	8c 93       	st	X, r24
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    4796:	ab e5       	ldi	r26, 0x5B	; 91
    4798:	b0 e0       	ldi	r27, 0x00	; 0
    479a:	eb e5       	ldi	r30, 0x5B	; 91
    479c:	f0 e0       	ldi	r31, 0x00	; 0
    479e:	80 81       	ld	r24, Z
    47a0:	80 64       	ori	r24, 0x40	; 64
    47a2:	8c 93       	st	X, r24
    47a4:	8c c0       	rjmp	.+280    	; 0x48be <EXTI_enu_Enable+0x234>
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    47a6:	8b 81       	ldd	r24, Y+3	; 0x03
    47a8:	28 2f       	mov	r18, r24
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	3f 83       	std	Y+7, r19	; 0x07
    47ae:	2e 83       	std	Y+6, r18	; 0x06
    47b0:	8e 81       	ldd	r24, Y+6	; 0x06
    47b2:	9f 81       	ldd	r25, Y+7	; 0x07
    47b4:	81 30       	cpi	r24, 0x01	; 1
    47b6:	91 05       	cpc	r25, r1
    47b8:	21 f1       	breq	.+72     	; 0x4802 <EXTI_enu_Enable+0x178>
    47ba:	2e 81       	ldd	r18, Y+6	; 0x06
    47bc:	3f 81       	ldd	r19, Y+7	; 0x07
    47be:	22 30       	cpi	r18, 0x02	; 2
    47c0:	31 05       	cpc	r19, r1
    47c2:	2c f4       	brge	.+10     	; 0x47ce <EXTI_enu_Enable+0x144>
    47c4:	8e 81       	ldd	r24, Y+6	; 0x06
    47c6:	9f 81       	ldd	r25, Y+7	; 0x07
    47c8:	00 97       	sbiw	r24, 0x00	; 0
    47ca:	61 f0       	breq	.+24     	; 0x47e4 <EXTI_enu_Enable+0x15a>
    47cc:	46 c0       	rjmp	.+140    	; 0x485a <EXTI_enu_Enable+0x1d0>
    47ce:	2e 81       	ldd	r18, Y+6	; 0x06
    47d0:	3f 81       	ldd	r19, Y+7	; 0x07
    47d2:	22 30       	cpi	r18, 0x02	; 2
    47d4:	31 05       	cpc	r19, r1
    47d6:	21 f1       	breq	.+72     	; 0x4820 <EXTI_enu_Enable+0x196>
    47d8:	8e 81       	ldd	r24, Y+6	; 0x06
    47da:	9f 81       	ldd	r25, Y+7	; 0x07
    47dc:	83 30       	cpi	r24, 0x03	; 3
    47de:	91 05       	cpc	r25, r1
    47e0:	71 f1       	breq	.+92     	; 0x483e <EXTI_enu_Enable+0x1b4>
    47e2:	3b c0       	rjmp	.+118    	; 0x485a <EXTI_enu_Enable+0x1d0>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    47e4:	a5 e5       	ldi	r26, 0x55	; 85
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	e5 e5       	ldi	r30, 0x55	; 85
    47ea:	f0 e0       	ldi	r31, 0x00	; 0
    47ec:	80 81       	ld	r24, Z
    47ee:	8b 7f       	andi	r24, 0xFB	; 251
    47f0:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    47f2:	a5 e5       	ldi	r26, 0x55	; 85
    47f4:	b0 e0       	ldi	r27, 0x00	; 0
    47f6:	e5 e5       	ldi	r30, 0x55	; 85
    47f8:	f0 e0       	ldi	r31, 0x00	; 0
    47fa:	80 81       	ld	r24, Z
    47fc:	87 7f       	andi	r24, 0xF7	; 247
    47fe:	8c 93       	st	X, r24
    4800:	2c c0       	rjmp	.+88     	; 0x485a <EXTI_enu_Enable+0x1d0>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4802:	a5 e5       	ldi	r26, 0x55	; 85
    4804:	b0 e0       	ldi	r27, 0x00	; 0
    4806:	e5 e5       	ldi	r30, 0x55	; 85
    4808:	f0 e0       	ldi	r31, 0x00	; 0
    480a:	80 81       	ld	r24, Z
    480c:	84 60       	ori	r24, 0x04	; 4
    480e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4810:	a5 e5       	ldi	r26, 0x55	; 85
    4812:	b0 e0       	ldi	r27, 0x00	; 0
    4814:	e5 e5       	ldi	r30, 0x55	; 85
    4816:	f0 e0       	ldi	r31, 0x00	; 0
    4818:	80 81       	ld	r24, Z
    481a:	87 7f       	andi	r24, 0xF7	; 247
    481c:	8c 93       	st	X, r24
    481e:	1d c0       	rjmp	.+58     	; 0x485a <EXTI_enu_Enable+0x1d0>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4820:	a5 e5       	ldi	r26, 0x55	; 85
    4822:	b0 e0       	ldi	r27, 0x00	; 0
    4824:	e5 e5       	ldi	r30, 0x55	; 85
    4826:	f0 e0       	ldi	r31, 0x00	; 0
    4828:	80 81       	ld	r24, Z
    482a:	8b 7f       	andi	r24, 0xFB	; 251
    482c:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    482e:	a5 e5       	ldi	r26, 0x55	; 85
    4830:	b0 e0       	ldi	r27, 0x00	; 0
    4832:	e5 e5       	ldi	r30, 0x55	; 85
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	80 81       	ld	r24, Z
    4838:	88 60       	ori	r24, 0x08	; 8
    483a:	8c 93       	st	X, r24
    483c:	0e c0       	rjmp	.+28     	; 0x485a <EXTI_enu_Enable+0x1d0>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    483e:	a5 e5       	ldi	r26, 0x55	; 85
    4840:	b0 e0       	ldi	r27, 0x00	; 0
    4842:	e5 e5       	ldi	r30, 0x55	; 85
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	80 81       	ld	r24, Z
    4848:	84 60       	ori	r24, 0x04	; 4
    484a:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    484c:	a5 e5       	ldi	r26, 0x55	; 85
    484e:	b0 e0       	ldi	r27, 0x00	; 0
    4850:	e5 e5       	ldi	r30, 0x55	; 85
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	80 81       	ld	r24, Z
    4856:	88 60       	ori	r24, 0x08	; 8
    4858:	8c 93       	st	X, r24
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    485a:	ab e5       	ldi	r26, 0x5B	; 91
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	eb e5       	ldi	r30, 0x5B	; 91
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	80 68       	ori	r24, 0x80	; 128
    4866:	8c 93       	st	X, r24
    4868:	2a c0       	rjmp	.+84     	; 0x48be <EXTI_enu_Enable+0x234>
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    486a:	8b 81       	ldd	r24, Y+3	; 0x03
    486c:	28 2f       	mov	r18, r24
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	3d 83       	std	Y+5, r19	; 0x05
    4872:	2c 83       	std	Y+4, r18	; 0x04
    4874:	8c 81       	ldd	r24, Y+4	; 0x04
    4876:	9d 81       	ldd	r25, Y+5	; 0x05
    4878:	82 30       	cpi	r24, 0x02	; 2
    487a:	91 05       	cpc	r25, r1
    487c:	31 f0       	breq	.+12     	; 0x488a <EXTI_enu_Enable+0x200>
    487e:	2c 81       	ldd	r18, Y+4	; 0x04
    4880:	3d 81       	ldd	r19, Y+5	; 0x05
    4882:	23 30       	cpi	r18, 0x03	; 3
    4884:	31 05       	cpc	r19, r1
    4886:	49 f0       	breq	.+18     	; 0x489a <EXTI_enu_Enable+0x210>
    4888:	10 c0       	rjmp	.+32     	; 0x48aa <EXTI_enu_Enable+0x220>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    488a:	a4 e5       	ldi	r26, 0x54	; 84
    488c:	b0 e0       	ldi	r27, 0x00	; 0
    488e:	e4 e5       	ldi	r30, 0x54	; 84
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	80 81       	ld	r24, Z
    4894:	8f 7b       	andi	r24, 0xBF	; 191
    4896:	8c 93       	st	X, r24
    4898:	09 c0       	rjmp	.+18     	; 0x48ac <EXTI_enu_Enable+0x222>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    489a:	a4 e5       	ldi	r26, 0x54	; 84
    489c:	b0 e0       	ldi	r27, 0x00	; 0
    489e:	e4 e5       	ldi	r30, 0x54	; 84
    48a0:	f0 e0       	ldi	r31, 0x00	; 0
    48a2:	80 81       	ld	r24, Z
    48a4:	80 64       	ori	r24, 0x40	; 64
    48a6:	8c 93       	st	X, r24
    48a8:	01 c0       	rjmp	.+2      	; 0x48ac <EXTI_enu_Enable+0x222>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    48aa:	19 82       	std	Y+1, r1	; 0x01
                break;
            }
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    48ac:	ab e5       	ldi	r26, 0x5B	; 91
    48ae:	b0 e0       	ldi	r27, 0x00	; 0
    48b0:	eb e5       	ldi	r30, 0x5B	; 91
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	80 81       	ld	r24, Z
    48b6:	80 62       	ori	r24, 0x20	; 32
    48b8:	8c 93       	st	X, r24
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <EXTI_enu_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    48bc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    48be:	89 81       	ldd	r24, Y+1	; 0x01
}
    48c0:	2b 96       	adiw	r28, 0x0b	; 11
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
    48cc:	cf 91       	pop	r28
    48ce:	df 91       	pop	r29
    48d0:	08 95       	ret

000048d2 <EXTI_enu_Disable>:
ES_t EXTI_enu_Disable(u8 Copy_u8_EXTI_Index)
{
    48d2:	df 93       	push	r29
    48d4:	cf 93       	push	r28
    48d6:	00 d0       	rcall	.+0      	; 0x48d8 <EXTI_enu_Disable+0x6>
    48d8:	00 d0       	rcall	.+0      	; 0x48da <EXTI_enu_Disable+0x8>
    48da:	cd b7       	in	r28, 0x3d	; 61
    48dc:	de b7       	in	r29, 0x3e	; 62
    48de:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    48e4:	8a 81       	ldd	r24, Y+2	; 0x02
    48e6:	83 30       	cpi	r24, 0x03	; 3
    48e8:	58 f5       	brcc	.+86     	; 0x4940 <EXTI_enu_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    48ea:	8a 81       	ldd	r24, Y+2	; 0x02
    48ec:	28 2f       	mov	r18, r24
    48ee:	30 e0       	ldi	r19, 0x00	; 0
    48f0:	3c 83       	std	Y+4, r19	; 0x04
    48f2:	2b 83       	std	Y+3, r18	; 0x03
    48f4:	8b 81       	ldd	r24, Y+3	; 0x03
    48f6:	9c 81       	ldd	r25, Y+4	; 0x04
    48f8:	81 30       	cpi	r24, 0x01	; 1
    48fa:	91 05       	cpc	r25, r1
    48fc:	89 f0       	breq	.+34     	; 0x4920 <EXTI_enu_Disable+0x4e>
    48fe:	2b 81       	ldd	r18, Y+3	; 0x03
    4900:	3c 81       	ldd	r19, Y+4	; 0x04
    4902:	22 30       	cpi	r18, 0x02	; 2
    4904:	31 05       	cpc	r19, r1
    4906:	a1 f0       	breq	.+40     	; 0x4930 <EXTI_enu_Disable+0x5e>
    4908:	8b 81       	ldd	r24, Y+3	; 0x03
    490a:	9c 81       	ldd	r25, Y+4	; 0x04
    490c:	00 97       	sbiw	r24, 0x00	; 0
    490e:	c9 f4       	brne	.+50     	; 0x4942 <EXTI_enu_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    4910:	ab e5       	ldi	r26, 0x5B	; 91
    4912:	b0 e0       	ldi	r27, 0x00	; 0
    4914:	eb e5       	ldi	r30, 0x5B	; 91
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	80 81       	ld	r24, Z
    491a:	8f 7b       	andi	r24, 0xBF	; 191
    491c:	8c 93       	st	X, r24
    491e:	11 c0       	rjmp	.+34     	; 0x4942 <EXTI_enu_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    4920:	ab e5       	ldi	r26, 0x5B	; 91
    4922:	b0 e0       	ldi	r27, 0x00	; 0
    4924:	eb e5       	ldi	r30, 0x5B	; 91
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	80 81       	ld	r24, Z
    492a:	8f 77       	andi	r24, 0x7F	; 127
    492c:	8c 93       	st	X, r24
    492e:	09 c0       	rjmp	.+18     	; 0x4942 <EXTI_enu_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    4930:	ab e5       	ldi	r26, 0x5B	; 91
    4932:	b0 e0       	ldi	r27, 0x00	; 0
    4934:	eb e5       	ldi	r30, 0x5B	; 91
    4936:	f0 e0       	ldi	r31, 0x00	; 0
    4938:	80 81       	ld	r24, Z
    493a:	8f 7d       	andi	r24, 0xDF	; 223
    493c:	8c 93       	st	X, r24
    493e:	01 c0       	rjmp	.+2      	; 0x4942 <EXTI_enu_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4940:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4942:	89 81       	ldd	r24, Y+1	; 0x01
}
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	cf 91       	pop	r28
    494e:	df 91       	pop	r29
    4950:	08 95       	ret

00004952 <EXTI_enu_setSenseControl>:
ES_t EXTI_enu_setSenseControl(u8 Copy_u8_EXTI_Index,u8 Copy_u8_EXTI_Edge){
    4952:	df 93       	push	r29
    4954:	cf 93       	push	r28
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	2b 97       	sbiw	r28, 0x0b	; 11
    495c:	0f b6       	in	r0, 0x3f	; 63
    495e:	f8 94       	cli
    4960:	de bf       	out	0x3e, r29	; 62
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	cd bf       	out	0x3d, r28	; 61
    4966:	8a 83       	std	Y+2, r24	; 0x02
    4968:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    496a:	81 e0       	ldi	r24, 0x01	; 1
    496c:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
    4970:	83 30       	cpi	r24, 0x03	; 3
    4972:	08 f0       	brcs	.+2      	; 0x4976 <EXTI_enu_setSenseControl+0x24>
    4974:	f2 c0       	rjmp	.+484    	; 0x4b5a <EXTI_enu_setSenseControl+0x208>
    4976:	8b 81       	ldd	r24, Y+3	; 0x03
    4978:	84 30       	cpi	r24, 0x04	; 4
    497a:	08 f0       	brcs	.+2      	; 0x497e <EXTI_enu_setSenseControl+0x2c>
    497c:	ee c0       	rjmp	.+476    	; 0x4b5a <EXTI_enu_setSenseControl+0x208>
    {
        switch (Copy_u8_EXTI_Index)
    497e:	8a 81       	ldd	r24, Y+2	; 0x02
    4980:	28 2f       	mov	r18, r24
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	3b 87       	std	Y+11, r19	; 0x0b
    4986:	2a 87       	std	Y+10, r18	; 0x0a
    4988:	8a 85       	ldd	r24, Y+10	; 0x0a
    498a:	9b 85       	ldd	r25, Y+11	; 0x0b
    498c:	81 30       	cpi	r24, 0x01	; 1
    498e:	91 05       	cpc	r25, r1
    4990:	09 f4       	brne	.+2      	; 0x4994 <EXTI_enu_setSenseControl+0x42>
    4992:	66 c0       	rjmp	.+204    	; 0x4a60 <EXTI_enu_setSenseControl+0x10e>
    4994:	2a 85       	ldd	r18, Y+10	; 0x0a
    4996:	3b 85       	ldd	r19, Y+11	; 0x0b
    4998:	22 30       	cpi	r18, 0x02	; 2
    499a:	31 05       	cpc	r19, r1
    499c:	09 f4       	brne	.+2      	; 0x49a0 <EXTI_enu_setSenseControl+0x4e>
    499e:	bb c0       	rjmp	.+374    	; 0x4b16 <EXTI_enu_setSenseControl+0x1c4>
    49a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    49a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    49a4:	00 97       	sbiw	r24, 0x00	; 0
    49a6:	09 f0       	breq	.+2      	; 0x49aa <EXTI_enu_setSenseControl+0x58>
    49a8:	d9 c0       	rjmp	.+434    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    49aa:	8b 81       	ldd	r24, Y+3	; 0x03
    49ac:	28 2f       	mov	r18, r24
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	39 87       	std	Y+9, r19	; 0x09
    49b2:	28 87       	std	Y+8, r18	; 0x08
    49b4:	88 85       	ldd	r24, Y+8	; 0x08
    49b6:	99 85       	ldd	r25, Y+9	; 0x09
    49b8:	81 30       	cpi	r24, 0x01	; 1
    49ba:	91 05       	cpc	r25, r1
    49bc:	21 f1       	breq	.+72     	; 0x4a06 <EXTI_enu_setSenseControl+0xb4>
    49be:	28 85       	ldd	r18, Y+8	; 0x08
    49c0:	39 85       	ldd	r19, Y+9	; 0x09
    49c2:	22 30       	cpi	r18, 0x02	; 2
    49c4:	31 05       	cpc	r19, r1
    49c6:	2c f4       	brge	.+10     	; 0x49d2 <EXTI_enu_setSenseControl+0x80>
    49c8:	88 85       	ldd	r24, Y+8	; 0x08
    49ca:	99 85       	ldd	r25, Y+9	; 0x09
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	61 f0       	breq	.+24     	; 0x49e8 <EXTI_enu_setSenseControl+0x96>
    49d0:	c5 c0       	rjmp	.+394    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
    49d2:	28 85       	ldd	r18, Y+8	; 0x08
    49d4:	39 85       	ldd	r19, Y+9	; 0x09
    49d6:	22 30       	cpi	r18, 0x02	; 2
    49d8:	31 05       	cpc	r19, r1
    49da:	21 f1       	breq	.+72     	; 0x4a24 <EXTI_enu_setSenseControl+0xd2>
    49dc:	88 85       	ldd	r24, Y+8	; 0x08
    49de:	99 85       	ldd	r25, Y+9	; 0x09
    49e0:	83 30       	cpi	r24, 0x03	; 3
    49e2:	91 05       	cpc	r25, r1
    49e4:	71 f1       	breq	.+92     	; 0x4a42 <EXTI_enu_setSenseControl+0xf0>
    49e6:	ba c0       	rjmp	.+372    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    49e8:	a5 e5       	ldi	r26, 0x55	; 85
    49ea:	b0 e0       	ldi	r27, 0x00	; 0
    49ec:	e5 e5       	ldi	r30, 0x55	; 85
    49ee:	f0 e0       	ldi	r31, 0x00	; 0
    49f0:	80 81       	ld	r24, Z
    49f2:	8e 7f       	andi	r24, 0xFE	; 254
    49f4:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    49f6:	a5 e5       	ldi	r26, 0x55	; 85
    49f8:	b0 e0       	ldi	r27, 0x00	; 0
    49fa:	e5 e5       	ldi	r30, 0x55	; 85
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	80 81       	ld	r24, Z
    4a00:	8d 7f       	andi	r24, 0xFD	; 253
    4a02:	8c 93       	st	X, r24
    4a04:	ab c0       	rjmp	.+342    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a06:	a5 e5       	ldi	r26, 0x55	; 85
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	e5 e5       	ldi	r30, 0x55	; 85
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	81 60       	ori	r24, 0x01	; 1
    4a12:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a14:	a5 e5       	ldi	r26, 0x55	; 85
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	e5 e5       	ldi	r30, 0x55	; 85
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	80 81       	ld	r24, Z
    4a1e:	8d 7f       	andi	r24, 0xFD	; 253
    4a20:	8c 93       	st	X, r24
    4a22:	9c c0       	rjmp	.+312    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a24:	a5 e5       	ldi	r26, 0x55	; 85
    4a26:	b0 e0       	ldi	r27, 0x00	; 0
    4a28:	e5 e5       	ldi	r30, 0x55	; 85
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	80 81       	ld	r24, Z
    4a2e:	8e 7f       	andi	r24, 0xFE	; 254
    4a30:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a32:	a5 e5       	ldi	r26, 0x55	; 85
    4a34:	b0 e0       	ldi	r27, 0x00	; 0
    4a36:	e5 e5       	ldi	r30, 0x55	; 85
    4a38:	f0 e0       	ldi	r31, 0x00	; 0
    4a3a:	80 81       	ld	r24, Z
    4a3c:	82 60       	ori	r24, 0x02	; 2
    4a3e:	8c 93       	st	X, r24
    4a40:	8d c0       	rjmp	.+282    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    4a42:	a5 e5       	ldi	r26, 0x55	; 85
    4a44:	b0 e0       	ldi	r27, 0x00	; 0
    4a46:	e5 e5       	ldi	r30, 0x55	; 85
    4a48:	f0 e0       	ldi	r31, 0x00	; 0
    4a4a:	80 81       	ld	r24, Z
    4a4c:	81 60       	ori	r24, 0x01	; 1
    4a4e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    4a50:	a5 e5       	ldi	r26, 0x55	; 85
    4a52:	b0 e0       	ldi	r27, 0x00	; 0
    4a54:	e5 e5       	ldi	r30, 0x55	; 85
    4a56:	f0 e0       	ldi	r31, 0x00	; 0
    4a58:	80 81       	ld	r24, Z
    4a5a:	82 60       	ori	r24, 0x02	; 2
    4a5c:	8c 93       	st	X, r24
    4a5e:	7e c0       	rjmp	.+252    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    4a60:	8b 81       	ldd	r24, Y+3	; 0x03
    4a62:	28 2f       	mov	r18, r24
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	3f 83       	std	Y+7, r19	; 0x07
    4a68:	2e 83       	std	Y+6, r18	; 0x06
    4a6a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a6c:	9f 81       	ldd	r25, Y+7	; 0x07
    4a6e:	81 30       	cpi	r24, 0x01	; 1
    4a70:	91 05       	cpc	r25, r1
    4a72:	21 f1       	breq	.+72     	; 0x4abc <EXTI_enu_setSenseControl+0x16a>
    4a74:	2e 81       	ldd	r18, Y+6	; 0x06
    4a76:	3f 81       	ldd	r19, Y+7	; 0x07
    4a78:	22 30       	cpi	r18, 0x02	; 2
    4a7a:	31 05       	cpc	r19, r1
    4a7c:	2c f4       	brge	.+10     	; 0x4a88 <EXTI_enu_setSenseControl+0x136>
    4a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a80:	9f 81       	ldd	r25, Y+7	; 0x07
    4a82:	00 97       	sbiw	r24, 0x00	; 0
    4a84:	61 f0       	breq	.+24     	; 0x4a9e <EXTI_enu_setSenseControl+0x14c>
    4a86:	6a c0       	rjmp	.+212    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
    4a88:	2e 81       	ldd	r18, Y+6	; 0x06
    4a8a:	3f 81       	ldd	r19, Y+7	; 0x07
    4a8c:	22 30       	cpi	r18, 0x02	; 2
    4a8e:	31 05       	cpc	r19, r1
    4a90:	21 f1       	breq	.+72     	; 0x4ada <EXTI_enu_setSenseControl+0x188>
    4a92:	8e 81       	ldd	r24, Y+6	; 0x06
    4a94:	9f 81       	ldd	r25, Y+7	; 0x07
    4a96:	83 30       	cpi	r24, 0x03	; 3
    4a98:	91 05       	cpc	r25, r1
    4a9a:	71 f1       	breq	.+92     	; 0x4af8 <EXTI_enu_setSenseControl+0x1a6>
    4a9c:	5f c0       	rjmp	.+190    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4a9e:	a5 e5       	ldi	r26, 0x55	; 85
    4aa0:	b0 e0       	ldi	r27, 0x00	; 0
    4aa2:	e5 e5       	ldi	r30, 0x55	; 85
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	80 81       	ld	r24, Z
    4aa8:	8b 7f       	andi	r24, 0xFB	; 251
    4aaa:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4aac:	a5 e5       	ldi	r26, 0x55	; 85
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	e5 e5       	ldi	r30, 0x55	; 85
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	87 7f       	andi	r24, 0xF7	; 247
    4ab8:	8c 93       	st	X, r24
    4aba:	50 c0       	rjmp	.+160    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4abc:	a5 e5       	ldi	r26, 0x55	; 85
    4abe:	b0 e0       	ldi	r27, 0x00	; 0
    4ac0:	e5 e5       	ldi	r30, 0x55	; 85
    4ac2:	f0 e0       	ldi	r31, 0x00	; 0
    4ac4:	80 81       	ld	r24, Z
    4ac6:	84 60       	ori	r24, 0x04	; 4
    4ac8:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4aca:	a5 e5       	ldi	r26, 0x55	; 85
    4acc:	b0 e0       	ldi	r27, 0x00	; 0
    4ace:	e5 e5       	ldi	r30, 0x55	; 85
    4ad0:	f0 e0       	ldi	r31, 0x00	; 0
    4ad2:	80 81       	ld	r24, Z
    4ad4:	87 7f       	andi	r24, 0xF7	; 247
    4ad6:	8c 93       	st	X, r24
    4ad8:	41 c0       	rjmp	.+130    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4ada:	a5 e5       	ldi	r26, 0x55	; 85
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e5 e5       	ldi	r30, 0x55	; 85
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	8b 7f       	andi	r24, 0xFB	; 251
    4ae6:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4ae8:	a5 e5       	ldi	r26, 0x55	; 85
    4aea:	b0 e0       	ldi	r27, 0x00	; 0
    4aec:	e5 e5       	ldi	r30, 0x55	; 85
    4aee:	f0 e0       	ldi	r31, 0x00	; 0
    4af0:	80 81       	ld	r24, Z
    4af2:	88 60       	ori	r24, 0x08	; 8
    4af4:	8c 93       	st	X, r24
    4af6:	32 c0       	rjmp	.+100    	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    4af8:	a5 e5       	ldi	r26, 0x55	; 85
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	e5 e5       	ldi	r30, 0x55	; 85
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	84 60       	ori	r24, 0x04	; 4
    4b04:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    4b06:	a5 e5       	ldi	r26, 0x55	; 85
    4b08:	b0 e0       	ldi	r27, 0x00	; 0
    4b0a:	e5 e5       	ldi	r30, 0x55	; 85
    4b0c:	f0 e0       	ldi	r31, 0x00	; 0
    4b0e:	80 81       	ld	r24, Z
    4b10:	88 60       	ori	r24, 0x08	; 8
    4b12:	8c 93       	st	X, r24
    4b14:	23 c0       	rjmp	.+70     	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    4b16:	8b 81       	ldd	r24, Y+3	; 0x03
    4b18:	28 2f       	mov	r18, r24
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	3d 83       	std	Y+5, r19	; 0x05
    4b1e:	2c 83       	std	Y+4, r18	; 0x04
    4b20:	8c 81       	ldd	r24, Y+4	; 0x04
    4b22:	9d 81       	ldd	r25, Y+5	; 0x05
    4b24:	82 30       	cpi	r24, 0x02	; 2
    4b26:	91 05       	cpc	r25, r1
    4b28:	31 f0       	breq	.+12     	; 0x4b36 <EXTI_enu_setSenseControl+0x1e4>
    4b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    4b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    4b2e:	23 30       	cpi	r18, 0x03	; 3
    4b30:	31 05       	cpc	r19, r1
    4b32:	49 f0       	breq	.+18     	; 0x4b46 <EXTI_enu_setSenseControl+0x1f4>
    4b34:	10 c0       	rjmp	.+32     	; 0x4b56 <EXTI_enu_setSenseControl+0x204>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4b36:	a4 e5       	ldi	r26, 0x54	; 84
    4b38:	b0 e0       	ldi	r27, 0x00	; 0
    4b3a:	e4 e5       	ldi	r30, 0x54	; 84
    4b3c:	f0 e0       	ldi	r31, 0x00	; 0
    4b3e:	80 81       	ld	r24, Z
    4b40:	8f 7b       	andi	r24, 0xBF	; 191
    4b42:	8c 93       	st	X, r24
    4b44:	0b c0       	rjmp	.+22     	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    4b46:	a4 e5       	ldi	r26, 0x54	; 84
    4b48:	b0 e0       	ldi	r27, 0x00	; 0
    4b4a:	e4 e5       	ldi	r30, 0x54	; 84
    4b4c:	f0 e0       	ldi	r31, 0x00	; 0
    4b4e:	80 81       	ld	r24, Z
    4b50:	80 64       	ori	r24, 0x40	; 64
    4b52:	8c 93       	st	X, r24
    4b54:	03 c0       	rjmp	.+6      	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    4b56:	19 82       	std	Y+1, r1	; 0x01
    4b58:	01 c0       	rjmp	.+2      	; 0x4b5c <EXTI_enu_setSenseControl+0x20a>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4b5a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b5e:	2b 96       	adiw	r28, 0x0b	; 11
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	f8 94       	cli
    4b64:	de bf       	out	0x3e, r29	; 62
    4b66:	0f be       	out	0x3f, r0	; 63
    4b68:	cd bf       	out	0x3d, r28	; 61
    4b6a:	cf 91       	pop	r28
    4b6c:	df 91       	pop	r29
    4b6e:	08 95       	ret

00004b70 <EXTI_enu_setCallBack>:
ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    4b70:	df 93       	push	r29
    4b72:	cf 93       	push	r28
    4b74:	00 d0       	rcall	.+0      	; 0x4b76 <EXTI_enu_setCallBack+0x6>
    4b76:	00 d0       	rcall	.+0      	; 0x4b78 <EXTI_enu_setCallBack+0x8>
    4b78:	cd b7       	in	r28, 0x3d	; 61
    4b7a:	de b7       	in	r29, 0x3e	; 62
    4b7c:	9b 83       	std	Y+3, r25	; 0x03
    4b7e:	8a 83       	std	Y+2, r24	; 0x02
    4b80:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    4b86:	8a 81       	ldd	r24, Y+2	; 0x02
    4b88:	9b 81       	ldd	r25, Y+3	; 0x03
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	81 f0       	breq	.+32     	; 0x4bae <EXTI_enu_setCallBack+0x3e>
    4b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b90:	83 30       	cpi	r24, 0x03	; 3
    4b92:	68 f4       	brcc	.+26     	; 0x4bae <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    4b94:	8c 81       	ldd	r24, Y+4	; 0x04
    4b96:	88 2f       	mov	r24, r24
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	88 0f       	add	r24, r24
    4b9c:	99 1f       	adc	r25, r25
    4b9e:	fc 01       	movw	r30, r24
    4ba0:	e1 55       	subi	r30, 0x51	; 81
    4ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
    4bac:	01 c0       	rjmp	.+2      	; 0x4bb0 <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4bae:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bb2:	0f 90       	pop	r0
    4bb4:	0f 90       	pop	r0
    4bb6:	0f 90       	pop	r0
    4bb8:	0f 90       	pop	r0
    4bba:	cf 91       	pop	r28
    4bbc:	df 91       	pop	r29
    4bbe:	08 95       	ret

00004bc0 <__vector_1>:
ISR(EXTI_INT0)
{
    4bc0:	1f 92       	push	r1
    4bc2:	0f 92       	push	r0
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	0f 92       	push	r0
    4bc8:	11 24       	eor	r1, r1
    4bca:	2f 93       	push	r18
    4bcc:	3f 93       	push	r19
    4bce:	4f 93       	push	r20
    4bd0:	5f 93       	push	r21
    4bd2:	6f 93       	push	r22
    4bd4:	7f 93       	push	r23
    4bd6:	8f 93       	push	r24
    4bd8:	9f 93       	push	r25
    4bda:	af 93       	push	r26
    4bdc:	bf 93       	push	r27
    4bde:	ef 93       	push	r30
    4be0:	ff 93       	push	r31
    4be2:	df 93       	push	r29
    4be4:	cf 93       	push	r28
    4be6:	cd b7       	in	r28, 0x3d	; 61
    4be8:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    4bea:	80 91 af 00 	lds	r24, 0x00AF
    4bee:	90 91 b0 00 	lds	r25, 0x00B0
    4bf2:	00 97       	sbiw	r24, 0x00	; 0
    4bf4:	29 f0       	breq	.+10     	; 0x4c00 <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    4bf6:	e0 91 af 00 	lds	r30, 0x00AF
    4bfa:	f0 91 b0 00 	lds	r31, 0x00B0
    4bfe:	09 95       	icall
}
    4c00:	cf 91       	pop	r28
    4c02:	df 91       	pop	r29
    4c04:	ff 91       	pop	r31
    4c06:	ef 91       	pop	r30
    4c08:	bf 91       	pop	r27
    4c0a:	af 91       	pop	r26
    4c0c:	9f 91       	pop	r25
    4c0e:	8f 91       	pop	r24
    4c10:	7f 91       	pop	r23
    4c12:	6f 91       	pop	r22
    4c14:	5f 91       	pop	r21
    4c16:	4f 91       	pop	r20
    4c18:	3f 91       	pop	r19
    4c1a:	2f 91       	pop	r18
    4c1c:	0f 90       	pop	r0
    4c1e:	0f be       	out	0x3f, r0	; 63
    4c20:	0f 90       	pop	r0
    4c22:	1f 90       	pop	r1
    4c24:	18 95       	reti

00004c26 <__vector_2>:
ISR(EXTI_INT1)
{
    4c26:	1f 92       	push	r1
    4c28:	0f 92       	push	r0
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	0f 92       	push	r0
    4c2e:	11 24       	eor	r1, r1
    4c30:	2f 93       	push	r18
    4c32:	3f 93       	push	r19
    4c34:	4f 93       	push	r20
    4c36:	5f 93       	push	r21
    4c38:	6f 93       	push	r22
    4c3a:	7f 93       	push	r23
    4c3c:	8f 93       	push	r24
    4c3e:	9f 93       	push	r25
    4c40:	af 93       	push	r26
    4c42:	bf 93       	push	r27
    4c44:	ef 93       	push	r30
    4c46:	ff 93       	push	r31
    4c48:	df 93       	push	r29
    4c4a:	cf 93       	push	r28
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    4c50:	80 91 b1 00 	lds	r24, 0x00B1
    4c54:	90 91 b2 00 	lds	r25, 0x00B2
    4c58:	00 97       	sbiw	r24, 0x00	; 0
    4c5a:	29 f0       	breq	.+10     	; 0x4c66 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    4c5c:	e0 91 b1 00 	lds	r30, 0x00B1
    4c60:	f0 91 b2 00 	lds	r31, 0x00B2
    4c64:	09 95       	icall
}
    4c66:	cf 91       	pop	r28
    4c68:	df 91       	pop	r29
    4c6a:	ff 91       	pop	r31
    4c6c:	ef 91       	pop	r30
    4c6e:	bf 91       	pop	r27
    4c70:	af 91       	pop	r26
    4c72:	9f 91       	pop	r25
    4c74:	8f 91       	pop	r24
    4c76:	7f 91       	pop	r23
    4c78:	6f 91       	pop	r22
    4c7a:	5f 91       	pop	r21
    4c7c:	4f 91       	pop	r20
    4c7e:	3f 91       	pop	r19
    4c80:	2f 91       	pop	r18
    4c82:	0f 90       	pop	r0
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	0f 90       	pop	r0
    4c88:	1f 90       	pop	r1
    4c8a:	18 95       	reti

00004c8c <__vector_3>:

ISR(EXTI_INT2)
{
    4c8c:	1f 92       	push	r1
    4c8e:	0f 92       	push	r0
    4c90:	0f b6       	in	r0, 0x3f	; 63
    4c92:	0f 92       	push	r0
    4c94:	11 24       	eor	r1, r1
    4c96:	2f 93       	push	r18
    4c98:	3f 93       	push	r19
    4c9a:	4f 93       	push	r20
    4c9c:	5f 93       	push	r21
    4c9e:	6f 93       	push	r22
    4ca0:	7f 93       	push	r23
    4ca2:	8f 93       	push	r24
    4ca4:	9f 93       	push	r25
    4ca6:	af 93       	push	r26
    4ca8:	bf 93       	push	r27
    4caa:	ef 93       	push	r30
    4cac:	ff 93       	push	r31
    4cae:	df 93       	push	r29
    4cb0:	cf 93       	push	r28
    4cb2:	cd b7       	in	r28, 0x3d	; 61
    4cb4:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    4cb6:	80 91 b3 00 	lds	r24, 0x00B3
    4cba:	90 91 b4 00 	lds	r25, 0x00B4
    4cbe:	00 97       	sbiw	r24, 0x00	; 0
    4cc0:	29 f0       	breq	.+10     	; 0x4ccc <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    4cc2:	e0 91 b3 00 	lds	r30, 0x00B3
    4cc6:	f0 91 b4 00 	lds	r31, 0x00B4
    4cca:	09 95       	icall
}
    4ccc:	cf 91       	pop	r28
    4cce:	df 91       	pop	r29
    4cd0:	ff 91       	pop	r31
    4cd2:	ef 91       	pop	r30
    4cd4:	bf 91       	pop	r27
    4cd6:	af 91       	pop	r26
    4cd8:	9f 91       	pop	r25
    4cda:	8f 91       	pop	r24
    4cdc:	7f 91       	pop	r23
    4cde:	6f 91       	pop	r22
    4ce0:	5f 91       	pop	r21
    4ce2:	4f 91       	pop	r20
    4ce4:	3f 91       	pop	r19
    4ce6:	2f 91       	pop	r18
    4ce8:	0f 90       	pop	r0
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	0f 90       	pop	r0
    4cee:	1f 90       	pop	r1
    4cf0:	18 95       	reti

00004cf2 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	cd b7       	in	r28, 0x3d	; 61
    4cf8:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    4cfa:	ea e3       	ldi	r30, 0x3A	; 58
    4cfc:	f0 e0       	ldi	r31, 0x00	; 0
    4cfe:	8f e7       	ldi	r24, 0x7F	; 127
    4d00:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    4d02:	e7 e3       	ldi	r30, 0x37	; 55
    4d04:	f0 e0       	ldi	r31, 0x00	; 0
    4d06:	8d ef       	ldi	r24, 0xFD	; 253
    4d08:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    4d0a:	e4 e3       	ldi	r30, 0x34	; 52
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	83 e1       	ldi	r24, 0x13	; 19
    4d10:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    4d12:	e1 e3       	ldi	r30, 0x31	; 49
    4d14:	f0 e0       	ldi	r31, 0x00	; 0
    4d16:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    4d18:	eb e3       	ldi	r30, 0x3B	; 59
    4d1a:	f0 e0       	ldi	r31, 0x00	; 0
    4d1c:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    4d1e:	e8 e3       	ldi	r30, 0x38	; 56
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	84 ef       	ldi	r24, 0xF4	; 244
    4d24:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    4d26:	e5 e3       	ldi	r30, 0x35	; 53
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    4d2c:	e2 e3       	ldi	r30, 0x32	; 50
    4d2e:	f0 e0       	ldi	r31, 0x00	; 0
    4d30:	8c e3       	ldi	r24, 0x3C	; 60
    4d32:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    4d34:	81 e0       	ldi	r24, 0x01	; 1
}
    4d36:	cf 91       	pop	r28
    4d38:	df 91       	pop	r29
    4d3a:	08 95       	ret

00004d3c <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    4d3c:	df 93       	push	r29
    4d3e:	cf 93       	push	r28
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	2e 97       	sbiw	r28, 0x0e	; 14
    4d46:	0f b6       	in	r0, 0x3f	; 63
    4d48:	f8 94       	cli
    4d4a:	de bf       	out	0x3e, r29	; 62
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	cd bf       	out	0x3d, r28	; 61
    4d50:	8a 83       	std	Y+2, r24	; 0x02
    4d52:	6b 83       	std	Y+3, r22	; 0x03
    4d54:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    4d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d5c:	84 30       	cpi	r24, 0x04	; 4
    4d5e:	08 f0       	brcs	.+2      	; 0x4d62 <DIO_enu_SetPinDirection+0x26>
    4d60:	0c c1       	rjmp	.+536    	; 0x4f7a <DIO_enu_SetPinDirection+0x23e>
    4d62:	8b 81       	ldd	r24, Y+3	; 0x03
    4d64:	88 30       	cpi	r24, 0x08	; 8
    4d66:	08 f0       	brcs	.+2      	; 0x4d6a <DIO_enu_SetPinDirection+0x2e>
    4d68:	08 c1       	rjmp	.+528    	; 0x4f7a <DIO_enu_SetPinDirection+0x23e>
    4d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d6c:	81 30       	cpi	r24, 0x01	; 1
    4d6e:	21 f0       	breq	.+8      	; 0x4d78 <DIO_enu_SetPinDirection+0x3c>
    4d70:	8c 81       	ldd	r24, Y+4	; 0x04
    4d72:	88 23       	and	r24, r24
    4d74:	09 f0       	breq	.+2      	; 0x4d78 <DIO_enu_SetPinDirection+0x3c>
    4d76:	01 c1       	rjmp	.+514    	; 0x4f7a <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    4d78:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7a:	28 2f       	mov	r18, r24
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	3e 87       	std	Y+14, r19	; 0x0e
    4d80:	2d 87       	std	Y+13, r18	; 0x0d
    4d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d86:	81 30       	cpi	r24, 0x01	; 1
    4d88:	91 05       	cpc	r25, r1
    4d8a:	09 f4       	brne	.+2      	; 0x4d8e <DIO_enu_SetPinDirection+0x52>
    4d8c:	4f c0       	rjmp	.+158    	; 0x4e2c <DIO_enu_SetPinDirection+0xf0>
    4d8e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d90:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d92:	22 30       	cpi	r18, 0x02	; 2
    4d94:	31 05       	cpc	r19, r1
    4d96:	2c f4       	brge	.+10     	; 0x4da2 <DIO_enu_SetPinDirection+0x66>
    4d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d9c:	00 97       	sbiw	r24, 0x00	; 0
    4d9e:	71 f0       	breq	.+28     	; 0x4dbc <DIO_enu_SetPinDirection+0x80>
    4da0:	ed c0       	rjmp	.+474    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
    4da2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4da4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4da6:	22 30       	cpi	r18, 0x02	; 2
    4da8:	31 05       	cpc	r19, r1
    4daa:	09 f4       	brne	.+2      	; 0x4dae <DIO_enu_SetPinDirection+0x72>
    4dac:	77 c0       	rjmp	.+238    	; 0x4e9c <DIO_enu_SetPinDirection+0x160>
    4dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4db2:	83 30       	cpi	r24, 0x03	; 3
    4db4:	91 05       	cpc	r25, r1
    4db6:	09 f4       	brne	.+2      	; 0x4dba <DIO_enu_SetPinDirection+0x7e>
    4db8:	a9 c0       	rjmp	.+338    	; 0x4f0c <DIO_enu_SetPinDirection+0x1d0>
    4dba:	e0 c0       	rjmp	.+448    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    4dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    4dbe:	28 2f       	mov	r18, r24
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	3c 87       	std	Y+12, r19	; 0x0c
    4dc4:	2b 87       	std	Y+11, r18	; 0x0b
    4dc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4dc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4dca:	00 97       	sbiw	r24, 0x00	; 0
    4dcc:	d1 f0       	breq	.+52     	; 0x4e02 <DIO_enu_SetPinDirection+0xc6>
    4dce:	2b 85       	ldd	r18, Y+11	; 0x0b
    4dd0:	3c 85       	ldd	r19, Y+12	; 0x0c
    4dd2:	21 30       	cpi	r18, 0x01	; 1
    4dd4:	31 05       	cpc	r19, r1
    4dd6:	09 f0       	breq	.+2      	; 0x4dda <DIO_enu_SetPinDirection+0x9e>
    4dd8:	d1 c0       	rjmp	.+418    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    4dda:	aa e3       	ldi	r26, 0x3A	; 58
    4ddc:	b0 e0       	ldi	r27, 0x00	; 0
    4dde:	ea e3       	ldi	r30, 0x3A	; 58
    4de0:	f0 e0       	ldi	r31, 0x00	; 0
    4de2:	80 81       	ld	r24, Z
    4de4:	48 2f       	mov	r20, r24
    4de6:	8b 81       	ldd	r24, Y+3	; 0x03
    4de8:	28 2f       	mov	r18, r24
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	90 e0       	ldi	r25, 0x00	; 0
    4df0:	02 2e       	mov	r0, r18
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <DIO_enu_SetPinDirection+0xbc>
    4df4:	88 0f       	add	r24, r24
    4df6:	99 1f       	adc	r25, r25
    4df8:	0a 94       	dec	r0
    4dfa:	e2 f7       	brpl	.-8      	; 0x4df4 <DIO_enu_SetPinDirection+0xb8>
    4dfc:	84 2b       	or	r24, r20
    4dfe:	8c 93       	st	X, r24
    4e00:	bd c0       	rjmp	.+378    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    4e02:	aa e3       	ldi	r26, 0x3A	; 58
    4e04:	b0 e0       	ldi	r27, 0x00	; 0
    4e06:	ea e3       	ldi	r30, 0x3A	; 58
    4e08:	f0 e0       	ldi	r31, 0x00	; 0
    4e0a:	80 81       	ld	r24, Z
    4e0c:	48 2f       	mov	r20, r24
    4e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e10:	28 2f       	mov	r18, r24
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	02 2e       	mov	r0, r18
    4e1a:	02 c0       	rjmp	.+4      	; 0x4e20 <DIO_enu_SetPinDirection+0xe4>
    4e1c:	88 0f       	add	r24, r24
    4e1e:	99 1f       	adc	r25, r25
    4e20:	0a 94       	dec	r0
    4e22:	e2 f7       	brpl	.-8      	; 0x4e1c <DIO_enu_SetPinDirection+0xe0>
    4e24:	80 95       	com	r24
    4e26:	84 23       	and	r24, r20
    4e28:	8c 93       	st	X, r24
    4e2a:	a8 c0       	rjmp	.+336    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    4e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e2e:	28 2f       	mov	r18, r24
    4e30:	30 e0       	ldi	r19, 0x00	; 0
    4e32:	3a 87       	std	Y+10, r19	; 0x0a
    4e34:	29 87       	std	Y+9, r18	; 0x09
    4e36:	89 85       	ldd	r24, Y+9	; 0x09
    4e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e3a:	00 97       	sbiw	r24, 0x00	; 0
    4e3c:	d1 f0       	breq	.+52     	; 0x4e72 <DIO_enu_SetPinDirection+0x136>
    4e3e:	29 85       	ldd	r18, Y+9	; 0x09
    4e40:	3a 85       	ldd	r19, Y+10	; 0x0a
    4e42:	21 30       	cpi	r18, 0x01	; 1
    4e44:	31 05       	cpc	r19, r1
    4e46:	09 f0       	breq	.+2      	; 0x4e4a <DIO_enu_SetPinDirection+0x10e>
    4e48:	99 c0       	rjmp	.+306    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    4e4a:	a7 e3       	ldi	r26, 0x37	; 55
    4e4c:	b0 e0       	ldi	r27, 0x00	; 0
    4e4e:	e7 e3       	ldi	r30, 0x37	; 55
    4e50:	f0 e0       	ldi	r31, 0x00	; 0
    4e52:	80 81       	ld	r24, Z
    4e54:	48 2f       	mov	r20, r24
    4e56:	8b 81       	ldd	r24, Y+3	; 0x03
    4e58:	28 2f       	mov	r18, r24
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	02 2e       	mov	r0, r18
    4e62:	02 c0       	rjmp	.+4      	; 0x4e68 <DIO_enu_SetPinDirection+0x12c>
    4e64:	88 0f       	add	r24, r24
    4e66:	99 1f       	adc	r25, r25
    4e68:	0a 94       	dec	r0
    4e6a:	e2 f7       	brpl	.-8      	; 0x4e64 <DIO_enu_SetPinDirection+0x128>
    4e6c:	84 2b       	or	r24, r20
    4e6e:	8c 93       	st	X, r24
    4e70:	85 c0       	rjmp	.+266    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    4e72:	a7 e3       	ldi	r26, 0x37	; 55
    4e74:	b0 e0       	ldi	r27, 0x00	; 0
    4e76:	e7 e3       	ldi	r30, 0x37	; 55
    4e78:	f0 e0       	ldi	r31, 0x00	; 0
    4e7a:	80 81       	ld	r24, Z
    4e7c:	48 2f       	mov	r20, r24
    4e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e80:	28 2f       	mov	r18, r24
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	81 e0       	ldi	r24, 0x01	; 1
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	02 2e       	mov	r0, r18
    4e8a:	02 c0       	rjmp	.+4      	; 0x4e90 <DIO_enu_SetPinDirection+0x154>
    4e8c:	88 0f       	add	r24, r24
    4e8e:	99 1f       	adc	r25, r25
    4e90:	0a 94       	dec	r0
    4e92:	e2 f7       	brpl	.-8      	; 0x4e8c <DIO_enu_SetPinDirection+0x150>
    4e94:	80 95       	com	r24
    4e96:	84 23       	and	r24, r20
    4e98:	8c 93       	st	X, r24
    4e9a:	70 c0       	rjmp	.+224    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    4e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e9e:	28 2f       	mov	r18, r24
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	38 87       	std	Y+8, r19	; 0x08
    4ea4:	2f 83       	std	Y+7, r18	; 0x07
    4ea6:	8f 81       	ldd	r24, Y+7	; 0x07
    4ea8:	98 85       	ldd	r25, Y+8	; 0x08
    4eaa:	00 97       	sbiw	r24, 0x00	; 0
    4eac:	d1 f0       	breq	.+52     	; 0x4ee2 <DIO_enu_SetPinDirection+0x1a6>
    4eae:	2f 81       	ldd	r18, Y+7	; 0x07
    4eb0:	38 85       	ldd	r19, Y+8	; 0x08
    4eb2:	21 30       	cpi	r18, 0x01	; 1
    4eb4:	31 05       	cpc	r19, r1
    4eb6:	09 f0       	breq	.+2      	; 0x4eba <DIO_enu_SetPinDirection+0x17e>
    4eb8:	61 c0       	rjmp	.+194    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    4eba:	a4 e3       	ldi	r26, 0x34	; 52
    4ebc:	b0 e0       	ldi	r27, 0x00	; 0
    4ebe:	e4 e3       	ldi	r30, 0x34	; 52
    4ec0:	f0 e0       	ldi	r31, 0x00	; 0
    4ec2:	80 81       	ld	r24, Z
    4ec4:	48 2f       	mov	r20, r24
    4ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec8:	28 2f       	mov	r18, r24
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	02 2e       	mov	r0, r18
    4ed2:	02 c0       	rjmp	.+4      	; 0x4ed8 <DIO_enu_SetPinDirection+0x19c>
    4ed4:	88 0f       	add	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	0a 94       	dec	r0
    4eda:	e2 f7       	brpl	.-8      	; 0x4ed4 <DIO_enu_SetPinDirection+0x198>
    4edc:	84 2b       	or	r24, r20
    4ede:	8c 93       	st	X, r24
    4ee0:	4d c0       	rjmp	.+154    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    4ee2:	a4 e3       	ldi	r26, 0x34	; 52
    4ee4:	b0 e0       	ldi	r27, 0x00	; 0
    4ee6:	e4 e3       	ldi	r30, 0x34	; 52
    4ee8:	f0 e0       	ldi	r31, 0x00	; 0
    4eea:	80 81       	ld	r24, Z
    4eec:	48 2f       	mov	r20, r24
    4eee:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef0:	28 2f       	mov	r18, r24
    4ef2:	30 e0       	ldi	r19, 0x00	; 0
    4ef4:	81 e0       	ldi	r24, 0x01	; 1
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	02 2e       	mov	r0, r18
    4efa:	02 c0       	rjmp	.+4      	; 0x4f00 <DIO_enu_SetPinDirection+0x1c4>
    4efc:	88 0f       	add	r24, r24
    4efe:	99 1f       	adc	r25, r25
    4f00:	0a 94       	dec	r0
    4f02:	e2 f7       	brpl	.-8      	; 0x4efc <DIO_enu_SetPinDirection+0x1c0>
    4f04:	80 95       	com	r24
    4f06:	84 23       	and	r24, r20
    4f08:	8c 93       	st	X, r24
    4f0a:	38 c0       	rjmp	.+112    	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    4f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4f0e:	28 2f       	mov	r18, r24
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	3e 83       	std	Y+6, r19	; 0x06
    4f14:	2d 83       	std	Y+5, r18	; 0x05
    4f16:	8d 81       	ldd	r24, Y+5	; 0x05
    4f18:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1a:	00 97       	sbiw	r24, 0x00	; 0
    4f1c:	c9 f0       	breq	.+50     	; 0x4f50 <DIO_enu_SetPinDirection+0x214>
    4f1e:	2d 81       	ldd	r18, Y+5	; 0x05
    4f20:	3e 81       	ldd	r19, Y+6	; 0x06
    4f22:	21 30       	cpi	r18, 0x01	; 1
    4f24:	31 05       	cpc	r19, r1
    4f26:	51 f5       	brne	.+84     	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    4f28:	a1 e3       	ldi	r26, 0x31	; 49
    4f2a:	b0 e0       	ldi	r27, 0x00	; 0
    4f2c:	e1 e3       	ldi	r30, 0x31	; 49
    4f2e:	f0 e0       	ldi	r31, 0x00	; 0
    4f30:	80 81       	ld	r24, Z
    4f32:	48 2f       	mov	r20, r24
    4f34:	8b 81       	ldd	r24, Y+3	; 0x03
    4f36:	28 2f       	mov	r18, r24
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	81 e0       	ldi	r24, 0x01	; 1
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	02 2e       	mov	r0, r18
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <DIO_enu_SetPinDirection+0x20a>
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	0a 94       	dec	r0
    4f48:	e2 f7       	brpl	.-8      	; 0x4f42 <DIO_enu_SetPinDirection+0x206>
    4f4a:	84 2b       	or	r24, r20
    4f4c:	8c 93       	st	X, r24
    4f4e:	16 c0       	rjmp	.+44     	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    4f50:	a1 e3       	ldi	r26, 0x31	; 49
    4f52:	b0 e0       	ldi	r27, 0x00	; 0
    4f54:	e1 e3       	ldi	r30, 0x31	; 49
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	80 81       	ld	r24, Z
    4f5a:	48 2f       	mov	r20, r24
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	28 2f       	mov	r18, r24
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	02 2e       	mov	r0, r18
    4f68:	02 c0       	rjmp	.+4      	; 0x4f6e <DIO_enu_SetPinDirection+0x232>
    4f6a:	88 0f       	add	r24, r24
    4f6c:	99 1f       	adc	r25, r25
    4f6e:	0a 94       	dec	r0
    4f70:	e2 f7       	brpl	.-8      	; 0x4f6a <DIO_enu_SetPinDirection+0x22e>
    4f72:	80 95       	com	r24
    4f74:	84 23       	and	r24, r20
    4f76:	8c 93       	st	X, r24
    4f78:	01 c0       	rjmp	.+2      	; 0x4f7c <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    4f7a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f7e:	2e 96       	adiw	r28, 0x0e	; 14
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	f8 94       	cli
    4f84:	de bf       	out	0x3e, r29	; 62
    4f86:	0f be       	out	0x3f, r0	; 63
    4f88:	cd bf       	out	0x3d, r28	; 61
    4f8a:	cf 91       	pop	r28
    4f8c:	df 91       	pop	r29
    4f8e:	08 95       	ret

00004f90 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    4f90:	df 93       	push	r29
    4f92:	cf 93       	push	r28
    4f94:	cd b7       	in	r28, 0x3d	; 61
    4f96:	de b7       	in	r29, 0x3e	; 62
    4f98:	2e 97       	sbiw	r28, 0x0e	; 14
    4f9a:	0f b6       	in	r0, 0x3f	; 63
    4f9c:	f8 94       	cli
    4f9e:	de bf       	out	0x3e, r29	; 62
    4fa0:	0f be       	out	0x3f, r0	; 63
    4fa2:	cd bf       	out	0x3d, r28	; 61
    4fa4:	8a 83       	std	Y+2, r24	; 0x02
    4fa6:	6b 83       	std	Y+3, r22	; 0x03
    4fa8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    4faa:	81 e0       	ldi	r24, 0x01	; 1
    4fac:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    4fae:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb0:	84 30       	cpi	r24, 0x04	; 4
    4fb2:	08 f0       	brcs	.+2      	; 0x4fb6 <DIO_enu_SetPinValue+0x26>
    4fb4:	0c c1       	rjmp	.+536    	; 0x51ce <DIO_enu_SetPinValue+0x23e>
    4fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    4fb8:	88 30       	cpi	r24, 0x08	; 8
    4fba:	08 f0       	brcs	.+2      	; 0x4fbe <DIO_enu_SetPinValue+0x2e>
    4fbc:	08 c1       	rjmp	.+528    	; 0x51ce <DIO_enu_SetPinValue+0x23e>
    4fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc0:	81 30       	cpi	r24, 0x01	; 1
    4fc2:	21 f0       	breq	.+8      	; 0x4fcc <DIO_enu_SetPinValue+0x3c>
    4fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc6:	88 23       	and	r24, r24
    4fc8:	09 f0       	breq	.+2      	; 0x4fcc <DIO_enu_SetPinValue+0x3c>
    4fca:	01 c1       	rjmp	.+514    	; 0x51ce <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    4fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4fce:	28 2f       	mov	r18, r24
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	3e 87       	std	Y+14, r19	; 0x0e
    4fd4:	2d 87       	std	Y+13, r18	; 0x0d
    4fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fda:	81 30       	cpi	r24, 0x01	; 1
    4fdc:	91 05       	cpc	r25, r1
    4fde:	09 f4       	brne	.+2      	; 0x4fe2 <DIO_enu_SetPinValue+0x52>
    4fe0:	4f c0       	rjmp	.+158    	; 0x5080 <DIO_enu_SetPinValue+0xf0>
    4fe2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4fe4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4fe6:	22 30       	cpi	r18, 0x02	; 2
    4fe8:	31 05       	cpc	r19, r1
    4fea:	2c f4       	brge	.+10     	; 0x4ff6 <DIO_enu_SetPinValue+0x66>
    4fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	71 f0       	breq	.+28     	; 0x5010 <DIO_enu_SetPinValue+0x80>
    4ff4:	ed c0       	rjmp	.+474    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
    4ff6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ff8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ffa:	22 30       	cpi	r18, 0x02	; 2
    4ffc:	31 05       	cpc	r19, r1
    4ffe:	09 f4       	brne	.+2      	; 0x5002 <DIO_enu_SetPinValue+0x72>
    5000:	77 c0       	rjmp	.+238    	; 0x50f0 <DIO_enu_SetPinValue+0x160>
    5002:	8d 85       	ldd	r24, Y+13	; 0x0d
    5004:	9e 85       	ldd	r25, Y+14	; 0x0e
    5006:	83 30       	cpi	r24, 0x03	; 3
    5008:	91 05       	cpc	r25, r1
    500a:	09 f4       	brne	.+2      	; 0x500e <DIO_enu_SetPinValue+0x7e>
    500c:	a9 c0       	rjmp	.+338    	; 0x5160 <DIO_enu_SetPinValue+0x1d0>
    500e:	e0 c0       	rjmp	.+448    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    5010:	8c 81       	ldd	r24, Y+4	; 0x04
    5012:	28 2f       	mov	r18, r24
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	3c 87       	std	Y+12, r19	; 0x0c
    5018:	2b 87       	std	Y+11, r18	; 0x0b
    501a:	8b 85       	ldd	r24, Y+11	; 0x0b
    501c:	9c 85       	ldd	r25, Y+12	; 0x0c
    501e:	00 97       	sbiw	r24, 0x00	; 0
    5020:	d1 f0       	breq	.+52     	; 0x5056 <DIO_enu_SetPinValue+0xc6>
    5022:	2b 85       	ldd	r18, Y+11	; 0x0b
    5024:	3c 85       	ldd	r19, Y+12	; 0x0c
    5026:	21 30       	cpi	r18, 0x01	; 1
    5028:	31 05       	cpc	r19, r1
    502a:	09 f0       	breq	.+2      	; 0x502e <DIO_enu_SetPinValue+0x9e>
    502c:	d1 c0       	rjmp	.+418    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    502e:	ab e3       	ldi	r26, 0x3B	; 59
    5030:	b0 e0       	ldi	r27, 0x00	; 0
    5032:	eb e3       	ldi	r30, 0x3B	; 59
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	80 81       	ld	r24, Z
    5038:	48 2f       	mov	r20, r24
    503a:	8b 81       	ldd	r24, Y+3	; 0x03
    503c:	28 2f       	mov	r18, r24
    503e:	30 e0       	ldi	r19, 0x00	; 0
    5040:	81 e0       	ldi	r24, 0x01	; 1
    5042:	90 e0       	ldi	r25, 0x00	; 0
    5044:	02 2e       	mov	r0, r18
    5046:	02 c0       	rjmp	.+4      	; 0x504c <DIO_enu_SetPinValue+0xbc>
    5048:	88 0f       	add	r24, r24
    504a:	99 1f       	adc	r25, r25
    504c:	0a 94       	dec	r0
    504e:	e2 f7       	brpl	.-8      	; 0x5048 <DIO_enu_SetPinValue+0xb8>
    5050:	84 2b       	or	r24, r20
    5052:	8c 93       	st	X, r24
    5054:	bd c0       	rjmp	.+378    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    5056:	ab e3       	ldi	r26, 0x3B	; 59
    5058:	b0 e0       	ldi	r27, 0x00	; 0
    505a:	eb e3       	ldi	r30, 0x3B	; 59
    505c:	f0 e0       	ldi	r31, 0x00	; 0
    505e:	80 81       	ld	r24, Z
    5060:	48 2f       	mov	r20, r24
    5062:	8b 81       	ldd	r24, Y+3	; 0x03
    5064:	28 2f       	mov	r18, r24
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	81 e0       	ldi	r24, 0x01	; 1
    506a:	90 e0       	ldi	r25, 0x00	; 0
    506c:	02 2e       	mov	r0, r18
    506e:	02 c0       	rjmp	.+4      	; 0x5074 <DIO_enu_SetPinValue+0xe4>
    5070:	88 0f       	add	r24, r24
    5072:	99 1f       	adc	r25, r25
    5074:	0a 94       	dec	r0
    5076:	e2 f7       	brpl	.-8      	; 0x5070 <DIO_enu_SetPinValue+0xe0>
    5078:	80 95       	com	r24
    507a:	84 23       	and	r24, r20
    507c:	8c 93       	st	X, r24
    507e:	a8 c0       	rjmp	.+336    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    5080:	8c 81       	ldd	r24, Y+4	; 0x04
    5082:	28 2f       	mov	r18, r24
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	3a 87       	std	Y+10, r19	; 0x0a
    5088:	29 87       	std	Y+9, r18	; 0x09
    508a:	89 85       	ldd	r24, Y+9	; 0x09
    508c:	9a 85       	ldd	r25, Y+10	; 0x0a
    508e:	00 97       	sbiw	r24, 0x00	; 0
    5090:	d1 f0       	breq	.+52     	; 0x50c6 <DIO_enu_SetPinValue+0x136>
    5092:	29 85       	ldd	r18, Y+9	; 0x09
    5094:	3a 85       	ldd	r19, Y+10	; 0x0a
    5096:	21 30       	cpi	r18, 0x01	; 1
    5098:	31 05       	cpc	r19, r1
    509a:	09 f0       	breq	.+2      	; 0x509e <DIO_enu_SetPinValue+0x10e>
    509c:	99 c0       	rjmp	.+306    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    509e:	a8 e3       	ldi	r26, 0x38	; 56
    50a0:	b0 e0       	ldi	r27, 0x00	; 0
    50a2:	e8 e3       	ldi	r30, 0x38	; 56
    50a4:	f0 e0       	ldi	r31, 0x00	; 0
    50a6:	80 81       	ld	r24, Z
    50a8:	48 2f       	mov	r20, r24
    50aa:	8b 81       	ldd	r24, Y+3	; 0x03
    50ac:	28 2f       	mov	r18, r24
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	81 e0       	ldi	r24, 0x01	; 1
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	02 2e       	mov	r0, r18
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <DIO_enu_SetPinValue+0x12c>
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	0a 94       	dec	r0
    50be:	e2 f7       	brpl	.-8      	; 0x50b8 <DIO_enu_SetPinValue+0x128>
    50c0:	84 2b       	or	r24, r20
    50c2:	8c 93       	st	X, r24
    50c4:	85 c0       	rjmp	.+266    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    50c6:	a8 e3       	ldi	r26, 0x38	; 56
    50c8:	b0 e0       	ldi	r27, 0x00	; 0
    50ca:	e8 e3       	ldi	r30, 0x38	; 56
    50cc:	f0 e0       	ldi	r31, 0x00	; 0
    50ce:	80 81       	ld	r24, Z
    50d0:	48 2f       	mov	r20, r24
    50d2:	8b 81       	ldd	r24, Y+3	; 0x03
    50d4:	28 2f       	mov	r18, r24
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	02 2e       	mov	r0, r18
    50de:	02 c0       	rjmp	.+4      	; 0x50e4 <DIO_enu_SetPinValue+0x154>
    50e0:	88 0f       	add	r24, r24
    50e2:	99 1f       	adc	r25, r25
    50e4:	0a 94       	dec	r0
    50e6:	e2 f7       	brpl	.-8      	; 0x50e0 <DIO_enu_SetPinValue+0x150>
    50e8:	80 95       	com	r24
    50ea:	84 23       	and	r24, r20
    50ec:	8c 93       	st	X, r24
    50ee:	70 c0       	rjmp	.+224    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    50f0:	8c 81       	ldd	r24, Y+4	; 0x04
    50f2:	28 2f       	mov	r18, r24
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	38 87       	std	Y+8, r19	; 0x08
    50f8:	2f 83       	std	Y+7, r18	; 0x07
    50fa:	8f 81       	ldd	r24, Y+7	; 0x07
    50fc:	98 85       	ldd	r25, Y+8	; 0x08
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	d1 f0       	breq	.+52     	; 0x5136 <DIO_enu_SetPinValue+0x1a6>
    5102:	2f 81       	ldd	r18, Y+7	; 0x07
    5104:	38 85       	ldd	r19, Y+8	; 0x08
    5106:	21 30       	cpi	r18, 0x01	; 1
    5108:	31 05       	cpc	r19, r1
    510a:	09 f0       	breq	.+2      	; 0x510e <DIO_enu_SetPinValue+0x17e>
    510c:	61 c0       	rjmp	.+194    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    510e:	a5 e3       	ldi	r26, 0x35	; 53
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	e5 e3       	ldi	r30, 0x35	; 53
    5114:	f0 e0       	ldi	r31, 0x00	; 0
    5116:	80 81       	ld	r24, Z
    5118:	48 2f       	mov	r20, r24
    511a:	8b 81       	ldd	r24, Y+3	; 0x03
    511c:	28 2f       	mov	r18, r24
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	81 e0       	ldi	r24, 0x01	; 1
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	02 2e       	mov	r0, r18
    5126:	02 c0       	rjmp	.+4      	; 0x512c <DIO_enu_SetPinValue+0x19c>
    5128:	88 0f       	add	r24, r24
    512a:	99 1f       	adc	r25, r25
    512c:	0a 94       	dec	r0
    512e:	e2 f7       	brpl	.-8      	; 0x5128 <DIO_enu_SetPinValue+0x198>
    5130:	84 2b       	or	r24, r20
    5132:	8c 93       	st	X, r24
    5134:	4d c0       	rjmp	.+154    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    5136:	a5 e3       	ldi	r26, 0x35	; 53
    5138:	b0 e0       	ldi	r27, 0x00	; 0
    513a:	e5 e3       	ldi	r30, 0x35	; 53
    513c:	f0 e0       	ldi	r31, 0x00	; 0
    513e:	80 81       	ld	r24, Z
    5140:	48 2f       	mov	r20, r24
    5142:	8b 81       	ldd	r24, Y+3	; 0x03
    5144:	28 2f       	mov	r18, r24
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	81 e0       	ldi	r24, 0x01	; 1
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	02 2e       	mov	r0, r18
    514e:	02 c0       	rjmp	.+4      	; 0x5154 <DIO_enu_SetPinValue+0x1c4>
    5150:	88 0f       	add	r24, r24
    5152:	99 1f       	adc	r25, r25
    5154:	0a 94       	dec	r0
    5156:	e2 f7       	brpl	.-8      	; 0x5150 <DIO_enu_SetPinValue+0x1c0>
    5158:	80 95       	com	r24
    515a:	84 23       	and	r24, r20
    515c:	8c 93       	st	X, r24
    515e:	38 c0       	rjmp	.+112    	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    5160:	8c 81       	ldd	r24, Y+4	; 0x04
    5162:	28 2f       	mov	r18, r24
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	3e 83       	std	Y+6, r19	; 0x06
    5168:	2d 83       	std	Y+5, r18	; 0x05
    516a:	8d 81       	ldd	r24, Y+5	; 0x05
    516c:	9e 81       	ldd	r25, Y+6	; 0x06
    516e:	00 97       	sbiw	r24, 0x00	; 0
    5170:	c9 f0       	breq	.+50     	; 0x51a4 <DIO_enu_SetPinValue+0x214>
    5172:	2d 81       	ldd	r18, Y+5	; 0x05
    5174:	3e 81       	ldd	r19, Y+6	; 0x06
    5176:	21 30       	cpi	r18, 0x01	; 1
    5178:	31 05       	cpc	r19, r1
    517a:	51 f5       	brne	.+84     	; 0x51d0 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    517c:	a2 e3       	ldi	r26, 0x32	; 50
    517e:	b0 e0       	ldi	r27, 0x00	; 0
    5180:	e2 e3       	ldi	r30, 0x32	; 50
    5182:	f0 e0       	ldi	r31, 0x00	; 0
    5184:	80 81       	ld	r24, Z
    5186:	48 2f       	mov	r20, r24
    5188:	8b 81       	ldd	r24, Y+3	; 0x03
    518a:	28 2f       	mov	r18, r24
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	02 2e       	mov	r0, r18
    5194:	02 c0       	rjmp	.+4      	; 0x519a <DIO_enu_SetPinValue+0x20a>
    5196:	88 0f       	add	r24, r24
    5198:	99 1f       	adc	r25, r25
    519a:	0a 94       	dec	r0
    519c:	e2 f7       	brpl	.-8      	; 0x5196 <DIO_enu_SetPinValue+0x206>
    519e:	84 2b       	or	r24, r20
    51a0:	8c 93       	st	X, r24
    51a2:	16 c0       	rjmp	.+44     	; 0x51d0 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    51a4:	a2 e3       	ldi	r26, 0x32	; 50
    51a6:	b0 e0       	ldi	r27, 0x00	; 0
    51a8:	e2 e3       	ldi	r30, 0x32	; 50
    51aa:	f0 e0       	ldi	r31, 0x00	; 0
    51ac:	80 81       	ld	r24, Z
    51ae:	48 2f       	mov	r20, r24
    51b0:	8b 81       	ldd	r24, Y+3	; 0x03
    51b2:	28 2f       	mov	r18, r24
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	02 2e       	mov	r0, r18
    51bc:	02 c0       	rjmp	.+4      	; 0x51c2 <DIO_enu_SetPinValue+0x232>
    51be:	88 0f       	add	r24, r24
    51c0:	99 1f       	adc	r25, r25
    51c2:	0a 94       	dec	r0
    51c4:	e2 f7       	brpl	.-8      	; 0x51be <DIO_enu_SetPinValue+0x22e>
    51c6:	80 95       	com	r24
    51c8:	84 23       	and	r24, r20
    51ca:	8c 93       	st	X, r24
    51cc:	01 c0       	rjmp	.+2      	; 0x51d0 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    51ce:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    51d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    51d2:	2e 96       	adiw	r28, 0x0e	; 14
    51d4:	0f b6       	in	r0, 0x3f	; 63
    51d6:	f8 94       	cli
    51d8:	de bf       	out	0x3e, r29	; 62
    51da:	0f be       	out	0x3f, r0	; 63
    51dc:	cd bf       	out	0x3d, r28	; 61
    51de:	cf 91       	pop	r28
    51e0:	df 91       	pop	r29
    51e2:	08 95       	ret

000051e4 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    51e4:	df 93       	push	r29
    51e6:	cf 93       	push	r28
    51e8:	cd b7       	in	r28, 0x3d	; 61
    51ea:	de b7       	in	r29, 0x3e	; 62
    51ec:	27 97       	sbiw	r28, 0x07	; 7
    51ee:	0f b6       	in	r0, 0x3f	; 63
    51f0:	f8 94       	cli
    51f2:	de bf       	out	0x3e, r29	; 62
    51f4:	0f be       	out	0x3f, r0	; 63
    51f6:	cd bf       	out	0x3d, r28	; 61
    51f8:	8a 83       	std	Y+2, r24	; 0x02
    51fa:	6b 83       	std	Y+3, r22	; 0x03
    51fc:	5d 83       	std	Y+5, r21	; 0x05
    51fe:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    5204:	8a 81       	ldd	r24, Y+2	; 0x02
    5206:	84 30       	cpi	r24, 0x04	; 4
    5208:	08 f0       	brcs	.+2      	; 0x520c <DIO_enu_GetPinValue+0x28>
    520a:	7a c0       	rjmp	.+244    	; 0x5300 <DIO_enu_GetPinValue+0x11c>
    520c:	8b 81       	ldd	r24, Y+3	; 0x03
    520e:	88 30       	cpi	r24, 0x08	; 8
    5210:	08 f0       	brcs	.+2      	; 0x5214 <DIO_enu_GetPinValue+0x30>
    5212:	76 c0       	rjmp	.+236    	; 0x5300 <DIO_enu_GetPinValue+0x11c>
    5214:	8c 81       	ldd	r24, Y+4	; 0x04
    5216:	9d 81       	ldd	r25, Y+5	; 0x05
    5218:	00 97       	sbiw	r24, 0x00	; 0
    521a:	09 f4       	brne	.+2      	; 0x521e <DIO_enu_GetPinValue+0x3a>
    521c:	71 c0       	rjmp	.+226    	; 0x5300 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    521e:	8a 81       	ldd	r24, Y+2	; 0x02
    5220:	28 2f       	mov	r18, r24
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	3f 83       	std	Y+7, r19	; 0x07
    5226:	2e 83       	std	Y+6, r18	; 0x06
    5228:	4e 81       	ldd	r20, Y+6	; 0x06
    522a:	5f 81       	ldd	r21, Y+7	; 0x07
    522c:	41 30       	cpi	r20, 0x01	; 1
    522e:	51 05       	cpc	r21, r1
    5230:	59 f1       	breq	.+86     	; 0x5288 <DIO_enu_GetPinValue+0xa4>
    5232:	8e 81       	ldd	r24, Y+6	; 0x06
    5234:	9f 81       	ldd	r25, Y+7	; 0x07
    5236:	82 30       	cpi	r24, 0x02	; 2
    5238:	91 05       	cpc	r25, r1
    523a:	34 f4       	brge	.+12     	; 0x5248 <DIO_enu_GetPinValue+0x64>
    523c:	2e 81       	ldd	r18, Y+6	; 0x06
    523e:	3f 81       	ldd	r19, Y+7	; 0x07
    5240:	21 15       	cp	r18, r1
    5242:	31 05       	cpc	r19, r1
    5244:	69 f0       	breq	.+26     	; 0x5260 <DIO_enu_GetPinValue+0x7c>
    5246:	5d c0       	rjmp	.+186    	; 0x5302 <DIO_enu_GetPinValue+0x11e>
    5248:	4e 81       	ldd	r20, Y+6	; 0x06
    524a:	5f 81       	ldd	r21, Y+7	; 0x07
    524c:	42 30       	cpi	r20, 0x02	; 2
    524e:	51 05       	cpc	r21, r1
    5250:	79 f1       	breq	.+94     	; 0x52b0 <DIO_enu_GetPinValue+0xcc>
    5252:	8e 81       	ldd	r24, Y+6	; 0x06
    5254:	9f 81       	ldd	r25, Y+7	; 0x07
    5256:	83 30       	cpi	r24, 0x03	; 3
    5258:	91 05       	cpc	r25, r1
    525a:	09 f4       	brne	.+2      	; 0x525e <DIO_enu_GetPinValue+0x7a>
    525c:	3d c0       	rjmp	.+122    	; 0x52d8 <DIO_enu_GetPinValue+0xf4>
    525e:	51 c0       	rjmp	.+162    	; 0x5302 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    5260:	e9 e3       	ldi	r30, 0x39	; 57
    5262:	f0 e0       	ldi	r31, 0x00	; 0
    5264:	80 81       	ld	r24, Z
    5266:	28 2f       	mov	r18, r24
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	8b 81       	ldd	r24, Y+3	; 0x03
    526c:	88 2f       	mov	r24, r24
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	a9 01       	movw	r20, r18
    5272:	02 c0       	rjmp	.+4      	; 0x5278 <DIO_enu_GetPinValue+0x94>
    5274:	55 95       	asr	r21
    5276:	47 95       	ror	r20
    5278:	8a 95       	dec	r24
    527a:	e2 f7       	brpl	.-8      	; 0x5274 <DIO_enu_GetPinValue+0x90>
    527c:	ca 01       	movw	r24, r20
    527e:	81 70       	andi	r24, 0x01	; 1
    5280:	ec 81       	ldd	r30, Y+4	; 0x04
    5282:	fd 81       	ldd	r31, Y+5	; 0x05
    5284:	80 83       	st	Z, r24
    5286:	3d c0       	rjmp	.+122    	; 0x5302 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    5288:	e6 e3       	ldi	r30, 0x36	; 54
    528a:	f0 e0       	ldi	r31, 0x00	; 0
    528c:	80 81       	ld	r24, Z
    528e:	28 2f       	mov	r18, r24
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	8b 81       	ldd	r24, Y+3	; 0x03
    5294:	88 2f       	mov	r24, r24
    5296:	90 e0       	ldi	r25, 0x00	; 0
    5298:	a9 01       	movw	r20, r18
    529a:	02 c0       	rjmp	.+4      	; 0x52a0 <DIO_enu_GetPinValue+0xbc>
    529c:	55 95       	asr	r21
    529e:	47 95       	ror	r20
    52a0:	8a 95       	dec	r24
    52a2:	e2 f7       	brpl	.-8      	; 0x529c <DIO_enu_GetPinValue+0xb8>
    52a4:	ca 01       	movw	r24, r20
    52a6:	81 70       	andi	r24, 0x01	; 1
    52a8:	ec 81       	ldd	r30, Y+4	; 0x04
    52aa:	fd 81       	ldd	r31, Y+5	; 0x05
    52ac:	80 83       	st	Z, r24
    52ae:	29 c0       	rjmp	.+82     	; 0x5302 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    52b0:	e3 e3       	ldi	r30, 0x33	; 51
    52b2:	f0 e0       	ldi	r31, 0x00	; 0
    52b4:	80 81       	ld	r24, Z
    52b6:	28 2f       	mov	r18, r24
    52b8:	30 e0       	ldi	r19, 0x00	; 0
    52ba:	8b 81       	ldd	r24, Y+3	; 0x03
    52bc:	88 2f       	mov	r24, r24
    52be:	90 e0       	ldi	r25, 0x00	; 0
    52c0:	a9 01       	movw	r20, r18
    52c2:	02 c0       	rjmp	.+4      	; 0x52c8 <DIO_enu_GetPinValue+0xe4>
    52c4:	55 95       	asr	r21
    52c6:	47 95       	ror	r20
    52c8:	8a 95       	dec	r24
    52ca:	e2 f7       	brpl	.-8      	; 0x52c4 <DIO_enu_GetPinValue+0xe0>
    52cc:	ca 01       	movw	r24, r20
    52ce:	81 70       	andi	r24, 0x01	; 1
    52d0:	ec 81       	ldd	r30, Y+4	; 0x04
    52d2:	fd 81       	ldd	r31, Y+5	; 0x05
    52d4:	80 83       	st	Z, r24
    52d6:	15 c0       	rjmp	.+42     	; 0x5302 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    52d8:	e0 e3       	ldi	r30, 0x30	; 48
    52da:	f0 e0       	ldi	r31, 0x00	; 0
    52dc:	80 81       	ld	r24, Z
    52de:	28 2f       	mov	r18, r24
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	8b 81       	ldd	r24, Y+3	; 0x03
    52e4:	88 2f       	mov	r24, r24
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	a9 01       	movw	r20, r18
    52ea:	02 c0       	rjmp	.+4      	; 0x52f0 <DIO_enu_GetPinValue+0x10c>
    52ec:	55 95       	asr	r21
    52ee:	47 95       	ror	r20
    52f0:	8a 95       	dec	r24
    52f2:	e2 f7       	brpl	.-8      	; 0x52ec <DIO_enu_GetPinValue+0x108>
    52f4:	ca 01       	movw	r24, r20
    52f6:	81 70       	andi	r24, 0x01	; 1
    52f8:	ec 81       	ldd	r30, Y+4	; 0x04
    52fa:	fd 81       	ldd	r31, Y+5	; 0x05
    52fc:	80 83       	st	Z, r24
    52fe:	01 c0       	rjmp	.+2      	; 0x5302 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    5300:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5302:	89 81       	ldd	r24, Y+1	; 0x01
}
    5304:	27 96       	adiw	r28, 0x07	; 7
    5306:	0f b6       	in	r0, 0x3f	; 63
    5308:	f8 94       	cli
    530a:	de bf       	out	0x3e, r29	; 62
    530c:	0f be       	out	0x3f, r0	; 63
    530e:	cd bf       	out	0x3d, r28	; 61
    5310:	cf 91       	pop	r28
    5312:	df 91       	pop	r29
    5314:	08 95       	ret

00005316 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    5316:	df 93       	push	r29
    5318:	cf 93       	push	r28
    531a:	cd b7       	in	r28, 0x3d	; 61
    531c:	de b7       	in	r29, 0x3e	; 62
    531e:	2d 97       	sbiw	r28, 0x0d	; 13
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	de bf       	out	0x3e, r29	; 62
    5326:	0f be       	out	0x3f, r0	; 63
    5328:	cd bf       	out	0x3d, r28	; 61
    532a:	8a 83       	std	Y+2, r24	; 0x02
    532c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    532e:	81 e0       	ldi	r24, 0x01	; 1
    5330:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    5332:	8a 81       	ldd	r24, Y+2	; 0x02
    5334:	84 30       	cpi	r24, 0x04	; 4
    5336:	08 f0       	brcs	.+2      	; 0x533a <DIO_enu_SetPortDirection+0x24>
    5338:	84 c0       	rjmp	.+264    	; 0x5442 <DIO_enu_SetPortDirection+0x12c>
    533a:	8b 81       	ldd	r24, Y+3	; 0x03
    533c:	81 30       	cpi	r24, 0x01	; 1
    533e:	21 f0       	breq	.+8      	; 0x5348 <DIO_enu_SetPortDirection+0x32>
    5340:	8b 81       	ldd	r24, Y+3	; 0x03
    5342:	88 23       	and	r24, r24
    5344:	09 f0       	breq	.+2      	; 0x5348 <DIO_enu_SetPortDirection+0x32>
    5346:	7d c0       	rjmp	.+250    	; 0x5442 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    5348:	8a 81       	ldd	r24, Y+2	; 0x02
    534a:	28 2f       	mov	r18, r24
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	3d 87       	std	Y+13, r19	; 0x0d
    5350:	2c 87       	std	Y+12, r18	; 0x0c
    5352:	8c 85       	ldd	r24, Y+12	; 0x0c
    5354:	9d 85       	ldd	r25, Y+13	; 0x0d
    5356:	81 30       	cpi	r24, 0x01	; 1
    5358:	91 05       	cpc	r25, r1
    535a:	71 f1       	breq	.+92     	; 0x53b8 <DIO_enu_SetPortDirection+0xa2>
    535c:	2c 85       	ldd	r18, Y+12	; 0x0c
    535e:	3d 85       	ldd	r19, Y+13	; 0x0d
    5360:	22 30       	cpi	r18, 0x02	; 2
    5362:	31 05       	cpc	r19, r1
    5364:	2c f4       	brge	.+10     	; 0x5370 <DIO_enu_SetPortDirection+0x5a>
    5366:	8c 85       	ldd	r24, Y+12	; 0x0c
    5368:	9d 85       	ldd	r25, Y+13	; 0x0d
    536a:	00 97       	sbiw	r24, 0x00	; 0
    536c:	69 f0       	breq	.+26     	; 0x5388 <DIO_enu_SetPortDirection+0x72>
    536e:	6a c0       	rjmp	.+212    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
    5370:	2c 85       	ldd	r18, Y+12	; 0x0c
    5372:	3d 85       	ldd	r19, Y+13	; 0x0d
    5374:	22 30       	cpi	r18, 0x02	; 2
    5376:	31 05       	cpc	r19, r1
    5378:	b1 f1       	breq	.+108    	; 0x53e6 <DIO_enu_SetPortDirection+0xd0>
    537a:	8c 85       	ldd	r24, Y+12	; 0x0c
    537c:	9d 85       	ldd	r25, Y+13	; 0x0d
    537e:	83 30       	cpi	r24, 0x03	; 3
    5380:	91 05       	cpc	r25, r1
    5382:	09 f4       	brne	.+2      	; 0x5386 <DIO_enu_SetPortDirection+0x70>
    5384:	47 c0       	rjmp	.+142    	; 0x5414 <DIO_enu_SetPortDirection+0xfe>
    5386:	5e c0       	rjmp	.+188    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    5388:	8b 81       	ldd	r24, Y+3	; 0x03
    538a:	28 2f       	mov	r18, r24
    538c:	30 e0       	ldi	r19, 0x00	; 0
    538e:	3b 87       	std	Y+11, r19	; 0x0b
    5390:	2a 87       	std	Y+10, r18	; 0x0a
    5392:	8a 85       	ldd	r24, Y+10	; 0x0a
    5394:	9b 85       	ldd	r25, Y+11	; 0x0b
    5396:	00 97       	sbiw	r24, 0x00	; 0
    5398:	59 f0       	breq	.+22     	; 0x53b0 <DIO_enu_SetPortDirection+0x9a>
    539a:	2a 85       	ldd	r18, Y+10	; 0x0a
    539c:	3b 85       	ldd	r19, Y+11	; 0x0b
    539e:	21 30       	cpi	r18, 0x01	; 1
    53a0:	31 05       	cpc	r19, r1
    53a2:	09 f0       	breq	.+2      	; 0x53a6 <DIO_enu_SetPortDirection+0x90>
    53a4:	4f c0       	rjmp	.+158    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    53a6:	ea e3       	ldi	r30, 0x3A	; 58
    53a8:	f0 e0       	ldi	r31, 0x00	; 0
    53aa:	8f ef       	ldi	r24, 0xFF	; 255
    53ac:	80 83       	st	Z, r24
    53ae:	4a c0       	rjmp	.+148    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    53b0:	ea e3       	ldi	r30, 0x3A	; 58
    53b2:	f0 e0       	ldi	r31, 0x00	; 0
    53b4:	10 82       	st	Z, r1
    53b6:	46 c0       	rjmp	.+140    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    53b8:	8b 81       	ldd	r24, Y+3	; 0x03
    53ba:	28 2f       	mov	r18, r24
    53bc:	30 e0       	ldi	r19, 0x00	; 0
    53be:	39 87       	std	Y+9, r19	; 0x09
    53c0:	28 87       	std	Y+8, r18	; 0x08
    53c2:	88 85       	ldd	r24, Y+8	; 0x08
    53c4:	99 85       	ldd	r25, Y+9	; 0x09
    53c6:	00 97       	sbiw	r24, 0x00	; 0
    53c8:	51 f0       	breq	.+20     	; 0x53de <DIO_enu_SetPortDirection+0xc8>
    53ca:	28 85       	ldd	r18, Y+8	; 0x08
    53cc:	39 85       	ldd	r19, Y+9	; 0x09
    53ce:	21 30       	cpi	r18, 0x01	; 1
    53d0:	31 05       	cpc	r19, r1
    53d2:	c1 f5       	brne	.+112    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    53d4:	e7 e3       	ldi	r30, 0x37	; 55
    53d6:	f0 e0       	ldi	r31, 0x00	; 0
    53d8:	8f ef       	ldi	r24, 0xFF	; 255
    53da:	80 83       	st	Z, r24
    53dc:	33 c0       	rjmp	.+102    	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    53de:	e7 e3       	ldi	r30, 0x37	; 55
    53e0:	f0 e0       	ldi	r31, 0x00	; 0
    53e2:	10 82       	st	Z, r1
    53e4:	2f c0       	rjmp	.+94     	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    53e6:	8b 81       	ldd	r24, Y+3	; 0x03
    53e8:	28 2f       	mov	r18, r24
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	3f 83       	std	Y+7, r19	; 0x07
    53ee:	2e 83       	std	Y+6, r18	; 0x06
    53f0:	8e 81       	ldd	r24, Y+6	; 0x06
    53f2:	9f 81       	ldd	r25, Y+7	; 0x07
    53f4:	00 97       	sbiw	r24, 0x00	; 0
    53f6:	51 f0       	breq	.+20     	; 0x540c <DIO_enu_SetPortDirection+0xf6>
    53f8:	2e 81       	ldd	r18, Y+6	; 0x06
    53fa:	3f 81       	ldd	r19, Y+7	; 0x07
    53fc:	21 30       	cpi	r18, 0x01	; 1
    53fe:	31 05       	cpc	r19, r1
    5400:	09 f5       	brne	.+66     	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    5402:	e4 e3       	ldi	r30, 0x34	; 52
    5404:	f0 e0       	ldi	r31, 0x00	; 0
    5406:	8f ef       	ldi	r24, 0xFF	; 255
    5408:	80 83       	st	Z, r24
    540a:	1c c0       	rjmp	.+56     	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    540c:	e4 e3       	ldi	r30, 0x34	; 52
    540e:	f0 e0       	ldi	r31, 0x00	; 0
    5410:	10 82       	st	Z, r1
    5412:	18 c0       	rjmp	.+48     	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    5414:	8b 81       	ldd	r24, Y+3	; 0x03
    5416:	28 2f       	mov	r18, r24
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	3d 83       	std	Y+5, r19	; 0x05
    541c:	2c 83       	std	Y+4, r18	; 0x04
    541e:	8c 81       	ldd	r24, Y+4	; 0x04
    5420:	9d 81       	ldd	r25, Y+5	; 0x05
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	51 f0       	breq	.+20     	; 0x543a <DIO_enu_SetPortDirection+0x124>
    5426:	2c 81       	ldd	r18, Y+4	; 0x04
    5428:	3d 81       	ldd	r19, Y+5	; 0x05
    542a:	21 30       	cpi	r18, 0x01	; 1
    542c:	31 05       	cpc	r19, r1
    542e:	51 f4       	brne	.+20     	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    5430:	e1 e3       	ldi	r30, 0x31	; 49
    5432:	f0 e0       	ldi	r31, 0x00	; 0
    5434:	8f ef       	ldi	r24, 0xFF	; 255
    5436:	80 83       	st	Z, r24
    5438:	05 c0       	rjmp	.+10     	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    543a:	e1 e3       	ldi	r30, 0x31	; 49
    543c:	f0 e0       	ldi	r31, 0x00	; 0
    543e:	10 82       	st	Z, r1
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    5442:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    5444:	89 81       	ldd	r24, Y+1	; 0x01
}
    5446:	2d 96       	adiw	r28, 0x0d	; 13
    5448:	0f b6       	in	r0, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	de bf       	out	0x3e, r29	; 62
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	cd bf       	out	0x3d, r28	; 61
    5452:	cf 91       	pop	r28
    5454:	df 91       	pop	r29
    5456:	08 95       	ret

00005458 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    5458:	df 93       	push	r29
    545a:	cf 93       	push	r28
    545c:	00 d0       	rcall	.+0      	; 0x545e <DIO_enu_SetPortValue+0x6>
    545e:	00 d0       	rcall	.+0      	; 0x5460 <DIO_enu_SetPortValue+0x8>
    5460:	0f 92       	push	r0
    5462:	cd b7       	in	r28, 0x3d	; 61
    5464:	de b7       	in	r29, 0x3e	; 62
    5466:	8a 83       	std	Y+2, r24	; 0x02
    5468:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    546e:	8a 81       	ldd	r24, Y+2	; 0x02
    5470:	84 30       	cpi	r24, 0x04	; 4
    5472:	98 f5       	brcc	.+102    	; 0x54da <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    5474:	8a 81       	ldd	r24, Y+2	; 0x02
    5476:	28 2f       	mov	r18, r24
    5478:	30 e0       	ldi	r19, 0x00	; 0
    547a:	3d 83       	std	Y+5, r19	; 0x05
    547c:	2c 83       	std	Y+4, r18	; 0x04
    547e:	8c 81       	ldd	r24, Y+4	; 0x04
    5480:	9d 81       	ldd	r25, Y+5	; 0x05
    5482:	81 30       	cpi	r24, 0x01	; 1
    5484:	91 05       	cpc	r25, r1
    5486:	d1 f0       	breq	.+52     	; 0x54bc <DIO_enu_SetPortValue+0x64>
    5488:	2c 81       	ldd	r18, Y+4	; 0x04
    548a:	3d 81       	ldd	r19, Y+5	; 0x05
    548c:	22 30       	cpi	r18, 0x02	; 2
    548e:	31 05       	cpc	r19, r1
    5490:	2c f4       	brge	.+10     	; 0x549c <DIO_enu_SetPortValue+0x44>
    5492:	8c 81       	ldd	r24, Y+4	; 0x04
    5494:	9d 81       	ldd	r25, Y+5	; 0x05
    5496:	00 97       	sbiw	r24, 0x00	; 0
    5498:	61 f0       	breq	.+24     	; 0x54b2 <DIO_enu_SetPortValue+0x5a>
    549a:	20 c0       	rjmp	.+64     	; 0x54dc <DIO_enu_SetPortValue+0x84>
    549c:	2c 81       	ldd	r18, Y+4	; 0x04
    549e:	3d 81       	ldd	r19, Y+5	; 0x05
    54a0:	22 30       	cpi	r18, 0x02	; 2
    54a2:	31 05       	cpc	r19, r1
    54a4:	81 f0       	breq	.+32     	; 0x54c6 <DIO_enu_SetPortValue+0x6e>
    54a6:	8c 81       	ldd	r24, Y+4	; 0x04
    54a8:	9d 81       	ldd	r25, Y+5	; 0x05
    54aa:	83 30       	cpi	r24, 0x03	; 3
    54ac:	91 05       	cpc	r25, r1
    54ae:	81 f0       	breq	.+32     	; 0x54d0 <DIO_enu_SetPortValue+0x78>
    54b0:	15 c0       	rjmp	.+42     	; 0x54dc <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    54b2:	eb e3       	ldi	r30, 0x3B	; 59
    54b4:	f0 e0       	ldi	r31, 0x00	; 0
    54b6:	8b 81       	ldd	r24, Y+3	; 0x03
    54b8:	80 83       	st	Z, r24
    54ba:	10 c0       	rjmp	.+32     	; 0x54dc <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    54bc:	e8 e3       	ldi	r30, 0x38	; 56
    54be:	f0 e0       	ldi	r31, 0x00	; 0
    54c0:	8b 81       	ldd	r24, Y+3	; 0x03
    54c2:	80 83       	st	Z, r24
    54c4:	0b c0       	rjmp	.+22     	; 0x54dc <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    54c6:	e5 e3       	ldi	r30, 0x35	; 53
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	8b 81       	ldd	r24, Y+3	; 0x03
    54cc:	80 83       	st	Z, r24
    54ce:	06 c0       	rjmp	.+12     	; 0x54dc <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    54d0:	e2 e3       	ldi	r30, 0x32	; 50
    54d2:	f0 e0       	ldi	r31, 0x00	; 0
    54d4:	8b 81       	ldd	r24, Y+3	; 0x03
    54d6:	80 83       	st	Z, r24
    54d8:	01 c0       	rjmp	.+2      	; 0x54dc <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    54da:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    54dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    54de:	0f 90       	pop	r0
    54e0:	0f 90       	pop	r0
    54e2:	0f 90       	pop	r0
    54e4:	0f 90       	pop	r0
    54e6:	0f 90       	pop	r0
    54e8:	cf 91       	pop	r28
    54ea:	df 91       	pop	r29
    54ec:	08 95       	ret

000054ee <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    54ee:	df 93       	push	r29
    54f0:	cf 93       	push	r28
    54f2:	00 d0       	rcall	.+0      	; 0x54f4 <DIO_enu_GetPortValue+0x6>
    54f4:	00 d0       	rcall	.+0      	; 0x54f6 <DIO_enu_GetPortValue+0x8>
    54f6:	00 d0       	rcall	.+0      	; 0x54f8 <DIO_enu_GetPortValue+0xa>
    54f8:	cd b7       	in	r28, 0x3d	; 61
    54fa:	de b7       	in	r29, 0x3e	; 62
    54fc:	8a 83       	std	Y+2, r24	; 0x02
    54fe:	7c 83       	std	Y+4, r23	; 0x04
    5500:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    5502:	81 e0       	ldi	r24, 0x01	; 1
    5504:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    5506:	8a 81       	ldd	r24, Y+2	; 0x02
    5508:	84 30       	cpi	r24, 0x04	; 4
    550a:	08 f0       	brcs	.+2      	; 0x550e <DIO_enu_GetPortValue+0x20>
    550c:	3f c0       	rjmp	.+126    	; 0x558c <DIO_enu_GetPortValue+0x9e>
    550e:	8b 81       	ldd	r24, Y+3	; 0x03
    5510:	9c 81       	ldd	r25, Y+4	; 0x04
    5512:	00 97       	sbiw	r24, 0x00	; 0
    5514:	d9 f1       	breq	.+118    	; 0x558c <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    5516:	8a 81       	ldd	r24, Y+2	; 0x02
    5518:	28 2f       	mov	r18, r24
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	3e 83       	std	Y+6, r19	; 0x06
    551e:	2d 83       	std	Y+5, r18	; 0x05
    5520:	8d 81       	ldd	r24, Y+5	; 0x05
    5522:	9e 81       	ldd	r25, Y+6	; 0x06
    5524:	81 30       	cpi	r24, 0x01	; 1
    5526:	91 05       	cpc	r25, r1
    5528:	e1 f0       	breq	.+56     	; 0x5562 <DIO_enu_GetPortValue+0x74>
    552a:	2d 81       	ldd	r18, Y+5	; 0x05
    552c:	3e 81       	ldd	r19, Y+6	; 0x06
    552e:	22 30       	cpi	r18, 0x02	; 2
    5530:	31 05       	cpc	r19, r1
    5532:	2c f4       	brge	.+10     	; 0x553e <DIO_enu_GetPortValue+0x50>
    5534:	8d 81       	ldd	r24, Y+5	; 0x05
    5536:	9e 81       	ldd	r25, Y+6	; 0x06
    5538:	00 97       	sbiw	r24, 0x00	; 0
    553a:	61 f0       	breq	.+24     	; 0x5554 <DIO_enu_GetPortValue+0x66>
    553c:	28 c0       	rjmp	.+80     	; 0x558e <DIO_enu_GetPortValue+0xa0>
    553e:	2d 81       	ldd	r18, Y+5	; 0x05
    5540:	3e 81       	ldd	r19, Y+6	; 0x06
    5542:	22 30       	cpi	r18, 0x02	; 2
    5544:	31 05       	cpc	r19, r1
    5546:	a1 f0       	breq	.+40     	; 0x5570 <DIO_enu_GetPortValue+0x82>
    5548:	8d 81       	ldd	r24, Y+5	; 0x05
    554a:	9e 81       	ldd	r25, Y+6	; 0x06
    554c:	83 30       	cpi	r24, 0x03	; 3
    554e:	91 05       	cpc	r25, r1
    5550:	b1 f0       	breq	.+44     	; 0x557e <DIO_enu_GetPortValue+0x90>
    5552:	1d c0       	rjmp	.+58     	; 0x558e <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    5554:	e9 e3       	ldi	r30, 0x39	; 57
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	80 81       	ld	r24, Z
    555a:	eb 81       	ldd	r30, Y+3	; 0x03
    555c:	fc 81       	ldd	r31, Y+4	; 0x04
    555e:	80 83       	st	Z, r24
    5560:	16 c0       	rjmp	.+44     	; 0x558e <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    5562:	e6 e3       	ldi	r30, 0x36	; 54
    5564:	f0 e0       	ldi	r31, 0x00	; 0
    5566:	80 81       	ld	r24, Z
    5568:	eb 81       	ldd	r30, Y+3	; 0x03
    556a:	fc 81       	ldd	r31, Y+4	; 0x04
    556c:	80 83       	st	Z, r24
    556e:	0f c0       	rjmp	.+30     	; 0x558e <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    5570:	e3 e3       	ldi	r30, 0x33	; 51
    5572:	f0 e0       	ldi	r31, 0x00	; 0
    5574:	80 81       	ld	r24, Z
    5576:	eb 81       	ldd	r30, Y+3	; 0x03
    5578:	fc 81       	ldd	r31, Y+4	; 0x04
    557a:	80 83       	st	Z, r24
    557c:	08 c0       	rjmp	.+16     	; 0x558e <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    557e:	e0 e3       	ldi	r30, 0x30	; 48
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	80 81       	ld	r24, Z
    5584:	eb 81       	ldd	r30, Y+3	; 0x03
    5586:	fc 81       	ldd	r31, Y+4	; 0x04
    5588:	80 83       	st	Z, r24
    558a:	01 c0       	rjmp	.+2      	; 0x558e <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    558c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    558e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5590:	26 96       	adiw	r28, 0x06	; 6
    5592:	0f b6       	in	r0, 0x3f	; 63
    5594:	f8 94       	cli
    5596:	de bf       	out	0x3e, r29	; 62
    5598:	0f be       	out	0x3f, r0	; 63
    559a:	cd bf       	out	0x3d, r28	; 61
    559c:	cf 91       	pop	r28
    559e:	df 91       	pop	r29
    55a0:	08 95       	ret

000055a2 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    55a2:	df 93       	push	r29
    55a4:	cf 93       	push	r28
    55a6:	00 d0       	rcall	.+0      	; 0x55a8 <DIO_enu_ToggPin+0x6>
    55a8:	00 d0       	rcall	.+0      	; 0x55aa <DIO_enu_ToggPin+0x8>
    55aa:	0f 92       	push	r0
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
    55b0:	8a 83       	std	Y+2, r24	; 0x02
    55b2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    55b8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ba:	84 30       	cpi	r24, 0x04	; 4
    55bc:	08 f0       	brcs	.+2      	; 0x55c0 <DIO_enu_ToggPin+0x1e>
    55be:	73 c0       	rjmp	.+230    	; 0x56a6 <DIO_enu_ToggPin+0x104>
    55c0:	8b 81       	ldd	r24, Y+3	; 0x03
    55c2:	88 30       	cpi	r24, 0x08	; 8
    55c4:	08 f0       	brcs	.+2      	; 0x55c8 <DIO_enu_ToggPin+0x26>
    55c6:	6f c0       	rjmp	.+222    	; 0x56a6 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    55c8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ca:	28 2f       	mov	r18, r24
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	3d 83       	std	Y+5, r19	; 0x05
    55d0:	2c 83       	std	Y+4, r18	; 0x04
    55d2:	8c 81       	ldd	r24, Y+4	; 0x04
    55d4:	9d 81       	ldd	r25, Y+5	; 0x05
    55d6:	81 30       	cpi	r24, 0x01	; 1
    55d8:	91 05       	cpc	r25, r1
    55da:	49 f1       	breq	.+82     	; 0x562e <DIO_enu_ToggPin+0x8c>
    55dc:	2c 81       	ldd	r18, Y+4	; 0x04
    55de:	3d 81       	ldd	r19, Y+5	; 0x05
    55e0:	22 30       	cpi	r18, 0x02	; 2
    55e2:	31 05       	cpc	r19, r1
    55e4:	2c f4       	brge	.+10     	; 0x55f0 <DIO_enu_ToggPin+0x4e>
    55e6:	8c 81       	ldd	r24, Y+4	; 0x04
    55e8:	9d 81       	ldd	r25, Y+5	; 0x05
    55ea:	00 97       	sbiw	r24, 0x00	; 0
    55ec:	61 f0       	breq	.+24     	; 0x5606 <DIO_enu_ToggPin+0x64>
    55ee:	5c c0       	rjmp	.+184    	; 0x56a8 <DIO_enu_ToggPin+0x106>
    55f0:	2c 81       	ldd	r18, Y+4	; 0x04
    55f2:	3d 81       	ldd	r19, Y+5	; 0x05
    55f4:	22 30       	cpi	r18, 0x02	; 2
    55f6:	31 05       	cpc	r19, r1
    55f8:	71 f1       	breq	.+92     	; 0x5656 <DIO_enu_ToggPin+0xb4>
    55fa:	8c 81       	ldd	r24, Y+4	; 0x04
    55fc:	9d 81       	ldd	r25, Y+5	; 0x05
    55fe:	83 30       	cpi	r24, 0x03	; 3
    5600:	91 05       	cpc	r25, r1
    5602:	e9 f1       	breq	.+122    	; 0x567e <DIO_enu_ToggPin+0xdc>
    5604:	51 c0       	rjmp	.+162    	; 0x56a8 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    5606:	ab e3       	ldi	r26, 0x3B	; 59
    5608:	b0 e0       	ldi	r27, 0x00	; 0
    560a:	eb e3       	ldi	r30, 0x3B	; 59
    560c:	f0 e0       	ldi	r31, 0x00	; 0
    560e:	80 81       	ld	r24, Z
    5610:	48 2f       	mov	r20, r24
    5612:	8b 81       	ldd	r24, Y+3	; 0x03
    5614:	28 2f       	mov	r18, r24
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	02 2e       	mov	r0, r18
    561e:	02 c0       	rjmp	.+4      	; 0x5624 <DIO_enu_ToggPin+0x82>
    5620:	88 0f       	add	r24, r24
    5622:	99 1f       	adc	r25, r25
    5624:	0a 94       	dec	r0
    5626:	e2 f7       	brpl	.-8      	; 0x5620 <DIO_enu_ToggPin+0x7e>
    5628:	84 27       	eor	r24, r20
    562a:	8c 93       	st	X, r24
    562c:	3d c0       	rjmp	.+122    	; 0x56a8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    562e:	a8 e3       	ldi	r26, 0x38	; 56
    5630:	b0 e0       	ldi	r27, 0x00	; 0
    5632:	e8 e3       	ldi	r30, 0x38	; 56
    5634:	f0 e0       	ldi	r31, 0x00	; 0
    5636:	80 81       	ld	r24, Z
    5638:	48 2f       	mov	r20, r24
    563a:	8b 81       	ldd	r24, Y+3	; 0x03
    563c:	28 2f       	mov	r18, r24
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	02 2e       	mov	r0, r18
    5646:	02 c0       	rjmp	.+4      	; 0x564c <DIO_enu_ToggPin+0xaa>
    5648:	88 0f       	add	r24, r24
    564a:	99 1f       	adc	r25, r25
    564c:	0a 94       	dec	r0
    564e:	e2 f7       	brpl	.-8      	; 0x5648 <DIO_enu_ToggPin+0xa6>
    5650:	84 27       	eor	r24, r20
    5652:	8c 93       	st	X, r24
    5654:	29 c0       	rjmp	.+82     	; 0x56a8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    5656:	a5 e3       	ldi	r26, 0x35	; 53
    5658:	b0 e0       	ldi	r27, 0x00	; 0
    565a:	e5 e3       	ldi	r30, 0x35	; 53
    565c:	f0 e0       	ldi	r31, 0x00	; 0
    565e:	80 81       	ld	r24, Z
    5660:	48 2f       	mov	r20, r24
    5662:	8b 81       	ldd	r24, Y+3	; 0x03
    5664:	28 2f       	mov	r18, r24
    5666:	30 e0       	ldi	r19, 0x00	; 0
    5668:	81 e0       	ldi	r24, 0x01	; 1
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	02 2e       	mov	r0, r18
    566e:	02 c0       	rjmp	.+4      	; 0x5674 <DIO_enu_ToggPin+0xd2>
    5670:	88 0f       	add	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	0a 94       	dec	r0
    5676:	e2 f7       	brpl	.-8      	; 0x5670 <DIO_enu_ToggPin+0xce>
    5678:	84 27       	eor	r24, r20
    567a:	8c 93       	st	X, r24
    567c:	15 c0       	rjmp	.+42     	; 0x56a8 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    567e:	a2 e3       	ldi	r26, 0x32	; 50
    5680:	b0 e0       	ldi	r27, 0x00	; 0
    5682:	e2 e3       	ldi	r30, 0x32	; 50
    5684:	f0 e0       	ldi	r31, 0x00	; 0
    5686:	80 81       	ld	r24, Z
    5688:	48 2f       	mov	r20, r24
    568a:	8b 81       	ldd	r24, Y+3	; 0x03
    568c:	28 2f       	mov	r18, r24
    568e:	30 e0       	ldi	r19, 0x00	; 0
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	02 2e       	mov	r0, r18
    5696:	02 c0       	rjmp	.+4      	; 0x569c <DIO_enu_ToggPin+0xfa>
    5698:	88 0f       	add	r24, r24
    569a:	99 1f       	adc	r25, r25
    569c:	0a 94       	dec	r0
    569e:	e2 f7       	brpl	.-8      	; 0x5698 <DIO_enu_ToggPin+0xf6>
    56a0:	84 27       	eor	r24, r20
    56a2:	8c 93       	st	X, r24
    56a4:	01 c0       	rjmp	.+2      	; 0x56a8 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    56a6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    56a8:	89 81       	ldd	r24, Y+1	; 0x01


}
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	0f 90       	pop	r0
    56b0:	0f 90       	pop	r0
    56b2:	0f 90       	pop	r0
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	08 95       	ret

000056ba <ADC_enu_Init>:
#include"ADC_Config.h"
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;
ES_t ADC_enu_Init(void){
    56ba:	df 93       	push	r29
    56bc:	cf 93       	push	r28
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    56c2:	a7 e2       	ldi	r26, 0x27	; 39
    56c4:	b0 e0       	ldi	r27, 0x00	; 0
    56c6:	e7 e2       	ldi	r30, 0x27	; 39
    56c8:	f0 e0       	ldi	r31, 0x00	; 0
    56ca:	80 81       	ld	r24, Z
    56cc:	8f 77       	andi	r24, 0x7F	; 127
    56ce:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    56d0:	a7 e2       	ldi	r26, 0x27	; 39
    56d2:	b0 e0       	ldi	r27, 0x00	; 0
    56d4:	e7 e2       	ldi	r30, 0x27	; 39
    56d6:	f0 e0       	ldi	r31, 0x00	; 0
    56d8:	80 81       	ld	r24, Z
    56da:	80 64       	ori	r24, 0x40	; 64
    56dc:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    56de:	a7 e2       	ldi	r26, 0x27	; 39
    56e0:	b0 e0       	ldi	r27, 0x00	; 0
    56e2:	e7 e2       	ldi	r30, 0x27	; 39
    56e4:	f0 e0       	ldi	r31, 0x00	; 0
    56e6:	80 81       	ld	r24, Z
    56e8:	8f 7d       	andi	r24, 0xDF	; 223
    56ea:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == DISABLE_AUTO_TRIGG
    CLR_BIT(ADCSRA_REG,ADATE);
    56ec:	a6 e2       	ldi	r26, 0x26	; 38
    56ee:	b0 e0       	ldi	r27, 0x00	; 0
    56f0:	e6 e2       	ldi	r30, 0x26	; 38
    56f2:	f0 e0       	ldi	r31, 0x00	; 0
    56f4:	80 81       	ld	r24, Z
    56f6:	8f 7d       	andi	r24, 0xDF	; 223
    56f8:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    56fa:	a6 e2       	ldi	r26, 0x26	; 38
    56fc:	b0 e0       	ldi	r27, 0x00	; 0
    56fe:	e6 e2       	ldi	r30, 0x26	; 38
    5700:	f0 e0       	ldi	r31, 0x00	; 0
    5702:	80 81       	ld	r24, Z
    5704:	87 60       	ori	r24, 0x07	; 7
    5706:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    5708:	a6 e2       	ldi	r26, 0x26	; 38
    570a:	b0 e0       	ldi	r27, 0x00	; 0
    570c:	e6 e2       	ldi	r30, 0x26	; 38
    570e:	f0 e0       	ldi	r31, 0x00	; 0
    5710:	80 81       	ld	r24, Z
    5712:	80 68       	ori	r24, 0x80	; 128
    5714:	8c 93       	st	X, r24
    return STATE_OK;
    5716:	81 e0       	ldi	r24, 0x01	; 1
}
    5718:	cf 91       	pop	r28
    571a:	df 91       	pop	r29
    571c:	08 95       	ret

0000571e <ADC_enu_GetDigitalValueSynchNonBlocking>:
ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    571e:	df 93       	push	r29
    5720:	cf 93       	push	r28
    5722:	cd b7       	in	r28, 0x3d	; 61
    5724:	de b7       	in	r29, 0x3e	; 62
    5726:	28 97       	sbiw	r28, 0x08	; 8
    5728:	0f b6       	in	r0, 0x3f	; 63
    572a:	f8 94       	cli
    572c:	de bf       	out	0x3e, r29	; 62
    572e:	0f be       	out	0x3f, r0	; 63
    5730:	cd bf       	out	0x3d, r28	; 61
    5732:	8e 83       	std	Y+6, r24	; 0x06
    5734:	78 87       	std	Y+8, r23	; 0x08
    5736:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    5738:	81 e0       	ldi	r24, 0x01	; 1
    573a:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    573c:	19 82       	std	Y+1, r1	; 0x01
    573e:	1a 82       	std	Y+2, r1	; 0x02
    5740:	1b 82       	std	Y+3, r1	; 0x03
    5742:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    5744:	8e 81       	ldd	r24, Y+6	; 0x06
    5746:	80 32       	cpi	r24, 0x20	; 32
    5748:	08 f0       	brcs	.+2      	; 0x574c <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    574a:	65 c0       	rjmp	.+202    	; 0x5816 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    574c:	8f 81       	ldd	r24, Y+7	; 0x07
    574e:	98 85       	ldd	r25, Y+8	; 0x08
    5750:	00 97       	sbiw	r24, 0x00	; 0
    5752:	09 f4       	brne	.+2      	; 0x5756 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    5754:	60 c0       	rjmp	.+192    	; 0x5816 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    5756:	80 91 b7 00 	lds	r24, 0x00B7
    575a:	88 23       	and	r24, r24
    575c:	09 f0       	breq	.+2      	; 0x5760 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    575e:	5b c0       	rjmp	.+182    	; 0x5816 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    5760:	81 e0       	ldi	r24, 0x01	; 1
    5762:	80 93 b7 00 	sts	0x00B7, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    5766:	a7 e2       	ldi	r26, 0x27	; 39
    5768:	b0 e0       	ldi	r27, 0x00	; 0
    576a:	e7 e2       	ldi	r30, 0x27	; 39
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	80 81       	ld	r24, Z
    5770:	80 7e       	andi	r24, 0xE0	; 224
    5772:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    5774:	a7 e2       	ldi	r26, 0x27	; 39
    5776:	b0 e0       	ldi	r27, 0x00	; 0
    5778:	e7 e2       	ldi	r30, 0x27	; 39
    577a:	f0 e0       	ldi	r31, 0x00	; 0
    577c:	90 81       	ld	r25, Z
    577e:	8e 81       	ldd	r24, Y+6	; 0x06
    5780:	89 2b       	or	r24, r25
    5782:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    5784:	a6 e2       	ldi	r26, 0x26	; 38
    5786:	b0 e0       	ldi	r27, 0x00	; 0
    5788:	e6 e2       	ldi	r30, 0x26	; 38
    578a:	f0 e0       	ldi	r31, 0x00	; 0
    578c:	80 81       	ld	r24, Z
    578e:	80 64       	ori	r24, 0x40	; 64
    5790:	8c 93       	st	X, r24
    5792:	0b c0       	rjmp	.+22     	; 0x57aa <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    5794:	89 81       	ldd	r24, Y+1	; 0x01
    5796:	9a 81       	ldd	r25, Y+2	; 0x02
    5798:	ab 81       	ldd	r26, Y+3	; 0x03
    579a:	bc 81       	ldd	r27, Y+4	; 0x04
    579c:	01 96       	adiw	r24, 0x01	; 1
    579e:	a1 1d       	adc	r26, r1
    57a0:	b1 1d       	adc	r27, r1
    57a2:	89 83       	std	Y+1, r24	; 0x01
    57a4:	9a 83       	std	Y+2, r25	; 0x02
    57a6:	ab 83       	std	Y+3, r26	; 0x03
    57a8:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    57aa:	e6 e2       	ldi	r30, 0x26	; 38
    57ac:	f0 e0       	ldi	r31, 0x00	; 0
    57ae:	80 81       	ld	r24, Z
    57b0:	82 95       	swap	r24
    57b2:	8f 70       	andi	r24, 0x0F	; 15
    57b4:	88 2f       	mov	r24, r24
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	81 70       	andi	r24, 0x01	; 1
    57ba:	90 70       	andi	r25, 0x00	; 0
    57bc:	00 97       	sbiw	r24, 0x00	; 0
    57be:	61 f4       	brne	.+24     	; 0x57d8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    57c0:	89 81       	ldd	r24, Y+1	; 0x01
    57c2:	9a 81       	ldd	r25, Y+2	; 0x02
    57c4:	ab 81       	ldd	r26, Y+3	; 0x03
    57c6:	bc 81       	ldd	r27, Y+4	; 0x04
    57c8:	80 35       	cpi	r24, 0x50	; 80
    57ca:	23 ec       	ldi	r18, 0xC3	; 195
    57cc:	92 07       	cpc	r25, r18
    57ce:	20 e0       	ldi	r18, 0x00	; 0
    57d0:	a2 07       	cpc	r26, r18
    57d2:	20 e0       	ldi	r18, 0x00	; 0
    57d4:	b2 07       	cpc	r27, r18
    57d6:	f0 f2       	brcs	.-68     	; 0x5794 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    57d8:	e6 e2       	ldi	r30, 0x26	; 38
    57da:	f0 e0       	ldi	r31, 0x00	; 0
    57dc:	80 81       	ld	r24, Z
    57de:	82 95       	swap	r24
    57e0:	8f 70       	andi	r24, 0x0F	; 15
    57e2:	88 2f       	mov	r24, r24
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	81 70       	andi	r24, 0x01	; 1
    57e8:	90 70       	andi	r25, 0x00	; 0
    57ea:	88 23       	and	r24, r24
    57ec:	91 f0       	breq	.+36     	; 0x5812 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    57ee:	10 92 b7 00 	sts	0x00B7, r1
            SET_BIT(ADCSRA_REG,ADIF);
    57f2:	a6 e2       	ldi	r26, 0x26	; 38
    57f4:	b0 e0       	ldi	r27, 0x00	; 0
    57f6:	e6 e2       	ldi	r30, 0x26	; 38
    57f8:	f0 e0       	ldi	r31, 0x00	; 0
    57fa:	80 81       	ld	r24, Z
    57fc:	80 61       	ori	r24, 0x10	; 16
    57fe:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    5800:	e4 e2       	ldi	r30, 0x24	; 36
    5802:	f0 e0       	ldi	r31, 0x00	; 0
    5804:	80 81       	ld	r24, Z
    5806:	91 81       	ldd	r25, Z+1	; 0x01
    5808:	ef 81       	ldd	r30, Y+7	; 0x07
    580a:	f8 85       	ldd	r31, Y+8	; 0x08
    580c:	91 83       	std	Z+1, r25	; 0x01
    580e:	80 83       	st	Z, r24
    5810:	03 c0       	rjmp	.+6      	; 0x5818 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    5812:	1d 82       	std	Y+5, r1	; 0x05
    5814:	01 c0       	rjmp	.+2      	; 0x5818 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    5816:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    5818:	8d 81       	ldd	r24, Y+5	; 0x05
}
    581a:	28 96       	adiw	r28, 0x08	; 8
    581c:	0f b6       	in	r0, 0x3f	; 63
    581e:	f8 94       	cli
    5820:	de bf       	out	0x3e, r29	; 62
    5822:	0f be       	out	0x3f, r0	; 63
    5824:	cd bf       	out	0x3d, r28	; 61
    5826:	cf 91       	pop	r28
    5828:	df 91       	pop	r29
    582a:	08 95       	ret

0000582c <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    582c:	df 93       	push	r29
    582e:	cf 93       	push	r28
    5830:	00 d0       	rcall	.+0      	; 0x5832 <ADC_enu_GetDigitalValueASynch+0x6>
    5832:	00 d0       	rcall	.+0      	; 0x5834 <ADC_enu_GetDigitalValueASynch+0x8>
    5834:	cd b7       	in	r28, 0x3d	; 61
    5836:	de b7       	in	r29, 0x3e	; 62
    5838:	8a 83       	std	Y+2, r24	; 0x02
    583a:	7c 83       	std	Y+4, r23	; 0x04
    583c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    5842:	8a 81       	ldd	r24, Y+2	; 0x02
    5844:	80 32       	cpi	r24, 0x20	; 32
    5846:	78 f5       	brcc	.+94     	; 0x58a6 <ADC_enu_GetDigitalValueASynch+0x7a>
    5848:	8b 81       	ldd	r24, Y+3	; 0x03
    584a:	9c 81       	ldd	r25, Y+4	; 0x04
    584c:	00 97       	sbiw	r24, 0x00	; 0
    584e:	59 f1       	breq	.+86     	; 0x58a6 <ADC_enu_GetDigitalValueASynch+0x7a>
    5850:	80 91 b7 00 	lds	r24, 0x00B7
    5854:	88 23       	and	r24, r24
    5856:	39 f5       	brne	.+78     	; 0x58a6 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    5858:	81 e0       	ldi	r24, 0x01	; 1
    585a:	80 93 b7 00 	sts	0x00B7, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    585e:	8b 81       	ldd	r24, Y+3	; 0x03
    5860:	9c 81       	ldd	r25, Y+4	; 0x04
    5862:	90 93 b6 00 	sts	0x00B6, r25
    5866:	80 93 b5 00 	sts	0x00B5, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    586a:	a6 e2       	ldi	r26, 0x26	; 38
    586c:	b0 e0       	ldi	r27, 0x00	; 0
    586e:	e6 e2       	ldi	r30, 0x26	; 38
    5870:	f0 e0       	ldi	r31, 0x00	; 0
    5872:	80 81       	ld	r24, Z
    5874:	88 60       	ori	r24, 0x08	; 8
    5876:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    5878:	a7 e2       	ldi	r26, 0x27	; 39
    587a:	b0 e0       	ldi	r27, 0x00	; 0
    587c:	e7 e2       	ldi	r30, 0x27	; 39
    587e:	f0 e0       	ldi	r31, 0x00	; 0
    5880:	80 81       	ld	r24, Z
    5882:	80 7e       	andi	r24, 0xE0	; 224
    5884:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    5886:	a7 e2       	ldi	r26, 0x27	; 39
    5888:	b0 e0       	ldi	r27, 0x00	; 0
    588a:	e7 e2       	ldi	r30, 0x27	; 39
    588c:	f0 e0       	ldi	r31, 0x00	; 0
    588e:	90 81       	ld	r25, Z
    5890:	8a 81       	ldd	r24, Y+2	; 0x02
    5892:	89 2b       	or	r24, r25
    5894:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    5896:	a6 e2       	ldi	r26, 0x26	; 38
    5898:	b0 e0       	ldi	r27, 0x00	; 0
    589a:	e6 e2       	ldi	r30, 0x26	; 38
    589c:	f0 e0       	ldi	r31, 0x00	; 0
    589e:	80 81       	ld	r24, Z
    58a0:	80 64       	ori	r24, 0x40	; 64
    58a2:	8c 93       	st	X, r24
    58a4:	01 c0       	rjmp	.+2      	; 0x58a8 <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    58a6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    58a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    58aa:	0f 90       	pop	r0
    58ac:	0f 90       	pop	r0
    58ae:	0f 90       	pop	r0
    58b0:	0f 90       	pop	r0
    58b2:	cf 91       	pop	r28
    58b4:	df 91       	pop	r29
    58b6:	08 95       	ret

000058b8 <__vector_16>:
/***************ISR Function OF ADC*************/
ISR(ADC){
    58b8:	1f 92       	push	r1
    58ba:	0f 92       	push	r0
    58bc:	0f b6       	in	r0, 0x3f	; 63
    58be:	0f 92       	push	r0
    58c0:	11 24       	eor	r1, r1
    58c2:	2f 93       	push	r18
    58c4:	3f 93       	push	r19
    58c6:	4f 93       	push	r20
    58c8:	5f 93       	push	r21
    58ca:	6f 93       	push	r22
    58cc:	7f 93       	push	r23
    58ce:	8f 93       	push	r24
    58d0:	9f 93       	push	r25
    58d2:	af 93       	push	r26
    58d4:	bf 93       	push	r27
    58d6:	ef 93       	push	r30
    58d8:	ff 93       	push	r31
    58da:	df 93       	push	r29
    58dc:	cf 93       	push	r28
    58de:	cd b7       	in	r28, 0x3d	; 61
    58e0:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    58e2:	80 91 b5 00 	lds	r24, 0x00B5
    58e6:	90 91 b6 00 	lds	r25, 0x00B6
    58ea:	00 97       	sbiw	r24, 0x00	; 0
    58ec:	99 f0       	breq	.+38     	; 0x5914 <__vector_16+0x5c>
        //Disable Interrupt & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    58ee:	a6 e2       	ldi	r26, 0x26	; 38
    58f0:	b0 e0       	ldi	r27, 0x00	; 0
    58f2:	e6 e2       	ldi	r30, 0x26	; 38
    58f4:	f0 e0       	ldi	r31, 0x00	; 0
    58f6:	80 81       	ld	r24, Z
    58f8:	87 7f       	andi	r24, 0xF7	; 247
    58fa:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    58fc:	10 92 b7 00 	sts	0x00B7, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    5900:	20 91 b5 00 	lds	r18, 0x00B5
    5904:	30 91 b6 00 	lds	r19, 0x00B6
    5908:	e4 e2       	ldi	r30, 0x24	; 36
    590a:	f0 e0       	ldi	r31, 0x00	; 0
    590c:	80 81       	ld	r24, Z
    590e:	91 81       	ldd	r25, Z+1	; 0x01
    5910:	f9 01       	movw	r30, r18
    5912:	09 95       	icall
    }
    5914:	cf 91       	pop	r28
    5916:	df 91       	pop	r29
    5918:	ff 91       	pop	r31
    591a:	ef 91       	pop	r30
    591c:	bf 91       	pop	r27
    591e:	af 91       	pop	r26
    5920:	9f 91       	pop	r25
    5922:	8f 91       	pop	r24
    5924:	7f 91       	pop	r23
    5926:	6f 91       	pop	r22
    5928:	5f 91       	pop	r21
    592a:	4f 91       	pop	r20
    592c:	3f 91       	pop	r19
    592e:	2f 91       	pop	r18
    5930:	0f 90       	pop	r0
    5932:	0f be       	out	0x3f, r0	; 63
    5934:	0f 90       	pop	r0
    5936:	1f 90       	pop	r1
    5938:	18 95       	reti

0000593a <__mulsi3>:
    593a:	62 9f       	mul	r22, r18
    593c:	d0 01       	movw	r26, r0
    593e:	73 9f       	mul	r23, r19
    5940:	f0 01       	movw	r30, r0
    5942:	82 9f       	mul	r24, r18
    5944:	e0 0d       	add	r30, r0
    5946:	f1 1d       	adc	r31, r1
    5948:	64 9f       	mul	r22, r20
    594a:	e0 0d       	add	r30, r0
    594c:	f1 1d       	adc	r31, r1
    594e:	92 9f       	mul	r25, r18
    5950:	f0 0d       	add	r31, r0
    5952:	83 9f       	mul	r24, r19
    5954:	f0 0d       	add	r31, r0
    5956:	74 9f       	mul	r23, r20
    5958:	f0 0d       	add	r31, r0
    595a:	65 9f       	mul	r22, r21
    595c:	f0 0d       	add	r31, r0
    595e:	99 27       	eor	r25, r25
    5960:	72 9f       	mul	r23, r18
    5962:	b0 0d       	add	r27, r0
    5964:	e1 1d       	adc	r30, r1
    5966:	f9 1f       	adc	r31, r25
    5968:	63 9f       	mul	r22, r19
    596a:	b0 0d       	add	r27, r0
    596c:	e1 1d       	adc	r30, r1
    596e:	f9 1f       	adc	r31, r25
    5970:	bd 01       	movw	r22, r26
    5972:	cf 01       	movw	r24, r30
    5974:	11 24       	eor	r1, r1
    5976:	08 95       	ret

00005978 <__udivmodhi4>:
    5978:	aa 1b       	sub	r26, r26
    597a:	bb 1b       	sub	r27, r27
    597c:	51 e1       	ldi	r21, 0x11	; 17
    597e:	07 c0       	rjmp	.+14     	; 0x598e <__udivmodhi4_ep>

00005980 <__udivmodhi4_loop>:
    5980:	aa 1f       	adc	r26, r26
    5982:	bb 1f       	adc	r27, r27
    5984:	a6 17       	cp	r26, r22
    5986:	b7 07       	cpc	r27, r23
    5988:	10 f0       	brcs	.+4      	; 0x598e <__udivmodhi4_ep>
    598a:	a6 1b       	sub	r26, r22
    598c:	b7 0b       	sbc	r27, r23

0000598e <__udivmodhi4_ep>:
    598e:	88 1f       	adc	r24, r24
    5990:	99 1f       	adc	r25, r25
    5992:	5a 95       	dec	r21
    5994:	a9 f7       	brne	.-22     	; 0x5980 <__udivmodhi4_loop>
    5996:	80 95       	com	r24
    5998:	90 95       	com	r25
    599a:	bc 01       	movw	r22, r24
    599c:	cd 01       	movw	r24, r26
    599e:	08 95       	ret

000059a0 <__udivmodsi4>:
    59a0:	a1 e2       	ldi	r26, 0x21	; 33
    59a2:	1a 2e       	mov	r1, r26
    59a4:	aa 1b       	sub	r26, r26
    59a6:	bb 1b       	sub	r27, r27
    59a8:	fd 01       	movw	r30, r26
    59aa:	0d c0       	rjmp	.+26     	; 0x59c6 <__udivmodsi4_ep>

000059ac <__udivmodsi4_loop>:
    59ac:	aa 1f       	adc	r26, r26
    59ae:	bb 1f       	adc	r27, r27
    59b0:	ee 1f       	adc	r30, r30
    59b2:	ff 1f       	adc	r31, r31
    59b4:	a2 17       	cp	r26, r18
    59b6:	b3 07       	cpc	r27, r19
    59b8:	e4 07       	cpc	r30, r20
    59ba:	f5 07       	cpc	r31, r21
    59bc:	20 f0       	brcs	.+8      	; 0x59c6 <__udivmodsi4_ep>
    59be:	a2 1b       	sub	r26, r18
    59c0:	b3 0b       	sbc	r27, r19
    59c2:	e4 0b       	sbc	r30, r20
    59c4:	f5 0b       	sbc	r31, r21

000059c6 <__udivmodsi4_ep>:
    59c6:	66 1f       	adc	r22, r22
    59c8:	77 1f       	adc	r23, r23
    59ca:	88 1f       	adc	r24, r24
    59cc:	99 1f       	adc	r25, r25
    59ce:	1a 94       	dec	r1
    59d0:	69 f7       	brne	.-38     	; 0x59ac <__udivmodsi4_loop>
    59d2:	60 95       	com	r22
    59d4:	70 95       	com	r23
    59d6:	80 95       	com	r24
    59d8:	90 95       	com	r25
    59da:	9b 01       	movw	r18, r22
    59dc:	ac 01       	movw	r20, r24
    59de:	bd 01       	movw	r22, r26
    59e0:	cf 01       	movw	r24, r30
    59e2:	08 95       	ret

000059e4 <__divmodsi4>:
    59e4:	97 fb       	bst	r25, 7
    59e6:	09 2e       	mov	r0, r25
    59e8:	05 26       	eor	r0, r21
    59ea:	0e d0       	rcall	.+28     	; 0x5a08 <__divmodsi4_neg1>
    59ec:	57 fd       	sbrc	r21, 7
    59ee:	04 d0       	rcall	.+8      	; 0x59f8 <__divmodsi4_neg2>
    59f0:	d7 df       	rcall	.-82     	; 0x59a0 <__udivmodsi4>
    59f2:	0a d0       	rcall	.+20     	; 0x5a08 <__divmodsi4_neg1>
    59f4:	00 1c       	adc	r0, r0
    59f6:	38 f4       	brcc	.+14     	; 0x5a06 <__divmodsi4_exit>

000059f8 <__divmodsi4_neg2>:
    59f8:	50 95       	com	r21
    59fa:	40 95       	com	r20
    59fc:	30 95       	com	r19
    59fe:	21 95       	neg	r18
    5a00:	3f 4f       	sbci	r19, 0xFF	; 255
    5a02:	4f 4f       	sbci	r20, 0xFF	; 255
    5a04:	5f 4f       	sbci	r21, 0xFF	; 255

00005a06 <__divmodsi4_exit>:
    5a06:	08 95       	ret

00005a08 <__divmodsi4_neg1>:
    5a08:	f6 f7       	brtc	.-4      	; 0x5a06 <__divmodsi4_exit>
    5a0a:	90 95       	com	r25
    5a0c:	80 95       	com	r24
    5a0e:	70 95       	com	r23
    5a10:	61 95       	neg	r22
    5a12:	7f 4f       	sbci	r23, 0xFF	; 255
    5a14:	8f 4f       	sbci	r24, 0xFF	; 255
    5a16:	9f 4f       	sbci	r25, 0xFF	; 255
    5a18:	08 95       	ret

00005a1a <__prologue_saves__>:
    5a1a:	2f 92       	push	r2
    5a1c:	3f 92       	push	r3
    5a1e:	4f 92       	push	r4
    5a20:	5f 92       	push	r5
    5a22:	6f 92       	push	r6
    5a24:	7f 92       	push	r7
    5a26:	8f 92       	push	r8
    5a28:	9f 92       	push	r9
    5a2a:	af 92       	push	r10
    5a2c:	bf 92       	push	r11
    5a2e:	cf 92       	push	r12
    5a30:	df 92       	push	r13
    5a32:	ef 92       	push	r14
    5a34:	ff 92       	push	r15
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	cd b7       	in	r28, 0x3d	; 61
    5a40:	de b7       	in	r29, 0x3e	; 62
    5a42:	ca 1b       	sub	r28, r26
    5a44:	db 0b       	sbc	r29, r27
    5a46:	0f b6       	in	r0, 0x3f	; 63
    5a48:	f8 94       	cli
    5a4a:	de bf       	out	0x3e, r29	; 62
    5a4c:	0f be       	out	0x3f, r0	; 63
    5a4e:	cd bf       	out	0x3d, r28	; 61
    5a50:	09 94       	ijmp

00005a52 <__epilogue_restores__>:
    5a52:	2a 88       	ldd	r2, Y+18	; 0x12
    5a54:	39 88       	ldd	r3, Y+17	; 0x11
    5a56:	48 88       	ldd	r4, Y+16	; 0x10
    5a58:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a60:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a62:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a64:	b9 84       	ldd	r11, Y+9	; 0x09
    5a66:	c8 84       	ldd	r12, Y+8	; 0x08
    5a68:	df 80       	ldd	r13, Y+7	; 0x07
    5a6a:	ee 80       	ldd	r14, Y+6	; 0x06
    5a6c:	fd 80       	ldd	r15, Y+5	; 0x05
    5a6e:	0c 81       	ldd	r16, Y+4	; 0x04
    5a70:	1b 81       	ldd	r17, Y+3	; 0x03
    5a72:	aa 81       	ldd	r26, Y+2	; 0x02
    5a74:	b9 81       	ldd	r27, Y+1	; 0x01
    5a76:	ce 0f       	add	r28, r30
    5a78:	d1 1d       	adc	r29, r1
    5a7a:	0f b6       	in	r0, 0x3f	; 63
    5a7c:	f8 94       	cli
    5a7e:	de bf       	out	0x3e, r29	; 62
    5a80:	0f be       	out	0x3f, r0	; 63
    5a82:	cd bf       	out	0x3d, r28	; 61
    5a84:	ed 01       	movw	r28, r26
    5a86:	08 95       	ret

00005a88 <_exit>:
    5a88:	f8 94       	cli

00005a8a <__stop_program>:
    5a8a:	ff cf       	rjmp	.-2      	; 0x5a8a <__stop_program>
