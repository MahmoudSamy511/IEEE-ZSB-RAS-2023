
Timer1_Test_Servo_WithLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000035f0  00003684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800092  00800092  000036b6  2**0
                  ALLOC
  3 .stab         00003570  00000000  00000000  000036b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000167f  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000082a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008407  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a5db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c660  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000caa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__vector_1>
       8:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__vector_2>
       c:	0c 94 b3 14 	jmp	0x2966	; 0x2966 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__vector_10>
      2c:	0c 94 43 12 	jmp	0x2486	; 0x2486 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 f6 1a 	jmp	0x35ec	; 0x35ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bf 1a 	jmp	0x357e	; 0x357e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 db 1a 	jmp	0x35b6	; 0x35b6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 1a 	jmp	0x358e	; 0x358e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e3 1a 	jmp	0x35c6	; 0x35c6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#include"../1-MCAL/ADC/ADC_Interface.h"

#define MAX_ANGLE   		180UL
#define MAX_BRIGHTNESS   	255UL

int main(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <main+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <main+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <main+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	DIO_enu_SetPinDirection(DIO_U8_PORTB, DIO_U8_PIN3, DIO_U8_OUTPUT);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	63 e0       	ldi	r22, 0x03	; 3
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN5, DIO_U8_OUTPUT);
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	65 e0       	ldi	r22, 0x05	; 5
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
	Timers_enu_Timer0Init();
     cc0:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <Timers_enu_Timer0Init>
	Timers_enu_Timer1Init();
     cc4:	0e 94 0b 11 	call	0x2216	; 0x2216 <Timers_enu_Timer1Init>
	ADC_enu_Init();
     cc8:	0e 94 3e 19 	call	0x327c	; 0x327c <ADC_enu_Init>
	while(1){
		u16 digitalValue0 = 0,digitalValue1=0;
     ccc:	1c 82       	std	Y+4, r1	; 0x04
     cce:	1b 82       	std	Y+3, r1	; 0x03
     cd0:	1e 82       	std	Y+6, r1	; 0x06
     cd2:	1d 82       	std	Y+5, r1	; 0x05
		u8 ledBrightness =0,servoAngle =0;
     cd4:	1a 82       	std	Y+2, r1	; 0x02
     cd6:	19 82       	std	Y+1, r1	; 0x01
		ADC_enu_GetDigitalValueSynchNonBlocking(ADC_U8_CHANNEL0, &digitalValue0);
     cd8:	9e 01       	movw	r18, r28
     cda:	2d 5f       	subi	r18, 0xFD	; 253
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	b9 01       	movw	r22, r18
     ce2:	0e 94 70 19 	call	0x32e0	; 0x32e0 <ADC_enu_GetDigitalValueSynchNonBlocking>
		ADC_enu_GetDigitalValueSynchNonBlocking(ADC_U8_CHANNEL1, &digitalValue1);
     ce6:	9e 01       	movw	r18, r28
     ce8:	2b 5f       	subi	r18, 0xFB	; 251
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	b9 01       	movw	r22, r18
     cf0:	0e 94 70 19 	call	0x32e0	; 0x32e0 <ADC_enu_GetDigitalValueSynchNonBlocking>
		ledBrightness = (digitalValue0*MAX_BRIGHTNESS)/1023;
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	cc 01       	movw	r24, r24
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	2f ef       	ldi	r18, 0xFF	; 255
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	2f ef       	ldi	r18, 0xFF	; 255
     d14:	33 e0       	ldi	r19, 0x03	; 3
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
     d22:	da 01       	movw	r26, r20
     d24:	c9 01       	movw	r24, r18
     d26:	8a 83       	std	Y+2, r24	; 0x02
		servoAngle =(digitalValue1*MAX_ANGLE)/1023;
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	9e 81       	ldd	r25, Y+6	; 0x06
     d2c:	cc 01       	movw	r24, r24
     d2e:	a0 e0       	ldi	r26, 0x00	; 0
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	24 eb       	ldi	r18, 0xB4	; 180
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	2f ef       	ldi	r18, 0xFF	; 255
     d48:	33 e0       	ldi	r19, 0x03	; 3
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
     d56:	da 01       	movw	r26, r20
     d58:	c9 01       	movw	r24, r18
     d5a:	89 83       	std	Y+1, r24	; 0x01
		Timers_enu_Timer0SetCompareMatchValue(ledBrightness);
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <Timers_enu_Timer0SetCompareMatchValue>
		Timers_enu_SetServoAngle(servoAngle);
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	0e 94 4b 11 	call	0x2296	; 0x2296 <Timers_enu_SetServoAngle>
     d68:	b1 cf       	rjmp	.-158    	; 0xccc <main+0x2e>

00000d6a <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
     d6a:	df 93       	push	r29
     d6c:	cf 93       	push	r28
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <sevenSeg_enu_displayNum+0x6>
     d70:	0f 92       	push	r0
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	66 e0       	ldi	r22, 0x06	; 6
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	8a 30       	cpi	r24, 0x0A	; 10
     d92:	78 f5       	brcc	.+94     	; 0xdf2 <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
     d94:	82 e0       	ldi	r24, 0x02	; 2
     d96:	66 e0       	ldi	r22, 0x06	; 6
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
     d9e:	19 82       	std	Y+1, r1	; 0x01
     da0:	24 c0       	rjmp	.+72     	; 0xdea <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	ee 58       	subi	r30, 0x8E	; 142
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	40 81       	ld	r20, Z
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fc 01       	movw	r30, r24
     db8:	e8 59       	subi	r30, 0x98	; 152
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	80 81       	ld	r24, Z
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	b9 01       	movw	r22, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <sevenSeg_enu_displayNum+0x66>
     dcc:	75 95       	asr	r23
     dce:	67 95       	ror	r22
     dd0:	8a 95       	dec	r24
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <sevenSeg_enu_displayNum+0x62>
     dd4:	cb 01       	movw	r24, r22
     dd6:	98 2f       	mov	r25, r24
     dd8:	91 70       	andi	r25, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	64 2f       	mov	r22, r20
     dde:	49 2f       	mov	r20, r25
     de0:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	89 83       	std	Y+1, r24	; 0x01
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	87 30       	cpi	r24, 0x07	; 7
     dee:	c8 f2       	brcs	.-78     	; 0xda2 <sevenSeg_enu_displayNum+0x38>
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
     df2:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	e1 97       	sbiw	r28, 0x31	; 49
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
     e16:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
     e2c:	89 a9       	ldd	r24, Y+49	; 0x31
     e2e:	98 2f       	mov	r25, r24
     e30:	99 1f       	adc	r25, r25
     e32:	99 27       	eor	r25, r25
     e34:	99 1f       	adc	r25, r25
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	67 e0       	ldi	r22, 0x07	; 7
     e3a:	49 2f       	mov	r20, r25
     e3c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
     e40:	89 a9       	ldd	r24, Y+49	; 0x31
     e42:	82 95       	swap	r24
     e44:	86 95       	lsr	r24
     e46:	86 95       	lsr	r24
     e48:	83 70       	andi	r24, 0x03	; 3
     e4a:	98 2f       	mov	r25, r24
     e4c:	91 70       	andi	r25, 0x01	; 1
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	66 e0       	ldi	r22, 0x06	; 6
     e52:	49 2f       	mov	r20, r25
     e54:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
     e58:	89 a9       	ldd	r24, Y+49	; 0x31
     e5a:	82 95       	swap	r24
     e5c:	86 95       	lsr	r24
     e5e:	87 70       	andi	r24, 0x07	; 7
     e60:	98 2f       	mov	r25, r24
     e62:	91 70       	andi	r25, 0x01	; 1
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	65 e0       	ldi	r22, 0x05	; 5
     e68:	49 2f       	mov	r20, r25
     e6a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
     e6e:	89 a9       	ldd	r24, Y+49	; 0x31
     e70:	82 95       	swap	r24
     e72:	8f 70       	andi	r24, 0x0F	; 15
     e74:	98 2f       	mov	r25, r24
     e76:	91 70       	andi	r25, 0x01	; 1
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	49 2f       	mov	r20, r25
     e7e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	62 e0       	ldi	r22, 0x02	; 2
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e8       	ldi	r26, 0x80	; 128
     e92:	bf e3       	ldi	r27, 0x3F	; 63
     e94:	8d a7       	std	Y+45, r24	; 0x2d
     e96:	9e a7       	std	Y+46, r25	; 0x2e
     e98:	af a7       	std	Y+47, r26	; 0x2f
     e9a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e9c:	6d a5       	ldd	r22, Y+45	; 0x2d
     e9e:	7e a5       	ldd	r23, Y+46	; 0x2e
     ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea2:	98 a9       	ldd	r25, Y+48	; 0x30
     ea4:	2b ea       	ldi	r18, 0xAB	; 171
     ea6:	3a ea       	ldi	r19, 0xAA	; 170
     ea8:	4a ea       	ldi	r20, 0xAA	; 170
     eaa:	50 e4       	ldi	r21, 0x40	; 64
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	89 a7       	std	Y+41, r24	; 0x29
     eb6:	9a a7       	std	Y+42, r25	; 0x2a
     eb8:	ab a7       	std	Y+43, r26	; 0x2b
     eba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ebc:	69 a5       	ldd	r22, Y+41	; 0x29
     ebe:	7a a5       	ldd	r23, Y+42	; 0x2a
     ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	1c f4       	brge	.+6      	; 0xeda <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	88 a7       	std	Y+40, r24	; 0x28
     ed8:	91 c0       	rjmp	.+290    	; 0xffc <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
     eda:	69 a5       	ldd	r22, Y+41	; 0x29
     edc:	7a a5       	ldd	r23, Y+42	; 0x2a
     ede:	8b a5       	ldd	r24, Y+43	; 0x2b
     ee0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	53 e4       	ldi	r21, 0x43	; 67
     eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	0c f0       	brlt	.+2      	; 0xef4 <LCD_enu_SendCmnd+0xf2>
     ef2:	7b c0       	rjmp	.+246    	; 0xfea <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
     ef4:	6d a5       	ldd	r22, Y+45	; 0x2d
     ef6:	7e a5       	ldd	r23, Y+46	; 0x2e
     ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
     efa:	98 a9       	ldd	r25, Y+48	; 0x30
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8c a3       	std	Y+36, r24	; 0x24
     f0e:	9d a3       	std	Y+37, r25	; 0x25
     f10:	ae a3       	std	Y+38, r26	; 0x26
     f12:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6c a1       	ldd	r22, Y+36	; 0x24
     f16:	7d a1       	ldd	r23, Y+37	; 0x25
     f18:	8e a1       	ldd	r24, Y+38	; 0x26
     f1a:	9f a1       	ldd	r25, Y+39	; 0x27
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a e7       	ldi	r20, 0x7A	; 122
     f22:	55 e4       	ldi	r21, 0x45	; 69
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	88 a3       	std	Y+32, r24	; 0x20
     f2e:	99 a3       	std	Y+33, r25	; 0x21
     f30:	aa a3       	std	Y+34, r26	; 0x22
     f32:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f34:	68 a1       	ldd	r22, Y+32	; 0x20
     f36:	79 a1       	ldd	r23, Y+33	; 0x21
     f38:	8a a1       	ldd	r24, Y+34	; 0x22
     f3a:	9b a1       	ldd	r25, Y+35	; 0x23
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9f 8f       	std	Y+31, r25	; 0x1f
     f52:	8e 8f       	std	Y+30, r24	; 0x1e
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
     f56:	68 a1       	ldd	r22, Y+32	; 0x20
     f58:	79 a1       	ldd	r23, Y+33	; 0x21
     f5a:	8a a1       	ldd	r24, Y+34	; 0x22
     f5c:	9b a1       	ldd	r25, Y+35	; 0x23
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6c a1       	ldd	r22, Y+36	; 0x24
     f70:	7d a1       	ldd	r23, Y+37	; 0x25
     f72:	8e a1       	ldd	r24, Y+38	; 0x26
     f74:	9f a1       	ldd	r25, Y+39	; 0x27
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9f 8f       	std	Y+31, r25	; 0x1f
     f94:	8e 8f       	std	Y+30, r24	; 0x1e
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <LCD_enu_SendCmnd+0x1b4>
     f98:	80 e9       	ldi	r24, 0x90	; 144
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	9d 8f       	std	Y+29, r25	; 0x1d
     f9e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fa2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <LCD_enu_SendCmnd+0x1a2>
     fa8:	9d 8f       	std	Y+29, r25	; 0x1d
     faa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fae:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9f 8f       	std	Y+31, r25	; 0x1f
     fb4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fb8:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <LCD_enu_SendCmnd+0x196>
     fbe:	24 c0       	rjmp	.+72     	; 0x1008 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	68 a1       	ldd	r22, Y+32	; 0x20
     fc2:	79 a1       	ldd	r23, Y+33	; 0x21
     fc4:	8a a1       	ldd	r24, Y+34	; 0x22
     fc6:	9b a1       	ldd	r25, Y+35	; 0x23
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9f 8f       	std	Y+31, r25	; 0x1f
     fd2:	8e 8f       	std	Y+30, r24	; 0x1e
     fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fd8:	9b 8f       	std	Y+27, r25	; 0x1b
     fda:	8a 8f       	std	Y+26, r24	; 0x1a
     fdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fde:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <LCD_enu_SendCmnd+0x1de>
     fe4:	9b 8f       	std	Y+27, r25	; 0x1b
     fe6:	8a 8f       	std	Y+26, r24	; 0x1a
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fea:	69 a5       	ldd	r22, Y+41	; 0x29
     fec:	7a a5       	ldd	r23, Y+42	; 0x2a
     fee:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	88 a7       	std	Y+40, r24	; 0x28
     ffc:	88 a5       	ldd	r24, Y+40	; 0x28
     ffe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1000:	89 8d       	ldd	r24, Y+25	; 0x19
    1002:	8a 95       	dec	r24
    1004:	f1 f7       	brne	.-4      	; 0x1002 <LCD_enu_SendCmnd+0x200>
    1006:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    1012:	89 a9       	ldd	r24, Y+49	; 0x31
    1014:	86 95       	lsr	r24
    1016:	86 95       	lsr	r24
    1018:	86 95       	lsr	r24
    101a:	98 2f       	mov	r25, r24
    101c:	91 70       	andi	r25, 0x01	; 1
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	67 e0       	ldi	r22, 0x07	; 7
    1022:	49 2f       	mov	r20, r25
    1024:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    1028:	89 a9       	ldd	r24, Y+49	; 0x31
    102a:	86 95       	lsr	r24
    102c:	86 95       	lsr	r24
    102e:	98 2f       	mov	r25, r24
    1030:	91 70       	andi	r25, 0x01	; 1
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	66 e0       	ldi	r22, 0x06	; 6
    1036:	49 2f       	mov	r20, r25
    1038:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    103c:	89 a9       	ldd	r24, Y+49	; 0x31
    103e:	86 95       	lsr	r24
    1040:	98 2f       	mov	r25, r24
    1042:	91 70       	andi	r25, 0x01	; 1
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	65 e0       	ldi	r22, 0x05	; 5
    1048:	49 2f       	mov	r20, r25
    104a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    104e:	89 a9       	ldd	r24, Y+49	; 0x31
    1050:	98 2f       	mov	r25, r24
    1052:	91 70       	andi	r25, 0x01	; 1
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	64 e0       	ldi	r22, 0x04	; 4
    1058:	49 2f       	mov	r20, r25
    105a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	62 e0       	ldi	r22, 0x02	; 2
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e8       	ldi	r26, 0x80	; 128
    106e:	bf e3       	ldi	r27, 0x3F	; 63
    1070:	8d 8b       	std	Y+21, r24	; 0x15
    1072:	9e 8b       	std	Y+22, r25	; 0x16
    1074:	af 8b       	std	Y+23, r26	; 0x17
    1076:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1078:	6d 89       	ldd	r22, Y+21	; 0x15
    107a:	7e 89       	ldd	r23, Y+22	; 0x16
    107c:	8f 89       	ldd	r24, Y+23	; 0x17
    107e:	98 8d       	ldd	r25, Y+24	; 0x18
    1080:	2b ea       	ldi	r18, 0xAB	; 171
    1082:	3a ea       	ldi	r19, 0xAA	; 170
    1084:	4a ea       	ldi	r20, 0xAA	; 170
    1086:	50 e4       	ldi	r21, 0x40	; 64
    1088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	89 8b       	std	Y+17, r24	; 0x11
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	ab 8b       	std	Y+19, r26	; 0x13
    1096:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1098:	69 89       	ldd	r22, Y+17	; 0x11
    109a:	7a 89       	ldd	r23, Y+18	; 0x12
    109c:	8b 89       	ldd	r24, Y+19	; 0x13
    109e:	9c 89       	ldd	r25, Y+20	; 0x14
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e8       	ldi	r20, 0x80	; 128
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10ac:	88 23       	and	r24, r24
    10ae:	1c f4       	brge	.+6      	; 0x10b6 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	88 8b       	std	Y+16, r24	; 0x10
    10b4:	91 c0       	rjmp	.+290    	; 0x11d8 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    10b6:	69 89       	ldd	r22, Y+17	; 0x11
    10b8:	7a 89       	ldd	r23, Y+18	; 0x12
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	4f e7       	ldi	r20, 0x7F	; 127
    10c4:	53 e4       	ldi	r21, 0x43	; 67
    10c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ca:	18 16       	cp	r1, r24
    10cc:	0c f0       	brlt	.+2      	; 0x10d0 <LCD_enu_SendCmnd+0x2ce>
    10ce:	7b c0       	rjmp	.+246    	; 0x11c6 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    10d0:	6d 89       	ldd	r22, Y+21	; 0x15
    10d2:	7e 89       	ldd	r23, Y+22	; 0x16
    10d4:	8f 89       	ldd	r24, Y+23	; 0x17
    10d6:	98 8d       	ldd	r25, Y+24	; 0x18
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	4a e7       	ldi	r20, 0x7A	; 122
    10de:	54 e4       	ldi	r21, 0x44	; 68
    10e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8c 87       	std	Y+12, r24	; 0x0c
    10ea:	9d 87       	std	Y+13, r25	; 0x0d
    10ec:	ae 87       	std	Y+14, r26	; 0x0e
    10ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    10f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    10f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	4a e7       	ldi	r20, 0x7A	; 122
    10fe:	55 e4       	ldi	r21, 0x45	; 69
    1100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	88 87       	std	Y+8, r24	; 0x08
    110a:	99 87       	std	Y+9, r25	; 0x09
    110c:	aa 87       	std	Y+10, r26	; 0x0a
    110e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1110:	68 85       	ldd	r22, Y+8	; 0x08
    1112:	79 85       	ldd	r23, Y+9	; 0x09
    1114:	8a 85       	ldd	r24, Y+10	; 0x0a
    1116:	9b 85       	ldd	r25, Y+11	; 0x0b
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1124:	88 23       	and	r24, r24
    1126:	2c f4       	brge	.+10     	; 0x1132 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9f 83       	std	Y+7, r25	; 0x07
    112e:	8e 83       	std	Y+6, r24	; 0x06
    1130:	3f c0       	rjmp	.+126    	; 0x11b0 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1132:	68 85       	ldd	r22, Y+8	; 0x08
    1134:	79 85       	ldd	r23, Y+9	; 0x09
    1136:	8a 85       	ldd	r24, Y+10	; 0x0a
    1138:	9b 85       	ldd	r25, Y+11	; 0x0b
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	3f ef       	ldi	r19, 0xFF	; 255
    113e:	4f e7       	ldi	r20, 0x7F	; 127
    1140:	57 e4       	ldi	r21, 0x47	; 71
    1142:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1146:	18 16       	cp	r1, r24
    1148:	4c f5       	brge	.+82     	; 0x119c <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114a:	6c 85       	ldd	r22, Y+12	; 0x0c
    114c:	7d 85       	ldd	r23, Y+13	; 0x0d
    114e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1150:	9f 85       	ldd	r25, Y+15	; 0x0f
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e2       	ldi	r20, 0x20	; 32
    1158:	51 e4       	ldi	r21, 0x41	; 65
    115a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	9f 83       	std	Y+7, r25	; 0x07
    1170:	8e 83       	std	Y+6, r24	; 0x06
    1172:	0f c0       	rjmp	.+30     	; 0x1192 <LCD_enu_SendCmnd+0x390>
    1174:	80 e9       	ldi	r24, 0x90	; 144
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	9d 83       	std	Y+5, r25	; 0x05
    117a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <LCD_enu_SendCmnd+0x37e>
    1184:	9d 83       	std	Y+5, r25	; 0x05
    1186:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1188:	8e 81       	ldd	r24, Y+6	; 0x06
    118a:	9f 81       	ldd	r25, Y+7	; 0x07
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9f 83       	std	Y+7, r25	; 0x07
    1190:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1192:	8e 81       	ldd	r24, Y+6	; 0x06
    1194:	9f 81       	ldd	r25, Y+7	; 0x07
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	69 f7       	brne	.-38     	; 0x1174 <LCD_enu_SendCmnd+0x372>
    119a:	24 c0       	rjmp	.+72     	; 0x11e4 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    119c:	68 85       	ldd	r22, Y+8	; 0x08
    119e:	79 85       	ldd	r23, Y+9	; 0x09
    11a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    11a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    11a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	9f 83       	std	Y+7, r25	; 0x07
    11ae:	8e 83       	std	Y+6, r24	; 0x06
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	9f 81       	ldd	r25, Y+7	; 0x07
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <LCD_enu_SendCmnd+0x3ba>
    11c0:	9b 83       	std	Y+3, r25	; 0x03
    11c2:	8a 83       	std	Y+2, r24	; 0x02
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11c6:	69 89       	ldd	r22, Y+17	; 0x11
    11c8:	7a 89       	ldd	r23, Y+18	; 0x12
    11ca:	8b 89       	ldd	r24, Y+19	; 0x13
    11cc:	9c 89       	ldd	r25, Y+20	; 0x14
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	88 8b       	std	Y+16, r24	; 0x10
    11d8:	88 89       	ldd	r24, Y+16	; 0x10
    11da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	8a 95       	dec	r24
    11e0:	f1 f7       	brne	.-4      	; 0x11de <LCD_enu_SendCmnd+0x3dc>
    11e2:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	62 e0       	ldi	r22, 0x02	; 2
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
         return STATE_OK;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    11f0:	e1 96       	adiw	r28, 0x31	; 49
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	e1 97       	sbiw	r28, 0x31	; 49
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    122c:	89 a9       	ldd	r24, Y+49	; 0x31
    122e:	98 2f       	mov	r25, r24
    1230:	99 1f       	adc	r25, r25
    1232:	99 27       	eor	r25, r25
    1234:	99 1f       	adc	r25, r25
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	67 e0       	ldi	r22, 0x07	; 7
    123a:	49 2f       	mov	r20, r25
    123c:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    1240:	89 a9       	ldd	r24, Y+49	; 0x31
    1242:	82 95       	swap	r24
    1244:	86 95       	lsr	r24
    1246:	86 95       	lsr	r24
    1248:	83 70       	andi	r24, 0x03	; 3
    124a:	98 2f       	mov	r25, r24
    124c:	91 70       	andi	r25, 0x01	; 1
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	66 e0       	ldi	r22, 0x06	; 6
    1252:	49 2f       	mov	r20, r25
    1254:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    1258:	89 a9       	ldd	r24, Y+49	; 0x31
    125a:	82 95       	swap	r24
    125c:	86 95       	lsr	r24
    125e:	87 70       	andi	r24, 0x07	; 7
    1260:	98 2f       	mov	r25, r24
    1262:	91 70       	andi	r25, 0x01	; 1
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	65 e0       	ldi	r22, 0x05	; 5
    1268:	49 2f       	mov	r20, r25
    126a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    126e:	89 a9       	ldd	r24, Y+49	; 0x31
    1270:	82 95       	swap	r24
    1272:	8f 70       	andi	r24, 0x0F	; 15
    1274:	98 2f       	mov	r25, r24
    1276:	91 70       	andi	r25, 0x01	; 1
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	64 e0       	ldi	r22, 0x04	; 4
    127c:	49 2f       	mov	r20, r25
    127e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	62 e0       	ldi	r22, 0x02	; 2
    1286:	41 e0       	ldi	r20, 0x01	; 1
    1288:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a0 e8       	ldi	r26, 0x80	; 128
    1292:	bf e3       	ldi	r27, 0x3F	; 63
    1294:	8d a7       	std	Y+45, r24	; 0x2d
    1296:	9e a7       	std	Y+46, r25	; 0x2e
    1298:	af a7       	std	Y+47, r26	; 0x2f
    129a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    129c:	6d a5       	ldd	r22, Y+45	; 0x2d
    129e:	7e a5       	ldd	r23, Y+46	; 0x2e
    12a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a2:	98 a9       	ldd	r25, Y+48	; 0x30
    12a4:	2b ea       	ldi	r18, 0xAB	; 171
    12a6:	3a ea       	ldi	r19, 0xAA	; 170
    12a8:	4a ea       	ldi	r20, 0xAA	; 170
    12aa:	50 e4       	ldi	r21, 0x40	; 64
    12ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b0:	dc 01       	movw	r26, r24
    12b2:	cb 01       	movw	r24, r22
    12b4:	89 a7       	std	Y+41, r24	; 0x29
    12b6:	9a a7       	std	Y+42, r25	; 0x2a
    12b8:	ab a7       	std	Y+43, r26	; 0x2b
    12ba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    12bc:	69 a5       	ldd	r22, Y+41	; 0x29
    12be:	7a a5       	ldd	r23, Y+42	; 0x2a
    12c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	1c f4       	brge	.+6      	; 0x12da <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	88 a7       	std	Y+40, r24	; 0x28
    12d8:	91 c0       	rjmp	.+290    	; 0x13fc <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    12da:	69 a5       	ldd	r22, Y+41	; 0x29
    12dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    12de:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	53 e4       	ldi	r21, 0x43	; 67
    12ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	0c f0       	brlt	.+2      	; 0x12f4 <LCD_enu_SendChar+0xf2>
    12f2:	7b c0       	rjmp	.+246    	; 0x13ea <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    12f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    12f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    12f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    12fa:	98 a9       	ldd	r25, Y+48	; 0x30
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	4a e7       	ldi	r20, 0x7A	; 122
    1302:	54 e4       	ldi	r21, 0x44	; 68
    1304:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	8c a3       	std	Y+36, r24	; 0x24
    130e:	9d a3       	std	Y+37, r25	; 0x25
    1310:	ae a3       	std	Y+38, r26	; 0x26
    1312:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1314:	6c a1       	ldd	r22, Y+36	; 0x24
    1316:	7d a1       	ldd	r23, Y+37	; 0x25
    1318:	8e a1       	ldd	r24, Y+38	; 0x26
    131a:	9f a1       	ldd	r25, Y+39	; 0x27
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	4a e7       	ldi	r20, 0x7A	; 122
    1322:	55 e4       	ldi	r21, 0x45	; 69
    1324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	88 a3       	std	Y+32, r24	; 0x20
    132e:	99 a3       	std	Y+33, r25	; 0x21
    1330:	aa a3       	std	Y+34, r26	; 0x22
    1332:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1334:	68 a1       	ldd	r22, Y+32	; 0x20
    1336:	79 a1       	ldd	r23, Y+33	; 0x21
    1338:	8a a1       	ldd	r24, Y+34	; 0x22
    133a:	9b a1       	ldd	r25, Y+35	; 0x23
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	40 e8       	ldi	r20, 0x80	; 128
    1342:	5f e3       	ldi	r21, 0x3F	; 63
    1344:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1348:	88 23       	and	r24, r24
    134a:	2c f4       	brge	.+10     	; 0x1356 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	9f 8f       	std	Y+31, r25	; 0x1f
    1352:	8e 8f       	std	Y+30, r24	; 0x1e
    1354:	3f c0       	rjmp	.+126    	; 0x13d4 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1356:	68 a1       	ldd	r22, Y+32	; 0x20
    1358:	79 a1       	ldd	r23, Y+33	; 0x21
    135a:	8a a1       	ldd	r24, Y+34	; 0x22
    135c:	9b a1       	ldd	r25, Y+35	; 0x23
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	3f ef       	ldi	r19, 0xFF	; 255
    1362:	4f e7       	ldi	r20, 0x7F	; 127
    1364:	57 e4       	ldi	r21, 0x47	; 71
    1366:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    136a:	18 16       	cp	r1, r24
    136c:	4c f5       	brge	.+82     	; 0x13c0 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136e:	6c a1       	ldd	r22, Y+36	; 0x24
    1370:	7d a1       	ldd	r23, Y+37	; 0x25
    1372:	8e a1       	ldd	r24, Y+38	; 0x26
    1374:	9f a1       	ldd	r25, Y+39	; 0x27
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e2       	ldi	r20, 0x20	; 32
    137c:	51 e4       	ldi	r21, 0x41	; 65
    137e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9f 8f       	std	Y+31, r25	; 0x1f
    1394:	8e 8f       	std	Y+30, r24	; 0x1e
    1396:	0f c0       	rjmp	.+30     	; 0x13b6 <LCD_enu_SendChar+0x1b4>
    1398:	80 e9       	ldi	r24, 0x90	; 144
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	9d 8f       	std	Y+29, r25	; 0x1d
    139e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <LCD_enu_SendChar+0x1a2>
    13a8:	9d 8f       	std	Y+29, r25	; 0x1d
    13aa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9f 8f       	std	Y+31, r25	; 0x1f
    13b4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	69 f7       	brne	.-38     	; 0x1398 <LCD_enu_SendChar+0x196>
    13be:	24 c0       	rjmp	.+72     	; 0x1408 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c0:	68 a1       	ldd	r22, Y+32	; 0x20
    13c2:	79 a1       	ldd	r23, Y+33	; 0x21
    13c4:	8a a1       	ldd	r24, Y+34	; 0x22
    13c6:	9b a1       	ldd	r25, Y+35	; 0x23
    13c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9f 8f       	std	Y+31, r25	; 0x1f
    13d2:	8e 8f       	std	Y+30, r24	; 0x1e
    13d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13d8:	9b 8f       	std	Y+27, r25	; 0x1b
    13da:	8a 8f       	std	Y+26, r24	; 0x1a
    13dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <LCD_enu_SendChar+0x1de>
    13e4:	9b 8f       	std	Y+27, r25	; 0x1b
    13e6:	8a 8f       	std	Y+26, r24	; 0x1a
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13ea:	69 a5       	ldd	r22, Y+41	; 0x29
    13ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    13ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    13f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    13f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f6:	dc 01       	movw	r26, r24
    13f8:	cb 01       	movw	r24, r22
    13fa:	88 a7       	std	Y+40, r24	; 0x28
    13fc:	88 a5       	ldd	r24, Y+40	; 0x28
    13fe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1400:	89 8d       	ldd	r24, Y+25	; 0x19
    1402:	8a 95       	dec	r24
    1404:	f1 f7       	brne	.-4      	; 0x1402 <LCD_enu_SendChar+0x200>
    1406:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    1412:	89 a9       	ldd	r24, Y+49	; 0x31
    1414:	86 95       	lsr	r24
    1416:	86 95       	lsr	r24
    1418:	86 95       	lsr	r24
    141a:	98 2f       	mov	r25, r24
    141c:	91 70       	andi	r25, 0x01	; 1
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	67 e0       	ldi	r22, 0x07	; 7
    1422:	49 2f       	mov	r20, r25
    1424:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    1428:	89 a9       	ldd	r24, Y+49	; 0x31
    142a:	86 95       	lsr	r24
    142c:	86 95       	lsr	r24
    142e:	98 2f       	mov	r25, r24
    1430:	91 70       	andi	r25, 0x01	; 1
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	66 e0       	ldi	r22, 0x06	; 6
    1436:	49 2f       	mov	r20, r25
    1438:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    143c:	89 a9       	ldd	r24, Y+49	; 0x31
    143e:	86 95       	lsr	r24
    1440:	98 2f       	mov	r25, r24
    1442:	91 70       	andi	r25, 0x01	; 1
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	65 e0       	ldi	r22, 0x05	; 5
    1448:	49 2f       	mov	r20, r25
    144a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    144e:	89 a9       	ldd	r24, Y+49	; 0x31
    1450:	98 2f       	mov	r25, r24
    1452:	91 70       	andi	r25, 0x01	; 1
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	64 e0       	ldi	r22, 0x04	; 4
    1458:	49 2f       	mov	r20, r25
    145a:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	a0 e8       	ldi	r26, 0x80	; 128
    146e:	bf e3       	ldi	r27, 0x3F	; 63
    1470:	8d 8b       	std	Y+21, r24	; 0x15
    1472:	9e 8b       	std	Y+22, r25	; 0x16
    1474:	af 8b       	std	Y+23, r26	; 0x17
    1476:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1478:	6d 89       	ldd	r22, Y+21	; 0x15
    147a:	7e 89       	ldd	r23, Y+22	; 0x16
    147c:	8f 89       	ldd	r24, Y+23	; 0x17
    147e:	98 8d       	ldd	r25, Y+24	; 0x18
    1480:	2b ea       	ldi	r18, 0xAB	; 171
    1482:	3a ea       	ldi	r19, 0xAA	; 170
    1484:	4a ea       	ldi	r20, 0xAA	; 170
    1486:	50 e4       	ldi	r21, 0x40	; 64
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	89 8b       	std	Y+17, r24	; 0x11
    1492:	9a 8b       	std	Y+18, r25	; 0x12
    1494:	ab 8b       	std	Y+19, r26	; 0x13
    1496:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1498:	69 89       	ldd	r22, Y+17	; 0x11
    149a:	7a 89       	ldd	r23, Y+18	; 0x12
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e8       	ldi	r20, 0x80	; 128
    14a6:	5f e3       	ldi	r21, 0x3F	; 63
    14a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ac:	88 23       	and	r24, r24
    14ae:	1c f4       	brge	.+6      	; 0x14b6 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	88 8b       	std	Y+16, r24	; 0x10
    14b4:	91 c0       	rjmp	.+290    	; 0x15d8 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    14b6:	69 89       	ldd	r22, Y+17	; 0x11
    14b8:	7a 89       	ldd	r23, Y+18	; 0x12
    14ba:	8b 89       	ldd	r24, Y+19	; 0x13
    14bc:	9c 89       	ldd	r25, Y+20	; 0x14
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4f e7       	ldi	r20, 0x7F	; 127
    14c4:	53 e4       	ldi	r21, 0x43	; 67
    14c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14ca:	18 16       	cp	r1, r24
    14cc:	0c f0       	brlt	.+2      	; 0x14d0 <LCD_enu_SendChar+0x2ce>
    14ce:	7b c0       	rjmp	.+246    	; 0x15c6 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    14d0:	6d 89       	ldd	r22, Y+21	; 0x15
    14d2:	7e 89       	ldd	r23, Y+22	; 0x16
    14d4:	8f 89       	ldd	r24, Y+23	; 0x17
    14d6:	98 8d       	ldd	r25, Y+24	; 0x18
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a e7       	ldi	r20, 0x7A	; 122
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8c 87       	std	Y+12, r24	; 0x0c
    14ea:	9d 87       	std	Y+13, r25	; 0x0d
    14ec:	ae 87       	std	Y+14, r26	; 0x0e
    14ee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f0:	6c 85       	ldd	r22, Y+12	; 0x0c
    14f2:	7d 85       	ldd	r23, Y+13	; 0x0d
    14f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    14f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a e7       	ldi	r20, 0x7A	; 122
    14fe:	55 e4       	ldi	r21, 0x45	; 69
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	88 87       	std	Y+8, r24	; 0x08
    150a:	99 87       	std	Y+9, r25	; 0x09
    150c:	aa 87       	std	Y+10, r26	; 0x0a
    150e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1510:	68 85       	ldd	r22, Y+8	; 0x08
    1512:	79 85       	ldd	r23, Y+9	; 0x09
    1514:	8a 85       	ldd	r24, Y+10	; 0x0a
    1516:	9b 85       	ldd	r25, Y+11	; 0x0b
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	2c f4       	brge	.+10     	; 0x1532 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9f 83       	std	Y+7, r25	; 0x07
    152e:	8e 83       	std	Y+6, r24	; 0x06
    1530:	3f c0       	rjmp	.+126    	; 0x15b0 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    1532:	68 85       	ldd	r22, Y+8	; 0x08
    1534:	79 85       	ldd	r23, Y+9	; 0x09
    1536:	8a 85       	ldd	r24, Y+10	; 0x0a
    1538:	9b 85       	ldd	r25, Y+11	; 0x0b
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	4c f5       	brge	.+82     	; 0x159c <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	6c 85       	ldd	r22, Y+12	; 0x0c
    154c:	7d 85       	ldd	r23, Y+13	; 0x0d
    154e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1550:	9f 85       	ldd	r25, Y+15	; 0x0f
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9f 83       	std	Y+7, r25	; 0x07
    1570:	8e 83       	std	Y+6, r24	; 0x06
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <LCD_enu_SendChar+0x390>
    1574:	80 e9       	ldi	r24, 0x90	; 144
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	9d 83       	std	Y+5, r25	; 0x05
    157a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_enu_SendChar+0x37e>
    1584:	9d 83       	std	Y+5, r25	; 0x05
    1586:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	8e 81       	ldd	r24, Y+6	; 0x06
    158a:	9f 81       	ldd	r25, Y+7	; 0x07
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9f 83       	std	Y+7, r25	; 0x07
    1590:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	8e 81       	ldd	r24, Y+6	; 0x06
    1594:	9f 81       	ldd	r25, Y+7	; 0x07
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	69 f7       	brne	.-38     	; 0x1574 <LCD_enu_SendChar+0x372>
    159a:	24 c0       	rjmp	.+72     	; 0x15e4 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	68 85       	ldd	r22, Y+8	; 0x08
    159e:	79 85       	ldd	r23, Y+9	; 0x09
    15a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9f 83       	std	Y+7, r25	; 0x07
    15ae:	8e 83       	std	Y+6, r24	; 0x06
    15b0:	8e 81       	ldd	r24, Y+6	; 0x06
    15b2:	9f 81       	ldd	r25, Y+7	; 0x07
    15b4:	9b 83       	std	Y+3, r25	; 0x03
    15b6:	8a 83       	std	Y+2, r24	; 0x02
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	9b 81       	ldd	r25, Y+3	; 0x03
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <LCD_enu_SendChar+0x3ba>
    15c0:	9b 83       	std	Y+3, r25	; 0x03
    15c2:	8a 83       	std	Y+2, r24	; 0x02
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15c6:	69 89       	ldd	r22, Y+17	; 0x11
    15c8:	7a 89       	ldd	r23, Y+18	; 0x12
    15ca:	8b 89       	ldd	r24, Y+19	; 0x13
    15cc:	9c 89       	ldd	r25, Y+20	; 0x14
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	88 8b       	std	Y+16, r24	; 0x10
    15d8:	88 89       	ldd	r24, Y+16	; 0x10
    15da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	8a 95       	dec	r24
    15e0:	f1 f7       	brne	.-4      	; 0x15de <LCD_enu_SendChar+0x3dc>
    15e2:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	62 e0       	ldi	r22, 0x02	; 2
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
    return STATE_OK;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    15f0:	e1 96       	adiw	r28, 0x31	; 49
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <LCD_enu_SendString+0x6>
    1608:	0f 92       	push	r0
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	9b 83       	std	Y+3, r25	; 0x03
    1610:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	0e c0       	rjmp	.+28     	; 0x1632 <LCD_enu_SendString+0x30>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	9b 81       	ldd	r25, Y+3	; 0x03
    1620:	fc 01       	movw	r30, r24
    1622:	e2 0f       	add	r30, r18
    1624:	f3 1f       	adc	r31, r19
    1626:	80 81       	ld	r24, Z
    1628:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    162c:	89 81       	ldd	r24, Y+1	; 0x01
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	9b 81       	ldd	r25, Y+3	; 0x03
    163c:	fc 01       	movw	r30, r24
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	80 81       	ld	r24, Z
    1644:	88 23       	and	r24, r24
    1646:	39 f7       	brne	.-50     	; 0x1616 <LCD_enu_SendString+0x14>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    1648:	81 e0       	ldi	r24, 0x01	; 1
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    1656:	0f 93       	push	r16
    1658:	1f 93       	push	r17
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	60 97       	sbiw	r28, 0x10	; 16
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	6d 87       	std	Y+13, r22	; 0x0d
    1670:	7e 87       	std	Y+14, r23	; 0x0e
    1672:	8f 87       	std	Y+15, r24	; 0x0f
    1674:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    1676:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    1678:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    167a:	8d 85       	ldd	r24, Y+13	; 0x0d
    167c:	9e 85       	ldd	r25, Y+14	; 0x0e
    167e:	af 85       	ldd	r26, Y+15	; 0x0f
    1680:	b8 89       	ldd	r27, Y+16	; 0x10
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	a1 05       	cpc	r26, r1
    1686:	b1 05       	cpc	r27, r1
    1688:	89 f5       	brne	.+98     	; 0x16ec <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    168a:	80 e3       	ldi	r24, 0x30	; 48
    168c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_enu_SendChar>
    1690:	4d c0       	rjmp	.+154    	; 0x172c <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	08 2f       	mov	r16, r24
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	af 85       	ldd	r26, Y+15	; 0x0f
    169e:	b8 89       	ldd	r27, Y+16	; 0x10
    16a0:	2a e0       	ldi	r18, 0x0A	; 10
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	bc 01       	movw	r22, r24
    16aa:	cd 01       	movw	r24, r26
    16ac:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	28 2f       	mov	r18, r24
    16b6:	ce 01       	movw	r24, r28
    16b8:	03 96       	adiw	r24, 0x03	; 3
    16ba:	fc 01       	movw	r30, r24
    16bc:	e0 0f       	add	r30, r16
    16be:	f1 1f       	adc	r31, r17
    16c0:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	af 85       	ldd	r26, Y+15	; 0x0f
    16c8:	b8 89       	ldd	r27, Y+16	; 0x10
    16ca:	2a e0       	ldi	r18, 0x0A	; 10
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	50 e0       	ldi	r21, 0x00	; 0
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    16da:	da 01       	movw	r26, r20
    16dc:	c9 01       	movw	r24, r18
    16de:	8d 87       	std	Y+13, r24	; 0x0d
    16e0:	9e 87       	std	Y+14, r25	; 0x0e
    16e2:	af 87       	std	Y+15, r26	; 0x0f
    16e4:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	8f 5f       	subi	r24, 0xFF	; 255
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	af 85       	ldd	r26, Y+15	; 0x0f
    16f2:	b8 89       	ldd	r27, Y+16	; 0x10
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	a1 05       	cpc	r26, r1
    16f8:	b1 05       	cpc	r27, r1
    16fa:	59 f6       	brne	.-106    	; 0x1692 <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	81 50       	subi	r24, 0x01	; 1
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	11 c0       	rjmp	.+34     	; 0x1726 <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	33 27       	eor	r19, r19
    170a:	27 fd       	sbrc	r18, 7
    170c:	30 95       	com	r19
    170e:	ce 01       	movw	r24, r28
    1710:	03 96       	adiw	r24, 0x03	; 3
    1712:	fc 01       	movw	r30, r24
    1714:	e2 0f       	add	r30, r18
    1716:	f3 1f       	adc	r31, r19
    1718:	80 81       	ld	r24, Z
    171a:	80 5d       	subi	r24, 0xD0	; 208
    171c:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	81 50       	subi	r24, 0x01	; 1
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	88 23       	and	r24, r24
    172a:	64 f7       	brge	.-40     	; 0x1704 <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    172c:	81 e0       	ldi	r24, 0x01	; 1
}
    172e:	60 96       	adiw	r28, 0x10	; 16
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	08 95       	ret

00001744 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <LCD_enu_SetCursor+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <LCD_enu_SetCursor+0x8>
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	88 32       	cpi	r24, 0x28	; 40
    175a:	f0 f4       	brcc	.+60     	; 0x1798 <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3d 83       	std	Y+5, r19	; 0x05
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	31 f0       	breq	.+12     	; 0x177a <LCD_enu_SetCursor+0x36>
    176e:	2c 81       	ldd	r18, Y+4	; 0x04
    1770:	3d 81       	ldd	r19, Y+5	; 0x05
    1772:	21 30       	cpi	r18, 0x01	; 1
    1774:	31 05       	cpc	r19, r1
    1776:	31 f0       	breq	.+12     	; 0x1784 <LCD_enu_SetCursor+0x40>
    1778:	0a c0       	rjmp	.+20     	; 0x178e <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	80 58       	subi	r24, 0x80	; 128
    177e:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	80 54       	subi	r24, 0x40	; 64
    1788:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    178e:	1b 82       	std	Y+3, r1	; 0x03
    1790:	04 c0       	rjmp	.+8      	; 0x179a <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    1792:	31 e0       	ldi	r19, 0x01	; 1
    1794:	3b 83       	std	Y+3, r19	; 0x03
    1796:	01 c0       	rjmp	.+2      	; 0x179a <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    1798:	1b 82       	std	Y+3, r1	; 0x03
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	cc 54       	subi	r28, 0x4C	; 76
    17ba:	d0 40       	sbci	r29, 0x00	; 0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	61 e0       	ldi	r22, 0x01	; 1
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	62 e0       	ldi	r22, 0x02	; 2
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	67 e0       	ldi	r22, 0x07	; 7
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	66 e0       	ldi	r22, 0x06	; 6
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	65 e0       	ldi	r22, 0x05	; 5
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	64 e0       	ldi	r22, 0x04	; 4
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
    180c:	fe 01       	movw	r30, r28
    180e:	e7 5b       	subi	r30, 0xB7	; 183
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	ac e0       	ldi	r26, 0x0C	; 12
    1818:	b2 e4       	ldi	r27, 0x42	; 66
    181a:	80 83       	st	Z, r24
    181c:	91 83       	std	Z+1, r25	; 0x01
    181e:	a2 83       	std	Z+2, r26	; 0x02
    1820:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	8e 01       	movw	r16, r28
    1824:	0b 5b       	subi	r16, 0xBB	; 187
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	e7 5b       	subi	r30, 0xB7	; 183
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	82 81       	ldd	r24, Z+2	; 0x02
    1834:	93 81       	ldd	r25, Z+3	; 0x03
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a e7       	ldi	r20, 0x7A	; 122
    183c:	55 e4       	ldi	r21, 0x45	; 69
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	f8 01       	movw	r30, r16
    1848:	80 83       	st	Z, r24
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	a2 83       	std	Z+2, r26	; 0x02
    184e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1850:	fe 01       	movw	r30, r28
    1852:	eb 5b       	subi	r30, 0xBB	; 187
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	82 81       	ldd	r24, Z+2	; 0x02
    185c:	93 81       	ldd	r25, Z+3	; 0x03
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	44 f4       	brge	.+16     	; 0x187e <LCD_enu_Init+0xd2>
		__ticks = 1;
    186e:	fe 01       	movw	r30, r28
    1870:	ed 5b       	subi	r30, 0xBD	; 189
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
    187c:	64 c0       	rjmp	.+200    	; 0x1946 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    187e:	fe 01       	movw	r30, r28
    1880:	eb 5b       	subi	r30, 0xBB	; 187
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	60 81       	ld	r22, Z
    1886:	71 81       	ldd	r23, Z+1	; 0x01
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	93 81       	ldd	r25, Z+3	; 0x03
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	0c f0       	brlt	.+2      	; 0x189e <LCD_enu_Init+0xf2>
    189c:	43 c0       	rjmp	.+134    	; 0x1924 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	fe 01       	movw	r30, r28
    18a0:	e7 5b       	subi	r30, 0xB7	; 183
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	60 81       	ld	r22, Z
    18a6:	71 81       	ldd	r23, Z+1	; 0x01
    18a8:	82 81       	ldd	r24, Z+2	; 0x02
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	51 e4       	ldi	r21, 0x41	; 65
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8e 01       	movw	r16, r28
    18be:	0d 5b       	subi	r16, 0xBD	; 189
    18c0:	1f 4f       	sbci	r17, 0xFF	; 255
    18c2:	bc 01       	movw	r22, r24
    18c4:	cd 01       	movw	r24, r26
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	f8 01       	movw	r30, r16
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
    18d4:	1f c0       	rjmp	.+62     	; 0x1914 <LCD_enu_Init+0x168>
    18d6:	fe 01       	movw	r30, r28
    18d8:	ef 5b       	subi	r30, 0xBF	; 191
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	80 e9       	ldi	r24, 0x90	; 144
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	91 83       	std	Z+1, r25	; 0x01
    18e2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e4:	fe 01       	movw	r30, r28
    18e6:	ef 5b       	subi	r30, 0xBF	; 191
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <LCD_enu_Init+0x142>
    18f2:	fe 01       	movw	r30, r28
    18f4:	ef 5b       	subi	r30, 0xBF	; 191
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	de 01       	movw	r26, r28
    18fe:	ad 5b       	subi	r26, 0xBD	; 189
    1900:	bf 4f       	sbci	r27, 0xFF	; 255
    1902:	fe 01       	movw	r30, r28
    1904:	ed 5b       	subi	r30, 0xBD	; 189
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	11 96       	adiw	r26, 0x01	; 1
    1910:	9c 93       	st	X, r25
    1912:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1914:	fe 01       	movw	r30, r28
    1916:	ed 5b       	subi	r30, 0xBD	; 189
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	d1 f6       	brne	.-76     	; 0x18d6 <LCD_enu_Init+0x12a>
    1922:	24 c0       	rjmp	.+72     	; 0x196c <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	8e 01       	movw	r16, r28
    1926:	0d 5b       	subi	r16, 0xBD	; 189
    1928:	1f 4f       	sbci	r17, 0xFF	; 255
    192a:	fe 01       	movw	r30, r28
    192c:	eb 5b       	subi	r30, 0xBB	; 187
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	f8 01       	movw	r30, r16
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	80 83       	st	Z, r24
    1946:	fe 01       	movw	r30, r28
    1948:	ed 5b       	subi	r30, 0xBD	; 189
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	fe 01       	movw	r30, r28
    1952:	ff 96       	adiw	r30, 0x3f	; 63
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    1958:	fe 01       	movw	r30, r28
    195a:	ff 96       	adiw	r30, 0x3f	; 63
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	f1 f7       	brne	.-4      	; 0x1960 <LCD_enu_Init+0x1b4>
    1964:	fe 01       	movw	r30, r28
    1966:	ff 96       	adiw	r30, 0x3f	; 63
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    196c:	83 e3       	ldi	r24, 0x33	; 51
    196e:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    1972:	82 e3       	ldi	r24, 0x32	; 50
    1974:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    1978:	88 e2       	ldi	r24, 0x28	; 40
    197a:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a0 e2       	ldi	r26, 0x20	; 32
    1984:	b2 e4       	ldi	r27, 0x42	; 66
    1986:	8b af       	std	Y+59, r24	; 0x3b
    1988:	9c af       	std	Y+60, r25	; 0x3c
    198a:	ad af       	std	Y+61, r26	; 0x3d
    198c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    198e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1990:	7c ad       	ldd	r23, Y+60	; 0x3c
    1992:	8d ad       	ldd	r24, Y+61	; 0x3d
    1994:	9e ad       	ldd	r25, Y+62	; 0x3e
    1996:	2b ea       	ldi	r18, 0xAB	; 171
    1998:	3a ea       	ldi	r19, 0xAA	; 170
    199a:	4a ea       	ldi	r20, 0xAA	; 170
    199c:	50 e4       	ldi	r21, 0x40	; 64
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8f ab       	std	Y+55, r24	; 0x37
    19a8:	98 af       	std	Y+56, r25	; 0x38
    19aa:	a9 af       	std	Y+57, r26	; 0x39
    19ac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19ae:	6f a9       	ldd	r22, Y+55	; 0x37
    19b0:	78 ad       	ldd	r23, Y+56	; 0x38
    19b2:	89 ad       	ldd	r24, Y+57	; 0x39
    19b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	1c f4       	brge	.+6      	; 0x19cc <LCD_enu_Init+0x220>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	8e ab       	std	Y+54, r24	; 0x36
    19ca:	91 c0       	rjmp	.+290    	; 0x1aee <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    19cc:	6f a9       	ldd	r22, Y+55	; 0x37
    19ce:	78 ad       	ldd	r23, Y+56	; 0x38
    19d0:	89 ad       	ldd	r24, Y+57	; 0x39
    19d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	53 e4       	ldi	r21, 0x43	; 67
    19dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	0c f0       	brlt	.+2      	; 0x19e6 <LCD_enu_Init+0x23a>
    19e4:	7b c0       	rjmp	.+246    	; 0x1adc <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    19e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    19e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    19ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	4a e7       	ldi	r20, 0x7A	; 122
    19f4:	54 e4       	ldi	r21, 0x44	; 68
    19f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	8a ab       	std	Y+50, r24	; 0x32
    1a00:	9b ab       	std	Y+51, r25	; 0x33
    1a02:	ac ab       	std	Y+52, r26	; 0x34
    1a04:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	6a a9       	ldd	r22, Y+50	; 0x32
    1a08:	7b a9       	ldd	r23, Y+51	; 0x33
    1a0a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a0c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a e7       	ldi	r20, 0x7A	; 122
    1a14:	55 e4       	ldi	r21, 0x45	; 69
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8e a7       	std	Y+46, r24	; 0x2e
    1a20:	9f a7       	std	Y+47, r25	; 0x2f
    1a22:	a8 ab       	std	Y+48, r26	; 0x30
    1a24:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a26:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a28:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a2a:	88 a9       	ldd	r24, Y+48	; 0x30
    1a2c:	99 a9       	ldd	r25, Y+49	; 0x31
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <LCD_enu_Init+0x29c>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9d a7       	std	Y+45, r25	; 0x2d
    1a44:	8c a7       	std	Y+44, r24	; 0x2c
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    1a48:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a4a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a4c:	88 a9       	ldd	r24, Y+48	; 0x30
    1a4e:	99 a9       	ldd	r25, Y+49	; 0x31
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	6a a9       	ldd	r22, Y+50	; 0x32
    1a62:	7b a9       	ldd	r23, Y+51	; 0x33
    1a64:	8c a9       	ldd	r24, Y+52	; 0x34
    1a66:	9d a9       	ldd	r25, Y+53	; 0x35
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9d a7       	std	Y+45, r25	; 0x2d
    1a86:	8c a7       	std	Y+44, r24	; 0x2c
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <LCD_enu_Init+0x2fc>
    1a8a:	80 e9       	ldi	r24, 0x90	; 144
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	9b a7       	std	Y+43, r25	; 0x2b
    1a90:	8a a7       	std	Y+42, r24	; 0x2a
    1a92:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a94:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_enu_Init+0x2ea>
    1a9a:	9b a7       	std	Y+43, r25	; 0x2b
    1a9c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aa0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	9d a7       	std	Y+45, r25	; 0x2d
    1aa6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aaa:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <LCD_enu_Init+0x2de>
    1ab0:	24 c0       	rjmp	.+72     	; 0x1afa <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ab4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ab6:	88 a9       	ldd	r24, Y+48	; 0x30
    1ab8:	99 a9       	ldd	r25, Y+49	; 0x31
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9d a7       	std	Y+45, r25	; 0x2d
    1ac4:	8c a7       	std	Y+44, r24	; 0x2c
    1ac6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ac8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1aca:	99 a7       	std	Y+41, r25	; 0x29
    1acc:	88 a7       	std	Y+40, r24	; 0x28
    1ace:	88 a5       	ldd	r24, Y+40	; 0x28
    1ad0:	99 a5       	ldd	r25, Y+41	; 0x29
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_enu_Init+0x326>
    1ad6:	99 a7       	std	Y+41, r25	; 0x29
    1ad8:	88 a7       	std	Y+40, r24	; 0x28
    1ada:	0f c0       	rjmp	.+30     	; 0x1afa <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1adc:	6f a9       	ldd	r22, Y+55	; 0x37
    1ade:	78 ad       	ldd	r23, Y+56	; 0x38
    1ae0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ae2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	8e ab       	std	Y+54, r24	; 0x36
    1aee:	8e a9       	ldd	r24, Y+54	; 0x36
    1af0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af2:	8f a1       	ldd	r24, Y+39	; 0x27
    1af4:	8a 95       	dec	r24
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <LCD_enu_Init+0x348>
    1af8:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    1afa:	8f e0       	ldi	r24, 0x0F	; 15
    1afc:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e2       	ldi	r26, 0x20	; 32
    1b06:	b2 e4       	ldi	r27, 0x42	; 66
    1b08:	8b a3       	std	Y+35, r24	; 0x23
    1b0a:	9c a3       	std	Y+36, r25	; 0x24
    1b0c:	ad a3       	std	Y+37, r26	; 0x25
    1b0e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b10:	6b a1       	ldd	r22, Y+35	; 0x23
    1b12:	7c a1       	ldd	r23, Y+36	; 0x24
    1b14:	8d a1       	ldd	r24, Y+37	; 0x25
    1b16:	9e a1       	ldd	r25, Y+38	; 0x26
    1b18:	2b ea       	ldi	r18, 0xAB	; 171
    1b1a:	3a ea       	ldi	r19, 0xAA	; 170
    1b1c:	4a ea       	ldi	r20, 0xAA	; 170
    1b1e:	50 e4       	ldi	r21, 0x40	; 64
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8f 8f       	std	Y+31, r24	; 0x1f
    1b2a:	98 a3       	std	Y+32, r25	; 0x20
    1b2c:	a9 a3       	std	Y+33, r26	; 0x21
    1b2e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b32:	78 a1       	ldd	r23, Y+32	; 0x20
    1b34:	89 a1       	ldd	r24, Y+33	; 0x21
    1b36:	9a a1       	ldd	r25, Y+34	; 0x22
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	1c f4       	brge	.+6      	; 0x1b4e <LCD_enu_Init+0x3a2>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	8e 8f       	std	Y+30, r24	; 0x1e
    1b4c:	91 c0       	rjmp	.+290    	; 0x1c70 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    1b4e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b50:	78 a1       	ldd	r23, Y+32	; 0x20
    1b52:	89 a1       	ldd	r24, Y+33	; 0x21
    1b54:	9a a1       	ldd	r25, Y+34	; 0x22
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4f e7       	ldi	r20, 0x7F	; 127
    1b5c:	53 e4       	ldi	r21, 0x43	; 67
    1b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b62:	18 16       	cp	r1, r24
    1b64:	0c f0       	brlt	.+2      	; 0x1b68 <LCD_enu_Init+0x3bc>
    1b66:	7b c0       	rjmp	.+246    	; 0x1c5e <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    1b68:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	4a e7       	ldi	r20, 0x7A	; 122
    1b76:	54 e4       	ldi	r21, 0x44	; 68
    1b78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8a 8f       	std	Y+26, r24	; 0x1a
    1b82:	9b 8f       	std	Y+27, r25	; 0x1b
    1b84:	ac 8f       	std	Y+28, r26	; 0x1c
    1b86:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b88:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b8a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	4a e7       	ldi	r20, 0x7A	; 122
    1b96:	55 e4       	ldi	r21, 0x45	; 69
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	8e 8b       	std	Y+22, r24	; 0x16
    1ba2:	9f 8b       	std	Y+23, r25	; 0x17
    1ba4:	a8 8f       	std	Y+24, r26	; 0x18
    1ba6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ba8:	6e 89       	ldd	r22, Y+22	; 0x16
    1baa:	7f 89       	ldd	r23, Y+23	; 0x17
    1bac:	88 8d       	ldd	r24, Y+24	; 0x18
    1bae:	99 8d       	ldd	r25, Y+25	; 0x19
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e8       	ldi	r20, 0x80	; 128
    1bb6:	5f e3       	ldi	r21, 0x3F	; 63
    1bb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbc:	88 23       	and	r24, r24
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <LCD_enu_Init+0x41e>
		__ticks = 1;
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9d 8b       	std	Y+21, r25	; 0x15
    1bc6:	8c 8b       	std	Y+20, r24	; 0x14
    1bc8:	3f c0       	rjmp	.+126    	; 0x1c48 <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    1bca:	6e 89       	ldd	r22, Y+22	; 0x16
    1bcc:	7f 89       	ldd	r23, Y+23	; 0x17
    1bce:	88 8d       	ldd	r24, Y+24	; 0x18
    1bd0:	99 8d       	ldd	r25, Y+25	; 0x19
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	4c f5       	brge	.+82     	; 0x1c34 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1be4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1be6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1be8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	40 e2       	ldi	r20, 0x20	; 32
    1bf0:	51 e4       	ldi	r21, 0x41	; 65
    1bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9d 8b       	std	Y+21, r25	; 0x15
    1c08:	8c 8b       	std	Y+20, r24	; 0x14
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <LCD_enu_Init+0x47e>
    1c0c:	80 e9       	ldi	r24, 0x90	; 144
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	9b 8b       	std	Y+19, r25	; 0x13
    1c12:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c14:	8a 89       	ldd	r24, Y+18	; 0x12
    1c16:	9b 89       	ldd	r25, Y+19	; 0x13
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <LCD_enu_Init+0x46c>
    1c1c:	9b 8b       	std	Y+19, r25	; 0x13
    1c1e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	8c 89       	ldd	r24, Y+20	; 0x14
    1c22:	9d 89       	ldd	r25, Y+21	; 0x15
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	9d 8b       	std	Y+21, r25	; 0x15
    1c28:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1c2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	69 f7       	brne	.-38     	; 0x1c0c <LCD_enu_Init+0x460>
    1c32:	24 c0       	rjmp	.+72     	; 0x1c7c <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c34:	6e 89       	ldd	r22, Y+22	; 0x16
    1c36:	7f 89       	ldd	r23, Y+23	; 0x17
    1c38:	88 8d       	ldd	r24, Y+24	; 0x18
    1c3a:	99 8d       	ldd	r25, Y+25	; 0x19
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9d 8b       	std	Y+21, r25	; 0x15
    1c46:	8c 8b       	std	Y+20, r24	; 0x14
    1c48:	8c 89       	ldd	r24, Y+20	; 0x14
    1c4a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c4c:	99 8b       	std	Y+17, r25	; 0x11
    1c4e:	88 8b       	std	Y+16, r24	; 0x10
    1c50:	88 89       	ldd	r24, Y+16	; 0x10
    1c52:	99 89       	ldd	r25, Y+17	; 0x11
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <LCD_enu_Init+0x4a8>
    1c58:	99 8b       	std	Y+17, r25	; 0x11
    1c5a:	88 8b       	std	Y+16, r24	; 0x10
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c5e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c60:	78 a1       	ldd	r23, Y+32	; 0x20
    1c62:	89 a1       	ldd	r24, Y+33	; 0x21
    1c64:	9a a1       	ldd	r25, Y+34	; 0x22
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c72:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c74:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c76:	8a 95       	dec	r24
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <LCD_enu_Init+0x4ca>
    1c7a:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e0       	ldi	r26, 0x00	; 0
    1c88:	b0 e4       	ldi	r27, 0x40	; 64
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	9c 87       	std	Y+12, r25	; 0x0c
    1c8e:	ad 87       	std	Y+13, r26	; 0x0d
    1c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ca0:	55 e4       	ldi	r21, 0x45	; 69
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8f 83       	std	Y+7, r24	; 0x07
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	a9 87       	std	Y+9, r26	; 0x09
    1cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_enu_Init+0x528>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_enu_Init+0x588>
    1d16:	80 e9       	ldi	r24, 0x90	; 144
    1d18:	91 e0       	ldi	r25, 0x01	; 1
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_enu_Init+0x576>
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_enu_Init+0x56a>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_enu_Init+0x5b2>
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    1d66:	86 e0       	ldi	r24, 0x06	; 6
    1d68:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    return STATE_OK;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1d6e:	c4 5b       	subi	r28, 0xB4	; 180
    1d70:	df 4f       	sbci	r29, 0xFF	; 255
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	f8 94       	cli
    1d76:	de bf       	out	0x3e, r29	; 62
    1d78:	0f be       	out	0x3f, r0	; 63
    1d7a:	cd bf       	out	0x3d, r28	; 61
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	1f 91       	pop	r17
    1d82:	0f 91       	pop	r16
    1d84:	08 95       	ret

00001d86 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e0       	ldi	r26, 0x00	; 0
    1da6:	b0 e4       	ldi	r27, 0x40	; 64
    1da8:	8b 87       	std	Y+11, r24	; 0x0b
    1daa:	9c 87       	std	Y+12, r25	; 0x0c
    1dac:	ad 87       	std	Y+13, r26	; 0x0d
    1dae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	4a e7       	ldi	r20, 0x7A	; 122
    1dbe:	55 e4       	ldi	r21, 0x45	; 69
    1dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	8f 83       	std	Y+7, r24	; 0x07
    1dca:	98 87       	std	Y+8, r25	; 0x08
    1dcc:	a9 87       	std	Y+9, r26	; 0x09
    1dce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	2c f4       	brge	.+10     	; 0x1df2 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    1df2:	6f 81       	ldd	r22, Y+7	; 0x07
    1df4:	78 85       	ldd	r23, Y+8	; 0x08
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	3f ef       	ldi	r19, 0xFF	; 255
    1dfe:	4f e7       	ldi	r20, 0x7F	; 127
    1e00:	57 e4       	ldi	r21, 0x47	; 71
    1e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e06:	18 16       	cp	r1, r24
    1e08:	4c f5       	brge	.+82     	; 0x1e5c <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e2       	ldi	r20, 0x20	; 32
    1e18:	51 e4       	ldi	r21, 0x41	; 65
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	bc 01       	movw	r22, r24
    1e24:	cd 01       	movw	r24, r26
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9e 83       	std	Y+6, r25	; 0x06
    1e30:	8d 83       	std	Y+5, r24	; 0x05
    1e32:	0f c0       	rjmp	.+30     	; 0x1e52 <LCD_enu_Clear+0xcc>
    1e34:	80 e9       	ldi	r24, 0x90	; 144
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	9c 83       	std	Y+4, r25	; 0x04
    1e3a:	8b 83       	std	Y+3, r24	; 0x03
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_enu_Clear+0xba>
    1e44:	9c 83       	std	Y+4, r25	; 0x04
    1e46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e52:	8d 81       	ldd	r24, Y+5	; 0x05
    1e54:	9e 81       	ldd	r25, Y+6	; 0x06
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	69 f7       	brne	.-38     	; 0x1e34 <LCD_enu_Clear+0xae>
    1e5a:	14 c0       	rjmp	.+40     	; 0x1e84 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5e:	78 85       	ldd	r23, Y+8	; 0x08
    1e60:	89 85       	ldd	r24, Y+9	; 0x09
    1e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	9a 83       	std	Y+2, r25	; 0x02
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <LCD_enu_Clear+0xf6>
    1e80:	9a 83       	std	Y+2, r25	; 0x02
    1e82:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
}
    1e86:	2e 96       	adiw	r28, 0x0e	; 14
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <LCD_enu_CreateCustomChar+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <LCD_enu_CreateCustomChar+0x8>
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	7c 83       	std	Y+4, r23	; 0x04
    1eaa:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	49 f1       	breq	.+82     	; 0x1f06 <LCD_enu_CreateCustomChar+0x6e>
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	88 30       	cpi	r24, 0x08	; 8
    1eb8:	30 f5       	brcc	.+76     	; 0x1f06 <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	08 96       	adiw	r24, 0x08	; 8
    1ec2:	88 0f       	add	r24, r24
    1ec4:	99 1f       	adc	r25, r25
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0e 94 01 07 	call	0xe02	; 0xe02 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e2 0f       	add	r30, r18
    1ee4:	f3 1f       	adc	r31, r19
    1ee6:	80 81       	ld	r24, Z
    1ee8:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	88 30       	cpi	r24, 0x08	; 8
    1ef6:	78 f3       	brcs	.-34     	; 0x1ed6 <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <LCD_enu_SetCursor>
        return STATE_OK;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	33 c0       	rjmp	.+102    	; 0x1f90 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	fc 01       	movw	r30, r24
    1f32:	e6 57       	subi	r30, 0x76	; 118
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	90 81       	ld	r25, Z
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	69 2f       	mov	r22, r25
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e6 57       	subi	r30, 0x76	; 118
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	90 81       	ld	r25, Z
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	69 2f       	mov	r22, r25
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	fc 01       	movw	r30, r24
    1f62:	e2 57       	subi	r30, 0x72	; 114
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	90 81       	ld	r25, Z
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	69 2f       	mov	r22, r25
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	88 2f       	mov	r24, r24
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	fc 01       	movw	r30, r24
    1f7a:	e2 57       	subi	r30, 0x72	; 114
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	90 81       	ld	r25, Z
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	69 2f       	mov	r22, r25
    1f84:	41 e0       	ldi	r20, 0x01	; 1
    1f86:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	8f 5f       	subi	r24, 0xFF	; 255
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	50 f2       	brcs	.-108    	; 0x1f2a <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
}
    1f98:	0f 90       	pop	r0
    1f9a:	cf 91       	pop	r28
    1f9c:	df 91       	pop	r29
    1f9e:	08 95       	ret

00001fa0 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    1fa0:	df 93       	push	r29
    1fa2:	cf 93       	push	r28
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	65 97       	sbiw	r28, 0x15	; 21
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	9d 8b       	std	Y+21, r25	; 0x15
    1fb6:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8a 8b       	std	Y+18, r24	; 0x12
    1fbc:	1b 8a       	std	Y+19, r1	; 0x13
    1fbe:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    1fc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1fc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <Keypad_enu_getKey+0x2a>
    1fc8:	f0 c0       	rjmp	.+480    	; 0x21aa <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    1fca:	ec 89       	ldd	r30, Y+20	; 0x14
    1fcc:	fd 89       	ldd	r31, Y+21	; 0x15
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    1fd2:	19 8a       	std	Y+17, r1	; 0x11
    1fd4:	e5 c0       	rjmp	.+458    	; 0x21a0 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    1fd6:	89 89       	ldd	r24, Y+17	; 0x11
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e6 57       	subi	r30, 0x76	; 118
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	90 81       	ld	r25, Z
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	69 2f       	mov	r22, r25
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    1fee:	18 8a       	std	Y+16, r1	; 0x10
    1ff0:	c1 c0       	rjmp	.+386    	; 0x2174 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    1ff2:	88 89       	ldd	r24, Y+16	; 0x10
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 57       	subi	r30, 0x72	; 114
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	90 81       	ld	r25, Z
    2000:	9e 01       	movw	r18, r28
    2002:	2d 5e       	subi	r18, 0xED	; 237
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	83 e0       	ldi	r24, 0x03	; 3
    2008:	69 2f       	mov	r22, r25
    200a:	a9 01       	movw	r20, r18
    200c:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2010:	8b 89       	ldd	r24, Y+19	; 0x13
    2012:	88 23       	and	r24, r24
    2014:	09 f0       	breq	.+2      	; 0x2018 <Keypad_enu_getKey+0x78>
    2016:	ab c0       	rjmp	.+342    	; 0x216e <Keypad_enu_getKey+0x1ce>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a0 ea       	ldi	r26, 0xA0	; 160
    201e:	b1 e4       	ldi	r27, 0x41	; 65
    2020:	8b 87       	std	Y+11, r24	; 0x0b
    2022:	9c 87       	std	Y+12, r25	; 0x0c
    2024:	ad 87       	std	Y+13, r26	; 0x0d
    2026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	55 e4       	ldi	r21, 0x45	; 69
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	8f 83       	std	Y+7, r24	; 0x07
    2042:	98 87       	std	Y+8, r25	; 0x08
    2044:	a9 87       	std	Y+9, r26	; 0x09
    2046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	8d 83       	std	Y+5, r24	; 0x05
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9e 83       	std	Y+6, r25	; 0x06
    20a8:	8d 83       	std	Y+5, r24	; 0x05
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <Keypad_enu_getKey+0x12a>
    20ac:	80 e9       	ldi	r24, 0x90	; 144
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <Keypad_enu_getKey+0x118>
    20bc:	9c 83       	std	Y+4, r25	; 0x04
    20be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9e 83       	std	Y+6, r25	; 0x06
    20c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <Keypad_enu_getKey+0x10c>
    20d2:	14 c0       	rjmp	.+40     	; 0x20fc <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	6f 81       	ldd	r22, Y+7	; 0x07
    20d6:	78 85       	ldd	r23, Y+8	; 0x08
    20d8:	89 85       	ldd	r24, Y+9	; 0x09
    20da:	9a 85       	ldd	r25, Y+10	; 0x0a
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <Keypad_enu_getKey+0x154>
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	88 2f       	mov	r24, r24
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	fc 01       	movw	r30, r24
    2104:	e2 57       	subi	r30, 0x72	; 114
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	90 81       	ld	r25, Z
    210a:	9e 01       	movw	r18, r28
    210c:	2d 5e       	subi	r18, 0xED	; 237
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	83 e0       	ldi	r24, 0x03	; 3
    2112:	69 2f       	mov	r22, r25
    2114:	a9 01       	movw	r20, r18
    2116:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <DIO_enu_GetPinValue>
    211a:	0f c0       	rjmp	.+30     	; 0x213a <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    211c:	88 89       	ldd	r24, Y+16	; 0x10
    211e:	88 2f       	mov	r24, r24
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	fc 01       	movw	r30, r24
    2124:	e2 57       	subi	r30, 0x72	; 114
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	90 81       	ld	r25, Z
    212a:	9e 01       	movw	r18, r28
    212c:	2d 5e       	subi	r18, 0xED	; 237
    212e:	3f 4f       	sbci	r19, 0xFF	; 255
    2130:	83 e0       	ldi	r24, 0x03	; 3
    2132:	69 2f       	mov	r22, r25
    2134:	a9 01       	movw	r20, r18
    2136:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    213a:	8b 89       	ldd	r24, Y+19	; 0x13
    213c:	88 23       	and	r24, r24
    213e:	71 f3       	breq	.-36     	; 0x211c <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	48 2f       	mov	r20, r24
    2144:	50 e0       	ldi	r21, 0x00	; 0
    2146:	88 89       	ldd	r24, Y+16	; 0x10
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	ca 01       	movw	r24, r20
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	88 0f       	add	r24, r24
    2154:	99 1f       	adc	r25, r25
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	fc 01       	movw	r30, r24
    215c:	e6 58       	subi	r30, 0x86	; 134
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	ec 89       	ldd	r30, Y+20	; 0x14
    2164:	fd 89       	ldd	r31, Y+21	; 0x15
    2166:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	8f 87       	std	Y+15, r24	; 0x0f
    216c:	07 c0       	rjmp	.+14     	; 0x217c <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    216e:	88 89       	ldd	r24, Y+16	; 0x10
    2170:	8f 5f       	subi	r24, 0xFF	; 255
    2172:	88 8b       	std	Y+16, r24	; 0x10
    2174:	88 89       	ldd	r24, Y+16	; 0x10
    2176:	84 30       	cpi	r24, 0x04	; 4
    2178:	08 f4       	brcc	.+2      	; 0x217c <Keypad_enu_getKey+0x1dc>
    217a:	3b cf       	rjmp	.-394    	; 0x1ff2 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    217c:	89 89       	ldd	r24, Y+17	; 0x11
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	fc 01       	movw	r30, r24
    2184:	e6 57       	subi	r30, 0x76	; 118
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	90 81       	ld	r25, Z
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	69 2f       	mov	r22, r25
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2194:	8f 85       	ldd	r24, Y+15	; 0x0f
    2196:	88 23       	and	r24, r24
    2198:	49 f4       	brne	.+18     	; 0x21ac <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    219a:	89 89       	ldd	r24, Y+17	; 0x11
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	89 8b       	std	Y+17, r24	; 0x11
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <Keypad_enu_getKey+0x208>
    21a6:	17 cf       	rjmp	.-466    	; 0x1fd6 <Keypad_enu_getKey+0x36>
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    21aa:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    21ac:	8a 89       	ldd	r24, Y+18	; 0x12
}
    21ae:	65 96       	adiw	r28, 0x15	; 21
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <Timers_enu_Timer0Init>:
#include"Timer_Config.h"

static u8 Timer0_u8_Prescaler = TIMER0_PRESCALER;
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
ES_t Timers_enu_Timer0Init(void){
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    //Inverting
    SET_BIT(TIMER0_TCCR0_REG,COM01);
	SET_BIT(TIMER0_TCCR0_REG,COM00);
    #elif TIMER0_MODE == PHASE_CORRECT_PWM_NON_INVERTING
    //Phase Correct
    SET_BIT(TIMER0_TCCR0_REG,WGM00);
    21c8:	a3 e5       	ldi	r26, 0x53	; 83
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e3 e5       	ldi	r30, 0x53	; 83
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	80 64       	ori	r24, 0x40	; 64
    21d4:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG,WGM01);
    21d6:	a3 e5       	ldi	r26, 0x53	; 83
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e3 e5       	ldi	r30, 0x53	; 83
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	87 7f       	andi	r24, 0xF7	; 247
    21e2:	8c 93       	st	X, r24
    //NON Inverting
    SET_BIT(TIMER0_TCCR0_REG,COM01);
    21e4:	a3 e5       	ldi	r26, 0x53	; 83
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e3 e5       	ldi	r30, 0x53	; 83
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 62       	ori	r24, 0x20	; 32
    21f0:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TCCR0_REG,COM00);
    21f2:	a3 e5       	ldi	r26, 0x53	; 83
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e3 e5       	ldi	r30, 0x53	; 83
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8f 7e       	andi	r24, 0xEF	; 239
    21fe:	8c 93       	st	X, r24
   #endif
/***************Set PreScaler Value ****************/
	TIMER0_TCCR0_REG |= TIMER0_PRESCALER;
    2200:	a3 e5       	ldi	r26, 0x53	; 83
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e3 e5       	ldi	r30, 0x53	; 83
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	82 60       	ori	r24, 0x02	; 2
    220c:	8c 93       	st	X, r24
    return STATE_OK;
    220e:	81 e0       	ldi	r24, 0x01	; 1
}
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <Timers_enu_Timer1Init>:
ES_t Timers_enu_Timer1Init(void){
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    //Select Timer1 Mode ==> Mode 14
    SET_BIT(TIMER1_TCCR1A_REG,WGM11);
    2220:	af e4       	ldi	r26, 0x4F	; 79
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	ef e4       	ldi	r30, 0x4F	; 79
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	82 60       	ori	r24, 0x02	; 2
    222c:	8c 93       	st	X, r24
    CLR_BIT(TIMER1_TCCR1A_REG,WGM10);
    222e:	af e4       	ldi	r26, 0x4F	; 79
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ef e4       	ldi	r30, 0x4F	; 79
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	8e 7f       	andi	r24, 0xFE	; 254
    223a:	8c 93       	st	X, r24
    SET_BIT(TIMER1_TCCR1B_REG,WGM12);
    223c:	ae e4       	ldi	r26, 0x4E	; 78
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ee e4       	ldi	r30, 0x4E	; 78
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	88 60       	ori	r24, 0x08	; 8
    2248:	8c 93       	st	X, r24
    SET_BIT(TIMER1_TCCR1B_REG,WGM13);
    224a:	ae e4       	ldi	r26, 0x4E	; 78
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ee e4       	ldi	r30, 0x4E	; 78
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 61       	ori	r24, 0x10	; 16
    2256:	8c 93       	st	X, r24
    //Select Action on OC1A ==> NON Inverting
    SET_BIT(TIMER1_TCCR1A_REG,COM1A1);
    2258:	af e4       	ldi	r26, 0x4F	; 79
    225a:	b0 e0       	ldi	r27, 0x00	; 0
    225c:	ef e4       	ldi	r30, 0x4F	; 79
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	80 68       	ori	r24, 0x80	; 128
    2264:	8c 93       	st	X, r24
    CLR_BIT(TIMER1_TCCR1A_REG,COM1A0);
    2266:	af e4       	ldi	r26, 0x4F	; 79
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	ef e4       	ldi	r30, 0x4F	; 79
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8f 7b       	andi	r24, 0xBF	; 191
    2272:	8c 93       	st	X, r24
    //Set Top Value Of ICR1
    TIMER1_ICR1_REG = 39999;
    2274:	e6 e4       	ldi	r30, 0x46	; 70
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8f e3       	ldi	r24, 0x3F	; 63
    227a:	9c e9       	ldi	r25, 0x9C	; 156
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
    /***************Set PreScaler Value ****************/
	TIMER1_TCCR1B_REG |= TIMER1_PRESCALER;
    2280:	ae e4       	ldi	r26, 0x4E	; 78
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	ee e4       	ldi	r30, 0x4E	; 78
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	82 60       	ori	r24, 0x02	; 2
    228c:	8c 93       	st	X, r24
}
    228e:	0f 90       	pop	r0
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <Timers_enu_SetServoAngle>:
ES_t Timers_enu_SetServoAngle(u8 Copy_u8_servoAngle){
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	00 d0       	rcall	.+0      	; 0x22a0 <Timers_enu_SetServoAngle+0xa>
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_servoAngle<=SERVO_MAX_ANGLE){
    22aa:	8a 81       	ldd	r24, Y+2	; 0x02
    22ac:	85 3b       	cpi	r24, 0xB5	; 181
    22ae:	38 f5       	brcc	.+78     	; 0x22fe <Timers_enu_SetServoAngle+0x68>
        TIMER1_OCR1A_REG = (1000+(Copy_u8_servoAngle*1000UL)/SERVO_MAX_ANGLE)*2;
    22b0:	0a e4       	ldi	r16, 0x4A	; 74
    22b2:	10 e0       	ldi	r17, 0x00	; 0
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	88 2f       	mov	r24, r24
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e0       	ldi	r26, 0x00	; 0
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	28 ee       	ldi	r18, 0xE8	; 232
    22c0:	33 e0       	ldi	r19, 0x03	; 3
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	50 e0       	ldi	r21, 0x00	; 0
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <__mulsi3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	24 eb       	ldi	r18, 0xB4	; 180
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 9d 1a 	call	0x353a	; 0x353a <__udivmodsi4>
    22e2:	da 01       	movw	r26, r20
    22e4:	c9 01       	movw	r24, r18
    22e6:	88 51       	subi	r24, 0x18	; 24
    22e8:	9c 4f       	sbci	r25, 0xFC	; 252
    22ea:	af 4f       	sbci	r26, 0xFF	; 255
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	aa 1f       	adc	r26, r26
    22f4:	bb 1f       	adc	r27, r27
    22f6:	f8 01       	movw	r30, r16
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <Timers_enu_SetServoAngle+0x6a>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    22fe:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
}
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <Timers_enu_Timer0SetCallBack>:
ES_t Timers_enu_Timer0SetCallBack(void(*Copy_pf)(void),u8 Copy_u8_Mode){
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <Timers_enu_Timer0SetCallBack+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <Timers_enu_Timer0SetCallBack+0x8>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	9b 83       	std	Y+3, r25	; 0x03
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pf != NULL && Copy_u8_Mode<2 ){
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	9b 81       	ldd	r25, Y+3	; 0x03
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	81 f0       	breq	.+32     	; 0x234e <Timers_enu_Timer0SetCallBack+0x3e>
    232e:	8c 81       	ldd	r24, Y+4	; 0x04
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	68 f4       	brcc	.+26     	; 0x234e <Timers_enu_Timer0SetCallBack+0x3e>
        Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    2334:	8c 81       	ldd	r24, Y+4	; 0x04
    2336:	88 2f       	mov	r24, r24
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	fc 01       	movw	r30, r24
    2340:	ee 56       	subi	r30, 0x6E	; 110
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	9b 81       	ldd	r25, Y+3	; 0x03
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
    234c:	01 c0       	rjmp	.+2      	; 0x2350 <Timers_enu_Timer0SetCallBack+0x40>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    234e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <Timers_enu_Timer0SetCLKSource>:
ES_t Timers_enu_Timer0SetCLKSource(u8 Copy_u8_CLK_Source){
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <Timers_enu_Timer0SetCLKSource+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_CLK_Source < 8){
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	88 30       	cpi	r24, 0x08	; 8
    2374:	98 f4       	brcc	.+38     	; 0x239c <Timers_enu_Timer0SetCLKSource+0x3c>
        //Clear Old Value of Prescaler
        TIMER0_TCCR0_REG &= RESET_CLK_SOURCE;
    2376:	a3 e5       	ldi	r26, 0x53	; 83
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e3 e5       	ldi	r30, 0x53	; 83
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	88 7f       	andi	r24, 0xF8	; 248
    2382:	8c 93       	st	X, r24
        TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    2384:	a3 e5       	ldi	r26, 0x53	; 83
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	e3 e5       	ldi	r30, 0x53	; 83
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	90 81       	ld	r25, Z
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	89 2b       	or	r24, r25
    2392:	8c 93       	st	X, r24
        Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	80 93 79 00 	sts	0x0079, r24
    239a:	01 c0       	rjmp	.+2      	; 0x239e <Timers_enu_Timer0SetCLKSource+0x3e>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    239c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    239e:	89 81       	ldd	r24, Y+1	; 0x01
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <Timers_enu_Timer0SetCompareMatchValue>:
ES_t Timers_enu_Timer0SetCompareMatchValue(u8 Copy_u8_Value){
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <Timers_enu_Timer0SetCompareMatchValue+0x6>
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Value<=255){
        TIMER0_OCR0_REG = Copy_u8_Value;
    23ba:	ec e5       	ldi	r30, 0x5C	; 92
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	80 83       	st	Z, r24
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    }
    return Local_u8_errorState;
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <__vector_10>:
/*****CTC Mode*****/
void __vector_10(void){
    23ce:	1f 92       	push	r1
    23d0:	0f 92       	push	r0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	0f 92       	push	r0
    23d6:	11 24       	eor	r1, r1
    23d8:	2f 93       	push	r18
    23da:	3f 93       	push	r19
    23dc:	4f 93       	push	r20
    23de:	5f 93       	push	r21
    23e0:	6f 93       	push	r22
    23e2:	7f 93       	push	r23
    23e4:	8f 93       	push	r24
    23e6:	9f 93       	push	r25
    23e8:	af 93       	push	r26
    23ea:	bf 93       	push	r27
    23ec:	ef 93       	push	r30
    23ee:	ff 93       	push	r31
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    if((Timer0_u8_Prescaler == EXTERNAL_FALLING_EDGE) || (Timer0_u8_Prescaler == EXTERNAL_RISING_EDGE)){
    23f8:	80 91 79 00 	lds	r24, 0x0079
    23fc:	86 30       	cpi	r24, 0x06	; 6
    23fe:	21 f0       	breq	.+8      	; 0x2408 <__vector_10+0x3a>
    2400:	80 91 79 00 	lds	r24, 0x0079
    2404:	87 30       	cpi	r24, 0x07	; 7
    2406:	61 f4       	brne	.+24     	; 0x2420 <__vector_10+0x52>
        if(Timers_pf_Timer0[CTC_MODE] != NULL)
    2408:	80 91 94 00 	lds	r24, 0x0094
    240c:	90 91 95 00 	lds	r25, 0x0095
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	31 f1       	breq	.+76     	; 0x2460 <__vector_10+0x92>
            Timers_pf_Timer0[CTC_MODE]();
    2414:	e0 91 94 00 	lds	r30, 0x0094
    2418:	f0 91 95 00 	lds	r31, 0x0095
    241c:	09 95       	icall
    241e:	20 c0       	rjmp	.+64     	; 0x2460 <__vector_10+0x92>
    }
    else{
    static u16 Local_u16_CounterCTC = 0;
    Local_u16_CounterCTC++;
    2420:	80 91 96 00 	lds	r24, 0x0096
    2424:	90 91 97 00 	lds	r25, 0x0097
    2428:	01 96       	adiw	r24, 0x01	; 1
    242a:	90 93 97 00 	sts	0x0097, r25
    242e:	80 93 96 00 	sts	0x0096, r24
    if(Local_u16_CounterCTC == 20000){
    2432:	80 91 96 00 	lds	r24, 0x0096
    2436:	90 91 97 00 	lds	r25, 0x0097
    243a:	2e e4       	ldi	r18, 0x4E	; 78
    243c:	80 32       	cpi	r24, 0x20	; 32
    243e:	92 07       	cpc	r25, r18
    2440:	79 f4       	brne	.+30     	; 0x2460 <__vector_10+0x92>
        Local_u16_CounterCTC = 0;
    2442:	10 92 97 00 	sts	0x0097, r1
    2446:	10 92 96 00 	sts	0x0096, r1
    if(Timers_pf_Timer0[CTC_MODE] != NULL)
    244a:	80 91 94 00 	lds	r24, 0x0094
    244e:	90 91 95 00 	lds	r25, 0x0095
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	29 f0       	breq	.+10     	; 0x2460 <__vector_10+0x92>
        Timers_pf_Timer0[CTC_MODE]();
    2456:	e0 91 94 00 	lds	r30, 0x0094
    245a:	f0 91 95 00 	lds	r31, 0x0095
    245e:	09 95       	icall
    }
    }

}
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	ff 91       	pop	r31
    2466:	ef 91       	pop	r30
    2468:	bf 91       	pop	r27
    246a:	af 91       	pop	r26
    246c:	9f 91       	pop	r25
    246e:	8f 91       	pop	r24
    2470:	7f 91       	pop	r23
    2472:	6f 91       	pop	r22
    2474:	5f 91       	pop	r21
    2476:	4f 91       	pop	r20
    2478:	3f 91       	pop	r19
    247a:	2f 91       	pop	r18
    247c:	0f 90       	pop	r0
    247e:	0f be       	out	0x3f, r0	; 63
    2480:	0f 90       	pop	r0
    2482:	1f 90       	pop	r1
    2484:	18 95       	reti

00002486 <__vector_11>:
/*****Normal Mode*****/
void __vector_11(void){
    2486:	1f 92       	push	r1
    2488:	0f 92       	push	r0
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	0f 92       	push	r0
    248e:	11 24       	eor	r1, r1
    2490:	2f 93       	push	r18
    2492:	3f 93       	push	r19
    2494:	4f 93       	push	r20
    2496:	5f 93       	push	r21
    2498:	6f 93       	push	r22
    249a:	7f 93       	push	r23
    249c:	8f 93       	push	r24
    249e:	9f 93       	push	r25
    24a0:	af 93       	push	r26
    24a2:	bf 93       	push	r27
    24a4:	ef 93       	push	r30
    24a6:	ff 93       	push	r31
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    if((Timer0_u8_Prescaler == EXTERNAL_FALLING_EDGE) || (Timer0_u8_Prescaler == EXTERNAL_RISING_EDGE)){
    24b0:	80 91 79 00 	lds	r24, 0x0079
    24b4:	86 30       	cpi	r24, 0x06	; 6
    24b6:	21 f0       	breq	.+8      	; 0x24c0 <__vector_11+0x3a>
    24b8:	80 91 79 00 	lds	r24, 0x0079
    24bc:	87 30       	cpi	r24, 0x07	; 7
    24be:	61 f4       	brne	.+24     	; 0x24d8 <__vector_11+0x52>
        if(Timers_pf_Timer0[NORMAL_MODE] != NULL)
    24c0:	80 91 92 00 	lds	r24, 0x0092
    24c4:	90 91 93 00 	lds	r25, 0x0093
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	51 f1       	breq	.+84     	; 0x2520 <__vector_11+0x9a>
            Timers_pf_Timer0[NORMAL_MODE]();
    24cc:	e0 91 92 00 	lds	r30, 0x0092
    24d0:	f0 91 93 00 	lds	r31, 0x0093
    24d4:	09 95       	icall
    24d6:	24 c0       	rjmp	.+72     	; 0x2520 <__vector_11+0x9a>
    }
    else{
    static u16 Local_u16_CounterOVF = 0;
    Local_u16_CounterOVF++;
    24d8:	80 91 98 00 	lds	r24, 0x0098
    24dc:	90 91 99 00 	lds	r25, 0x0099
    24e0:	01 96       	adiw	r24, 0x01	; 1
    24e2:	90 93 99 00 	sts	0x0099, r25
    24e6:	80 93 98 00 	sts	0x0098, r24
    if(Local_u16_CounterOVF == 7813){
    24ea:	80 91 98 00 	lds	r24, 0x0098
    24ee:	90 91 99 00 	lds	r25, 0x0099
    24f2:	2e e1       	ldi	r18, 0x1E	; 30
    24f4:	85 38       	cpi	r24, 0x85	; 133
    24f6:	92 07       	cpc	r25, r18
    24f8:	99 f4       	brne	.+38     	; 0x2520 <__vector_11+0x9a>
        /*clear overflow counter*/
        Local_u16_CounterOVF = 0;
    24fa:	10 92 99 00 	sts	0x0099, r1
    24fe:	10 92 98 00 	sts	0x0098, r1
        /*update preload Value*/
        TIMER0_TCNT0_REG = TIMER0_PRELOAD_VALUE;
    2502:	e2 e5       	ldi	r30, 0x52	; 82
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 e8       	ldi	r24, 0x80	; 128
    2508:	80 83       	st	Z, r24
        /*calling App function*/
        if(Timers_pf_Timer0[NORMAL_MODE] != NULL)
    250a:	80 91 92 00 	lds	r24, 0x0092
    250e:	90 91 93 00 	lds	r25, 0x0093
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	29 f0       	breq	.+10     	; 0x2520 <__vector_11+0x9a>
            Timers_pf_Timer0[NORMAL_MODE]();
    2516:	e0 91 92 00 	lds	r30, 0x0092
    251a:	f0 91 93 00 	lds	r31, 0x0093
    251e:	09 95       	icall
    }
    }
    
}
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	ff 91       	pop	r31
    2526:	ef 91       	pop	r30
    2528:	bf 91       	pop	r27
    252a:	af 91       	pop	r26
    252c:	9f 91       	pop	r25
    252e:	8f 91       	pop	r24
    2530:	7f 91       	pop	r23
    2532:	6f 91       	pop	r22
    2534:	5f 91       	pop	r21
    2536:	4f 91       	pop	r20
    2538:	3f 91       	pop	r19
    253a:	2f 91       	pop	r18
    253c:	0f 90       	pop	r0
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	0f 90       	pop	r0
    2542:	1f 90       	pop	r1
    2544:	18 95       	reti

00002546 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    254e:	af e5       	ldi	r26, 0x5F	; 95
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	ef e5       	ldi	r30, 0x5F	; 95
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	80 68       	ori	r24, 0x80	; 128
    255a:	8c 93       	st	X, r24
    return STATE_OK;
    255c:	81 e0       	ldi	r24, 0x01	; 1
}
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    256c:	af e5       	ldi	r26, 0x5F	; 95
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	ef e5       	ldi	r30, 0x5F	; 95
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8f 77       	andi	r24, 0x7F	; 127
    2578:	8c 93       	st	X, r24
    return STATE_OK;
    257a:	81 e0       	ldi	r24, 0x01	; 1
}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <EXTI_enu_EXTI_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_EXTI_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	2b 97       	sbiw	r28, 0x0b	; 11
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	f8 94       	cli
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	0f be       	out	0x3f, r0	; 63
    2594:	cd bf       	out	0x3d, r28	; 61
    2596:	8a 83       	std	Y+2, r24	; 0x02
    2598:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	83 30       	cpi	r24, 0x03	; 3
    25a2:	08 f0       	brcs	.+2      	; 0x25a6 <EXTI_enu_EXTI_Enable+0x24>
    25a4:	07 c1       	rjmp	.+526    	; 0x27b4 <EXTI_enu_EXTI_Enable+0x232>
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	84 30       	cpi	r24, 0x04	; 4
    25aa:	08 f0       	brcs	.+2      	; 0x25ae <EXTI_enu_EXTI_Enable+0x2c>
    25ac:	03 c1       	rjmp	.+518    	; 0x27b4 <EXTI_enu_EXTI_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	3b 87       	std	Y+11, r19	; 0x0b
    25b6:	2a 87       	std	Y+10, r18	; 0x0a
    25b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	91 05       	cpc	r25, r1
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <EXTI_enu_EXTI_Enable+0x42>
    25c2:	6d c0       	rjmp	.+218    	; 0x269e <EXTI_enu_EXTI_Enable+0x11c>
    25c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    25c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    25c8:	22 30       	cpi	r18, 0x02	; 2
    25ca:	31 05       	cpc	r19, r1
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <EXTI_enu_EXTI_Enable+0x4e>
    25ce:	c9 c0       	rjmp	.+402    	; 0x2762 <EXTI_enu_EXTI_Enable+0x1e0>
    25d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	09 f0       	breq	.+2      	; 0x25da <EXTI_enu_EXTI_Enable+0x58>
    25d8:	ee c0       	rjmp	.+476    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    25da:	ab e5       	ldi	r26, 0x5B	; 91
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	eb e5       	ldi	r30, 0x5B	; 91
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	80 64       	ori	r24, 0x40	; 64
    25e6:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	39 87       	std	Y+9, r19	; 0x09
    25f0:	28 87       	std	Y+8, r18	; 0x08
    25f2:	88 85       	ldd	r24, Y+8	; 0x08
    25f4:	99 85       	ldd	r25, Y+9	; 0x09
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	91 05       	cpc	r25, r1
    25fa:	21 f1       	breq	.+72     	; 0x2644 <EXTI_enu_EXTI_Enable+0xc2>
    25fc:	28 85       	ldd	r18, Y+8	; 0x08
    25fe:	39 85       	ldd	r19, Y+9	; 0x09
    2600:	22 30       	cpi	r18, 0x02	; 2
    2602:	31 05       	cpc	r19, r1
    2604:	2c f4       	brge	.+10     	; 0x2610 <EXTI_enu_EXTI_Enable+0x8e>
    2606:	88 85       	ldd	r24, Y+8	; 0x08
    2608:	99 85       	ldd	r25, Y+9	; 0x09
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	61 f0       	breq	.+24     	; 0x2626 <EXTI_enu_EXTI_Enable+0xa4>
    260e:	d3 c0       	rjmp	.+422    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
    2610:	28 85       	ldd	r18, Y+8	; 0x08
    2612:	39 85       	ldd	r19, Y+9	; 0x09
    2614:	22 30       	cpi	r18, 0x02	; 2
    2616:	31 05       	cpc	r19, r1
    2618:	21 f1       	breq	.+72     	; 0x2662 <EXTI_enu_EXTI_Enable+0xe0>
    261a:	88 85       	ldd	r24, Y+8	; 0x08
    261c:	99 85       	ldd	r25, Y+9	; 0x09
    261e:	83 30       	cpi	r24, 0x03	; 3
    2620:	91 05       	cpc	r25, r1
    2622:	71 f1       	breq	.+92     	; 0x2680 <EXTI_enu_EXTI_Enable+0xfe>
    2624:	c8 c0       	rjmp	.+400    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2626:	a5 e5       	ldi	r26, 0x55	; 85
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e5 e5       	ldi	r30, 0x55	; 85
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8e 7f       	andi	r24, 0xFE	; 254
    2632:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2634:	a5 e5       	ldi	r26, 0x55	; 85
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e5 e5       	ldi	r30, 0x55	; 85
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	8d 7f       	andi	r24, 0xFD	; 253
    2640:	8c 93       	st	X, r24
    2642:	b9 c0       	rjmp	.+370    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2644:	a5 e5       	ldi	r26, 0x55	; 85
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	e5 e5       	ldi	r30, 0x55	; 85
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	81 60       	ori	r24, 0x01	; 1
    2650:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2652:	a5 e5       	ldi	r26, 0x55	; 85
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	e5 e5       	ldi	r30, 0x55	; 85
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8d 7f       	andi	r24, 0xFD	; 253
    265e:	8c 93       	st	X, r24
    2660:	aa c0       	rjmp	.+340    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2662:	a5 e5       	ldi	r26, 0x55	; 85
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e5 e5       	ldi	r30, 0x55	; 85
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8e 7f       	andi	r24, 0xFE	; 254
    266e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2670:	a5 e5       	ldi	r26, 0x55	; 85
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e5 e5       	ldi	r30, 0x55	; 85
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	82 60       	ori	r24, 0x02	; 2
    267c:	8c 93       	st	X, r24
    267e:	9b c0       	rjmp	.+310    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2680:	a5 e5       	ldi	r26, 0x55	; 85
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e5 e5       	ldi	r30, 0x55	; 85
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	81 60       	ori	r24, 0x01	; 1
    268c:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    268e:	a5 e5       	ldi	r26, 0x55	; 85
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e5 e5       	ldi	r30, 0x55	; 85
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	82 60       	ori	r24, 0x02	; 2
    269a:	8c 93       	st	X, r24
    269c:	8c c0       	rjmp	.+280    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    269e:	ab e5       	ldi	r26, 0x5B	; 91
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	eb e5       	ldi	r30, 0x5B	; 91
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	80 68       	ori	r24, 0x80	; 128
    26aa:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	3f 83       	std	Y+7, r19	; 0x07
    26b4:	2e 83       	std	Y+6, r18	; 0x06
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	91 05       	cpc	r25, r1
    26be:	21 f1       	breq	.+72     	; 0x2708 <EXTI_enu_EXTI_Enable+0x186>
    26c0:	2e 81       	ldd	r18, Y+6	; 0x06
    26c2:	3f 81       	ldd	r19, Y+7	; 0x07
    26c4:	22 30       	cpi	r18, 0x02	; 2
    26c6:	31 05       	cpc	r19, r1
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <EXTI_enu_EXTI_Enable+0x152>
    26ca:	8e 81       	ldd	r24, Y+6	; 0x06
    26cc:	9f 81       	ldd	r25, Y+7	; 0x07
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	61 f0       	breq	.+24     	; 0x26ea <EXTI_enu_EXTI_Enable+0x168>
    26d2:	71 c0       	rjmp	.+226    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
    26d4:	2e 81       	ldd	r18, Y+6	; 0x06
    26d6:	3f 81       	ldd	r19, Y+7	; 0x07
    26d8:	22 30       	cpi	r18, 0x02	; 2
    26da:	31 05       	cpc	r19, r1
    26dc:	21 f1       	breq	.+72     	; 0x2726 <EXTI_enu_EXTI_Enable+0x1a4>
    26de:	8e 81       	ldd	r24, Y+6	; 0x06
    26e0:	9f 81       	ldd	r25, Y+7	; 0x07
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	91 05       	cpc	r25, r1
    26e6:	71 f1       	breq	.+92     	; 0x2744 <EXTI_enu_EXTI_Enable+0x1c2>
    26e8:	66 c0       	rjmp	.+204    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    26ea:	a5 e5       	ldi	r26, 0x55	; 85
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e5 e5       	ldi	r30, 0x55	; 85
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	8b 7f       	andi	r24, 0xFB	; 251
    26f6:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    26f8:	a5 e5       	ldi	r26, 0x55	; 85
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	e5 e5       	ldi	r30, 0x55	; 85
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	87 7f       	andi	r24, 0xF7	; 247
    2704:	8c 93       	st	X, r24
    2706:	57 c0       	rjmp	.+174    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2708:	a5 e5       	ldi	r26, 0x55	; 85
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e5 e5       	ldi	r30, 0x55	; 85
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	84 60       	ori	r24, 0x04	; 4
    2714:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2716:	a5 e5       	ldi	r26, 0x55	; 85
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e5 e5       	ldi	r30, 0x55	; 85
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	87 7f       	andi	r24, 0xF7	; 247
    2722:	8c 93       	st	X, r24
    2724:	48 c0       	rjmp	.+144    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2726:	a5 e5       	ldi	r26, 0x55	; 85
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e5 e5       	ldi	r30, 0x55	; 85
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	8b 7f       	andi	r24, 0xFB	; 251
    2732:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2734:	a5 e5       	ldi	r26, 0x55	; 85
    2736:	b0 e0       	ldi	r27, 0x00	; 0
    2738:	e5 e5       	ldi	r30, 0x55	; 85
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	88 60       	ori	r24, 0x08	; 8
    2740:	8c 93       	st	X, r24
    2742:	39 c0       	rjmp	.+114    	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2744:	a5 e5       	ldi	r26, 0x55	; 85
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e5 e5       	ldi	r30, 0x55	; 85
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	84 60       	ori	r24, 0x04	; 4
    2750:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2752:	a5 e5       	ldi	r26, 0x55	; 85
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e5 e5       	ldi	r30, 0x55	; 85
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	88 60       	ori	r24, 0x08	; 8
    275e:	8c 93       	st	X, r24
    2760:	2a c0       	rjmp	.+84     	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    2762:	ab e5       	ldi	r26, 0x5B	; 91
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	eb e5       	ldi	r30, 0x5B	; 91
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	80 62       	ori	r24, 0x20	; 32
    276e:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    2770:	8b 81       	ldd	r24, Y+3	; 0x03
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	3d 83       	std	Y+5, r19	; 0x05
    2778:	2c 83       	std	Y+4, r18	; 0x04
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	9d 81       	ldd	r25, Y+5	; 0x05
    277e:	82 30       	cpi	r24, 0x02	; 2
    2780:	91 05       	cpc	r25, r1
    2782:	31 f0       	breq	.+12     	; 0x2790 <EXTI_enu_EXTI_Enable+0x20e>
    2784:	2c 81       	ldd	r18, Y+4	; 0x04
    2786:	3d 81       	ldd	r19, Y+5	; 0x05
    2788:	23 30       	cpi	r18, 0x03	; 3
    278a:	31 05       	cpc	r19, r1
    278c:	49 f0       	breq	.+18     	; 0x27a0 <EXTI_enu_EXTI_Enable+0x21e>
    278e:	10 c0       	rjmp	.+32     	; 0x27b0 <EXTI_enu_EXTI_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    2790:	a4 e5       	ldi	r26, 0x54	; 84
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	e4 e5       	ldi	r30, 0x54	; 84
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	8f 7b       	andi	r24, 0xBF	; 191
    279c:	8c 93       	st	X, r24
    279e:	0b c0       	rjmp	.+22     	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    27a0:	a4 e5       	ldi	r26, 0x54	; 84
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e4 e5       	ldi	r30, 0x54	; 84
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 64       	ori	r24, 0x40	; 64
    27ac:	8c 93       	st	X, r24
    27ae:	03 c0       	rjmp	.+6      	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    27b0:	19 82       	std	Y+1, r1	; 0x01
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <EXTI_enu_EXTI_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    27b4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b8:	2b 96       	adiw	r28, 0x0b	; 11
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	de bf       	out	0x3e, r29	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	cd bf       	out	0x3d, r28	; 61
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <EXTI_enu_EXTI_Disable>:

ES_t EXTI_enu_EXTI_Disable(u8 Copy_u8_EXTI_Index)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <EXTI_enu_EXTI_Disable+0x6>
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <EXTI_enu_EXTI_Disable+0x8>
    27d2:	cd b7       	in	r28, 0x3d	; 61
    27d4:	de b7       	in	r29, 0x3e	; 62
    27d6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	83 30       	cpi	r24, 0x03	; 3
    27e0:	58 f5       	brcc	.+86     	; 0x2838 <EXTI_enu_EXTI_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	3c 83       	std	Y+4, r19	; 0x04
    27ea:	2b 83       	std	Y+3, r18	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	91 05       	cpc	r25, r1
    27f4:	89 f0       	breq	.+34     	; 0x2818 <EXTI_enu_EXTI_Disable+0x4e>
    27f6:	2b 81       	ldd	r18, Y+3	; 0x03
    27f8:	3c 81       	ldd	r19, Y+4	; 0x04
    27fa:	22 30       	cpi	r18, 0x02	; 2
    27fc:	31 05       	cpc	r19, r1
    27fe:	a1 f0       	breq	.+40     	; 0x2828 <EXTI_enu_EXTI_Disable+0x5e>
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	9c 81       	ldd	r25, Y+4	; 0x04
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	c9 f4       	brne	.+50     	; 0x283a <EXTI_enu_EXTI_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    2808:	ab e5       	ldi	r26, 0x5B	; 91
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	eb e5       	ldi	r30, 0x5B	; 91
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	8f 7b       	andi	r24, 0xBF	; 191
    2814:	8c 93       	st	X, r24
    2816:	11 c0       	rjmp	.+34     	; 0x283a <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    2818:	ab e5       	ldi	r26, 0x5B	; 91
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	eb e5       	ldi	r30, 0x5B	; 91
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	8f 77       	andi	r24, 0x7F	; 127
    2824:	8c 93       	st	X, r24
    2826:	09 c0       	rjmp	.+18     	; 0x283a <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    2828:	ab e5       	ldi	r26, 0x5B	; 91
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	eb e5       	ldi	r30, 0x5B	; 91
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	8f 7d       	andi	r24, 0xDF	; 223
    2834:	8c 93       	st	X, r24
    2836:	01 c0       	rjmp	.+2      	; 0x283a <EXTI_enu_EXTI_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2838:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
}
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	cf 91       	pop	r28
    2846:	df 91       	pop	r29
    2848:	08 95       	ret

0000284a <EXTI_enu_setCallBack>:

ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    284a:	df 93       	push	r29
    284c:	cf 93       	push	r28
    284e:	00 d0       	rcall	.+0      	; 0x2850 <EXTI_enu_setCallBack+0x6>
    2850:	00 d0       	rcall	.+0      	; 0x2852 <EXTI_enu_setCallBack+0x8>
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	9b 83       	std	Y+3, r25	; 0x03
    2858:	8a 83       	std	Y+2, r24	; 0x02
    285a:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	81 f0       	breq	.+32     	; 0x2888 <EXTI_enu_setCallBack+0x3e>
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	83 30       	cpi	r24, 0x03	; 3
    286c:	68 f4       	brcc	.+26     	; 0x2888 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    286e:	8c 81       	ldd	r24, Y+4	; 0x04
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	fc 01       	movw	r30, r24
    287a:	e6 56       	subi	r30, 0x66	; 102
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	01 c0       	rjmp	.+2      	; 0x288a <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2888:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    289a:	1f 92       	push	r1
    289c:	0f 92       	push	r0
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	0f 92       	push	r0
    28a2:	11 24       	eor	r1, r1
    28a4:	2f 93       	push	r18
    28a6:	3f 93       	push	r19
    28a8:	4f 93       	push	r20
    28aa:	5f 93       	push	r21
    28ac:	6f 93       	push	r22
    28ae:	7f 93       	push	r23
    28b0:	8f 93       	push	r24
    28b2:	9f 93       	push	r25
    28b4:	af 93       	push	r26
    28b6:	bf 93       	push	r27
    28b8:	ef 93       	push	r30
    28ba:	ff 93       	push	r31
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    28c4:	80 91 9a 00 	lds	r24, 0x009A
    28c8:	90 91 9b 00 	lds	r25, 0x009B
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	29 f0       	breq	.+10     	; 0x28da <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    28d0:	e0 91 9a 00 	lds	r30, 0x009A
    28d4:	f0 91 9b 00 	lds	r31, 0x009B
    28d8:	09 95       	icall
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	0f 90       	pop	r0
    28fc:	1f 90       	pop	r1
    28fe:	18 95       	reti

00002900 <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    2900:	1f 92       	push	r1
    2902:	0f 92       	push	r0
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	0f 92       	push	r0
    2908:	11 24       	eor	r1, r1
    290a:	2f 93       	push	r18
    290c:	3f 93       	push	r19
    290e:	4f 93       	push	r20
    2910:	5f 93       	push	r21
    2912:	6f 93       	push	r22
    2914:	7f 93       	push	r23
    2916:	8f 93       	push	r24
    2918:	9f 93       	push	r25
    291a:	af 93       	push	r26
    291c:	bf 93       	push	r27
    291e:	ef 93       	push	r30
    2920:	ff 93       	push	r31
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    292a:	80 91 9c 00 	lds	r24, 0x009C
    292e:	90 91 9d 00 	lds	r25, 0x009D
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	29 f0       	breq	.+10     	; 0x2940 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    2936:	e0 91 9c 00 	lds	r30, 0x009C
    293a:	f0 91 9d 00 	lds	r31, 0x009D
    293e:	09 95       	icall
}
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	ff 91       	pop	r31
    2946:	ef 91       	pop	r30
    2948:	bf 91       	pop	r27
    294a:	af 91       	pop	r26
    294c:	9f 91       	pop	r25
    294e:	8f 91       	pop	r24
    2950:	7f 91       	pop	r23
    2952:	6f 91       	pop	r22
    2954:	5f 91       	pop	r21
    2956:	4f 91       	pop	r20
    2958:	3f 91       	pop	r19
    295a:	2f 91       	pop	r18
    295c:	0f 90       	pop	r0
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	0f 90       	pop	r0
    2962:	1f 90       	pop	r1
    2964:	18 95       	reti

00002966 <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    2966:	1f 92       	push	r1
    2968:	0f 92       	push	r0
    296a:	0f b6       	in	r0, 0x3f	; 63
    296c:	0f 92       	push	r0
    296e:	11 24       	eor	r1, r1
    2970:	2f 93       	push	r18
    2972:	3f 93       	push	r19
    2974:	4f 93       	push	r20
    2976:	5f 93       	push	r21
    2978:	6f 93       	push	r22
    297a:	7f 93       	push	r23
    297c:	8f 93       	push	r24
    297e:	9f 93       	push	r25
    2980:	af 93       	push	r26
    2982:	bf 93       	push	r27
    2984:	ef 93       	push	r30
    2986:	ff 93       	push	r31
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    2990:	80 91 9e 00 	lds	r24, 0x009E
    2994:	90 91 9f 00 	lds	r25, 0x009F
    2998:	00 97       	sbiw	r24, 0x00	; 0
    299a:	29 f0       	breq	.+10     	; 0x29a6 <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    299c:	e0 91 9e 00 	lds	r30, 0x009E
    29a0:	f0 91 9f 00 	lds	r31, 0x009F
    29a4:	09 95       	icall
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	ff 91       	pop	r31
    29ac:	ef 91       	pop	r30
    29ae:	bf 91       	pop	r27
    29b0:	af 91       	pop	r26
    29b2:	9f 91       	pop	r25
    29b4:	8f 91       	pop	r24
    29b6:	7f 91       	pop	r23
    29b8:	6f 91       	pop	r22
    29ba:	5f 91       	pop	r21
    29bc:	4f 91       	pop	r20
    29be:	3f 91       	pop	r19
    29c0:	2f 91       	pop	r18
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    29d4:	ea e3       	ldi	r30, 0x3A	; 58
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	8f e7       	ldi	r24, 0x7F	; 127
    29da:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    29dc:	e7 e3       	ldi	r30, 0x37	; 55
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	8d ef       	ldi	r24, 0xFD	; 253
    29e2:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    29e4:	e4 e3       	ldi	r30, 0x34	; 52
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	83 e1       	ldi	r24, 0x13	; 19
    29ea:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    29ec:	e1 e3       	ldi	r30, 0x31	; 49
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    29f2:	eb e3       	ldi	r30, 0x3B	; 59
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    29f8:	e8 e3       	ldi	r30, 0x38	; 56
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	84 ef       	ldi	r24, 0xF4	; 244
    29fe:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    2a00:	e5 e3       	ldi	r30, 0x35	; 53
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    2a06:	e2 e3       	ldi	r30, 0x32	; 50
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	8c e3       	ldi	r24, 0x3C	; 60
    2a0c:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	2e 97       	sbiw	r28, 0x0e	; 14
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	6b 83       	std	Y+3, r22	; 0x03
    2a2e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	84 30       	cpi	r24, 0x04	; 4
    2a38:	08 f0       	brcs	.+2      	; 0x2a3c <DIO_enu_SetPinDirection+0x26>
    2a3a:	0c c1       	rjmp	.+536    	; 0x2c54 <DIO_enu_SetPinDirection+0x23e>
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	88 30       	cpi	r24, 0x08	; 8
    2a40:	08 f0       	brcs	.+2      	; 0x2a44 <DIO_enu_SetPinDirection+0x2e>
    2a42:	08 c1       	rjmp	.+528    	; 0x2c54 <DIO_enu_SetPinDirection+0x23e>
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	21 f0       	breq	.+8      	; 0x2a52 <DIO_enu_SetPinDirection+0x3c>
    2a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4c:	88 23       	and	r24, r24
    2a4e:	09 f0       	breq	.+2      	; 0x2a52 <DIO_enu_SetPinDirection+0x3c>
    2a50:	01 c1       	rjmp	.+514    	; 0x2c54 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	28 2f       	mov	r18, r24
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	3e 87       	std	Y+14, r19	; 0x0e
    2a5a:	2d 87       	std	Y+13, r18	; 0x0d
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	81 30       	cpi	r24, 0x01	; 1
    2a62:	91 05       	cpc	r25, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <DIO_enu_SetPinDirection+0x52>
    2a66:	4f c0       	rjmp	.+158    	; 0x2b06 <DIO_enu_SetPinDirection+0xf0>
    2a68:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a6a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a6c:	22 30       	cpi	r18, 0x02	; 2
    2a6e:	31 05       	cpc	r19, r1
    2a70:	2c f4       	brge	.+10     	; 0x2a7c <DIO_enu_SetPinDirection+0x66>
    2a72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	71 f0       	breq	.+28     	; 0x2a96 <DIO_enu_SetPinDirection+0x80>
    2a7a:	ed c0       	rjmp	.+474    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
    2a7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a80:	22 30       	cpi	r18, 0x02	; 2
    2a82:	31 05       	cpc	r19, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <DIO_enu_SetPinDirection+0x72>
    2a86:	77 c0       	rjmp	.+238    	; 0x2b76 <DIO_enu_SetPinDirection+0x160>
    2a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8c:	83 30       	cpi	r24, 0x03	; 3
    2a8e:	91 05       	cpc	r25, r1
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <DIO_enu_SetPinDirection+0x7e>
    2a92:	a9 c0       	rjmp	.+338    	; 0x2be6 <DIO_enu_SetPinDirection+0x1d0>
    2a94:	e0 c0       	rjmp	.+448    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	3c 87       	std	Y+12, r19	; 0x0c
    2a9e:	2b 87       	std	Y+11, r18	; 0x0b
    2aa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	d1 f0       	breq	.+52     	; 0x2adc <DIO_enu_SetPinDirection+0xc6>
    2aa8:	2b 85       	ldd	r18, Y+11	; 0x0b
    2aaa:	3c 85       	ldd	r19, Y+12	; 0x0c
    2aac:	21 30       	cpi	r18, 0x01	; 1
    2aae:	31 05       	cpc	r19, r1
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <DIO_enu_SetPinDirection+0x9e>
    2ab2:	d1 c0       	rjmp	.+418    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    2ab4:	aa e3       	ldi	r26, 0x3A	; 58
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	ea e3       	ldi	r30, 0x3A	; 58
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	48 2f       	mov	r20, r24
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	02 2e       	mov	r0, r18
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <DIO_enu_SetPinDirection+0xbc>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	0a 94       	dec	r0
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <DIO_enu_SetPinDirection+0xb8>
    2ad6:	84 2b       	or	r24, r20
    2ad8:	8c 93       	st	X, r24
    2ada:	bd c0       	rjmp	.+378    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    2adc:	aa e3       	ldi	r26, 0x3A	; 58
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	ea e3       	ldi	r30, 0x3A	; 58
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	48 2f       	mov	r20, r24
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	28 2f       	mov	r18, r24
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	02 2e       	mov	r0, r18
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <DIO_enu_SetPinDirection+0xe4>
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	0a 94       	dec	r0
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <DIO_enu_SetPinDirection+0xe0>
    2afe:	80 95       	com	r24
    2b00:	84 23       	and	r24, r20
    2b02:	8c 93       	st	X, r24
    2b04:	a8 c0       	rjmp	.+336    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    2b06:	8c 81       	ldd	r24, Y+4	; 0x04
    2b08:	28 2f       	mov	r18, r24
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	3a 87       	std	Y+10, r19	; 0x0a
    2b0e:	29 87       	std	Y+9, r18	; 0x09
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	d1 f0       	breq	.+52     	; 0x2b4c <DIO_enu_SetPinDirection+0x136>
    2b18:	29 85       	ldd	r18, Y+9	; 0x09
    2b1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b1c:	21 30       	cpi	r18, 0x01	; 1
    2b1e:	31 05       	cpc	r19, r1
    2b20:	09 f0       	breq	.+2      	; 0x2b24 <DIO_enu_SetPinDirection+0x10e>
    2b22:	99 c0       	rjmp	.+306    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    2b24:	a7 e3       	ldi	r26, 0x37	; 55
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	e7 e3       	ldi	r30, 0x37	; 55
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	48 2f       	mov	r20, r24
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	02 2e       	mov	r0, r18
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <DIO_enu_SetPinDirection+0x12c>
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	0a 94       	dec	r0
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <DIO_enu_SetPinDirection+0x128>
    2b46:	84 2b       	or	r24, r20
    2b48:	8c 93       	st	X, r24
    2b4a:	85 c0       	rjmp	.+266    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    2b4c:	a7 e3       	ldi	r26, 0x37	; 55
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	e7 e3       	ldi	r30, 0x37	; 55
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	48 2f       	mov	r20, r24
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	28 2f       	mov	r18, r24
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	02 2e       	mov	r0, r18
    2b64:	02 c0       	rjmp	.+4      	; 0x2b6a <DIO_enu_SetPinDirection+0x154>
    2b66:	88 0f       	add	r24, r24
    2b68:	99 1f       	adc	r25, r25
    2b6a:	0a 94       	dec	r0
    2b6c:	e2 f7       	brpl	.-8      	; 0x2b66 <DIO_enu_SetPinDirection+0x150>
    2b6e:	80 95       	com	r24
    2b70:	84 23       	and	r24, r20
    2b72:	8c 93       	st	X, r24
    2b74:	70 c0       	rjmp	.+224    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    2b76:	8c 81       	ldd	r24, Y+4	; 0x04
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	38 87       	std	Y+8, r19	; 0x08
    2b7e:	2f 83       	std	Y+7, r18	; 0x07
    2b80:	8f 81       	ldd	r24, Y+7	; 0x07
    2b82:	98 85       	ldd	r25, Y+8	; 0x08
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	d1 f0       	breq	.+52     	; 0x2bbc <DIO_enu_SetPinDirection+0x1a6>
    2b88:	2f 81       	ldd	r18, Y+7	; 0x07
    2b8a:	38 85       	ldd	r19, Y+8	; 0x08
    2b8c:	21 30       	cpi	r18, 0x01	; 1
    2b8e:	31 05       	cpc	r19, r1
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <DIO_enu_SetPinDirection+0x17e>
    2b92:	61 c0       	rjmp	.+194    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    2b94:	a4 e3       	ldi	r26, 0x34	; 52
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e4 e3       	ldi	r30, 0x34	; 52
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	48 2f       	mov	r20, r24
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	02 2e       	mov	r0, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_enu_SetPinDirection+0x19c>
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	0a 94       	dec	r0
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_enu_SetPinDirection+0x198>
    2bb6:	84 2b       	or	r24, r20
    2bb8:	8c 93       	st	X, r24
    2bba:	4d c0       	rjmp	.+154    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    2bbc:	a4 e3       	ldi	r26, 0x34	; 52
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e4 e3       	ldi	r30, 0x34	; 52
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	48 2f       	mov	r20, r24
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	02 2e       	mov	r0, r18
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <DIO_enu_SetPinDirection+0x1c4>
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	0a 94       	dec	r0
    2bdc:	e2 f7       	brpl	.-8      	; 0x2bd6 <DIO_enu_SetPinDirection+0x1c0>
    2bde:	80 95       	com	r24
    2be0:	84 23       	and	r24, r20
    2be2:	8c 93       	st	X, r24
    2be4:	38 c0       	rjmp	.+112    	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	3e 83       	std	Y+6, r19	; 0x06
    2bee:	2d 83       	std	Y+5, r18	; 0x05
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	c9 f0       	breq	.+50     	; 0x2c2a <DIO_enu_SetPinDirection+0x214>
    2bf8:	2d 81       	ldd	r18, Y+5	; 0x05
    2bfa:	3e 81       	ldd	r19, Y+6	; 0x06
    2bfc:	21 30       	cpi	r18, 0x01	; 1
    2bfe:	31 05       	cpc	r19, r1
    2c00:	51 f5       	brne	.+84     	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    2c02:	a1 e3       	ldi	r26, 0x31	; 49
    2c04:	b0 e0       	ldi	r27, 0x00	; 0
    2c06:	e1 e3       	ldi	r30, 0x31	; 49
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	80 81       	ld	r24, Z
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	02 2e       	mov	r0, r18
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <DIO_enu_SetPinDirection+0x20a>
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	0a 94       	dec	r0
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <DIO_enu_SetPinDirection+0x206>
    2c24:	84 2b       	or	r24, r20
    2c26:	8c 93       	st	X, r24
    2c28:	16 c0       	rjmp	.+44     	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    2c2a:	a1 e3       	ldi	r26, 0x31	; 49
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e1 e3       	ldi	r30, 0x31	; 49
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	48 2f       	mov	r20, r24
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	02 2e       	mov	r0, r18
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <DIO_enu_SetPinDirection+0x232>
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	0a 94       	dec	r0
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <DIO_enu_SetPinDirection+0x22e>
    2c4c:	80 95       	com	r24
    2c4e:	84 23       	and	r24, r20
    2c50:	8c 93       	st	X, r24
    2c52:	01 c0       	rjmp	.+2      	; 0x2c56 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2c54:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c58:	2e 96       	adiw	r28, 0x0e	; 14
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	2e 97       	sbiw	r28, 0x0e	; 14
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	de bf       	out	0x3e, r29	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	cd bf       	out	0x3d, r28	; 61
    2c7e:	8a 83       	std	Y+2, r24	; 0x02
    2c80:	6b 83       	std	Y+3, r22	; 0x03
    2c82:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	84 30       	cpi	r24, 0x04	; 4
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <DIO_enu_SetPinValue+0x26>
    2c8e:	0c c1       	rjmp	.+536    	; 0x2ea8 <DIO_enu_SetPinValue+0x23e>
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	88 30       	cpi	r24, 0x08	; 8
    2c94:	08 f0       	brcs	.+2      	; 0x2c98 <DIO_enu_SetPinValue+0x2e>
    2c96:	08 c1       	rjmp	.+528    	; 0x2ea8 <DIO_enu_SetPinValue+0x23e>
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	21 f0       	breq	.+8      	; 0x2ca6 <DIO_enu_SetPinValue+0x3c>
    2c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca0:	88 23       	and	r24, r24
    2ca2:	09 f0       	breq	.+2      	; 0x2ca6 <DIO_enu_SetPinValue+0x3c>
    2ca4:	01 c1       	rjmp	.+514    	; 0x2ea8 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	3e 87       	std	Y+14, r19	; 0x0e
    2cae:	2d 87       	std	Y+13, r18	; 0x0d
    2cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <DIO_enu_SetPinValue+0x52>
    2cba:	4f c0       	rjmp	.+158    	; 0x2d5a <DIO_enu_SetPinValue+0xf0>
    2cbc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cbe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cc0:	22 30       	cpi	r18, 0x02	; 2
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	2c f4       	brge	.+10     	; 0x2cd0 <DIO_enu_SetPinValue+0x66>
    2cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	71 f0       	breq	.+28     	; 0x2cea <DIO_enu_SetPinValue+0x80>
    2cce:	ed c0       	rjmp	.+474    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
    2cd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cd4:	22 30       	cpi	r18, 0x02	; 2
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <DIO_enu_SetPinValue+0x72>
    2cda:	77 c0       	rjmp	.+238    	; 0x2dca <DIO_enu_SetPinValue+0x160>
    2cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce0:	83 30       	cpi	r24, 0x03	; 3
    2ce2:	91 05       	cpc	r25, r1
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <DIO_enu_SetPinValue+0x7e>
    2ce6:	a9 c0       	rjmp	.+338    	; 0x2e3a <DIO_enu_SetPinValue+0x1d0>
    2ce8:	e0 c0       	rjmp	.+448    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    2cea:	8c 81       	ldd	r24, Y+4	; 0x04
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	3c 87       	std	Y+12, r19	; 0x0c
    2cf2:	2b 87       	std	Y+11, r18	; 0x0b
    2cf4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cf6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cf8:	00 97       	sbiw	r24, 0x00	; 0
    2cfa:	d1 f0       	breq	.+52     	; 0x2d30 <DIO_enu_SetPinValue+0xc6>
    2cfc:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cfe:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d00:	21 30       	cpi	r18, 0x01	; 1
    2d02:	31 05       	cpc	r19, r1
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <DIO_enu_SetPinValue+0x9e>
    2d06:	d1 c0       	rjmp	.+418    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    2d08:	ab e3       	ldi	r26, 0x3B	; 59
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	eb e3       	ldi	r30, 0x3B	; 59
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	48 2f       	mov	r20, r24
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	02 2e       	mov	r0, r18
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <DIO_enu_SetPinValue+0xbc>
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	0a 94       	dec	r0
    2d28:	e2 f7       	brpl	.-8      	; 0x2d22 <DIO_enu_SetPinValue+0xb8>
    2d2a:	84 2b       	or	r24, r20
    2d2c:	8c 93       	st	X, r24
    2d2e:	bd c0       	rjmp	.+378    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    2d30:	ab e3       	ldi	r26, 0x3B	; 59
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	eb e3       	ldi	r30, 0x3B	; 59
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	48 2f       	mov	r20, r24
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	02 2e       	mov	r0, r18
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <DIO_enu_SetPinValue+0xe4>
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	0a 94       	dec	r0
    2d50:	e2 f7       	brpl	.-8      	; 0x2d4a <DIO_enu_SetPinValue+0xe0>
    2d52:	80 95       	com	r24
    2d54:	84 23       	and	r24, r20
    2d56:	8c 93       	st	X, r24
    2d58:	a8 c0       	rjmp	.+336    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    2d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	3a 87       	std	Y+10, r19	; 0x0a
    2d62:	29 87       	std	Y+9, r18	; 0x09
    2d64:	89 85       	ldd	r24, Y+9	; 0x09
    2d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	d1 f0       	breq	.+52     	; 0x2da0 <DIO_enu_SetPinValue+0x136>
    2d6c:	29 85       	ldd	r18, Y+9	; 0x09
    2d6e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d70:	21 30       	cpi	r18, 0x01	; 1
    2d72:	31 05       	cpc	r19, r1
    2d74:	09 f0       	breq	.+2      	; 0x2d78 <DIO_enu_SetPinValue+0x10e>
    2d76:	99 c0       	rjmp	.+306    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    2d78:	a8 e3       	ldi	r26, 0x38	; 56
    2d7a:	b0 e0       	ldi	r27, 0x00	; 0
    2d7c:	e8 e3       	ldi	r30, 0x38	; 56
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	80 81       	ld	r24, Z
    2d82:	48 2f       	mov	r20, r24
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	28 2f       	mov	r18, r24
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	02 2e       	mov	r0, r18
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <DIO_enu_SetPinValue+0x12c>
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	0a 94       	dec	r0
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <DIO_enu_SetPinValue+0x128>
    2d9a:	84 2b       	or	r24, r20
    2d9c:	8c 93       	st	X, r24
    2d9e:	85 c0       	rjmp	.+266    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    2da0:	a8 e3       	ldi	r26, 0x38	; 56
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e8 e3       	ldi	r30, 0x38	; 56
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	48 2f       	mov	r20, r24
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 2e       	mov	r0, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <DIO_enu_SetPinValue+0x154>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	0a 94       	dec	r0
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <DIO_enu_SetPinValue+0x150>
    2dc2:	80 95       	com	r24
    2dc4:	84 23       	and	r24, r20
    2dc6:	8c 93       	st	X, r24
    2dc8:	70 c0       	rjmp	.+224    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    2dca:	8c 81       	ldd	r24, Y+4	; 0x04
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	38 87       	std	Y+8, r19	; 0x08
    2dd2:	2f 83       	std	Y+7, r18	; 0x07
    2dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd6:	98 85       	ldd	r25, Y+8	; 0x08
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	d1 f0       	breq	.+52     	; 0x2e10 <DIO_enu_SetPinValue+0x1a6>
    2ddc:	2f 81       	ldd	r18, Y+7	; 0x07
    2dde:	38 85       	ldd	r19, Y+8	; 0x08
    2de0:	21 30       	cpi	r18, 0x01	; 1
    2de2:	31 05       	cpc	r19, r1
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <DIO_enu_SetPinValue+0x17e>
    2de6:	61 c0       	rjmp	.+194    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    2de8:	a5 e3       	ldi	r26, 0x35	; 53
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	e5 e3       	ldi	r30, 0x35	; 53
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	48 2f       	mov	r20, r24
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	28 2f       	mov	r18, r24
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	02 2e       	mov	r0, r18
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <DIO_enu_SetPinValue+0x19c>
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	0a 94       	dec	r0
    2e08:	e2 f7       	brpl	.-8      	; 0x2e02 <DIO_enu_SetPinValue+0x198>
    2e0a:	84 2b       	or	r24, r20
    2e0c:	8c 93       	st	X, r24
    2e0e:	4d c0       	rjmp	.+154    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    2e10:	a5 e3       	ldi	r26, 0x35	; 53
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	e5 e3       	ldi	r30, 0x35	; 53
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	48 2f       	mov	r20, r24
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	02 2e       	mov	r0, r18
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <DIO_enu_SetPinValue+0x1c4>
    2e2a:	88 0f       	add	r24, r24
    2e2c:	99 1f       	adc	r25, r25
    2e2e:	0a 94       	dec	r0
    2e30:	e2 f7       	brpl	.-8      	; 0x2e2a <DIO_enu_SetPinValue+0x1c0>
    2e32:	80 95       	com	r24
    2e34:	84 23       	and	r24, r20
    2e36:	8c 93       	st	X, r24
    2e38:	38 c0       	rjmp	.+112    	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    2e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	3e 83       	std	Y+6, r19	; 0x06
    2e42:	2d 83       	std	Y+5, r18	; 0x05
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	c9 f0       	breq	.+50     	; 0x2e7e <DIO_enu_SetPinValue+0x214>
    2e4c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e4e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e50:	21 30       	cpi	r18, 0x01	; 1
    2e52:	31 05       	cpc	r19, r1
    2e54:	51 f5       	brne	.+84     	; 0x2eaa <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    2e56:	a2 e3       	ldi	r26, 0x32	; 50
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e2 e3       	ldi	r30, 0x32	; 50
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	48 2f       	mov	r20, r24
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	02 2e       	mov	r0, r18
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <DIO_enu_SetPinValue+0x20a>
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	0a 94       	dec	r0
    2e76:	e2 f7       	brpl	.-8      	; 0x2e70 <DIO_enu_SetPinValue+0x206>
    2e78:	84 2b       	or	r24, r20
    2e7a:	8c 93       	st	X, r24
    2e7c:	16 c0       	rjmp	.+44     	; 0x2eaa <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    2e7e:	a2 e3       	ldi	r26, 0x32	; 50
    2e80:	b0 e0       	ldi	r27, 0x00	; 0
    2e82:	e2 e3       	ldi	r30, 0x32	; 50
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	80 81       	ld	r24, Z
    2e88:	48 2f       	mov	r20, r24
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	28 2f       	mov	r18, r24
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	02 2e       	mov	r0, r18
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <DIO_enu_SetPinValue+0x232>
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	0a 94       	dec	r0
    2e9e:	e2 f7       	brpl	.-8      	; 0x2e98 <DIO_enu_SetPinValue+0x22e>
    2ea0:	80 95       	com	r24
    2ea2:	84 23       	and	r24, r20
    2ea4:	8c 93       	st	X, r24
    2ea6:	01 c0       	rjmp	.+2      	; 0x2eaa <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2ea8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eac:	2e 96       	adiw	r28, 0x0e	; 14
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
    2ec6:	27 97       	sbiw	r28, 0x07	; 7
    2ec8:	0f b6       	in	r0, 0x3f	; 63
    2eca:	f8 94       	cli
    2ecc:	de bf       	out	0x3e, r29	; 62
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	cd bf       	out	0x3d, r28	; 61
    2ed2:	8a 83       	std	Y+2, r24	; 0x02
    2ed4:	6b 83       	std	Y+3, r22	; 0x03
    2ed6:	5d 83       	std	Y+5, r21	; 0x05
    2ed8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	84 30       	cpi	r24, 0x04	; 4
    2ee2:	08 f0       	brcs	.+2      	; 0x2ee6 <DIO_enu_GetPinValue+0x28>
    2ee4:	7a c0       	rjmp	.+244    	; 0x2fda <DIO_enu_GetPinValue+0x11c>
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	88 30       	cpi	r24, 0x08	; 8
    2eea:	08 f0       	brcs	.+2      	; 0x2eee <DIO_enu_GetPinValue+0x30>
    2eec:	76 c0       	rjmp	.+236    	; 0x2fda <DIO_enu_GetPinValue+0x11c>
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <DIO_enu_GetPinValue+0x3a>
    2ef6:	71 c0       	rjmp	.+226    	; 0x2fda <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	3f 83       	std	Y+7, r19	; 0x07
    2f00:	2e 83       	std	Y+6, r18	; 0x06
    2f02:	4e 81       	ldd	r20, Y+6	; 0x06
    2f04:	5f 81       	ldd	r21, Y+7	; 0x07
    2f06:	41 30       	cpi	r20, 0x01	; 1
    2f08:	51 05       	cpc	r21, r1
    2f0a:	59 f1       	breq	.+86     	; 0x2f62 <DIO_enu_GetPinValue+0xa4>
    2f0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	91 05       	cpc	r25, r1
    2f14:	34 f4       	brge	.+12     	; 0x2f22 <DIO_enu_GetPinValue+0x64>
    2f16:	2e 81       	ldd	r18, Y+6	; 0x06
    2f18:	3f 81       	ldd	r19, Y+7	; 0x07
    2f1a:	21 15       	cp	r18, r1
    2f1c:	31 05       	cpc	r19, r1
    2f1e:	69 f0       	breq	.+26     	; 0x2f3a <DIO_enu_GetPinValue+0x7c>
    2f20:	5d c0       	rjmp	.+186    	; 0x2fdc <DIO_enu_GetPinValue+0x11e>
    2f22:	4e 81       	ldd	r20, Y+6	; 0x06
    2f24:	5f 81       	ldd	r21, Y+7	; 0x07
    2f26:	42 30       	cpi	r20, 0x02	; 2
    2f28:	51 05       	cpc	r21, r1
    2f2a:	79 f1       	breq	.+94     	; 0x2f8a <DIO_enu_GetPinValue+0xcc>
    2f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f30:	83 30       	cpi	r24, 0x03	; 3
    2f32:	91 05       	cpc	r25, r1
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <DIO_enu_GetPinValue+0x7a>
    2f36:	3d c0       	rjmp	.+122    	; 0x2fb2 <DIO_enu_GetPinValue+0xf4>
    2f38:	51 c0       	rjmp	.+162    	; 0x2fdc <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    2f3a:	e9 e3       	ldi	r30, 0x39	; 57
    2f3c:	f0 e0       	ldi	r31, 0x00	; 0
    2f3e:	80 81       	ld	r24, Z
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	88 2f       	mov	r24, r24
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a9 01       	movw	r20, r18
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <DIO_enu_GetPinValue+0x94>
    2f4e:	55 95       	asr	r21
    2f50:	47 95       	ror	r20
    2f52:	8a 95       	dec	r24
    2f54:	e2 f7       	brpl	.-8      	; 0x2f4e <DIO_enu_GetPinValue+0x90>
    2f56:	ca 01       	movw	r24, r20
    2f58:	81 70       	andi	r24, 0x01	; 1
    2f5a:	ec 81       	ldd	r30, Y+4	; 0x04
    2f5c:	fd 81       	ldd	r31, Y+5	; 0x05
    2f5e:	80 83       	st	Z, r24
    2f60:	3d c0       	rjmp	.+122    	; 0x2fdc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    2f62:	e6 e3       	ldi	r30, 0x36	; 54
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6e:	88 2f       	mov	r24, r24
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	a9 01       	movw	r20, r18
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <DIO_enu_GetPinValue+0xbc>
    2f76:	55 95       	asr	r21
    2f78:	47 95       	ror	r20
    2f7a:	8a 95       	dec	r24
    2f7c:	e2 f7       	brpl	.-8      	; 0x2f76 <DIO_enu_GetPinValue+0xb8>
    2f7e:	ca 01       	movw	r24, r20
    2f80:	81 70       	andi	r24, 0x01	; 1
    2f82:	ec 81       	ldd	r30, Y+4	; 0x04
    2f84:	fd 81       	ldd	r31, Y+5	; 0x05
    2f86:	80 83       	st	Z, r24
    2f88:	29 c0       	rjmp	.+82     	; 0x2fdc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    2f8a:	e3 e3       	ldi	r30, 0x33	; 51
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	a9 01       	movw	r20, r18
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <DIO_enu_GetPinValue+0xe4>
    2f9e:	55 95       	asr	r21
    2fa0:	47 95       	ror	r20
    2fa2:	8a 95       	dec	r24
    2fa4:	e2 f7       	brpl	.-8      	; 0x2f9e <DIO_enu_GetPinValue+0xe0>
    2fa6:	ca 01       	movw	r24, r20
    2fa8:	81 70       	andi	r24, 0x01	; 1
    2faa:	ec 81       	ldd	r30, Y+4	; 0x04
    2fac:	fd 81       	ldd	r31, Y+5	; 0x05
    2fae:	80 83       	st	Z, r24
    2fb0:	15 c0       	rjmp	.+42     	; 0x2fdc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    2fb2:	e0 e3       	ldi	r30, 0x30	; 48
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	88 2f       	mov	r24, r24
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a9 01       	movw	r20, r18
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <DIO_enu_GetPinValue+0x10c>
    2fc6:	55 95       	asr	r21
    2fc8:	47 95       	ror	r20
    2fca:	8a 95       	dec	r24
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <DIO_enu_GetPinValue+0x108>
    2fce:	ca 01       	movw	r24, r20
    2fd0:	81 70       	andi	r24, 0x01	; 1
    2fd2:	ec 81       	ldd	r30, Y+4	; 0x04
    2fd4:	fd 81       	ldd	r31, Y+5	; 0x05
    2fd6:	80 83       	st	Z, r24
    2fd8:	01 c0       	rjmp	.+2      	; 0x2fdc <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2fda:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2fdc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fde:	27 96       	adiw	r28, 0x07	; 7
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	2d 97       	sbiw	r28, 0x0d	; 13
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	8a 83       	std	Y+2, r24	; 0x02
    3006:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	84 30       	cpi	r24, 0x04	; 4
    3010:	08 f0       	brcs	.+2      	; 0x3014 <DIO_enu_SetPortDirection+0x24>
    3012:	84 c0       	rjmp	.+264    	; 0x311c <DIO_enu_SetPortDirection+0x12c>
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	81 30       	cpi	r24, 0x01	; 1
    3018:	21 f0       	breq	.+8      	; 0x3022 <DIO_enu_SetPortDirection+0x32>
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	88 23       	and	r24, r24
    301e:	09 f0       	breq	.+2      	; 0x3022 <DIO_enu_SetPortDirection+0x32>
    3020:	7d c0       	rjmp	.+250    	; 0x311c <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	3d 87       	std	Y+13, r19	; 0x0d
    302a:	2c 87       	std	Y+12, r18	; 0x0c
    302c:	8c 85       	ldd	r24, Y+12	; 0x0c
    302e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3030:	81 30       	cpi	r24, 0x01	; 1
    3032:	91 05       	cpc	r25, r1
    3034:	71 f1       	breq	.+92     	; 0x3092 <DIO_enu_SetPortDirection+0xa2>
    3036:	2c 85       	ldd	r18, Y+12	; 0x0c
    3038:	3d 85       	ldd	r19, Y+13	; 0x0d
    303a:	22 30       	cpi	r18, 0x02	; 2
    303c:	31 05       	cpc	r19, r1
    303e:	2c f4       	brge	.+10     	; 0x304a <DIO_enu_SetPortDirection+0x5a>
    3040:	8c 85       	ldd	r24, Y+12	; 0x0c
    3042:	9d 85       	ldd	r25, Y+13	; 0x0d
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f0       	breq	.+26     	; 0x3062 <DIO_enu_SetPortDirection+0x72>
    3048:	6a c0       	rjmp	.+212    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
    304a:	2c 85       	ldd	r18, Y+12	; 0x0c
    304c:	3d 85       	ldd	r19, Y+13	; 0x0d
    304e:	22 30       	cpi	r18, 0x02	; 2
    3050:	31 05       	cpc	r19, r1
    3052:	b1 f1       	breq	.+108    	; 0x30c0 <DIO_enu_SetPortDirection+0xd0>
    3054:	8c 85       	ldd	r24, Y+12	; 0x0c
    3056:	9d 85       	ldd	r25, Y+13	; 0x0d
    3058:	83 30       	cpi	r24, 0x03	; 3
    305a:	91 05       	cpc	r25, r1
    305c:	09 f4       	brne	.+2      	; 0x3060 <DIO_enu_SetPortDirection+0x70>
    305e:	47 c0       	rjmp	.+142    	; 0x30ee <DIO_enu_SetPortDirection+0xfe>
    3060:	5e c0       	rjmp	.+188    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	28 2f       	mov	r18, r24
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	3b 87       	std	Y+11, r19	; 0x0b
    306a:	2a 87       	std	Y+10, r18	; 0x0a
    306c:	8a 85       	ldd	r24, Y+10	; 0x0a
    306e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	59 f0       	breq	.+22     	; 0x308a <DIO_enu_SetPortDirection+0x9a>
    3074:	2a 85       	ldd	r18, Y+10	; 0x0a
    3076:	3b 85       	ldd	r19, Y+11	; 0x0b
    3078:	21 30       	cpi	r18, 0x01	; 1
    307a:	31 05       	cpc	r19, r1
    307c:	09 f0       	breq	.+2      	; 0x3080 <DIO_enu_SetPortDirection+0x90>
    307e:	4f c0       	rjmp	.+158    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    3080:	ea e3       	ldi	r30, 0x3A	; 58
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	8f ef       	ldi	r24, 0xFF	; 255
    3086:	80 83       	st	Z, r24
    3088:	4a c0       	rjmp	.+148    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    308a:	ea e3       	ldi	r30, 0x3A	; 58
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	10 82       	st	Z, r1
    3090:	46 c0       	rjmp	.+140    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	39 87       	std	Y+9, r19	; 0x09
    309a:	28 87       	std	Y+8, r18	; 0x08
    309c:	88 85       	ldd	r24, Y+8	; 0x08
    309e:	99 85       	ldd	r25, Y+9	; 0x09
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	51 f0       	breq	.+20     	; 0x30b8 <DIO_enu_SetPortDirection+0xc8>
    30a4:	28 85       	ldd	r18, Y+8	; 0x08
    30a6:	39 85       	ldd	r19, Y+9	; 0x09
    30a8:	21 30       	cpi	r18, 0x01	; 1
    30aa:	31 05       	cpc	r19, r1
    30ac:	c1 f5       	brne	.+112    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    30ae:	e7 e3       	ldi	r30, 0x37	; 55
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	8f ef       	ldi	r24, 0xFF	; 255
    30b4:	80 83       	st	Z, r24
    30b6:	33 c0       	rjmp	.+102    	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    30b8:	e7 e3       	ldi	r30, 0x37	; 55
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	10 82       	st	Z, r1
    30be:	2f c0       	rjmp	.+94     	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    30c0:	8b 81       	ldd	r24, Y+3	; 0x03
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	3f 83       	std	Y+7, r19	; 0x07
    30c8:	2e 83       	std	Y+6, r18	; 0x06
    30ca:	8e 81       	ldd	r24, Y+6	; 0x06
    30cc:	9f 81       	ldd	r25, Y+7	; 0x07
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	51 f0       	breq	.+20     	; 0x30e6 <DIO_enu_SetPortDirection+0xf6>
    30d2:	2e 81       	ldd	r18, Y+6	; 0x06
    30d4:	3f 81       	ldd	r19, Y+7	; 0x07
    30d6:	21 30       	cpi	r18, 0x01	; 1
    30d8:	31 05       	cpc	r19, r1
    30da:	09 f5       	brne	.+66     	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    30dc:	e4 e3       	ldi	r30, 0x34	; 52
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	8f ef       	ldi	r24, 0xFF	; 255
    30e2:	80 83       	st	Z, r24
    30e4:	1c c0       	rjmp	.+56     	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    30e6:	e4 e3       	ldi	r30, 0x34	; 52
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	10 82       	st	Z, r1
    30ec:	18 c0       	rjmp	.+48     	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	3d 83       	std	Y+5, r19	; 0x05
    30f6:	2c 83       	std	Y+4, r18	; 0x04
    30f8:	8c 81       	ldd	r24, Y+4	; 0x04
    30fa:	9d 81       	ldd	r25, Y+5	; 0x05
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	51 f0       	breq	.+20     	; 0x3114 <DIO_enu_SetPortDirection+0x124>
    3100:	2c 81       	ldd	r18, Y+4	; 0x04
    3102:	3d 81       	ldd	r19, Y+5	; 0x05
    3104:	21 30       	cpi	r18, 0x01	; 1
    3106:	31 05       	cpc	r19, r1
    3108:	51 f4       	brne	.+20     	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    310a:	e1 e3       	ldi	r30, 0x31	; 49
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	80 83       	st	Z, r24
    3112:	05 c0       	rjmp	.+10     	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    3114:	e1 e3       	ldi	r30, 0x31	; 49
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	10 82       	st	Z, r1
    311a:	01 c0       	rjmp	.+2      	; 0x311e <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    311c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    311e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3120:	2d 96       	adiw	r28, 0x0d	; 13
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <DIO_enu_SetPortValue+0x6>
    3138:	00 d0       	rcall	.+0      	; 0x313a <DIO_enu_SetPortValue+0x8>
    313a:	0f 92       	push	r0
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	84 30       	cpi	r24, 0x04	; 4
    314c:	98 f5       	brcc	.+102    	; 0x31b4 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    314e:	8a 81       	ldd	r24, Y+2	; 0x02
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	3d 83       	std	Y+5, r19	; 0x05
    3156:	2c 83       	std	Y+4, r18	; 0x04
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	9d 81       	ldd	r25, Y+5	; 0x05
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	91 05       	cpc	r25, r1
    3160:	d1 f0       	breq	.+52     	; 0x3196 <DIO_enu_SetPortValue+0x64>
    3162:	2c 81       	ldd	r18, Y+4	; 0x04
    3164:	3d 81       	ldd	r19, Y+5	; 0x05
    3166:	22 30       	cpi	r18, 0x02	; 2
    3168:	31 05       	cpc	r19, r1
    316a:	2c f4       	brge	.+10     	; 0x3176 <DIO_enu_SetPortValue+0x44>
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	00 97       	sbiw	r24, 0x00	; 0
    3172:	61 f0       	breq	.+24     	; 0x318c <DIO_enu_SetPortValue+0x5a>
    3174:	20 c0       	rjmp	.+64     	; 0x31b6 <DIO_enu_SetPortValue+0x84>
    3176:	2c 81       	ldd	r18, Y+4	; 0x04
    3178:	3d 81       	ldd	r19, Y+5	; 0x05
    317a:	22 30       	cpi	r18, 0x02	; 2
    317c:	31 05       	cpc	r19, r1
    317e:	81 f0       	breq	.+32     	; 0x31a0 <DIO_enu_SetPortValue+0x6e>
    3180:	8c 81       	ldd	r24, Y+4	; 0x04
    3182:	9d 81       	ldd	r25, Y+5	; 0x05
    3184:	83 30       	cpi	r24, 0x03	; 3
    3186:	91 05       	cpc	r25, r1
    3188:	81 f0       	breq	.+32     	; 0x31aa <DIO_enu_SetPortValue+0x78>
    318a:	15 c0       	rjmp	.+42     	; 0x31b6 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    318c:	eb e3       	ldi	r30, 0x3B	; 59
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	80 83       	st	Z, r24
    3194:	10 c0       	rjmp	.+32     	; 0x31b6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    3196:	e8 e3       	ldi	r30, 0x38	; 56
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	8b 81       	ldd	r24, Y+3	; 0x03
    319c:	80 83       	st	Z, r24
    319e:	0b c0       	rjmp	.+22     	; 0x31b6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    31a0:	e5 e3       	ldi	r30, 0x35	; 53
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	80 83       	st	Z, r24
    31a8:	06 c0       	rjmp	.+12     	; 0x31b6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    31aa:	e2 e3       	ldi	r30, 0x32	; 50
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	8b 81       	ldd	r24, Y+3	; 0x03
    31b0:	80 83       	st	Z, r24
    31b2:	01 c0       	rjmp	.+2      	; 0x31b6 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    31b4:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <DIO_enu_GetPortValue+0x6>
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <DIO_enu_GetPortValue+0x8>
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <DIO_enu_GetPortValue+0xa>
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	7c 83       	std	Y+4, r23	; 0x04
    31da:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    31e0:	8a 81       	ldd	r24, Y+2	; 0x02
    31e2:	84 30       	cpi	r24, 0x04	; 4
    31e4:	08 f0       	brcs	.+2      	; 0x31e8 <DIO_enu_GetPortValue+0x20>
    31e6:	3f c0       	rjmp	.+126    	; 0x3266 <DIO_enu_GetPortValue+0x9e>
    31e8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ea:	9c 81       	ldd	r25, Y+4	; 0x04
    31ec:	00 97       	sbiw	r24, 0x00	; 0
    31ee:	d9 f1       	breq	.+118    	; 0x3266 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    31f0:	8a 81       	ldd	r24, Y+2	; 0x02
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	3e 83       	std	Y+6, r19	; 0x06
    31f8:	2d 83       	std	Y+5, r18	; 0x05
    31fa:	8d 81       	ldd	r24, Y+5	; 0x05
    31fc:	9e 81       	ldd	r25, Y+6	; 0x06
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	91 05       	cpc	r25, r1
    3202:	e1 f0       	breq	.+56     	; 0x323c <DIO_enu_GetPortValue+0x74>
    3204:	2d 81       	ldd	r18, Y+5	; 0x05
    3206:	3e 81       	ldd	r19, Y+6	; 0x06
    3208:	22 30       	cpi	r18, 0x02	; 2
    320a:	31 05       	cpc	r19, r1
    320c:	2c f4       	brge	.+10     	; 0x3218 <DIO_enu_GetPortValue+0x50>
    320e:	8d 81       	ldd	r24, Y+5	; 0x05
    3210:	9e 81       	ldd	r25, Y+6	; 0x06
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	61 f0       	breq	.+24     	; 0x322e <DIO_enu_GetPortValue+0x66>
    3216:	28 c0       	rjmp	.+80     	; 0x3268 <DIO_enu_GetPortValue+0xa0>
    3218:	2d 81       	ldd	r18, Y+5	; 0x05
    321a:	3e 81       	ldd	r19, Y+6	; 0x06
    321c:	22 30       	cpi	r18, 0x02	; 2
    321e:	31 05       	cpc	r19, r1
    3220:	a1 f0       	breq	.+40     	; 0x324a <DIO_enu_GetPortValue+0x82>
    3222:	8d 81       	ldd	r24, Y+5	; 0x05
    3224:	9e 81       	ldd	r25, Y+6	; 0x06
    3226:	83 30       	cpi	r24, 0x03	; 3
    3228:	91 05       	cpc	r25, r1
    322a:	b1 f0       	breq	.+44     	; 0x3258 <DIO_enu_GetPortValue+0x90>
    322c:	1d c0       	rjmp	.+58     	; 0x3268 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    322e:	e9 e3       	ldi	r30, 0x39	; 57
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	eb 81       	ldd	r30, Y+3	; 0x03
    3236:	fc 81       	ldd	r31, Y+4	; 0x04
    3238:	80 83       	st	Z, r24
    323a:	16 c0       	rjmp	.+44     	; 0x3268 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    323c:	e6 e3       	ldi	r30, 0x36	; 54
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	eb 81       	ldd	r30, Y+3	; 0x03
    3244:	fc 81       	ldd	r31, Y+4	; 0x04
    3246:	80 83       	st	Z, r24
    3248:	0f c0       	rjmp	.+30     	; 0x3268 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    324a:	e3 e3       	ldi	r30, 0x33	; 51
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	eb 81       	ldd	r30, Y+3	; 0x03
    3252:	fc 81       	ldd	r31, Y+4	; 0x04
    3254:	80 83       	st	Z, r24
    3256:	08 c0       	rjmp	.+16     	; 0x3268 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    3258:	e0 e3       	ldi	r30, 0x30	; 48
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	eb 81       	ldd	r30, Y+3	; 0x03
    3260:	fc 81       	ldd	r31, Y+4	; 0x04
    3262:	80 83       	st	Z, r24
    3264:	01 c0       	rjmp	.+2      	; 0x3268 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3266:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3268:	89 81       	ldd	r24, Y+1	; 0x01
}
    326a:	26 96       	adiw	r28, 0x06	; 6
    326c:	0f b6       	in	r0, 0x3f	; 63
    326e:	f8 94       	cli
    3270:	de bf       	out	0x3e, r29	; 62
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	cd bf       	out	0x3d, r28	; 61
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <ADC_enu_Init>:
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;

ES_t ADC_enu_Init(void){
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    3284:	a7 e2       	ldi	r26, 0x27	; 39
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	e7 e2       	ldi	r30, 0x27	; 39
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	8f 77       	andi	r24, 0x7F	; 127
    3290:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    3292:	a7 e2       	ldi	r26, 0x27	; 39
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e7 e2       	ldi	r30, 0x27	; 39
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	80 64       	ori	r24, 0x40	; 64
    329e:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    32a0:	a7 e2       	ldi	r26, 0x27	; 39
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e7 e2       	ldi	r30, 0x27	; 39
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	8f 7d       	andi	r24, 0xDF	; 223
    32ac:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == START_CONVERSION
    CLR_BIT(ADCSRA_REG,ADATE);
    32ae:	a6 e2       	ldi	r26, 0x26	; 38
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e6 e2       	ldi	r30, 0x26	; 38
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	8f 7d       	andi	r24, 0xDF	; 223
    32ba:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    32bc:	a6 e2       	ldi	r26, 0x26	; 38
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e6 e2       	ldi	r30, 0x26	; 38
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	87 60       	ori	r24, 0x07	; 7
    32c8:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    32ca:	a6 e2       	ldi	r26, 0x26	; 38
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e6 e2       	ldi	r30, 0x26	; 38
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	80 68       	ori	r24, 0x80	; 128
    32d6:	8c 93       	st	X, r24
    
    return STATE_OK;
    32d8:	81 e0       	ldi	r24, 0x01	; 1
}
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <ADC_enu_GetDigitalValueSynchNonBlocking>:

ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
    32e8:	28 97       	sbiw	r28, 0x08	; 8
    32ea:	0f b6       	in	r0, 0x3f	; 63
    32ec:	f8 94       	cli
    32ee:	de bf       	out	0x3e, r29	; 62
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	cd bf       	out	0x3d, r28	; 61
    32f4:	8e 83       	std	Y+6, r24	; 0x06
    32f6:	78 87       	std	Y+8, r23	; 0x08
    32f8:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    32fe:	19 82       	std	Y+1, r1	; 0x01
    3300:	1a 82       	std	Y+2, r1	; 0x02
    3302:	1b 82       	std	Y+3, r1	; 0x03
    3304:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    3306:	8e 81       	ldd	r24, Y+6	; 0x06
    3308:	80 32       	cpi	r24, 0x20	; 32
    330a:	08 f0       	brcs	.+2      	; 0x330e <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    330c:	65 c0       	rjmp	.+202    	; 0x33d8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    330e:	8f 81       	ldd	r24, Y+7	; 0x07
    3310:	98 85       	ldd	r25, Y+8	; 0x08
    3312:	00 97       	sbiw	r24, 0x00	; 0
    3314:	09 f4       	brne	.+2      	; 0x3318 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    3316:	60 c0       	rjmp	.+192    	; 0x33d8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    3318:	80 91 a2 00 	lds	r24, 0x00A2
    331c:	88 23       	and	r24, r24
    331e:	09 f0       	breq	.+2      	; 0x3322 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    3320:	5b c0       	rjmp	.+182    	; 0x33d8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	80 93 a2 00 	sts	0x00A2, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    3328:	a7 e2       	ldi	r26, 0x27	; 39
    332a:	b0 e0       	ldi	r27, 0x00	; 0
    332c:	e7 e2       	ldi	r30, 0x27	; 39
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	80 81       	ld	r24, Z
    3332:	80 7e       	andi	r24, 0xE0	; 224
    3334:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    3336:	a7 e2       	ldi	r26, 0x27	; 39
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	e7 e2       	ldi	r30, 0x27	; 39
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	90 81       	ld	r25, Z
    3340:	8e 81       	ldd	r24, Y+6	; 0x06
    3342:	89 2b       	or	r24, r25
    3344:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    3346:	a6 e2       	ldi	r26, 0x26	; 38
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e6 e2       	ldi	r30, 0x26	; 38
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	80 64       	ori	r24, 0x40	; 64
    3352:	8c 93       	st	X, r24
    3354:	0b c0       	rjmp	.+22     	; 0x336c <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	ab 81       	ldd	r26, Y+3	; 0x03
    335c:	bc 81       	ldd	r27, Y+4	; 0x04
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	a1 1d       	adc	r26, r1
    3362:	b1 1d       	adc	r27, r1
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	ab 83       	std	Y+3, r26	; 0x03
    336a:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    336c:	e6 e2       	ldi	r30, 0x26	; 38
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	82 95       	swap	r24
    3374:	8f 70       	andi	r24, 0x0F	; 15
    3376:	88 2f       	mov	r24, r24
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	81 70       	andi	r24, 0x01	; 1
    337c:	90 70       	andi	r25, 0x00	; 0
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	61 f4       	brne	.+24     	; 0x339a <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	9a 81       	ldd	r25, Y+2	; 0x02
    3386:	ab 81       	ldd	r26, Y+3	; 0x03
    3388:	bc 81       	ldd	r27, Y+4	; 0x04
    338a:	80 35       	cpi	r24, 0x50	; 80
    338c:	23 ec       	ldi	r18, 0xC3	; 195
    338e:	92 07       	cpc	r25, r18
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	a2 07       	cpc	r26, r18
    3394:	20 e0       	ldi	r18, 0x00	; 0
    3396:	b2 07       	cpc	r27, r18
    3398:	f0 f2       	brcs	.-68     	; 0x3356 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    339a:	e6 e2       	ldi	r30, 0x26	; 38
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	82 95       	swap	r24
    33a2:	8f 70       	andi	r24, 0x0F	; 15
    33a4:	88 2f       	mov	r24, r24
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	81 70       	andi	r24, 0x01	; 1
    33aa:	90 70       	andi	r25, 0x00	; 0
    33ac:	88 23       	and	r24, r24
    33ae:	91 f0       	breq	.+36     	; 0x33d4 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    33b0:	10 92 a2 00 	sts	0x00A2, r1
            SET_BIT(ADCSRA_REG,ADIF);
    33b4:	a6 e2       	ldi	r26, 0x26	; 38
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e6 e2       	ldi	r30, 0x26	; 38
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	80 61       	ori	r24, 0x10	; 16
    33c0:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    33c2:	e4 e2       	ldi	r30, 0x24	; 36
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	91 81       	ldd	r25, Z+1	; 0x01
    33ca:	ef 81       	ldd	r30, Y+7	; 0x07
    33cc:	f8 85       	ldd	r31, Y+8	; 0x08
    33ce:	91 83       	std	Z+1, r25	; 0x01
    33d0:	80 83       	st	Z, r24
    33d2:	03 c0       	rjmp	.+6      	; 0x33da <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    33d4:	1d 82       	std	Y+5, r1	; 0x05
    33d6:	01 c0       	rjmp	.+2      	; 0x33da <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    33d8:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    33da:	8d 81       	ldd	r24, Y+5	; 0x05

}
    33dc:	28 96       	adiw	r28, 0x08	; 8
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	08 95       	ret

000033ee <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <ADC_enu_GetDigitalValueASynch+0x6>
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <ADC_enu_GetDigitalValueASynch+0x8>
    33f6:	cd b7       	in	r28, 0x3d	; 61
    33f8:	de b7       	in	r29, 0x3e	; 62
    33fa:	8a 83       	std	Y+2, r24	; 0x02
    33fc:	7c 83       	std	Y+4, r23	; 0x04
    33fe:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    3404:	8a 81       	ldd	r24, Y+2	; 0x02
    3406:	80 32       	cpi	r24, 0x20	; 32
    3408:	78 f5       	brcc	.+94     	; 0x3468 <ADC_enu_GetDigitalValueASynch+0x7a>
    340a:	8b 81       	ldd	r24, Y+3	; 0x03
    340c:	9c 81       	ldd	r25, Y+4	; 0x04
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	59 f1       	breq	.+86     	; 0x3468 <ADC_enu_GetDigitalValueASynch+0x7a>
    3412:	80 91 a2 00 	lds	r24, 0x00A2
    3416:	88 23       	and	r24, r24
    3418:	39 f5       	brne	.+78     	; 0x3468 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	80 93 a2 00 	sts	0x00A2, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    3420:	8b 81       	ldd	r24, Y+3	; 0x03
    3422:	9c 81       	ldd	r25, Y+4	; 0x04
    3424:	90 93 a1 00 	sts	0x00A1, r25
    3428:	80 93 a0 00 	sts	0x00A0, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    342c:	a6 e2       	ldi	r26, 0x26	; 38
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	e6 e2       	ldi	r30, 0x26	; 38
    3432:	f0 e0       	ldi	r31, 0x00	; 0
    3434:	80 81       	ld	r24, Z
    3436:	88 60       	ori	r24, 0x08	; 8
    3438:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    343a:	a7 e2       	ldi	r26, 0x27	; 39
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	e7 e2       	ldi	r30, 0x27	; 39
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	80 7e       	andi	r24, 0xE0	; 224
    3446:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    3448:	a7 e2       	ldi	r26, 0x27	; 39
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e7 e2       	ldi	r30, 0x27	; 39
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	90 81       	ld	r25, Z
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	89 2b       	or	r24, r25
    3456:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    3458:	a6 e2       	ldi	r26, 0x26	; 38
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e6 e2       	ldi	r30, 0x26	; 38
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	80 64       	ori	r24, 0x40	; 64
    3464:	8c 93       	st	X, r24
    3466:	01 c0       	rjmp	.+2      	; 0x346a <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    3468:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_errorState;
    346a:	89 81       	ldd	r24, Y+1	; 0x01
}
    346c:	0f 90       	pop	r0
    346e:	0f 90       	pop	r0
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	08 95       	ret

0000347a <__vector_16>:

/***************ISR Function OF ADC*************/
void __vector_16(void){
    347a:	1f 92       	push	r1
    347c:	0f 92       	push	r0
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	0f 92       	push	r0
    3482:	11 24       	eor	r1, r1
    3484:	2f 93       	push	r18
    3486:	3f 93       	push	r19
    3488:	4f 93       	push	r20
    348a:	5f 93       	push	r21
    348c:	6f 93       	push	r22
    348e:	7f 93       	push	r23
    3490:	8f 93       	push	r24
    3492:	9f 93       	push	r25
    3494:	af 93       	push	r26
    3496:	bf 93       	push	r27
    3498:	ef 93       	push	r30
    349a:	ff 93       	push	r31
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    34a4:	80 91 a0 00 	lds	r24, 0x00A0
    34a8:	90 91 a1 00 	lds	r25, 0x00A1
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	99 f0       	breq	.+38     	; 0x34d6 <__vector_16+0x5c>
        //Clear ADC Flag & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    34b0:	a6 e2       	ldi	r26, 0x26	; 38
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e6 e2       	ldi	r30, 0x26	; 38
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	87 7f       	andi	r24, 0xF7	; 247
    34bc:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    34be:	10 92 a2 00 	sts	0x00A2, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    34c2:	20 91 a0 00 	lds	r18, 0x00A0
    34c6:	30 91 a1 00 	lds	r19, 0x00A1
    34ca:	e4 e2       	ldi	r30, 0x24	; 36
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	91 81       	ldd	r25, Z+1	; 0x01
    34d2:	f9 01       	movw	r30, r18
    34d4:	09 95       	icall
    }
   

    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	ff 91       	pop	r31
    34dc:	ef 91       	pop	r30
    34de:	bf 91       	pop	r27
    34e0:	af 91       	pop	r26
    34e2:	9f 91       	pop	r25
    34e4:	8f 91       	pop	r24
    34e6:	7f 91       	pop	r23
    34e8:	6f 91       	pop	r22
    34ea:	5f 91       	pop	r21
    34ec:	4f 91       	pop	r20
    34ee:	3f 91       	pop	r19
    34f0:	2f 91       	pop	r18
    34f2:	0f 90       	pop	r0
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	0f 90       	pop	r0
    34f8:	1f 90       	pop	r1
    34fa:	18 95       	reti

000034fc <__mulsi3>:
    34fc:	62 9f       	mul	r22, r18
    34fe:	d0 01       	movw	r26, r0
    3500:	73 9f       	mul	r23, r19
    3502:	f0 01       	movw	r30, r0
    3504:	82 9f       	mul	r24, r18
    3506:	e0 0d       	add	r30, r0
    3508:	f1 1d       	adc	r31, r1
    350a:	64 9f       	mul	r22, r20
    350c:	e0 0d       	add	r30, r0
    350e:	f1 1d       	adc	r31, r1
    3510:	92 9f       	mul	r25, r18
    3512:	f0 0d       	add	r31, r0
    3514:	83 9f       	mul	r24, r19
    3516:	f0 0d       	add	r31, r0
    3518:	74 9f       	mul	r23, r20
    351a:	f0 0d       	add	r31, r0
    351c:	65 9f       	mul	r22, r21
    351e:	f0 0d       	add	r31, r0
    3520:	99 27       	eor	r25, r25
    3522:	72 9f       	mul	r23, r18
    3524:	b0 0d       	add	r27, r0
    3526:	e1 1d       	adc	r30, r1
    3528:	f9 1f       	adc	r31, r25
    352a:	63 9f       	mul	r22, r19
    352c:	b0 0d       	add	r27, r0
    352e:	e1 1d       	adc	r30, r1
    3530:	f9 1f       	adc	r31, r25
    3532:	bd 01       	movw	r22, r26
    3534:	cf 01       	movw	r24, r30
    3536:	11 24       	eor	r1, r1
    3538:	08 95       	ret

0000353a <__udivmodsi4>:
    353a:	a1 e2       	ldi	r26, 0x21	; 33
    353c:	1a 2e       	mov	r1, r26
    353e:	aa 1b       	sub	r26, r26
    3540:	bb 1b       	sub	r27, r27
    3542:	fd 01       	movw	r30, r26
    3544:	0d c0       	rjmp	.+26     	; 0x3560 <__udivmodsi4_ep>

00003546 <__udivmodsi4_loop>:
    3546:	aa 1f       	adc	r26, r26
    3548:	bb 1f       	adc	r27, r27
    354a:	ee 1f       	adc	r30, r30
    354c:	ff 1f       	adc	r31, r31
    354e:	a2 17       	cp	r26, r18
    3550:	b3 07       	cpc	r27, r19
    3552:	e4 07       	cpc	r30, r20
    3554:	f5 07       	cpc	r31, r21
    3556:	20 f0       	brcs	.+8      	; 0x3560 <__udivmodsi4_ep>
    3558:	a2 1b       	sub	r26, r18
    355a:	b3 0b       	sbc	r27, r19
    355c:	e4 0b       	sbc	r30, r20
    355e:	f5 0b       	sbc	r31, r21

00003560 <__udivmodsi4_ep>:
    3560:	66 1f       	adc	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	88 1f       	adc	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	1a 94       	dec	r1
    356a:	69 f7       	brne	.-38     	; 0x3546 <__udivmodsi4_loop>
    356c:	60 95       	com	r22
    356e:	70 95       	com	r23
    3570:	80 95       	com	r24
    3572:	90 95       	com	r25
    3574:	9b 01       	movw	r18, r22
    3576:	ac 01       	movw	r20, r24
    3578:	bd 01       	movw	r22, r26
    357a:	cf 01       	movw	r24, r30
    357c:	08 95       	ret

0000357e <__prologue_saves__>:
    357e:	2f 92       	push	r2
    3580:	3f 92       	push	r3
    3582:	4f 92       	push	r4
    3584:	5f 92       	push	r5
    3586:	6f 92       	push	r6
    3588:	7f 92       	push	r7
    358a:	8f 92       	push	r8
    358c:	9f 92       	push	r9
    358e:	af 92       	push	r10
    3590:	bf 92       	push	r11
    3592:	cf 92       	push	r12
    3594:	df 92       	push	r13
    3596:	ef 92       	push	r14
    3598:	ff 92       	push	r15
    359a:	0f 93       	push	r16
    359c:	1f 93       	push	r17
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	ca 1b       	sub	r28, r26
    35a8:	db 0b       	sbc	r29, r27
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	09 94       	ijmp

000035b6 <__epilogue_restores__>:
    35b6:	2a 88       	ldd	r2, Y+18	; 0x12
    35b8:	39 88       	ldd	r3, Y+17	; 0x11
    35ba:	48 88       	ldd	r4, Y+16	; 0x10
    35bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    35be:	6e 84       	ldd	r6, Y+14	; 0x0e
    35c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    35c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    35c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    35c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    35c8:	b9 84       	ldd	r11, Y+9	; 0x09
    35ca:	c8 84       	ldd	r12, Y+8	; 0x08
    35cc:	df 80       	ldd	r13, Y+7	; 0x07
    35ce:	ee 80       	ldd	r14, Y+6	; 0x06
    35d0:	fd 80       	ldd	r15, Y+5	; 0x05
    35d2:	0c 81       	ldd	r16, Y+4	; 0x04
    35d4:	1b 81       	ldd	r17, Y+3	; 0x03
    35d6:	aa 81       	ldd	r26, Y+2	; 0x02
    35d8:	b9 81       	ldd	r27, Y+1	; 0x01
    35da:	ce 0f       	add	r28, r30
    35dc:	d1 1d       	adc	r29, r1
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	ed 01       	movw	r28, r26
    35ea:	08 95       	ret

000035ec <_exit>:
    35ec:	f8 94       	cli

000035ee <__stop_program>:
    35ee:	ff cf       	rjmp	.-2      	; 0x35ee <__stop_program>
