
Timer1_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000033a6  0000343a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080009c  0080009c  00003476  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  00003478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001576  00000000  00000000  0000676c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a016  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b117  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c09c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c4de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 13 	jmp	0x268e	; 0x268e <__vector_1>
       8:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__vector_2>
       c:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 37 11 	jmp	0x226e	; 0x226e <__vector_10>
      2c:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 37 19 	jmp	0x326e	; 0x326e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 d1 19 	jmp	0x33a2	; 0x33a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e6       	ldi	r22, 0x6A	; 106
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#include"../1-MCAL/DIO/DIO_interface.h"
#include"../1-MCAL/Timers/Timer_Interface.h"
#include"../1-MCAL/GI/GI_Interface.h"
#include"../2-HAL/LCD/LCD_Interface.h"
void toggleLed(void);
int main(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Init();
     ca6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enu_Init>
	GI_enu_Enable();
     caa:	0e 94 9d 11 	call	0x233a	; 0x233a <GI_enu_Enable>
	DIO_enu_SetPinDirection(DIO_U8_PORTC, DIO_U8_PIN1, DIO_U8_OUTPUT);
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
	DIO_enu_SetPinValue(DIO_U8_PORTB, DIO_U8_PIN0, DIO_U8_HIGH);
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
	Timers_enu_Timer0SetCallBack(&toggleLed,CTC_MODE);
     cc2:	8d e6       	ldi	r24, 0x6D	; 109
     cc4:	96 e0       	ldi	r25, 0x06	; 6
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Timers_enu_Timer0SetCallBack>
	Timers_enu_Timer0Init();
     ccc:	0e 94 c6 10 	call	0x218c	; 0x218c <Timers_enu_Timer0Init>
	LCD_enu_SendString("Counter: ");
     cd0:	80 e6       	ldi	r24, 0x60	; 96
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <LCD_enu_SendString>
     cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <main+0x3a>

00000cda <toggleLed>:
	while(1);
	return 0;
}
void toggleLed(void){
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	static u8 counter = 0,ledState = 0;
	LCD_enu_SetCursor(0, 9);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	69 e0       	ldi	r22, 0x09	; 9
     ce6:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_enu_SetCursor>
	LCD_enu_SendNum(++counter);
     cea:	80 91 9d 00 	lds	r24, 0x009D
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	80 93 9d 00 	sts	0x009D, r24
     cf4:	80 91 9d 00 	lds	r24, 0x009D
     cf8:	88 2f       	mov	r24, r24
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	bc 01       	movw	r22, r24
     d02:	cd 01       	movw	r24, r26
     d04:	0e 94 11 0b 	call	0x1622	; 0x1622 <LCD_enu_SendNum>
	if(ledState == 0){
     d08:	80 91 9c 00 	lds	r24, 0x009C
     d0c:	88 23       	and	r24, r24
     d0e:	49 f4       	brne	.+18     	; 0xd22 <toggleLed+0x48>
		DIO_enu_SetPinValue(DIO_U8_PORTC, DIO_U8_PIN1, DIO_U8_HIGH);
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	41 e0       	ldi	r20, 0x01	; 1
     d16:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
		ledState = 1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 9c 00 	sts	0x009C, r24
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <toggleLed+0x56>
	}else{
		DIO_enu_SetPinValue(DIO_U8_PORTC, DIO_U8_PIN1, DIO_U8_LOW);
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	61 e0       	ldi	r22, 0x01	; 1
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
		ledState = 0;
     d2c:	10 92 9c 00 	sts	0x009C, r1
	}
}
     d30:	cf 91       	pop	r28
     d32:	df 91       	pop	r29
     d34:	08 95       	ret

00000d36 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	00 d0       	rcall	.+0      	; 0xd3c <sevenSeg_enu_displayNum+0x6>
     d3c:	0f 92       	push	r0
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	66 e0       	ldi	r22, 0x06	; 6
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	8a 30       	cpi	r24, 0x0A	; 10
     d5e:	78 f5       	brcc	.+94     	; 0xdbe <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	66 e0       	ldi	r22, 0x06	; 6
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	24 c0       	rjmp	.+72     	; 0xdb6 <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	fc 01       	movw	r30, r24
     d76:	e4 58       	subi	r30, 0x84	; 132
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	40 81       	ld	r20, Z
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	ee 58       	subi	r30, 0x8E	; 142
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	80 81       	ld	r24, Z
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	88 2f       	mov	r24, r24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	b9 01       	movw	r22, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <sevenSeg_enu_displayNum+0x66>
     d98:	75 95       	asr	r23
     d9a:	67 95       	ror	r22
     d9c:	8a 95       	dec	r24
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <sevenSeg_enu_displayNum+0x62>
     da0:	cb 01       	movw	r24, r22
     da2:	98 2f       	mov	r25, r24
     da4:	91 70       	andi	r25, 0x01	; 1
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	64 2f       	mov	r22, r20
     daa:	49 2f       	mov	r20, r25
     dac:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	87 30       	cpi	r24, 0x07	; 7
     dba:	c8 f2       	brcs	.-78     	; 0xd6e <sevenSeg_enu_displayNum+0x38>
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
     dbe:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	e1 97       	sbiw	r28, 0x31	; 49
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
     df8:	89 a9       	ldd	r24, Y+49	; 0x31
     dfa:	98 2f       	mov	r25, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	99 27       	eor	r25, r25
     e00:	99 1f       	adc	r25, r25
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	67 e0       	ldi	r22, 0x07	; 7
     e06:	49 2f       	mov	r20, r25
     e08:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
     e0c:	89 a9       	ldd	r24, Y+49	; 0x31
     e0e:	82 95       	swap	r24
     e10:	86 95       	lsr	r24
     e12:	86 95       	lsr	r24
     e14:	83 70       	andi	r24, 0x03	; 3
     e16:	98 2f       	mov	r25, r24
     e18:	91 70       	andi	r25, 0x01	; 1
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	66 e0       	ldi	r22, 0x06	; 6
     e1e:	49 2f       	mov	r20, r25
     e20:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
     e24:	89 a9       	ldd	r24, Y+49	; 0x31
     e26:	82 95       	swap	r24
     e28:	86 95       	lsr	r24
     e2a:	87 70       	andi	r24, 0x07	; 7
     e2c:	98 2f       	mov	r25, r24
     e2e:	91 70       	andi	r25, 0x01	; 1
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	65 e0       	ldi	r22, 0x05	; 5
     e34:	49 2f       	mov	r20, r25
     e36:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
     e3a:	89 a9       	ldd	r24, Y+49	; 0x31
     e3c:	82 95       	swap	r24
     e3e:	8f 70       	andi	r24, 0x0F	; 15
     e40:	98 2f       	mov	r25, r24
     e42:	91 70       	andi	r25, 0x01	; 1
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	64 e0       	ldi	r22, 0x04	; 4
     e48:	49 2f       	mov	r20, r25
     e4a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a0 e8       	ldi	r26, 0x80	; 128
     e5e:	bf e3       	ldi	r27, 0x3F	; 63
     e60:	8d a7       	std	Y+45, r24	; 0x2d
     e62:	9e a7       	std	Y+46, r25	; 0x2e
     e64:	af a7       	std	Y+47, r26	; 0x2f
     e66:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e68:	6d a5       	ldd	r22, Y+45	; 0x2d
     e6a:	7e a5       	ldd	r23, Y+46	; 0x2e
     e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e6e:	98 a9       	ldd	r25, Y+48	; 0x30
     e70:	2b ea       	ldi	r18, 0xAB	; 171
     e72:	3a ea       	ldi	r19, 0xAA	; 170
     e74:	4a ea       	ldi	r20, 0xAA	; 170
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	89 a7       	std	Y+41, r24	; 0x29
     e82:	9a a7       	std	Y+42, r25	; 0x2a
     e84:	ab a7       	std	Y+43, r26	; 0x2b
     e86:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     e88:	69 a5       	ldd	r22, Y+41	; 0x29
     e8a:	7a a5       	ldd	r23, Y+42	; 0x2a
     e8c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e8e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	1c f4       	brge	.+6      	; 0xea6 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	88 a7       	std	Y+40, r24	; 0x28
     ea4:	91 c0       	rjmp	.+290    	; 0xfc8 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
     ea6:	69 a5       	ldd	r22, Y+41	; 0x29
     ea8:	7a a5       	ldd	r23, Y+42	; 0x2a
     eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
     eac:	9c a5       	ldd	r25, Y+44	; 0x2c
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	53 e4       	ldi	r21, 0x43	; 67
     eb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <LCD_enu_SendCmnd+0xf2>
     ebe:	7b c0       	rjmp	.+246    	; 0xfb6 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
     ec0:	6d a5       	ldd	r22, Y+45	; 0x2d
     ec2:	7e a5       	ldd	r23, Y+46	; 0x2e
     ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec6:	98 a9       	ldd	r25, Y+48	; 0x30
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8c a3       	std	Y+36, r24	; 0x24
     eda:	9d a3       	std	Y+37, r25	; 0x25
     edc:	ae a3       	std	Y+38, r26	; 0x26
     ede:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee0:	6c a1       	ldd	r22, Y+36	; 0x24
     ee2:	7d a1       	ldd	r23, Y+37	; 0x25
     ee4:	8e a1       	ldd	r24, Y+38	; 0x26
     ee6:	9f a1       	ldd	r25, Y+39	; 0x27
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a e7       	ldi	r20, 0x7A	; 122
     eee:	55 e4       	ldi	r21, 0x45	; 69
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	88 a3       	std	Y+32, r24	; 0x20
     efa:	99 a3       	std	Y+33, r25	; 0x21
     efc:	aa a3       	std	Y+34, r26	; 0x22
     efe:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f00:	68 a1       	ldd	r22, Y+32	; 0x20
     f02:	79 a1       	ldd	r23, Y+33	; 0x21
     f04:	8a a1       	ldd	r24, Y+34	; 0x22
     f06:	9b a1       	ldd	r25, Y+35	; 0x23
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	2c f4       	brge	.+10     	; 0xf22 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9f 8f       	std	Y+31, r25	; 0x1f
     f1e:	8e 8f       	std	Y+30, r24	; 0x1e
     f20:	3f c0       	rjmp	.+126    	; 0xfa0 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
     f22:	68 a1       	ldd	r22, Y+32	; 0x20
     f24:	79 a1       	ldd	r23, Y+33	; 0x21
     f26:	8a a1       	ldd	r24, Y+34	; 0x22
     f28:	9b a1       	ldd	r25, Y+35	; 0x23
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f36:	18 16       	cp	r1, r24
     f38:	4c f5       	brge	.+82     	; 0xf8c <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3a:	6c a1       	ldd	r22, Y+36	; 0x24
     f3c:	7d a1       	ldd	r23, Y+37	; 0x25
     f3e:	8e a1       	ldd	r24, Y+38	; 0x26
     f40:	9f a1       	ldd	r25, Y+39	; 0x27
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e2       	ldi	r20, 0x20	; 32
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	9f 8f       	std	Y+31, r25	; 0x1f
     f60:	8e 8f       	std	Y+30, r24	; 0x1e
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <LCD_enu_SendCmnd+0x1b4>
     f64:	80 e9       	ldi	r24, 0x90	; 144
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	9d 8f       	std	Y+29, r25	; 0x1d
     f6a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <LCD_enu_SendCmnd+0x1a2>
     f74:	9d 8f       	std	Y+29, r25	; 0x1d
     f76:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9f 8f       	std	Y+31, r25	; 0x1f
     f80:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f84:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	69 f7       	brne	.-38     	; 0xf64 <LCD_enu_SendCmnd+0x196>
     f8a:	24 c0       	rjmp	.+72     	; 0xfd4 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8c:	68 a1       	ldd	r22, Y+32	; 0x20
     f8e:	79 a1       	ldd	r23, Y+33	; 0x21
     f90:	8a a1       	ldd	r24, Y+34	; 0x22
     f92:	9b a1       	ldd	r25, Y+35	; 0x23
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9f 8f       	std	Y+31, r25	; 0x1f
     f9e:	8e 8f       	std	Y+30, r24	; 0x1e
     fa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fa4:	9b 8f       	std	Y+27, r25	; 0x1b
     fa6:	8a 8f       	std	Y+26, r24	; 0x1a
     fa8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     faa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <LCD_enu_SendCmnd+0x1de>
     fb0:	9b 8f       	std	Y+27, r25	; 0x1b
     fb2:	8a 8f       	std	Y+26, r24	; 0x1a
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fb6:	69 a5       	ldd	r22, Y+41	; 0x29
     fb8:	7a a5       	ldd	r23, Y+42	; 0x2a
     fba:	8b a5       	ldd	r24, Y+43	; 0x2b
     fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	88 a7       	std	Y+40, r24	; 0x28
     fc8:	88 a5       	ldd	r24, Y+40	; 0x28
     fca:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fcc:	89 8d       	ldd	r24, Y+25	; 0x19
     fce:	8a 95       	dec	r24
     fd0:	f1 f7       	brne	.-4      	; 0xfce <LCD_enu_SendCmnd+0x200>
     fd2:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	62 e0       	ldi	r22, 0x02	; 2
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
     fde:	89 a9       	ldd	r24, Y+49	; 0x31
     fe0:	86 95       	lsr	r24
     fe2:	86 95       	lsr	r24
     fe4:	86 95       	lsr	r24
     fe6:	98 2f       	mov	r25, r24
     fe8:	91 70       	andi	r25, 0x01	; 1
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	67 e0       	ldi	r22, 0x07	; 7
     fee:	49 2f       	mov	r20, r25
     ff0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
     ff4:	89 a9       	ldd	r24, Y+49	; 0x31
     ff6:	86 95       	lsr	r24
     ff8:	86 95       	lsr	r24
     ffa:	98 2f       	mov	r25, r24
     ffc:	91 70       	andi	r25, 0x01	; 1
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	66 e0       	ldi	r22, 0x06	; 6
    1002:	49 2f       	mov	r20, r25
    1004:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    1008:	89 a9       	ldd	r24, Y+49	; 0x31
    100a:	86 95       	lsr	r24
    100c:	98 2f       	mov	r25, r24
    100e:	91 70       	andi	r25, 0x01	; 1
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	65 e0       	ldi	r22, 0x05	; 5
    1014:	49 2f       	mov	r20, r25
    1016:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    101a:	89 a9       	ldd	r24, Y+49	; 0x31
    101c:	98 2f       	mov	r25, r24
    101e:	91 70       	andi	r25, 0x01	; 1
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	64 e0       	ldi	r22, 0x04	; 4
    1024:	49 2f       	mov	r20, r25
    1026:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	62 e0       	ldi	r22, 0x02	; 2
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a0 e8       	ldi	r26, 0x80	; 128
    103a:	bf e3       	ldi	r27, 0x3F	; 63
    103c:	8d 8b       	std	Y+21, r24	; 0x15
    103e:	9e 8b       	std	Y+22, r25	; 0x16
    1040:	af 8b       	std	Y+23, r26	; 0x17
    1042:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1044:	6d 89       	ldd	r22, Y+21	; 0x15
    1046:	7e 89       	ldd	r23, Y+22	; 0x16
    1048:	8f 89       	ldd	r24, Y+23	; 0x17
    104a:	98 8d       	ldd	r25, Y+24	; 0x18
    104c:	2b ea       	ldi	r18, 0xAB	; 171
    104e:	3a ea       	ldi	r19, 0xAA	; 170
    1050:	4a ea       	ldi	r20, 0xAA	; 170
    1052:	50 e4       	ldi	r21, 0x40	; 64
    1054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	89 8b       	std	Y+17, r24	; 0x11
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	ab 8b       	std	Y+19, r26	; 0x13
    1062:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1064:	69 89       	ldd	r22, Y+17	; 0x11
    1066:	7a 89       	ldd	r23, Y+18	; 0x12
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1078:	88 23       	and	r24, r24
    107a:	1c f4       	brge	.+6      	; 0x1082 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	88 8b       	std	Y+16, r24	; 0x10
    1080:	91 c0       	rjmp	.+290    	; 0x11a4 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    1082:	69 89       	ldd	r22, Y+17	; 0x11
    1084:	7a 89       	ldd	r23, Y+18	; 0x12
    1086:	8b 89       	ldd	r24, Y+19	; 0x13
    1088:	9c 89       	ldd	r25, Y+20	; 0x14
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	4f e7       	ldi	r20, 0x7F	; 127
    1090:	53 e4       	ldi	r21, 0x43	; 67
    1092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1096:	18 16       	cp	r1, r24
    1098:	0c f0       	brlt	.+2      	; 0x109c <LCD_enu_SendCmnd+0x2ce>
    109a:	7b c0       	rjmp	.+246    	; 0x1192 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    109c:	6d 89       	ldd	r22, Y+21	; 0x15
    109e:	7e 89       	ldd	r23, Y+22	; 0x16
    10a0:	8f 89       	ldd	r24, Y+23	; 0x17
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	4a e7       	ldi	r20, 0x7A	; 122
    10aa:	54 e4       	ldi	r21, 0x44	; 68
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	8c 87       	std	Y+12, r24	; 0x0c
    10b6:	9d 87       	std	Y+13, r25	; 0x0d
    10b8:	ae 87       	std	Y+14, r26	; 0x0e
    10ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    10be:	7d 85       	ldd	r23, Y+13	; 0x0d
    10c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    10c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4a e7       	ldi	r20, 0x7A	; 122
    10ca:	55 e4       	ldi	r21, 0x45	; 69
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	88 87       	std	Y+8, r24	; 0x08
    10d6:	99 87       	std	Y+9, r25	; 0x09
    10d8:	aa 87       	std	Y+10, r26	; 0x0a
    10da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10dc:	68 85       	ldd	r22, Y+8	; 0x08
    10de:	79 85       	ldd	r23, Y+9	; 0x09
    10e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e8       	ldi	r20, 0x80	; 128
    10ea:	5f e3       	ldi	r21, 0x3F	; 63
    10ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10f0:	88 23       	and	r24, r24
    10f2:	2c f4       	brge	.+10     	; 0x10fe <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9f 83       	std	Y+7, r25	; 0x07
    10fa:	8e 83       	std	Y+6, r24	; 0x06
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    10fe:	68 85       	ldd	r22, Y+8	; 0x08
    1100:	79 85       	ldd	r23, Y+9	; 0x09
    1102:	8a 85       	ldd	r24, Y+10	; 0x0a
    1104:	9b 85       	ldd	r25, Y+11	; 0x0b
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	57 e4       	ldi	r21, 0x47	; 71
    110e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1112:	18 16       	cp	r1, r24
    1114:	4c f5       	brge	.+82     	; 0x1168 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1116:	6c 85       	ldd	r22, Y+12	; 0x0c
    1118:	7d 85       	ldd	r23, Y+13	; 0x0d
    111a:	8e 85       	ldd	r24, Y+14	; 0x0e
    111c:	9f 85       	ldd	r25, Y+15	; 0x0f
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	40 e2       	ldi	r20, 0x20	; 32
    1124:	51 e4       	ldi	r21, 0x41	; 65
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	bc 01       	movw	r22, r24
    1130:	cd 01       	movw	r24, r26
    1132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	9f 83       	std	Y+7, r25	; 0x07
    113c:	8e 83       	std	Y+6, r24	; 0x06
    113e:	0f c0       	rjmp	.+30     	; 0x115e <LCD_enu_SendCmnd+0x390>
    1140:	80 e9       	ldi	r24, 0x90	; 144
    1142:	91 e0       	ldi	r25, 0x01	; 1
    1144:	9d 83       	std	Y+5, r25	; 0x05
    1146:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	9d 81       	ldd	r25, Y+5	; 0x05
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <LCD_enu_SendCmnd+0x37e>
    1150:	9d 83       	std	Y+5, r25	; 0x05
    1152:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1154:	8e 81       	ldd	r24, Y+6	; 0x06
    1156:	9f 81       	ldd	r25, Y+7	; 0x07
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	9f 83       	std	Y+7, r25	; 0x07
    115c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f7       	brne	.-38     	; 0x1140 <LCD_enu_SendCmnd+0x372>
    1166:	24 c0       	rjmp	.+72     	; 0x11b0 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1168:	68 85       	ldd	r22, Y+8	; 0x08
    116a:	79 85       	ldd	r23, Y+9	; 0x09
    116c:	8a 85       	ldd	r24, Y+10	; 0x0a
    116e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9f 83       	std	Y+7, r25	; 0x07
    117a:	8e 83       	std	Y+6, r24	; 0x06
    117c:	8e 81       	ldd	r24, Y+6	; 0x06
    117e:	9f 81       	ldd	r25, Y+7	; 0x07
    1180:	9b 83       	std	Y+3, r25	; 0x03
    1182:	8a 83       	std	Y+2, r24	; 0x02
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	9b 81       	ldd	r25, Y+3	; 0x03
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <LCD_enu_SendCmnd+0x3ba>
    118c:	9b 83       	std	Y+3, r25	; 0x03
    118e:	8a 83       	std	Y+2, r24	; 0x02
    1190:	0f c0       	rjmp	.+30     	; 0x11b0 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1192:	69 89       	ldd	r22, Y+17	; 0x11
    1194:	7a 89       	ldd	r23, Y+18	; 0x12
    1196:	8b 89       	ldd	r24, Y+19	; 0x13
    1198:	9c 89       	ldd	r25, Y+20	; 0x14
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	88 8b       	std	Y+16, r24	; 0x10
    11a4:	88 89       	ldd	r24, Y+16	; 0x10
    11a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	8a 95       	dec	r24
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <LCD_enu_SendCmnd+0x3dc>
    11ae:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	62 e0       	ldi	r22, 0x02	; 2
    11b4:	40 e0       	ldi	r20, 0x00	; 0
    11b6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
         return STATE_OK;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    11bc:	e1 96       	adiw	r28, 0x31	; 49
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	e1 97       	sbiw	r28, 0x31	; 49
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    11f8:	89 a9       	ldd	r24, Y+49	; 0x31
    11fa:	98 2f       	mov	r25, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	99 27       	eor	r25, r25
    1200:	99 1f       	adc	r25, r25
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	67 e0       	ldi	r22, 0x07	; 7
    1206:	49 2f       	mov	r20, r25
    1208:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    120c:	89 a9       	ldd	r24, Y+49	; 0x31
    120e:	82 95       	swap	r24
    1210:	86 95       	lsr	r24
    1212:	86 95       	lsr	r24
    1214:	83 70       	andi	r24, 0x03	; 3
    1216:	98 2f       	mov	r25, r24
    1218:	91 70       	andi	r25, 0x01	; 1
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	66 e0       	ldi	r22, 0x06	; 6
    121e:	49 2f       	mov	r20, r25
    1220:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    1224:	89 a9       	ldd	r24, Y+49	; 0x31
    1226:	82 95       	swap	r24
    1228:	86 95       	lsr	r24
    122a:	87 70       	andi	r24, 0x07	; 7
    122c:	98 2f       	mov	r25, r24
    122e:	91 70       	andi	r25, 0x01	; 1
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	65 e0       	ldi	r22, 0x05	; 5
    1234:	49 2f       	mov	r20, r25
    1236:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    123a:	89 a9       	ldd	r24, Y+49	; 0x31
    123c:	82 95       	swap	r24
    123e:	8f 70       	andi	r24, 0x0F	; 15
    1240:	98 2f       	mov	r25, r24
    1242:	91 70       	andi	r25, 0x01	; 1
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	64 e0       	ldi	r22, 0x04	; 4
    1248:	49 2f       	mov	r20, r25
    124a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	62 e0       	ldi	r22, 0x02	; 2
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a0 e8       	ldi	r26, 0x80	; 128
    125e:	bf e3       	ldi	r27, 0x3F	; 63
    1260:	8d a7       	std	Y+45, r24	; 0x2d
    1262:	9e a7       	std	Y+46, r25	; 0x2e
    1264:	af a7       	std	Y+47, r26	; 0x2f
    1266:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1268:	6d a5       	ldd	r22, Y+45	; 0x2d
    126a:	7e a5       	ldd	r23, Y+46	; 0x2e
    126c:	8f a5       	ldd	r24, Y+47	; 0x2f
    126e:	98 a9       	ldd	r25, Y+48	; 0x30
    1270:	2b ea       	ldi	r18, 0xAB	; 171
    1272:	3a ea       	ldi	r19, 0xAA	; 170
    1274:	4a ea       	ldi	r20, 0xAA	; 170
    1276:	50 e4       	ldi	r21, 0x40	; 64
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	89 a7       	std	Y+41, r24	; 0x29
    1282:	9a a7       	std	Y+42, r25	; 0x2a
    1284:	ab a7       	std	Y+43, r26	; 0x2b
    1286:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1288:	69 a5       	ldd	r22, Y+41	; 0x29
    128a:	7a a5       	ldd	r23, Y+42	; 0x2a
    128c:	8b a5       	ldd	r24, Y+43	; 0x2b
    128e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e8       	ldi	r20, 0x80	; 128
    1296:	5f e3       	ldi	r21, 0x3F	; 63
    1298:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    129c:	88 23       	and	r24, r24
    129e:	1c f4       	brge	.+6      	; 0x12a6 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	88 a7       	std	Y+40, r24	; 0x28
    12a4:	91 c0       	rjmp	.+290    	; 0x13c8 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    12a6:	69 a5       	ldd	r22, Y+41	; 0x29
    12a8:	7a a5       	ldd	r23, Y+42	; 0x2a
    12aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4f e7       	ldi	r20, 0x7F	; 127
    12b4:	53 e4       	ldi	r21, 0x43	; 67
    12b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12ba:	18 16       	cp	r1, r24
    12bc:	0c f0       	brlt	.+2      	; 0x12c0 <LCD_enu_SendChar+0xf2>
    12be:	7b c0       	rjmp	.+246    	; 0x13b6 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    12c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    12c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    12c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12c6:	98 a9       	ldd	r25, Y+48	; 0x30
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	4a e7       	ldi	r20, 0x7A	; 122
    12ce:	54 e4       	ldi	r21, 0x44	; 68
    12d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	8c a3       	std	Y+36, r24	; 0x24
    12da:	9d a3       	std	Y+37, r25	; 0x25
    12dc:	ae a3       	std	Y+38, r26	; 0x26
    12de:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e0:	6c a1       	ldd	r22, Y+36	; 0x24
    12e2:	7d a1       	ldd	r23, Y+37	; 0x25
    12e4:	8e a1       	ldd	r24, Y+38	; 0x26
    12e6:	9f a1       	ldd	r25, Y+39	; 0x27
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	4a e7       	ldi	r20, 0x7A	; 122
    12ee:	55 e4       	ldi	r21, 0x45	; 69
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	88 a3       	std	Y+32, r24	; 0x20
    12fa:	99 a3       	std	Y+33, r25	; 0x21
    12fc:	aa a3       	std	Y+34, r26	; 0x22
    12fe:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1300:	68 a1       	ldd	r22, Y+32	; 0x20
    1302:	79 a1       	ldd	r23, Y+33	; 0x21
    1304:	8a a1       	ldd	r24, Y+34	; 0x22
    1306:	9b a1       	ldd	r25, Y+35	; 0x23
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9f 8f       	std	Y+31, r25	; 0x1f
    131e:	8e 8f       	std	Y+30, r24	; 0x1e
    1320:	3f c0       	rjmp	.+126    	; 0x13a0 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1322:	68 a1       	ldd	r22, Y+32	; 0x20
    1324:	79 a1       	ldd	r23, Y+33	; 0x21
    1326:	8a a1       	ldd	r24, Y+34	; 0x22
    1328:	9b a1       	ldd	r25, Y+35	; 0x23
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	3f ef       	ldi	r19, 0xFF	; 255
    132e:	4f e7       	ldi	r20, 0x7F	; 127
    1330:	57 e4       	ldi	r21, 0x47	; 71
    1332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1336:	18 16       	cp	r1, r24
    1338:	4c f5       	brge	.+82     	; 0x138c <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133a:	6c a1       	ldd	r22, Y+36	; 0x24
    133c:	7d a1       	ldd	r23, Y+37	; 0x25
    133e:	8e a1       	ldd	r24, Y+38	; 0x26
    1340:	9f a1       	ldd	r25, Y+39	; 0x27
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e2       	ldi	r20, 0x20	; 32
    1348:	51 e4       	ldi	r21, 0x41	; 65
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	bc 01       	movw	r22, r24
    1354:	cd 01       	movw	r24, r26
    1356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9f 8f       	std	Y+31, r25	; 0x1f
    1360:	8e 8f       	std	Y+30, r24	; 0x1e
    1362:	0f c0       	rjmp	.+30     	; 0x1382 <LCD_enu_SendChar+0x1b4>
    1364:	80 e9       	ldi	r24, 0x90	; 144
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	9d 8f       	std	Y+29, r25	; 0x1d
    136a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    136c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    136e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	f1 f7       	brne	.-4      	; 0x1370 <LCD_enu_SendChar+0x1a2>
    1374:	9d 8f       	std	Y+29, r25	; 0x1d
    1376:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1378:	8e 8d       	ldd	r24, Y+30	; 0x1e
    137a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	9f 8f       	std	Y+31, r25	; 0x1f
    1380:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1384:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	69 f7       	brne	.-38     	; 0x1364 <LCD_enu_SendChar+0x196>
    138a:	24 c0       	rjmp	.+72     	; 0x13d4 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138c:	68 a1       	ldd	r22, Y+32	; 0x20
    138e:	79 a1       	ldd	r23, Y+33	; 0x21
    1390:	8a a1       	ldd	r24, Y+34	; 0x22
    1392:	9b a1       	ldd	r25, Y+35	; 0x23
    1394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9f 8f       	std	Y+31, r25	; 0x1f
    139e:	8e 8f       	std	Y+30, r24	; 0x1e
    13a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13a4:	9b 8f       	std	Y+27, r25	; 0x1b
    13a6:	8a 8f       	std	Y+26, r24	; 0x1a
    13a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <LCD_enu_SendChar+0x1de>
    13b0:	9b 8f       	std	Y+27, r25	; 0x1b
    13b2:	8a 8f       	std	Y+26, r24	; 0x1a
    13b4:	0f c0       	rjmp	.+30     	; 0x13d4 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13b6:	69 a5       	ldd	r22, Y+41	; 0x29
    13b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    13ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    13bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	88 a7       	std	Y+40, r24	; 0x28
    13c8:	88 a5       	ldd	r24, Y+40	; 0x28
    13ca:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13cc:	89 8d       	ldd	r24, Y+25	; 0x19
    13ce:	8a 95       	dec	r24
    13d0:	f1 f7       	brne	.-4      	; 0x13ce <LCD_enu_SendChar+0x200>
    13d2:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	62 e0       	ldi	r22, 0x02	; 2
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    13de:	89 a9       	ldd	r24, Y+49	; 0x31
    13e0:	86 95       	lsr	r24
    13e2:	86 95       	lsr	r24
    13e4:	86 95       	lsr	r24
    13e6:	98 2f       	mov	r25, r24
    13e8:	91 70       	andi	r25, 0x01	; 1
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	67 e0       	ldi	r22, 0x07	; 7
    13ee:	49 2f       	mov	r20, r25
    13f0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    13f4:	89 a9       	ldd	r24, Y+49	; 0x31
    13f6:	86 95       	lsr	r24
    13f8:	86 95       	lsr	r24
    13fa:	98 2f       	mov	r25, r24
    13fc:	91 70       	andi	r25, 0x01	; 1
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	66 e0       	ldi	r22, 0x06	; 6
    1402:	49 2f       	mov	r20, r25
    1404:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    1408:	89 a9       	ldd	r24, Y+49	; 0x31
    140a:	86 95       	lsr	r24
    140c:	98 2f       	mov	r25, r24
    140e:	91 70       	andi	r25, 0x01	; 1
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	65 e0       	ldi	r22, 0x05	; 5
    1414:	49 2f       	mov	r20, r25
    1416:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    141a:	89 a9       	ldd	r24, Y+49	; 0x31
    141c:	98 2f       	mov	r25, r24
    141e:	91 70       	andi	r25, 0x01	; 1
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	64 e0       	ldi	r22, 0x04	; 4
    1424:	49 2f       	mov	r20, r25
    1426:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	62 e0       	ldi	r22, 0x02	; 2
    142e:	41 e0       	ldi	r20, 0x01	; 1
    1430:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a0 e8       	ldi	r26, 0x80	; 128
    143a:	bf e3       	ldi	r27, 0x3F	; 63
    143c:	8d 8b       	std	Y+21, r24	; 0x15
    143e:	9e 8b       	std	Y+22, r25	; 0x16
    1440:	af 8b       	std	Y+23, r26	; 0x17
    1442:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1444:	6d 89       	ldd	r22, Y+21	; 0x15
    1446:	7e 89       	ldd	r23, Y+22	; 0x16
    1448:	8f 89       	ldd	r24, Y+23	; 0x17
    144a:	98 8d       	ldd	r25, Y+24	; 0x18
    144c:	2b ea       	ldi	r18, 0xAB	; 171
    144e:	3a ea       	ldi	r19, 0xAA	; 170
    1450:	4a ea       	ldi	r20, 0xAA	; 170
    1452:	50 e4       	ldi	r21, 0x40	; 64
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	89 8b       	std	Y+17, r24	; 0x11
    145e:	9a 8b       	std	Y+18, r25	; 0x12
    1460:	ab 8b       	std	Y+19, r26	; 0x13
    1462:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1464:	69 89       	ldd	r22, Y+17	; 0x11
    1466:	7a 89       	ldd	r23, Y+18	; 0x12
    1468:	8b 89       	ldd	r24, Y+19	; 0x13
    146a:	9c 89       	ldd	r25, Y+20	; 0x14
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	1c f4       	brge	.+6      	; 0x1482 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	88 8b       	std	Y+16, r24	; 0x10
    1480:	91 c0       	rjmp	.+290    	; 0x15a4 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    1482:	69 89       	ldd	r22, Y+17	; 0x11
    1484:	7a 89       	ldd	r23, Y+18	; 0x12
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	4f e7       	ldi	r20, 0x7F	; 127
    1490:	53 e4       	ldi	r21, 0x43	; 67
    1492:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1496:	18 16       	cp	r1, r24
    1498:	0c f0       	brlt	.+2      	; 0x149c <LCD_enu_SendChar+0x2ce>
    149a:	7b c0       	rjmp	.+246    	; 0x1592 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    149c:	6d 89       	ldd	r22, Y+21	; 0x15
    149e:	7e 89       	ldd	r23, Y+22	; 0x16
    14a0:	8f 89       	ldd	r24, Y+23	; 0x17
    14a2:	98 8d       	ldd	r25, Y+24	; 0x18
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	4a e7       	ldi	r20, 0x7A	; 122
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	8c 87       	std	Y+12, r24	; 0x0c
    14b6:	9d 87       	std	Y+13, r25	; 0x0d
    14b8:	ae 87       	std	Y+14, r26	; 0x0e
    14ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    14be:	7d 85       	ldd	r23, Y+13	; 0x0d
    14c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    14c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4a e7       	ldi	r20, 0x7A	; 122
    14ca:	55 e4       	ldi	r21, 0x45	; 69
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	88 87       	std	Y+8, r24	; 0x08
    14d6:	99 87       	std	Y+9, r25	; 0x09
    14d8:	aa 87       	std	Y+10, r26	; 0x0a
    14da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    14dc:	68 85       	ldd	r22, Y+8	; 0x08
    14de:	79 85       	ldd	r23, Y+9	; 0x09
    14e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14f0:	88 23       	and	r24, r24
    14f2:	2c f4       	brge	.+10     	; 0x14fe <LCD_enu_SendChar+0x330>
		__ticks = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9f 83       	std	Y+7, r25	; 0x07
    14fa:	8e 83       	std	Y+6, r24	; 0x06
    14fc:	3f c0       	rjmp	.+126    	; 0x157c <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    14fe:	68 85       	ldd	r22, Y+8	; 0x08
    1500:	79 85       	ldd	r23, Y+9	; 0x09
    1502:	8a 85       	ldd	r24, Y+10	; 0x0a
    1504:	9b 85       	ldd	r25, Y+11	; 0x0b
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	3f ef       	ldi	r19, 0xFF	; 255
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	57 e4       	ldi	r21, 0x47	; 71
    150e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1512:	18 16       	cp	r1, r24
    1514:	4c f5       	brge	.+82     	; 0x1568 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1516:	6c 85       	ldd	r22, Y+12	; 0x0c
    1518:	7d 85       	ldd	r23, Y+13	; 0x0d
    151a:	8e 85       	ldd	r24, Y+14	; 0x0e
    151c:	9f 85       	ldd	r25, Y+15	; 0x0f
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e2       	ldi	r20, 0x20	; 32
    1524:	51 e4       	ldi	r21, 0x41	; 65
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	bc 01       	movw	r22, r24
    1530:	cd 01       	movw	r24, r26
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9f 83       	std	Y+7, r25	; 0x07
    153c:	8e 83       	std	Y+6, r24	; 0x06
    153e:	0f c0       	rjmp	.+30     	; 0x155e <LCD_enu_SendChar+0x390>
    1540:	80 e9       	ldi	r24, 0x90	; 144
    1542:	91 e0       	ldi	r25, 0x01	; 1
    1544:	9d 83       	std	Y+5, r25	; 0x05
    1546:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <LCD_enu_SendChar+0x37e>
    1550:	9d 83       	std	Y+5, r25	; 0x05
    1552:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1554:	8e 81       	ldd	r24, Y+6	; 0x06
    1556:	9f 81       	ldd	r25, Y+7	; 0x07
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9f 83       	std	Y+7, r25	; 0x07
    155c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155e:	8e 81       	ldd	r24, Y+6	; 0x06
    1560:	9f 81       	ldd	r25, Y+7	; 0x07
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	69 f7       	brne	.-38     	; 0x1540 <LCD_enu_SendChar+0x372>
    1566:	24 c0       	rjmp	.+72     	; 0x15b0 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1568:	68 85       	ldd	r22, Y+8	; 0x08
    156a:	79 85       	ldd	r23, Y+9	; 0x09
    156c:	8a 85       	ldd	r24, Y+10	; 0x0a
    156e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9f 83       	std	Y+7, r25	; 0x07
    157a:	8e 83       	std	Y+6, r24	; 0x06
    157c:	8e 81       	ldd	r24, Y+6	; 0x06
    157e:	9f 81       	ldd	r25, Y+7	; 0x07
    1580:	9b 83       	std	Y+3, r25	; 0x03
    1582:	8a 83       	std	Y+2, r24	; 0x02
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <LCD_enu_SendChar+0x3ba>
    158c:	9b 83       	std	Y+3, r25	; 0x03
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1592:	69 89       	ldd	r22, Y+17	; 0x11
    1594:	7a 89       	ldd	r23, Y+18	; 0x12
    1596:	8b 89       	ldd	r24, Y+19	; 0x13
    1598:	9c 89       	ldd	r25, Y+20	; 0x14
    159a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	88 8b       	std	Y+16, r24	; 0x10
    15a4:	88 89       	ldd	r24, Y+16	; 0x10
    15a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	8a 95       	dec	r24
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <LCD_enu_SendChar+0x3dc>
    15ae:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	62 e0       	ldi	r22, 0x02	; 2
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
    return STATE_OK;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    15bc:	e1 96       	adiw	r28, 0x31	; 49
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <LCD_enu_SendString+0x6>
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	9b 83       	std	Y+3, r25	; 0x03
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    15de:	19 82       	std	Y+1, r1	; 0x01
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <LCD_enu_SendString+0x30>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	9b 81       	ldd	r25, Y+3	; 0x03
    15ec:	fc 01       	movw	r30, r24
    15ee:	e2 0f       	add	r30, r18
    15f0:	f3 1f       	adc	r31, r19
    15f2:	80 81       	ld	r24, Z
    15f4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	fc 01       	movw	r30, r24
    160a:	e2 0f       	add	r30, r18
    160c:	f3 1f       	adc	r31, r19
    160e:	80 81       	ld	r24, Z
    1610:	88 23       	and	r24, r24
    1612:	39 f7       	brne	.-50     	; 0x15e2 <LCD_enu_SendString+0x14>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    1614:	81 e0       	ldi	r24, 0x01	; 1
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	60 97       	sbiw	r28, 0x10	; 16
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	6d 87       	std	Y+13, r22	; 0x0d
    163c:	7e 87       	std	Y+14, r23	; 0x0e
    163e:	8f 87       	std	Y+15, r24	; 0x0f
    1640:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    1642:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    1644:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    1646:	8d 85       	ldd	r24, Y+13	; 0x0d
    1648:	9e 85       	ldd	r25, Y+14	; 0x0e
    164a:	af 85       	ldd	r26, Y+15	; 0x0f
    164c:	b8 89       	ldd	r27, Y+16	; 0x10
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	a1 05       	cpc	r26, r1
    1652:	b1 05       	cpc	r27, r1
    1654:	89 f5       	brne	.+98     	; 0x16b8 <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    1656:	80 e3       	ldi	r24, 0x30	; 48
    1658:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_enu_SendChar>
    165c:	4d c0       	rjmp	.+154    	; 0x16f8 <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	08 2f       	mov	r16, r24
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	8d 85       	ldd	r24, Y+13	; 0x0d
    1666:	9e 85       	ldd	r25, Y+14	; 0x0e
    1668:	af 85       	ldd	r26, Y+15	; 0x0f
    166a:	b8 89       	ldd	r27, Y+16	; 0x10
    166c:	2a e0       	ldi	r18, 0x0A	; 10
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__udivmodsi4>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	28 2f       	mov	r18, r24
    1682:	ce 01       	movw	r24, r28
    1684:	03 96       	adiw	r24, 0x03	; 3
    1686:	fc 01       	movw	r30, r24
    1688:	e0 0f       	add	r30, r16
    168a:	f1 1f       	adc	r31, r17
    168c:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    168e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1690:	9e 85       	ldd	r25, Y+14	; 0x0e
    1692:	af 85       	ldd	r26, Y+15	; 0x0f
    1694:	b8 89       	ldd	r27, Y+16	; 0x10
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__udivmodsi4>
    16a6:	da 01       	movw	r26, r20
    16a8:	c9 01       	movw	r24, r18
    16aa:	8d 87       	std	Y+13, r24	; 0x0d
    16ac:	9e 87       	std	Y+14, r25	; 0x0e
    16ae:	af 87       	std	Y+15, r26	; 0x0f
    16b0:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	8f 5f       	subi	r24, 0xFF	; 255
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	af 85       	ldd	r26, Y+15	; 0x0f
    16be:	b8 89       	ldd	r27, Y+16	; 0x10
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	a1 05       	cpc	r26, r1
    16c4:	b1 05       	cpc	r27, r1
    16c6:	59 f6       	brne	.-106    	; 0x165e <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	81 50       	subi	r24, 0x01	; 1
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	11 c0       	rjmp	.+34     	; 0x16f2 <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	28 2f       	mov	r18, r24
    16d4:	33 27       	eor	r19, r19
    16d6:	27 fd       	sbrc	r18, 7
    16d8:	30 95       	com	r19
    16da:	ce 01       	movw	r24, r28
    16dc:	03 96       	adiw	r24, 0x03	; 3
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	80 81       	ld	r24, Z
    16e6:	80 5d       	subi	r24, 0xD0	; 208
    16e8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	81 50       	subi	r24, 0x01	; 1
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	88 23       	and	r24, r24
    16f6:	64 f7       	brge	.-40     	; 0x16d0 <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
}
    16fa:	60 96       	adiw	r28, 0x10	; 16
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	08 95       	ret

00001710 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <LCD_enu_SetCursor+0x6>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <LCD_enu_SetCursor+0x8>
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	88 32       	cpi	r24, 0x28	; 40
    1726:	f0 f4       	brcc	.+60     	; 0x1764 <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3d 83       	std	Y+5, r19	; 0x05
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	31 f0       	breq	.+12     	; 0x1746 <LCD_enu_SetCursor+0x36>
    173a:	2c 81       	ldd	r18, Y+4	; 0x04
    173c:	3d 81       	ldd	r19, Y+5	; 0x05
    173e:	21 30       	cpi	r18, 0x01	; 1
    1740:	31 05       	cpc	r19, r1
    1742:	31 f0       	breq	.+12     	; 0x1750 <LCD_enu_SetCursor+0x40>
    1744:	0a c0       	rjmp	.+20     	; 0x175a <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 58       	subi	r24, 0x80	; 128
    174a:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    174e:	07 c0       	rjmp	.+14     	; 0x175e <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 54       	subi	r24, 0x40	; 64
    1754:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    1758:	02 c0       	rjmp	.+4      	; 0x175e <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    175a:	1b 82       	std	Y+3, r1	; 0x03
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    175e:	31 e0       	ldi	r19, 0x01	; 1
    1760:	3b 83       	std	Y+3, r19	; 0x03
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    1764:	1b 82       	std	Y+3, r1	; 0x03
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	cc 54       	subi	r28, 0x4C	; 76
    1786:	d0 40       	sbci	r29, 0x00	; 0
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	62 e0       	ldi	r22, 0x02	; 2
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	67 e0       	ldi	r22, 0x07	; 7
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	66 e0       	ldi	r22, 0x06	; 6
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	65 e0       	ldi	r22, 0x05	; 5
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	64 e0       	ldi	r22, 0x04	; 4
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
    17d8:	fe 01       	movw	r30, r28
    17da:	e7 5b       	subi	r30, 0xB7	; 183
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	ac e0       	ldi	r26, 0x0C	; 12
    17e4:	b2 e4       	ldi	r27, 0x42	; 66
    17e6:	80 83       	st	Z, r24
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	a2 83       	std	Z+2, r26	; 0x02
    17ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	8e 01       	movw	r16, r28
    17f0:	0b 5b       	subi	r16, 0xBB	; 187
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	fe 01       	movw	r30, r28
    17f6:	e7 5b       	subi	r30, 0xB7	; 183
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a e7       	ldi	r20, 0x7A	; 122
    1808:	55 e4       	ldi	r21, 0x45	; 69
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	f8 01       	movw	r30, r16
    1814:	80 83       	st	Z, r24
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	a2 83       	std	Z+2, r26	; 0x02
    181a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    181c:	fe 01       	movw	r30, r28
    181e:	eb 5b       	subi	r30, 0xBB	; 187
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	44 f4       	brge	.+16     	; 0x184a <LCD_enu_Init+0xd2>
		__ticks = 1;
    183a:	fe 01       	movw	r30, r28
    183c:	ed 5b       	subi	r30, 0xBD	; 189
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	64 c0       	rjmp	.+200    	; 0x1912 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    184a:	fe 01       	movw	r30, r28
    184c:	eb 5b       	subi	r30, 0xBB	; 187
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	3f ef       	ldi	r19, 0xFF	; 255
    185c:	4f e7       	ldi	r20, 0x7F	; 127
    185e:	57 e4       	ldi	r21, 0x47	; 71
    1860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1864:	18 16       	cp	r1, r24
    1866:	0c f0       	brlt	.+2      	; 0x186a <LCD_enu_Init+0xf2>
    1868:	43 c0       	rjmp	.+134    	; 0x18f0 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186a:	fe 01       	movw	r30, r28
    186c:	e7 5b       	subi	r30, 0xB7	; 183
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	60 81       	ld	r22, Z
    1872:	71 81       	ldd	r23, Z+1	; 0x01
    1874:	82 81       	ldd	r24, Z+2	; 0x02
    1876:	93 81       	ldd	r25, Z+3	; 0x03
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e2       	ldi	r20, 0x20	; 32
    187e:	51 e4       	ldi	r21, 0x41	; 65
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8e 01       	movw	r16, r28
    188a:	0d 5b       	subi	r16, 0xBD	; 189
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	bc 01       	movw	r22, r24
    1890:	cd 01       	movw	r24, r26
    1892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	f8 01       	movw	r30, r16
    189c:	91 83       	std	Z+1, r25	; 0x01
    189e:	80 83       	st	Z, r24
    18a0:	1f c0       	rjmp	.+62     	; 0x18e0 <LCD_enu_Init+0x168>
    18a2:	fe 01       	movw	r30, r28
    18a4:	ef 5b       	subi	r30, 0xBF	; 191
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 e9       	ldi	r24, 0x90	; 144
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18b0:	fe 01       	movw	r30, r28
    18b2:	ef 5b       	subi	r30, 0xBF	; 191
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_enu_Init+0x142>
    18be:	fe 01       	movw	r30, r28
    18c0:	ef 5b       	subi	r30, 0xBF	; 191
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	de 01       	movw	r26, r28
    18ca:	ad 5b       	subi	r26, 0xBD	; 189
    18cc:	bf 4f       	sbci	r27, 0xFF	; 255
    18ce:	fe 01       	movw	r30, r28
    18d0:	ed 5b       	subi	r30, 0xBD	; 189
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	9c 93       	st	X, r25
    18de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	fe 01       	movw	r30, r28
    18e2:	ed 5b       	subi	r30, 0xBD	; 189
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	d1 f6       	brne	.-76     	; 0x18a2 <LCD_enu_Init+0x12a>
    18ee:	24 c0       	rjmp	.+72     	; 0x1938 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	8e 01       	movw	r16, r28
    18f2:	0d 5b       	subi	r16, 0xBD	; 189
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	fe 01       	movw	r30, r28
    18f8:	eb 5b       	subi	r30, 0xBB	; 187
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	f8 01       	movw	r30, r16
    190e:	91 83       	std	Z+1, r25	; 0x01
    1910:	80 83       	st	Z, r24
    1912:	fe 01       	movw	r30, r28
    1914:	ed 5b       	subi	r30, 0xBD	; 189
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	fe 01       	movw	r30, r28
    191e:	ff 96       	adiw	r30, 0x3f	; 63
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	fe 01       	movw	r30, r28
    1926:	ff 96       	adiw	r30, 0x3f	; 63
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <LCD_enu_Init+0x1b4>
    1930:	fe 01       	movw	r30, r28
    1932:	ff 96       	adiw	r30, 0x3f	; 63
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    1938:	83 e3       	ldi	r24, 0x33	; 51
    193a:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    193e:	82 e3       	ldi	r24, 0x32	; 50
    1940:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    1944:	88 e2       	ldi	r24, 0x28	; 40
    1946:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 e2       	ldi	r26, 0x20	; 32
    1950:	b2 e4       	ldi	r27, 0x42	; 66
    1952:	8b af       	std	Y+59, r24	; 0x3b
    1954:	9c af       	std	Y+60, r25	; 0x3c
    1956:	ad af       	std	Y+61, r26	; 0x3d
    1958:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    195a:	6b ad       	ldd	r22, Y+59	; 0x3b
    195c:	7c ad       	ldd	r23, Y+60	; 0x3c
    195e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1960:	9e ad       	ldd	r25, Y+62	; 0x3e
    1962:	2b ea       	ldi	r18, 0xAB	; 171
    1964:	3a ea       	ldi	r19, 0xAA	; 170
    1966:	4a ea       	ldi	r20, 0xAA	; 170
    1968:	50 e4       	ldi	r21, 0x40	; 64
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f ab       	std	Y+55, r24	; 0x37
    1974:	98 af       	std	Y+56, r25	; 0x38
    1976:	a9 af       	std	Y+57, r26	; 0x39
    1978:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    197a:	6f a9       	ldd	r22, Y+55	; 0x37
    197c:	78 ad       	ldd	r23, Y+56	; 0x38
    197e:	89 ad       	ldd	r24, Y+57	; 0x39
    1980:	9a ad       	ldd	r25, Y+58	; 0x3a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	1c f4       	brge	.+6      	; 0x1998 <LCD_enu_Init+0x220>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	8e ab       	std	Y+54, r24	; 0x36
    1996:	91 c0       	rjmp	.+290    	; 0x1aba <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    1998:	6f a9       	ldd	r22, Y+55	; 0x37
    199a:	78 ad       	ldd	r23, Y+56	; 0x38
    199c:	89 ad       	ldd	r24, Y+57	; 0x39
    199e:	9a ad       	ldd	r25, Y+58	; 0x3a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	53 e4       	ldi	r21, 0x43	; 67
    19a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	0c f0       	brlt	.+2      	; 0x19b2 <LCD_enu_Init+0x23a>
    19b0:	7b c0       	rjmp	.+246    	; 0x1aa8 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    19b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    19b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    19b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8a ab       	std	Y+50, r24	; 0x32
    19cc:	9b ab       	std	Y+51, r25	; 0x33
    19ce:	ac ab       	std	Y+52, r26	; 0x34
    19d0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d2:	6a a9       	ldd	r22, Y+50	; 0x32
    19d4:	7b a9       	ldd	r23, Y+51	; 0x33
    19d6:	8c a9       	ldd	r24, Y+52	; 0x34
    19d8:	9d a9       	ldd	r25, Y+53	; 0x35
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a e7       	ldi	r20, 0x7A	; 122
    19e0:	55 e4       	ldi	r21, 0x45	; 69
    19e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8e a7       	std	Y+46, r24	; 0x2e
    19ec:	9f a7       	std	Y+47, r25	; 0x2f
    19ee:	a8 ab       	std	Y+48, r26	; 0x30
    19f0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    19f2:	6e a5       	ldd	r22, Y+46	; 0x2e
    19f4:	7f a5       	ldd	r23, Y+47	; 0x2f
    19f6:	88 a9       	ldd	r24, Y+48	; 0x30
    19f8:	99 a9       	ldd	r25, Y+49	; 0x31
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e8       	ldi	r20, 0x80	; 128
    1a00:	5f e3       	ldi	r21, 0x3F	; 63
    1a02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a06:	88 23       	and	r24, r24
    1a08:	2c f4       	brge	.+10     	; 0x1a14 <LCD_enu_Init+0x29c>
		__ticks = 1;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	9d a7       	std	Y+45, r25	; 0x2d
    1a10:	8c a7       	std	Y+44, r24	; 0x2c
    1a12:	3f c0       	rjmp	.+126    	; 0x1a92 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    1a14:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a16:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a18:	88 a9       	ldd	r24, Y+48	; 0x30
    1a1a:	99 a9       	ldd	r25, Y+49	; 0x31
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	3f ef       	ldi	r19, 0xFF	; 255
    1a20:	4f e7       	ldi	r20, 0x7F	; 127
    1a22:	57 e4       	ldi	r21, 0x47	; 71
    1a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a28:	18 16       	cp	r1, r24
    1a2a:	4c f5       	brge	.+82     	; 0x1a7e <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2c:	6a a9       	ldd	r22, Y+50	; 0x32
    1a2e:	7b a9       	ldd	r23, Y+51	; 0x33
    1a30:	8c a9       	ldd	r24, Y+52	; 0x34
    1a32:	9d a9       	ldd	r25, Y+53	; 0x35
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e2       	ldi	r20, 0x20	; 32
    1a3a:	51 e4       	ldi	r21, 0x41	; 65
    1a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	bc 01       	movw	r22, r24
    1a46:	cd 01       	movw	r24, r26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9d a7       	std	Y+45, r25	; 0x2d
    1a52:	8c a7       	std	Y+44, r24	; 0x2c
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <LCD_enu_Init+0x2fc>
    1a56:	80 e9       	ldi	r24, 0x90	; 144
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	9b a7       	std	Y+43, r25	; 0x2b
    1a5c:	8a a7       	std	Y+42, r24	; 0x2a
    1a5e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a60:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_enu_Init+0x2ea>
    1a66:	9b a7       	std	Y+43, r25	; 0x2b
    1a68:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a6c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	9d a7       	std	Y+45, r25	; 0x2d
    1a72:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <LCD_enu_Init+0x2de>
    1a7c:	24 c0       	rjmp	.+72     	; 0x1ac6 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a80:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a82:	88 a9       	ldd	r24, Y+48	; 0x30
    1a84:	99 a9       	ldd	r25, Y+49	; 0x31
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9d a7       	std	Y+45, r25	; 0x2d
    1a90:	8c a7       	std	Y+44, r24	; 0x2c
    1a92:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a94:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a96:	99 a7       	std	Y+41, r25	; 0x29
    1a98:	88 a7       	std	Y+40, r24	; 0x28
    1a9a:	88 a5       	ldd	r24, Y+40	; 0x28
    1a9c:	99 a5       	ldd	r25, Y+41	; 0x29
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <LCD_enu_Init+0x326>
    1aa2:	99 a7       	std	Y+41, r25	; 0x29
    1aa4:	88 a7       	std	Y+40, r24	; 0x28
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aa8:	6f a9       	ldd	r22, Y+55	; 0x37
    1aaa:	78 ad       	ldd	r23, Y+56	; 0x38
    1aac:	89 ad       	ldd	r24, Y+57	; 0x39
    1aae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8e ab       	std	Y+54, r24	; 0x36
    1aba:	8e a9       	ldd	r24, Y+54	; 0x36
    1abc:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1abe:	8f a1       	ldd	r24, Y+39	; 0x27
    1ac0:	8a 95       	dec	r24
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <LCD_enu_Init+0x348>
    1ac4:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    1ac6:	8f e0       	ldi	r24, 0x0F	; 15
    1ac8:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e2       	ldi	r26, 0x20	; 32
    1ad2:	b2 e4       	ldi	r27, 0x42	; 66
    1ad4:	8b a3       	std	Y+35, r24	; 0x23
    1ad6:	9c a3       	std	Y+36, r25	; 0x24
    1ad8:	ad a3       	std	Y+37, r26	; 0x25
    1ada:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1adc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ade:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae4:	2b ea       	ldi	r18, 0xAB	; 171
    1ae6:	3a ea       	ldi	r19, 0xAA	; 170
    1ae8:	4a ea       	ldi	r20, 0xAA	; 170
    1aea:	50 e4       	ldi	r21, 0x40	; 64
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8f 8f       	std	Y+31, r24	; 0x1f
    1af6:	98 a3       	std	Y+32, r25	; 0x20
    1af8:	a9 a3       	std	Y+33, r26	; 0x21
    1afa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1afc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1afe:	78 a1       	ldd	r23, Y+32	; 0x20
    1b00:	89 a1       	ldd	r24, Y+33	; 0x21
    1b02:	9a a1       	ldd	r25, Y+34	; 0x22
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	1c f4       	brge	.+6      	; 0x1b1a <LCD_enu_Init+0x3a2>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	8e 8f       	std	Y+30, r24	; 0x1e
    1b18:	91 c0       	rjmp	.+290    	; 0x1c3c <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    1b1a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b1c:	78 a1       	ldd	r23, Y+32	; 0x20
    1b1e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b20:	9a a1       	ldd	r25, Y+34	; 0x22
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	4f e7       	ldi	r20, 0x7F	; 127
    1b28:	53 e4       	ldi	r21, 0x43	; 67
    1b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b2e:	18 16       	cp	r1, r24
    1b30:	0c f0       	brlt	.+2      	; 0x1b34 <LCD_enu_Init+0x3bc>
    1b32:	7b c0       	rjmp	.+246    	; 0x1c2a <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    1b34:	6b a1       	ldd	r22, Y+35	; 0x23
    1b36:	7c a1       	ldd	r23, Y+36	; 0x24
    1b38:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	54 e4       	ldi	r21, 0x44	; 68
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8a 8f       	std	Y+26, r24	; 0x1a
    1b4e:	9b 8f       	std	Y+27, r25	; 0x1b
    1b50:	ac 8f       	std	Y+28, r26	; 0x1c
    1b52:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b56:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a e7       	ldi	r20, 0x7A	; 122
    1b62:	55 e4       	ldi	r21, 0x45	; 69
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8e 8b       	std	Y+22, r24	; 0x16
    1b6e:	9f 8b       	std	Y+23, r25	; 0x17
    1b70:	a8 8f       	std	Y+24, r26	; 0x18
    1b72:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b74:	6e 89       	ldd	r22, Y+22	; 0x16
    1b76:	7f 89       	ldd	r23, Y+23	; 0x17
    1b78:	88 8d       	ldd	r24, Y+24	; 0x18
    1b7a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <LCD_enu_Init+0x41e>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9d 8b       	std	Y+21, r25	; 0x15
    1b92:	8c 8b       	std	Y+20, r24	; 0x14
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    1b96:	6e 89       	ldd	r22, Y+22	; 0x16
    1b98:	7f 89       	ldd	r23, Y+23	; 0x17
    1b9a:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9c:	99 8d       	ldd	r25, Y+25	; 0x19
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bb0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bb4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9d 8b       	std	Y+21, r25	; 0x15
    1bd4:	8c 8b       	std	Y+20, r24	; 0x14
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_enu_Init+0x47e>
    1bd8:	80 e9       	ldi	r24, 0x90	; 144
    1bda:	91 e0       	ldi	r25, 0x01	; 1
    1bdc:	9b 8b       	std	Y+19, r25	; 0x13
    1bde:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be0:	8a 89       	ldd	r24, Y+18	; 0x12
    1be2:	9b 89       	ldd	r25, Y+19	; 0x13
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_enu_Init+0x46c>
    1be8:	9b 8b       	std	Y+19, r25	; 0x13
    1bea:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8c 89       	ldd	r24, Y+20	; 0x14
    1bee:	9d 89       	ldd	r25, Y+21	; 0x15
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	9d 8b       	std	Y+21, r25	; 0x15
    1bf4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <LCD_enu_Init+0x460>
    1bfe:	24 c0       	rjmp	.+72     	; 0x1c48 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	6e 89       	ldd	r22, Y+22	; 0x16
    1c02:	7f 89       	ldd	r23, Y+23	; 0x17
    1c04:	88 8d       	ldd	r24, Y+24	; 0x18
    1c06:	99 8d       	ldd	r25, Y+25	; 0x19
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9d 8b       	std	Y+21, r25	; 0x15
    1c12:	8c 8b       	std	Y+20, r24	; 0x14
    1c14:	8c 89       	ldd	r24, Y+20	; 0x14
    1c16:	9d 89       	ldd	r25, Y+21	; 0x15
    1c18:	99 8b       	std	Y+17, r25	; 0x11
    1c1a:	88 8b       	std	Y+16, r24	; 0x10
    1c1c:	88 89       	ldd	r24, Y+16	; 0x10
    1c1e:	99 89       	ldd	r25, Y+17	; 0x11
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_enu_Init+0x4a8>
    1c24:	99 8b       	std	Y+17, r25	; 0x11
    1c26:	88 8b       	std	Y+16, r24	; 0x10
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c2c:	78 a1       	ldd	r23, Y+32	; 0x20
    1c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c30:	9a a1       	ldd	r25, Y+34	; 0x22
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c3e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	8a 95       	dec	r24
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <LCD_enu_Init+0x4ca>
    1c46:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e4       	ldi	r27, 0x40	; 64
    1c56:	8b 87       	std	Y+11, r24	; 0x0b
    1c58:	9c 87       	std	Y+12, r25	; 0x0c
    1c5a:	ad 87       	std	Y+13, r26	; 0x0d
    1c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	4a e7       	ldi	r20, 0x7A	; 122
    1c6c:	55 e4       	ldi	r21, 0x45	; 69
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8f 83       	std	Y+7, r24	; 0x07
    1c78:	98 87       	std	Y+8, r25	; 0x08
    1c7a:	a9 87       	std	Y+9, r26	; 0x09
    1c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c80:	78 85       	ldd	r23, Y+8	; 0x08
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	2c f4       	brge	.+10     	; 0x1ca0 <LCD_enu_Init+0x528>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9e 83       	std	Y+6, r25	; 0x06
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	3f c0       	rjmp	.+126    	; 0x1d1e <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	78 85       	ldd	r23, Y+8	; 0x08
    1ca4:	89 85       	ldd	r24, Y+9	; 0x09
    1ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb4:	18 16       	cp	r1, r24
    1cb6:	4c f5       	brge	.+82     	; 0x1d0a <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e2       	ldi	r20, 0x20	; 32
    1cc6:	51 e4       	ldi	r21, 0x41	; 65
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 83       	std	Y+6, r25	; 0x06
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <LCD_enu_Init+0x588>
    1ce2:	80 e9       	ldi	r24, 0x90	; 144
    1ce4:	91 e0       	ldi	r25, 0x01	; 1
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_enu_Init+0x576>
    1cf2:	9c 83       	std	Y+4, r25	; 0x04
    1cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	69 f7       	brne	.-38     	; 0x1ce2 <LCD_enu_Init+0x56a>
    1d08:	14 c0       	rjmp	.+40     	; 0x1d32 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_enu_Init+0x5b2>
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    1d32:	86 e0       	ldi	r24, 0x06	; 6
    1d34:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    return STATE_OK;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1d3a:	c4 5b       	subi	r28, 0xB4	; 180
    1d3c:	df 4f       	sbci	r29, 0xFF	; 255
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	1f 91       	pop	r17
    1d4e:	0f 91       	pop	r16
    1d50:	08 95       	ret

00001d52 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	2e 97       	sbiw	r28, 0x0e	; 14
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	a0 e0       	ldi	r26, 0x00	; 0
    1d72:	b0 e4       	ldi	r27, 0x40	; 64
    1d74:	8b 87       	std	Y+11, r24	; 0x0b
    1d76:	9c 87       	std	Y+12, r25	; 0x0c
    1d78:	ad 87       	std	Y+13, r26	; 0x0d
    1d7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a e7       	ldi	r20, 0x7A	; 122
    1d8a:	55 e4       	ldi	r21, 0x45	; 69
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	8f 83       	std	Y+7, r24	; 0x07
    1d96:	98 87       	std	Y+8, r25	; 0x08
    1d98:	a9 87       	std	Y+9, r26	; 0x09
    1d9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db0:	88 23       	and	r24, r24
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <LCD_enu_Clear+0x6c>
		__ticks = 1;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
    1dbc:	3f c0       	rjmp	.+126    	; 0x1e3c <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	3f ef       	ldi	r19, 0xFF	; 255
    1dca:	4f e7       	ldi	r20, 0x7F	; 127
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dd2:	18 16       	cp	r1, r24
    1dd4:	4c f5       	brge	.+82     	; 0x1e28 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <LCD_enu_Clear+0xcc>
    1e00:	80 e9       	ldi	r24, 0x90	; 144
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	9c 83       	std	Y+4, r25	; 0x04
    1e06:	8b 83       	std	Y+3, r24	; 0x03
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_enu_Clear+0xba>
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	9e 81       	ldd	r25, Y+6	; 0x06
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9e 83       	std	Y+6, r25	; 0x06
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <LCD_enu_Clear+0xae>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <LCD_enu_Clear+0xf6>
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
}
    1e52:	2e 96       	adiw	r28, 0x0e	; 14
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	de bf       	out	0x3e, r29	; 62
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	cd bf       	out	0x3d, r28	; 61
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <LCD_enu_CreateCustomChar+0x6>
    1e6a:	00 d0       	rcall	.+0      	; 0x1e6c <LCD_enu_CreateCustomChar+0x8>
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	8a 83       	std	Y+2, r24	; 0x02
    1e74:	7c 83       	std	Y+4, r23	; 0x04
    1e76:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	49 f1       	breq	.+82     	; 0x1ed2 <LCD_enu_CreateCustomChar+0x6e>
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	88 30       	cpi	r24, 0x08	; 8
    1e84:	30 f5       	brcc	.+76     	; 0x1ed2 <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	08 96       	adiw	r24, 0x08	; 8
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0e 94 e7 06 	call	0xdce	; 0xdce <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    1e9e:	19 82       	std	Y+1, r1	; 0x01
    1ea0:	0e c0       	rjmp	.+28     	; 0x1ebe <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	fc 01       	movw	r30, r24
    1eae:	e2 0f       	add	r30, r18
    1eb0:	f3 1f       	adc	r31, r19
    1eb2:	80 81       	ld	r24, Z
    1eb4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	88 30       	cpi	r24, 0x08	; 8
    1ec2:	78 f3       	brcs	.-34     	; 0x1ea2 <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_enu_SetCursor>
        return STATE_OK;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	8d 83       	std	Y+5, r24	; 0x05
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	8d 83       	std	Y+5, r24	; 0x05
    1ed6:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    1ef2:	19 82       	std	Y+1, r1	; 0x01
    1ef4:	33 c0       	rjmp	.+102    	; 0x1f5c <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	88 2f       	mov	r24, r24
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	fc 01       	movw	r30, r24
    1efe:	ed 56       	subi	r30, 0x6D	; 109
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	90 81       	ld	r25, Z
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	69 2f       	mov	r22, r25
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	88 2f       	mov	r24, r24
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	fc 01       	movw	r30, r24
    1f16:	ed 56       	subi	r30, 0x6D	; 109
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	90 81       	ld	r25, Z
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	69 2f       	mov	r22, r25
    1f20:	41 e0       	ldi	r20, 0x01	; 1
    1f22:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	88 2f       	mov	r24, r24
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	e9 56       	subi	r30, 0x69	; 105
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	90 81       	ld	r25, Z
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	69 2f       	mov	r22, r25
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 05 14 	call	0x280a	; 0x280a <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	fc 01       	movw	r30, r24
    1f46:	e9 56       	subi	r30, 0x69	; 105
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	90 81       	ld	r25, Z
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	69 2f       	mov	r22, r25
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	50 f2       	brcs	.-108    	; 0x1ef6 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
}
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	65 97       	sbiw	r28, 0x15	; 21
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	9d 8b       	std	Y+21, r25	; 0x15
    1f82:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	8a 8b       	std	Y+18, r24	; 0x12
    1f88:	1b 8a       	std	Y+19, r1	; 0x13
    1f8a:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    1f8c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f8e:	9d 89       	ldd	r25, Y+21	; 0x15
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <Keypad_enu_getKey+0x2a>
    1f94:	f0 c0       	rjmp	.+480    	; 0x2176 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    1f96:	ec 89       	ldd	r30, Y+20	; 0x14
    1f98:	fd 89       	ldd	r31, Y+21	; 0x15
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    1f9e:	19 8a       	std	Y+17, r1	; 0x11
    1fa0:	e5 c0       	rjmp	.+458    	; 0x216c <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    1fa2:	89 89       	ldd	r24, Y+17	; 0x11
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	fc 01       	movw	r30, r24
    1faa:	ed 56       	subi	r30, 0x6D	; 109
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	90 81       	ld	r25, Z
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	69 2f       	mov	r22, r25
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    1fba:	18 8a       	std	Y+16, r1	; 0x10
    1fbc:	c1 c0       	rjmp	.+386    	; 0x2140 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    1fbe:	88 89       	ldd	r24, Y+16	; 0x10
    1fc0:	88 2f       	mov	r24, r24
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	e9 56       	subi	r30, 0x69	; 105
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	90 81       	ld	r25, Z
    1fcc:	9e 01       	movw	r18, r28
    1fce:	2d 5e       	subi	r18, 0xED	; 237
    1fd0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	69 2f       	mov	r22, r25
    1fd6:	a9 01       	movw	r20, r18
    1fd8:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    1fdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fde:	88 23       	and	r24, r24
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <Keypad_enu_getKey+0x78>
    1fe2:	ab c0       	rjmp	.+342    	; 0x213a <Keypad_enu_getKey+0x1ce>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	a0 ea       	ldi	r26, 0xA0	; 160
    1fea:	b1 e4       	ldi	r27, 0x41	; 65
    1fec:	8b 87       	std	Y+11, r24	; 0x0b
    1fee:	9c 87       	std	Y+12, r25	; 0x0c
    1ff0:	ad 87       	std	Y+13, r26	; 0x0d
    1ff2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	55 e4       	ldi	r21, 0x45	; 69
    2004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8f 83       	std	Y+7, r24	; 0x07
    200e:	98 87       	std	Y+8, r25	; 0x08
    2010:	a9 87       	std	Y+9, r26	; 0x09
    2012:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2014:	6f 81       	ldd	r22, Y+7	; 0x07
    2016:	78 85       	ldd	r23, Y+8	; 0x08
    2018:	89 85       	ldd	r24, Y+9	; 0x09
    201a:	9a 85       	ldd	r25, Y+10	; 0x0a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e8       	ldi	r20, 0x80	; 128
    2022:	5f e3       	ldi	r21, 0x3F	; 63
    2024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2028:	88 23       	and	r24, r24
    202a:	2c f4       	brge	.+10     	; 0x2036 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	9e 83       	std	Y+6, r25	; 0x06
    2032:	8d 83       	std	Y+5, r24	; 0x05
    2034:	3f c0       	rjmp	.+126    	; 0x20b4 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2036:	6f 81       	ldd	r22, Y+7	; 0x07
    2038:	78 85       	ldd	r23, Y+8	; 0x08
    203a:	89 85       	ldd	r24, Y+9	; 0x09
    203c:	9a 85       	ldd	r25, Y+10	; 0x0a
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    204a:	18 16       	cp	r1, r24
    204c:	4c f5       	brge	.+82     	; 0x20a0 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2050:	7c 85       	ldd	r23, Y+12	; 0x0c
    2052:	8d 85       	ldd	r24, Y+13	; 0x0d
    2054:	9e 85       	ldd	r25, Y+14	; 0x0e
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e2       	ldi	r20, 0x20	; 32
    205c:	51 e4       	ldi	r21, 0x41	; 65
    205e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9e 83       	std	Y+6, r25	; 0x06
    2074:	8d 83       	std	Y+5, r24	; 0x05
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <Keypad_enu_getKey+0x12a>
    2078:	80 e9       	ldi	r24, 0x90	; 144
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
    2080:	8b 81       	ldd	r24, Y+3	; 0x03
    2082:	9c 81       	ldd	r25, Y+4	; 0x04
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <Keypad_enu_getKey+0x118>
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208c:	8d 81       	ldd	r24, Y+5	; 0x05
    208e:	9e 81       	ldd	r25, Y+6	; 0x06
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	9e 83       	std	Y+6, r25	; 0x06
    2094:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	00 97       	sbiw	r24, 0x00	; 0
    209c:	69 f7       	brne	.-38     	; 0x2078 <Keypad_enu_getKey+0x10c>
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a0:	6f 81       	ldd	r22, Y+7	; 0x07
    20a2:	78 85       	ldd	r23, Y+8	; 0x08
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	9e 83       	std	Y+6, r25	; 0x06
    20b2:	8d 83       	std	Y+5, r24	; 0x05
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	9a 81       	ldd	r25, Y+2	; 0x02
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <Keypad_enu_getKey+0x154>
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    20c8:	88 89       	ldd	r24, Y+16	; 0x10
    20ca:	88 2f       	mov	r24, r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	fc 01       	movw	r30, r24
    20d0:	e9 56       	subi	r30, 0x69	; 105
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	90 81       	ld	r25, Z
    20d6:	9e 01       	movw	r18, r28
    20d8:	2d 5e       	subi	r18, 0xED	; 237
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	69 2f       	mov	r22, r25
    20e0:	a9 01       	movw	r20, r18
    20e2:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enu_GetPinValue>
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    20e8:	88 89       	ldd	r24, Y+16	; 0x10
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	fc 01       	movw	r30, r24
    20f0:	e9 56       	subi	r30, 0x69	; 105
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	90 81       	ld	r25, Z
    20f6:	9e 01       	movw	r18, r28
    20f8:	2d 5e       	subi	r18, 0xED	; 237
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	69 2f       	mov	r22, r25
    2100:	a9 01       	movw	r20, r18
    2102:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2106:	8b 89       	ldd	r24, Y+19	; 0x13
    2108:	88 23       	and	r24, r24
    210a:	71 f3       	breq	.-36     	; 0x20e8 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    210c:	89 89       	ldd	r24, Y+17	; 0x11
    210e:	48 2f       	mov	r20, r24
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	88 89       	ldd	r24, Y+16	; 0x10
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	ca 01       	movw	r24, r20
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	82 0f       	add	r24, r18
    2124:	93 1f       	adc	r25, r19
    2126:	fc 01       	movw	r30, r24
    2128:	ed 57       	subi	r30, 0x7D	; 125
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	ec 89       	ldd	r30, Y+20	; 0x14
    2130:	fd 89       	ldd	r31, Y+21	; 0x15
    2132:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	8f 87       	std	Y+15, r24	; 0x0f
    2138:	07 c0       	rjmp	.+14     	; 0x2148 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    213a:	88 89       	ldd	r24, Y+16	; 0x10
    213c:	8f 5f       	subi	r24, 0xFF	; 255
    213e:	88 8b       	std	Y+16, r24	; 0x10
    2140:	88 89       	ldd	r24, Y+16	; 0x10
    2142:	84 30       	cpi	r24, 0x04	; 4
    2144:	08 f4       	brcc	.+2      	; 0x2148 <Keypad_enu_getKey+0x1dc>
    2146:	3b cf       	rjmp	.-394    	; 0x1fbe <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	88 2f       	mov	r24, r24
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	fc 01       	movw	r30, r24
    2150:	ed 56       	subi	r30, 0x6D	; 109
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	90 81       	ld	r25, Z
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	69 2f       	mov	r22, r25
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2160:	8f 85       	ldd	r24, Y+15	; 0x0f
    2162:	88 23       	and	r24, r24
    2164:	49 f4       	brne	.+18     	; 0x2178 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2166:	89 89       	ldd	r24, Y+17	; 0x11
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	89 8b       	std	Y+17, r24	; 0x11
    216c:	89 89       	ldd	r24, Y+17	; 0x11
    216e:	84 30       	cpi	r24, 0x04	; 4
    2170:	08 f4       	brcc	.+2      	; 0x2174 <Keypad_enu_getKey+0x208>
    2172:	17 cf       	rjmp	.-466    	; 0x1fa2 <Keypad_enu_getKey+0x36>
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2176:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2178:	8a 89       	ldd	r24, Y+18	; 0x12
}
    217a:	65 96       	adiw	r28, 0x15	; 21
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <Timers_enu_Timer0Init>:

#include"Timer_Private.h"
#include"Timer_Config.h"
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
ES_t Timers_enu_Timer0Init(void){
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	0f 92       	push	r0
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
        //Enable OverFlow Interrupt
        SET_BIT(TIMSK_REG,TOIE0);
        //PreLoad Value
        TCNT0_REG = TIMER0_PRELOAD_VALUE;
    #elif TIMER0_MODE == CTC_MODE
        CLR_BIT(TCCR0_REG,WGM00);
    2196:	a3 e5       	ldi	r26, 0x53	; 83
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e3 e5       	ldi	r30, 0x53	; 83
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7b       	andi	r24, 0xBF	; 191
    21a2:	8c 93       	st	X, r24
        SET_BIT(TCCR0_REG,WGM01);
    21a4:	a3 e5       	ldi	r26, 0x53	; 83
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e3 e5       	ldi	r30, 0x53	; 83
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	88 60       	ori	r24, 0x08	; 8
    21b0:	8c 93       	st	X, r24
        //Enable CTC Interrupt
        SET_BIT(TIMSK_REG,OCIE0);
    21b2:	a9 e5       	ldi	r26, 0x59	; 89
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e9 e5       	ldi	r30, 0x59	; 89
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	82 60       	ori	r24, 0x02	; 2
    21be:	8c 93       	st	X, r24
        //Set Compare match unit Register Value
        OCR0_REG = TIMER0_OCR_VALUE;
    21c0:	ec e5       	ldi	r30, 0x5C	; 92
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	10 82       	st	Z, r1
    #endif
    /***************Set PreScaler Value ****************/
    TCCR0_REG |= TIMER0_PRESCALER;
    21c6:	a3 e5       	ldi	r26, 0x53	; 83
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e3 e5       	ldi	r30, 0x53	; 83
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	87 60       	ori	r24, 0x07	; 7
    21d2:	8c 93       	st	X, r24
}
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <Timers_enu_Timer0SetCallBack>:
ES_t Timers_enu_Timer0SetCallBack(void(*Copy_pf)(void),u8 Copy_u8_Mode){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	00 d0       	rcall	.+0      	; 0x21e2 <Timers_enu_Timer0SetCallBack+0x6>
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <Timers_enu_Timer0SetCallBack+0x8>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	9b 83       	std	Y+3, r25	; 0x03
    21ea:	8a 83       	std	Y+2, r24	; 0x02
    21ec:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pf != NULL && Copy_u8_Mode<2 ){
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	81 f0       	breq	.+32     	; 0x221a <Timers_enu_Timer0SetCallBack+0x3e>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	68 f4       	brcc	.+26     	; 0x221a <Timers_enu_Timer0SetCallBack+0x3e>
        Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    2200:	8c 81       	ldd	r24, Y+4	; 0x04
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	fc 01       	movw	r30, r24
    220c:	e2 56       	subi	r30, 0x62	; 98
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
    2218:	01 c0       	rjmp	.+2      	; 0x221c <Timers_enu_Timer0SetCallBack+0x40>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    221a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <Timers_enu_TimerSetCLKSource>:
ES_t Timers_enu_TimerSetCLKSource(u8 Copy_u8_CLK_Source){
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <Timers_enu_TimerSetCLKSource+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_CLK_Source < 8){
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	88 30       	cpi	r24, 0x08	; 8
    2240:	78 f4       	brcc	.+30     	; 0x2260 <Timers_enu_TimerSetCLKSource+0x34>
        //Clear Old Value of Prescaler
        TCCR0_REG &= RESET_CLK_SOURCE;
    2242:	a3 e5       	ldi	r26, 0x53	; 83
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e3 e5       	ldi	r30, 0x53	; 83
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	88 7f       	andi	r24, 0xF8	; 248
    224e:	8c 93       	st	X, r24
        TCCR0_REG |= TIMER0_PRESCALER;
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	87 60       	ori	r24, 0x07	; 7
    225c:	8c 93       	st	X, r24
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <Timers_enu_TimerSetCLKSource+0x36>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2260:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <__vector_10>:
void __vector_10(void){
    226e:	1f 92       	push	r1
    2270:	0f 92       	push	r0
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	0f 92       	push	r0
    2276:	11 24       	eor	r1, r1
    2278:	2f 93       	push	r18
    227a:	3f 93       	push	r19
    227c:	4f 93       	push	r20
    227e:	5f 93       	push	r21
    2280:	6f 93       	push	r22
    2282:	7f 93       	push	r23
    2284:	8f 93       	push	r24
    2286:	9f 93       	push	r25
    2288:	af 93       	push	r26
    228a:	bf 93       	push	r27
    228c:	ef 93       	push	r30
    228e:	ff 93       	push	r31
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    #if (TIMER0_PRESCALER == EXTERNAL_FALLING_EDGE) || (TIMER0_PRESCALER == EXTERNAL_RISING_EDGE)
    if(Timers_pf_Timer0[CTC_MODE] != NULL)
    2298:	80 91 a0 00 	lds	r24, 0x00A0
    229c:	90 91 a1 00 	lds	r25, 0x00A1
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	29 f0       	breq	.+10     	; 0x22ae <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    22a4:	e0 91 a0 00 	lds	r30, 0x00A0
    22a8:	f0 91 a1 00 	lds	r31, 0x00A1
    22ac:	09 95       	icall
        Local_u16_CounterCTC = 0;
    if(Timers_pf_Timer0[CTC_MODE] != NULL)
        Timers_pf_Timer0[CTC_MODE]();
    }
    #endif
}
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	ff 91       	pop	r31
    22b4:	ef 91       	pop	r30
    22b6:	bf 91       	pop	r27
    22b8:	af 91       	pop	r26
    22ba:	9f 91       	pop	r25
    22bc:	8f 91       	pop	r24
    22be:	7f 91       	pop	r23
    22c0:	6f 91       	pop	r22
    22c2:	5f 91       	pop	r21
    22c4:	4f 91       	pop	r20
    22c6:	3f 91       	pop	r19
    22c8:	2f 91       	pop	r18
    22ca:	0f 90       	pop	r0
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	0f 90       	pop	r0
    22d0:	1f 90       	pop	r1
    22d2:	18 95       	reti

000022d4 <__vector_11>:
void __vector_11(void){
    22d4:	1f 92       	push	r1
    22d6:	0f 92       	push	r0
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	0f 92       	push	r0
    22dc:	11 24       	eor	r1, r1
    22de:	2f 93       	push	r18
    22e0:	3f 93       	push	r19
    22e2:	4f 93       	push	r20
    22e4:	5f 93       	push	r21
    22e6:	6f 93       	push	r22
    22e8:	7f 93       	push	r23
    22ea:	8f 93       	push	r24
    22ec:	9f 93       	push	r25
    22ee:	af 93       	push	r26
    22f0:	bf 93       	push	r27
    22f2:	ef 93       	push	r30
    22f4:	ff 93       	push	r31
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	cd b7       	in	r28, 0x3d	; 61
    22fc:	de b7       	in	r29, 0x3e	; 62
    #if (TIMER0_PRESCALER == EXTERNAL_FALLING_EDGE) || (TIMER0_PRESCALER == EXTERNAL_RISING_EDGE)
        if(Timers_pf_Timer0[NORMAL_MODE] != NULL)
    22fe:	80 91 9e 00 	lds	r24, 0x009E
    2302:	90 91 9f 00 	lds	r25, 0x009F
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	29 f0       	breq	.+10     	; 0x2314 <__vector_11+0x40>
            Timers_pf_Timer0[NORMAL_MODE]();
    230a:	e0 91 9e 00 	lds	r30, 0x009E
    230e:	f0 91 9f 00 	lds	r31, 0x009F
    2312:	09 95       	icall
        if(Timers_pf_Timer0[NORMAL_MODE] != NULL)
            Timers_pf_Timer0[NORMAL_MODE]();
    }
    #endif
    
}
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	ff 91       	pop	r31
    231a:	ef 91       	pop	r30
    231c:	bf 91       	pop	r27
    231e:	af 91       	pop	r26
    2320:	9f 91       	pop	r25
    2322:	8f 91       	pop	r24
    2324:	7f 91       	pop	r23
    2326:	6f 91       	pop	r22
    2328:	5f 91       	pop	r21
    232a:	4f 91       	pop	r20
    232c:	3f 91       	pop	r19
    232e:	2f 91       	pop	r18
    2330:	0f 90       	pop	r0
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	0f 90       	pop	r0
    2336:	1f 90       	pop	r1
    2338:	18 95       	reti

0000233a <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    2342:	af e5       	ldi	r26, 0x5F	; 95
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	ef e5       	ldi	r30, 0x5F	; 95
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	80 68       	ori	r24, 0x80	; 128
    234e:	8c 93       	st	X, r24
    return STATE_OK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
}
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    2360:	af e5       	ldi	r26, 0x5F	; 95
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ef e5       	ldi	r30, 0x5F	; 95
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8f 77       	andi	r24, 0x7F	; 127
    236c:	8c 93       	st	X, r24
    return STATE_OK;
    236e:	81 e0       	ldi	r24, 0x01	; 1
}
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <EXTI_enu_EXTI_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_EXTI_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	2b 97       	sbiw	r28, 0x0b	; 11
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	8a 83       	std	Y+2, r24	; 0x02
    238c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    2392:	8a 81       	ldd	r24, Y+2	; 0x02
    2394:	83 30       	cpi	r24, 0x03	; 3
    2396:	08 f0       	brcs	.+2      	; 0x239a <EXTI_enu_EXTI_Enable+0x24>
    2398:	07 c1       	rjmp	.+526    	; 0x25a8 <EXTI_enu_EXTI_Enable+0x232>
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	84 30       	cpi	r24, 0x04	; 4
    239e:	08 f0       	brcs	.+2      	; 0x23a2 <EXTI_enu_EXTI_Enable+0x2c>
    23a0:	03 c1       	rjmp	.+518    	; 0x25a8 <EXTI_enu_EXTI_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	3b 87       	std	Y+11, r19	; 0x0b
    23aa:	2a 87       	std	Y+10, r18	; 0x0a
    23ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	91 05       	cpc	r25, r1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <EXTI_enu_EXTI_Enable+0x42>
    23b6:	6d c0       	rjmp	.+218    	; 0x2492 <EXTI_enu_EXTI_Enable+0x11c>
    23b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    23ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    23bc:	22 30       	cpi	r18, 0x02	; 2
    23be:	31 05       	cpc	r19, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <EXTI_enu_EXTI_Enable+0x4e>
    23c2:	c9 c0       	rjmp	.+402    	; 0x2556 <EXTI_enu_EXTI_Enable+0x1e0>
    23c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	09 f0       	breq	.+2      	; 0x23ce <EXTI_enu_EXTI_Enable+0x58>
    23cc:	ee c0       	rjmp	.+476    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    23ce:	ab e5       	ldi	r26, 0x5B	; 91
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	eb e5       	ldi	r30, 0x5B	; 91
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	80 64       	ori	r24, 0x40	; 64
    23da:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	39 87       	std	Y+9, r19	; 0x09
    23e4:	28 87       	std	Y+8, r18	; 0x08
    23e6:	88 85       	ldd	r24, Y+8	; 0x08
    23e8:	99 85       	ldd	r25, Y+9	; 0x09
    23ea:	81 30       	cpi	r24, 0x01	; 1
    23ec:	91 05       	cpc	r25, r1
    23ee:	21 f1       	breq	.+72     	; 0x2438 <EXTI_enu_EXTI_Enable+0xc2>
    23f0:	28 85       	ldd	r18, Y+8	; 0x08
    23f2:	39 85       	ldd	r19, Y+9	; 0x09
    23f4:	22 30       	cpi	r18, 0x02	; 2
    23f6:	31 05       	cpc	r19, r1
    23f8:	2c f4       	brge	.+10     	; 0x2404 <EXTI_enu_EXTI_Enable+0x8e>
    23fa:	88 85       	ldd	r24, Y+8	; 0x08
    23fc:	99 85       	ldd	r25, Y+9	; 0x09
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	61 f0       	breq	.+24     	; 0x241a <EXTI_enu_EXTI_Enable+0xa4>
    2402:	d3 c0       	rjmp	.+422    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
    2404:	28 85       	ldd	r18, Y+8	; 0x08
    2406:	39 85       	ldd	r19, Y+9	; 0x09
    2408:	22 30       	cpi	r18, 0x02	; 2
    240a:	31 05       	cpc	r19, r1
    240c:	21 f1       	breq	.+72     	; 0x2456 <EXTI_enu_EXTI_Enable+0xe0>
    240e:	88 85       	ldd	r24, Y+8	; 0x08
    2410:	99 85       	ldd	r25, Y+9	; 0x09
    2412:	83 30       	cpi	r24, 0x03	; 3
    2414:	91 05       	cpc	r25, r1
    2416:	71 f1       	breq	.+92     	; 0x2474 <EXTI_enu_EXTI_Enable+0xfe>
    2418:	c8 c0       	rjmp	.+400    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    241a:	a5 e5       	ldi	r26, 0x55	; 85
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e5 e5       	ldi	r30, 0x55	; 85
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8e 7f       	andi	r24, 0xFE	; 254
    2426:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2428:	a5 e5       	ldi	r26, 0x55	; 85
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e5 e5       	ldi	r30, 0x55	; 85
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	8d 7f       	andi	r24, 0xFD	; 253
    2434:	8c 93       	st	X, r24
    2436:	b9 c0       	rjmp	.+370    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2438:	a5 e5       	ldi	r26, 0x55	; 85
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e5 e5       	ldi	r30, 0x55	; 85
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	81 60       	ori	r24, 0x01	; 1
    2444:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2446:	a5 e5       	ldi	r26, 0x55	; 85
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e5 e5       	ldi	r30, 0x55	; 85
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8d 7f       	andi	r24, 0xFD	; 253
    2452:	8c 93       	st	X, r24
    2454:	aa c0       	rjmp	.+340    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2456:	a5 e5       	ldi	r26, 0x55	; 85
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e5 e5       	ldi	r30, 0x55	; 85
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8e 7f       	andi	r24, 0xFE	; 254
    2462:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2464:	a5 e5       	ldi	r26, 0x55	; 85
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e5 e5       	ldi	r30, 0x55	; 85
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	82 60       	ori	r24, 0x02	; 2
    2470:	8c 93       	st	X, r24
    2472:	9b c0       	rjmp	.+310    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2474:	a5 e5       	ldi	r26, 0x55	; 85
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e5 e5       	ldi	r30, 0x55	; 85
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	81 60       	ori	r24, 0x01	; 1
    2480:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2482:	a5 e5       	ldi	r26, 0x55	; 85
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e5 e5       	ldi	r30, 0x55	; 85
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	82 60       	ori	r24, 0x02	; 2
    248e:	8c 93       	st	X, r24
    2490:	8c c0       	rjmp	.+280    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    2492:	ab e5       	ldi	r26, 0x5B	; 91
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	eb e5       	ldi	r30, 0x5B	; 91
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	80 68       	ori	r24, 0x80	; 128
    249e:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	3f 83       	std	Y+7, r19	; 0x07
    24a8:	2e 83       	std	Y+6, r18	; 0x06
    24aa:	8e 81       	ldd	r24, Y+6	; 0x06
    24ac:	9f 81       	ldd	r25, Y+7	; 0x07
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	91 05       	cpc	r25, r1
    24b2:	21 f1       	breq	.+72     	; 0x24fc <EXTI_enu_EXTI_Enable+0x186>
    24b4:	2e 81       	ldd	r18, Y+6	; 0x06
    24b6:	3f 81       	ldd	r19, Y+7	; 0x07
    24b8:	22 30       	cpi	r18, 0x02	; 2
    24ba:	31 05       	cpc	r19, r1
    24bc:	2c f4       	brge	.+10     	; 0x24c8 <EXTI_enu_EXTI_Enable+0x152>
    24be:	8e 81       	ldd	r24, Y+6	; 0x06
    24c0:	9f 81       	ldd	r25, Y+7	; 0x07
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	61 f0       	breq	.+24     	; 0x24de <EXTI_enu_EXTI_Enable+0x168>
    24c6:	71 c0       	rjmp	.+226    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
    24c8:	2e 81       	ldd	r18, Y+6	; 0x06
    24ca:	3f 81       	ldd	r19, Y+7	; 0x07
    24cc:	22 30       	cpi	r18, 0x02	; 2
    24ce:	31 05       	cpc	r19, r1
    24d0:	21 f1       	breq	.+72     	; 0x251a <EXTI_enu_EXTI_Enable+0x1a4>
    24d2:	8e 81       	ldd	r24, Y+6	; 0x06
    24d4:	9f 81       	ldd	r25, Y+7	; 0x07
    24d6:	83 30       	cpi	r24, 0x03	; 3
    24d8:	91 05       	cpc	r25, r1
    24da:	71 f1       	breq	.+92     	; 0x2538 <EXTI_enu_EXTI_Enable+0x1c2>
    24dc:	66 c0       	rjmp	.+204    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    24de:	a5 e5       	ldi	r26, 0x55	; 85
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e5       	ldi	r30, 0x55	; 85
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	8b 7f       	andi	r24, 0xFB	; 251
    24ea:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    24ec:	a5 e5       	ldi	r26, 0x55	; 85
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e5 e5       	ldi	r30, 0x55	; 85
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	87 7f       	andi	r24, 0xF7	; 247
    24f8:	8c 93       	st	X, r24
    24fa:	57 c0       	rjmp	.+174    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    24fc:	a5 e5       	ldi	r26, 0x55	; 85
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e5 e5       	ldi	r30, 0x55	; 85
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	84 60       	ori	r24, 0x04	; 4
    2508:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    250a:	a5 e5       	ldi	r26, 0x55	; 85
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e5 e5       	ldi	r30, 0x55	; 85
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	87 7f       	andi	r24, 0xF7	; 247
    2516:	8c 93       	st	X, r24
    2518:	48 c0       	rjmp	.+144    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    251a:	a5 e5       	ldi	r26, 0x55	; 85
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e5 e5       	ldi	r30, 0x55	; 85
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8b 7f       	andi	r24, 0xFB	; 251
    2526:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2528:	a5 e5       	ldi	r26, 0x55	; 85
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e5 e5       	ldi	r30, 0x55	; 85
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	88 60       	ori	r24, 0x08	; 8
    2534:	8c 93       	st	X, r24
    2536:	39 c0       	rjmp	.+114    	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2538:	a5 e5       	ldi	r26, 0x55	; 85
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e5 e5       	ldi	r30, 0x55	; 85
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	84 60       	ori	r24, 0x04	; 4
    2544:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2546:	a5 e5       	ldi	r26, 0x55	; 85
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e5 e5       	ldi	r30, 0x55	; 85
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	88 60       	ori	r24, 0x08	; 8
    2552:	8c 93       	st	X, r24
    2554:	2a c0       	rjmp	.+84     	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    2556:	ab e5       	ldi	r26, 0x5B	; 91
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	eb e5       	ldi	r30, 0x5B	; 91
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	80 62       	ori	r24, 0x20	; 32
    2562:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	3d 83       	std	Y+5, r19	; 0x05
    256c:	2c 83       	std	Y+4, r18	; 0x04
    256e:	8c 81       	ldd	r24, Y+4	; 0x04
    2570:	9d 81       	ldd	r25, Y+5	; 0x05
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	91 05       	cpc	r25, r1
    2576:	31 f0       	breq	.+12     	; 0x2584 <EXTI_enu_EXTI_Enable+0x20e>
    2578:	2c 81       	ldd	r18, Y+4	; 0x04
    257a:	3d 81       	ldd	r19, Y+5	; 0x05
    257c:	23 30       	cpi	r18, 0x03	; 3
    257e:	31 05       	cpc	r19, r1
    2580:	49 f0       	breq	.+18     	; 0x2594 <EXTI_enu_EXTI_Enable+0x21e>
    2582:	10 c0       	rjmp	.+32     	; 0x25a4 <EXTI_enu_EXTI_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    2584:	a4 e5       	ldi	r26, 0x54	; 84
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e4 e5       	ldi	r30, 0x54	; 84
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8f 7b       	andi	r24, 0xBF	; 191
    2590:	8c 93       	st	X, r24
    2592:	0b c0       	rjmp	.+22     	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    2594:	a4 e5       	ldi	r26, 0x54	; 84
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	e4 e5       	ldi	r30, 0x54	; 84
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	80 64       	ori	r24, 0x40	; 64
    25a0:	8c 93       	st	X, r24
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    25a4:	19 82       	std	Y+1, r1	; 0x01
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <EXTI_enu_EXTI_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    25a8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ac:	2b 96       	adiw	r28, 0x0b	; 11
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <EXTI_enu_EXTI_Disable>:

ES_t EXTI_enu_EXTI_Disable(u8 Copy_u8_EXTI_Index)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <EXTI_enu_EXTI_Disable+0x6>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <EXTI_enu_EXTI_Disable+0x8>
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	58 f5       	brcc	.+86     	; 0x262c <EXTI_enu_EXTI_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	28 2f       	mov	r18, r24
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	3c 83       	std	Y+4, r19	; 0x04
    25de:	2b 83       	std	Y+3, r18	; 0x03
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	81 30       	cpi	r24, 0x01	; 1
    25e6:	91 05       	cpc	r25, r1
    25e8:	89 f0       	breq	.+34     	; 0x260c <EXTI_enu_EXTI_Disable+0x4e>
    25ea:	2b 81       	ldd	r18, Y+3	; 0x03
    25ec:	3c 81       	ldd	r19, Y+4	; 0x04
    25ee:	22 30       	cpi	r18, 0x02	; 2
    25f0:	31 05       	cpc	r19, r1
    25f2:	a1 f0       	breq	.+40     	; 0x261c <EXTI_enu_EXTI_Disable+0x5e>
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	c9 f4       	brne	.+50     	; 0x262e <EXTI_enu_EXTI_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    25fc:	ab e5       	ldi	r26, 0x5B	; 91
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	eb e5       	ldi	r30, 0x5B	; 91
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	8f 7b       	andi	r24, 0xBF	; 191
    2608:	8c 93       	st	X, r24
    260a:	11 c0       	rjmp	.+34     	; 0x262e <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    260c:	ab e5       	ldi	r26, 0x5B	; 91
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	eb e5       	ldi	r30, 0x5B	; 91
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8f 77       	andi	r24, 0x7F	; 127
    2618:	8c 93       	st	X, r24
    261a:	09 c0       	rjmp	.+18     	; 0x262e <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    261c:	ab e5       	ldi	r26, 0x5B	; 91
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	eb e5       	ldi	r30, 0x5B	; 91
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	8f 7d       	andi	r24, 0xDF	; 223
    2628:	8c 93       	st	X, r24
    262a:	01 c0       	rjmp	.+2      	; 0x262e <EXTI_enu_EXTI_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    262c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <EXTI_enu_setCallBack>:

ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <EXTI_enu_setCallBack+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <EXTI_enu_setCallBack+0x8>
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	9b 83       	std	Y+3, r25	; 0x03
    264c:	8a 83       	std	Y+2, r24	; 0x02
    264e:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	81 f0       	breq	.+32     	; 0x267c <EXTI_enu_setCallBack+0x3e>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	83 30       	cpi	r24, 0x03	; 3
    2660:	68 f4       	brcc	.+26     	; 0x267c <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	fc 01       	movw	r30, r24
    266e:	ee 55       	subi	r30, 0x5E	; 94
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	9b 81       	ldd	r25, Y+3	; 0x03
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	01 c0       	rjmp	.+2      	; 0x267e <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    267c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    267e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    268e:	1f 92       	push	r1
    2690:	0f 92       	push	r0
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	0f 92       	push	r0
    2696:	11 24       	eor	r1, r1
    2698:	2f 93       	push	r18
    269a:	3f 93       	push	r19
    269c:	4f 93       	push	r20
    269e:	5f 93       	push	r21
    26a0:	6f 93       	push	r22
    26a2:	7f 93       	push	r23
    26a4:	8f 93       	push	r24
    26a6:	9f 93       	push	r25
    26a8:	af 93       	push	r26
    26aa:	bf 93       	push	r27
    26ac:	ef 93       	push	r30
    26ae:	ff 93       	push	r31
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    26b8:	80 91 a2 00 	lds	r24, 0x00A2
    26bc:	90 91 a3 00 	lds	r25, 0x00A3
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	29 f0       	breq	.+10     	; 0x26ce <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    26c4:	e0 91 a2 00 	lds	r30, 0x00A2
    26c8:	f0 91 a3 00 	lds	r31, 0x00A3
    26cc:	09 95       	icall
}
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	ff 91       	pop	r31
    26d4:	ef 91       	pop	r30
    26d6:	bf 91       	pop	r27
    26d8:	af 91       	pop	r26
    26da:	9f 91       	pop	r25
    26dc:	8f 91       	pop	r24
    26de:	7f 91       	pop	r23
    26e0:	6f 91       	pop	r22
    26e2:	5f 91       	pop	r21
    26e4:	4f 91       	pop	r20
    26e6:	3f 91       	pop	r19
    26e8:	2f 91       	pop	r18
    26ea:	0f 90       	pop	r0
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	0f 90       	pop	r0
    26f0:	1f 90       	pop	r1
    26f2:	18 95       	reti

000026f4 <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    26f4:	1f 92       	push	r1
    26f6:	0f 92       	push	r0
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	0f 92       	push	r0
    26fc:	11 24       	eor	r1, r1
    26fe:	2f 93       	push	r18
    2700:	3f 93       	push	r19
    2702:	4f 93       	push	r20
    2704:	5f 93       	push	r21
    2706:	6f 93       	push	r22
    2708:	7f 93       	push	r23
    270a:	8f 93       	push	r24
    270c:	9f 93       	push	r25
    270e:	af 93       	push	r26
    2710:	bf 93       	push	r27
    2712:	ef 93       	push	r30
    2714:	ff 93       	push	r31
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    271e:	80 91 a4 00 	lds	r24, 0x00A4
    2722:	90 91 a5 00 	lds	r25, 0x00A5
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	29 f0       	breq	.+10     	; 0x2734 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    272a:	e0 91 a4 00 	lds	r30, 0x00A4
    272e:	f0 91 a5 00 	lds	r31, 0x00A5
    2732:	09 95       	icall
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	ff 91       	pop	r31
    273a:	ef 91       	pop	r30
    273c:	bf 91       	pop	r27
    273e:	af 91       	pop	r26
    2740:	9f 91       	pop	r25
    2742:	8f 91       	pop	r24
    2744:	7f 91       	pop	r23
    2746:	6f 91       	pop	r22
    2748:	5f 91       	pop	r21
    274a:	4f 91       	pop	r20
    274c:	3f 91       	pop	r19
    274e:	2f 91       	pop	r18
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	0f 90       	pop	r0
    2756:	1f 90       	pop	r1
    2758:	18 95       	reti

0000275a <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    275a:	1f 92       	push	r1
    275c:	0f 92       	push	r0
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    2784:	80 91 a6 00 	lds	r24, 0x00A6
    2788:	90 91 a7 00 	lds	r25, 0x00A7
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	29 f0       	breq	.+10     	; 0x279a <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    2790:	e0 91 a6 00 	lds	r30, 0x00A6
    2794:	f0 91 a7 00 	lds	r31, 0x00A7
    2798:	09 95       	icall
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	ff 91       	pop	r31
    27a0:	ef 91       	pop	r30
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	0f 90       	pop	r0
    27bc:	1f 90       	pop	r1
    27be:	18 95       	reti

000027c0 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    27c8:	ea e3       	ldi	r30, 0x3A	; 58
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	8f e7       	ldi	r24, 0x7F	; 127
    27ce:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    27d0:	e7 e3       	ldi	r30, 0x37	; 55
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	8d ef       	ldi	r24, 0xFD	; 253
    27d6:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    27d8:	e4 e3       	ldi	r30, 0x34	; 52
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	83 e1       	ldi	r24, 0x13	; 19
    27de:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    27e0:	e1 e3       	ldi	r30, 0x31	; 49
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    27e6:	eb e3       	ldi	r30, 0x3B	; 59
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    27ec:	e8 e3       	ldi	r30, 0x38	; 56
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	84 ef       	ldi	r24, 0xF4	; 244
    27f2:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    27f4:	e5 e3       	ldi	r30, 0x35	; 53
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    27fa:	e2 e3       	ldi	r30, 0x32	; 50
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	8c e3       	ldi	r24, 0x3C	; 60
    2800:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    2802:	81 e0       	ldi	r24, 0x01	; 1
}
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	2e 97       	sbiw	r28, 0x0e	; 14
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	8a 83       	std	Y+2, r24	; 0x02
    2820:	6b 83       	std	Y+3, r22	; 0x03
    2822:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	84 30       	cpi	r24, 0x04	; 4
    282c:	08 f0       	brcs	.+2      	; 0x2830 <DIO_enu_SetPinDirection+0x26>
    282e:	0c c1       	rjmp	.+536    	; 0x2a48 <DIO_enu_SetPinDirection+0x23e>
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	88 30       	cpi	r24, 0x08	; 8
    2834:	08 f0       	brcs	.+2      	; 0x2838 <DIO_enu_SetPinDirection+0x2e>
    2836:	08 c1       	rjmp	.+528    	; 0x2a48 <DIO_enu_SetPinDirection+0x23e>
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	21 f0       	breq	.+8      	; 0x2846 <DIO_enu_SetPinDirection+0x3c>
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	88 23       	and	r24, r24
    2842:	09 f0       	breq	.+2      	; 0x2846 <DIO_enu_SetPinDirection+0x3c>
    2844:	01 c1       	rjmp	.+514    	; 0x2a48 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3e 87       	std	Y+14, r19	; 0x0e
    284e:	2d 87       	std	Y+13, r18	; 0x0d
    2850:	8d 85       	ldd	r24, Y+13	; 0x0d
    2852:	9e 85       	ldd	r25, Y+14	; 0x0e
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	09 f4       	brne	.+2      	; 0x285c <DIO_enu_SetPinDirection+0x52>
    285a:	4f c0       	rjmp	.+158    	; 0x28fa <DIO_enu_SetPinDirection+0xf0>
    285c:	2d 85       	ldd	r18, Y+13	; 0x0d
    285e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2860:	22 30       	cpi	r18, 0x02	; 2
    2862:	31 05       	cpc	r19, r1
    2864:	2c f4       	brge	.+10     	; 0x2870 <DIO_enu_SetPinDirection+0x66>
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	71 f0       	breq	.+28     	; 0x288a <DIO_enu_SetPinDirection+0x80>
    286e:	ed c0       	rjmp	.+474    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
    2870:	2d 85       	ldd	r18, Y+13	; 0x0d
    2872:	3e 85       	ldd	r19, Y+14	; 0x0e
    2874:	22 30       	cpi	r18, 0x02	; 2
    2876:	31 05       	cpc	r19, r1
    2878:	09 f4       	brne	.+2      	; 0x287c <DIO_enu_SetPinDirection+0x72>
    287a:	77 c0       	rjmp	.+238    	; 0x296a <DIO_enu_SetPinDirection+0x160>
    287c:	8d 85       	ldd	r24, Y+13	; 0x0d
    287e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2880:	83 30       	cpi	r24, 0x03	; 3
    2882:	91 05       	cpc	r25, r1
    2884:	09 f4       	brne	.+2      	; 0x2888 <DIO_enu_SetPinDirection+0x7e>
    2886:	a9 c0       	rjmp	.+338    	; 0x29da <DIO_enu_SetPinDirection+0x1d0>
    2888:	e0 c0       	rjmp	.+448    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    288a:	8c 81       	ldd	r24, Y+4	; 0x04
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	3c 87       	std	Y+12, r19	; 0x0c
    2892:	2b 87       	std	Y+11, r18	; 0x0b
    2894:	8b 85       	ldd	r24, Y+11	; 0x0b
    2896:	9c 85       	ldd	r25, Y+12	; 0x0c
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	d1 f0       	breq	.+52     	; 0x28d0 <DIO_enu_SetPinDirection+0xc6>
    289c:	2b 85       	ldd	r18, Y+11	; 0x0b
    289e:	3c 85       	ldd	r19, Y+12	; 0x0c
    28a0:	21 30       	cpi	r18, 0x01	; 1
    28a2:	31 05       	cpc	r19, r1
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <DIO_enu_SetPinDirection+0x9e>
    28a6:	d1 c0       	rjmp	.+418    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    28a8:	aa e3       	ldi	r26, 0x3A	; 58
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ea e3       	ldi	r30, 0x3A	; 58
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	48 2f       	mov	r20, r24
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	81 e0       	ldi	r24, 0x01	; 1
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	02 2e       	mov	r0, r18
    28c0:	02 c0       	rjmp	.+4      	; 0x28c6 <DIO_enu_SetPinDirection+0xbc>
    28c2:	88 0f       	add	r24, r24
    28c4:	99 1f       	adc	r25, r25
    28c6:	0a 94       	dec	r0
    28c8:	e2 f7       	brpl	.-8      	; 0x28c2 <DIO_enu_SetPinDirection+0xb8>
    28ca:	84 2b       	or	r24, r20
    28cc:	8c 93       	st	X, r24
    28ce:	bd c0       	rjmp	.+378    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    28d0:	aa e3       	ldi	r26, 0x3A	; 58
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	ea e3       	ldi	r30, 0x3A	; 58
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	48 2f       	mov	r20, r24
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	02 2e       	mov	r0, r18
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <DIO_enu_SetPinDirection+0xe4>
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	0a 94       	dec	r0
    28f0:	e2 f7       	brpl	.-8      	; 0x28ea <DIO_enu_SetPinDirection+0xe0>
    28f2:	80 95       	com	r24
    28f4:	84 23       	and	r24, r20
    28f6:	8c 93       	st	X, r24
    28f8:	a8 c0       	rjmp	.+336    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    28fa:	8c 81       	ldd	r24, Y+4	; 0x04
    28fc:	28 2f       	mov	r18, r24
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	3a 87       	std	Y+10, r19	; 0x0a
    2902:	29 87       	std	Y+9, r18	; 0x09
    2904:	89 85       	ldd	r24, Y+9	; 0x09
    2906:	9a 85       	ldd	r25, Y+10	; 0x0a
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	d1 f0       	breq	.+52     	; 0x2940 <DIO_enu_SetPinDirection+0x136>
    290c:	29 85       	ldd	r18, Y+9	; 0x09
    290e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2910:	21 30       	cpi	r18, 0x01	; 1
    2912:	31 05       	cpc	r19, r1
    2914:	09 f0       	breq	.+2      	; 0x2918 <DIO_enu_SetPinDirection+0x10e>
    2916:	99 c0       	rjmp	.+306    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    2918:	a7 e3       	ldi	r26, 0x37	; 55
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e7 e3       	ldi	r30, 0x37	; 55
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	48 2f       	mov	r20, r24
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	02 2e       	mov	r0, r18
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <DIO_enu_SetPinDirection+0x12c>
    2932:	88 0f       	add	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	0a 94       	dec	r0
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <DIO_enu_SetPinDirection+0x128>
    293a:	84 2b       	or	r24, r20
    293c:	8c 93       	st	X, r24
    293e:	85 c0       	rjmp	.+266    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    2940:	a7 e3       	ldi	r26, 0x37	; 55
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e7 e3       	ldi	r30, 0x37	; 55
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	48 2f       	mov	r20, r24
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	28 2f       	mov	r18, r24
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	02 2e       	mov	r0, r18
    2958:	02 c0       	rjmp	.+4      	; 0x295e <DIO_enu_SetPinDirection+0x154>
    295a:	88 0f       	add	r24, r24
    295c:	99 1f       	adc	r25, r25
    295e:	0a 94       	dec	r0
    2960:	e2 f7       	brpl	.-8      	; 0x295a <DIO_enu_SetPinDirection+0x150>
    2962:	80 95       	com	r24
    2964:	84 23       	and	r24, r20
    2966:	8c 93       	st	X, r24
    2968:	70 c0       	rjmp	.+224    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	28 2f       	mov	r18, r24
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	38 87       	std	Y+8, r19	; 0x08
    2972:	2f 83       	std	Y+7, r18	; 0x07
    2974:	8f 81       	ldd	r24, Y+7	; 0x07
    2976:	98 85       	ldd	r25, Y+8	; 0x08
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	d1 f0       	breq	.+52     	; 0x29b0 <DIO_enu_SetPinDirection+0x1a6>
    297c:	2f 81       	ldd	r18, Y+7	; 0x07
    297e:	38 85       	ldd	r19, Y+8	; 0x08
    2980:	21 30       	cpi	r18, 0x01	; 1
    2982:	31 05       	cpc	r19, r1
    2984:	09 f0       	breq	.+2      	; 0x2988 <DIO_enu_SetPinDirection+0x17e>
    2986:	61 c0       	rjmp	.+194    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    2988:	a4 e3       	ldi	r26, 0x34	; 52
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e4 e3       	ldi	r30, 0x34	; 52
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	48 2f       	mov	r20, r24
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	28 2f       	mov	r18, r24
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	02 2e       	mov	r0, r18
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <DIO_enu_SetPinDirection+0x19c>
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	0a 94       	dec	r0
    29a8:	e2 f7       	brpl	.-8      	; 0x29a2 <DIO_enu_SetPinDirection+0x198>
    29aa:	84 2b       	or	r24, r20
    29ac:	8c 93       	st	X, r24
    29ae:	4d c0       	rjmp	.+154    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    29b0:	a4 e3       	ldi	r26, 0x34	; 52
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e4 e3       	ldi	r30, 0x34	; 52
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	48 2f       	mov	r20, r24
    29bc:	8b 81       	ldd	r24, Y+3	; 0x03
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	02 2e       	mov	r0, r18
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <DIO_enu_SetPinDirection+0x1c4>
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	0a 94       	dec	r0
    29d0:	e2 f7       	brpl	.-8      	; 0x29ca <DIO_enu_SetPinDirection+0x1c0>
    29d2:	80 95       	com	r24
    29d4:	84 23       	and	r24, r20
    29d6:	8c 93       	st	X, r24
    29d8:	38 c0       	rjmp	.+112    	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	28 2f       	mov	r18, r24
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	3e 83       	std	Y+6, r19	; 0x06
    29e2:	2d 83       	std	Y+5, r18	; 0x05
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	c9 f0       	breq	.+50     	; 0x2a1e <DIO_enu_SetPinDirection+0x214>
    29ec:	2d 81       	ldd	r18, Y+5	; 0x05
    29ee:	3e 81       	ldd	r19, Y+6	; 0x06
    29f0:	21 30       	cpi	r18, 0x01	; 1
    29f2:	31 05       	cpc	r19, r1
    29f4:	51 f5       	brne	.+84     	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    29f6:	a1 e3       	ldi	r26, 0x31	; 49
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	e1 e3       	ldi	r30, 0x31	; 49
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	48 2f       	mov	r20, r24
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	28 2f       	mov	r18, r24
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	02 2e       	mov	r0, r18
    2a0e:	02 c0       	rjmp	.+4      	; 0x2a14 <DIO_enu_SetPinDirection+0x20a>
    2a10:	88 0f       	add	r24, r24
    2a12:	99 1f       	adc	r25, r25
    2a14:	0a 94       	dec	r0
    2a16:	e2 f7       	brpl	.-8      	; 0x2a10 <DIO_enu_SetPinDirection+0x206>
    2a18:	84 2b       	or	r24, r20
    2a1a:	8c 93       	st	X, r24
    2a1c:	16 c0       	rjmp	.+44     	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    2a1e:	a1 e3       	ldi	r26, 0x31	; 49
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e1 e3       	ldi	r30, 0x31	; 49
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	48 2f       	mov	r20, r24
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	02 2e       	mov	r0, r18
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <DIO_enu_SetPinDirection+0x232>
    2a38:	88 0f       	add	r24, r24
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	0a 94       	dec	r0
    2a3e:	e2 f7       	brpl	.-8      	; 0x2a38 <DIO_enu_SetPinDirection+0x22e>
    2a40:	80 95       	com	r24
    2a42:	84 23       	and	r24, r20
    2a44:	8c 93       	st	X, r24
    2a46:	01 c0       	rjmp	.+2      	; 0x2a4a <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2a48:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2a4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a4c:	2e 96       	adiw	r28, 0x0e	; 14
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	de bf       	out	0x3e, r29	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	cd bf       	out	0x3d, r28	; 61
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	2e 97       	sbiw	r28, 0x0e	; 14
    2a68:	0f b6       	in	r0, 0x3f	; 63
    2a6a:	f8 94       	cli
    2a6c:	de bf       	out	0x3e, r29	; 62
    2a6e:	0f be       	out	0x3f, r0	; 63
    2a70:	cd bf       	out	0x3d, r28	; 61
    2a72:	8a 83       	std	Y+2, r24	; 0x02
    2a74:	6b 83       	std	Y+3, r22	; 0x03
    2a76:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	84 30       	cpi	r24, 0x04	; 4
    2a80:	08 f0       	brcs	.+2      	; 0x2a84 <DIO_enu_SetPinValue+0x26>
    2a82:	0c c1       	rjmp	.+536    	; 0x2c9c <DIO_enu_SetPinValue+0x23e>
    2a84:	8b 81       	ldd	r24, Y+3	; 0x03
    2a86:	88 30       	cpi	r24, 0x08	; 8
    2a88:	08 f0       	brcs	.+2      	; 0x2a8c <DIO_enu_SetPinValue+0x2e>
    2a8a:	08 c1       	rjmp	.+528    	; 0x2c9c <DIO_enu_SetPinValue+0x23e>
    2a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	21 f0       	breq	.+8      	; 0x2a9a <DIO_enu_SetPinValue+0x3c>
    2a92:	8c 81       	ldd	r24, Y+4	; 0x04
    2a94:	88 23       	and	r24, r24
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <DIO_enu_SetPinValue+0x3c>
    2a98:	01 c1       	rjmp	.+514    	; 0x2c9c <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	3e 87       	std	Y+14, r19	; 0x0e
    2aa2:	2d 87       	std	Y+13, r18	; 0x0d
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	91 05       	cpc	r25, r1
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <DIO_enu_SetPinValue+0x52>
    2aae:	4f c0       	rjmp	.+158    	; 0x2b4e <DIO_enu_SetPinValue+0xf0>
    2ab0:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ab2:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ab4:	22 30       	cpi	r18, 0x02	; 2
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	2c f4       	brge	.+10     	; 0x2ac4 <DIO_enu_SetPinValue+0x66>
    2aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	71 f0       	breq	.+28     	; 0x2ade <DIO_enu_SetPinValue+0x80>
    2ac2:	ed c0       	rjmp	.+474    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
    2ac4:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ac6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ac8:	22 30       	cpi	r18, 0x02	; 2
    2aca:	31 05       	cpc	r19, r1
    2acc:	09 f4       	brne	.+2      	; 0x2ad0 <DIO_enu_SetPinValue+0x72>
    2ace:	77 c0       	rjmp	.+238    	; 0x2bbe <DIO_enu_SetPinValue+0x160>
    2ad0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad4:	83 30       	cpi	r24, 0x03	; 3
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <DIO_enu_SetPinValue+0x7e>
    2ada:	a9 c0       	rjmp	.+338    	; 0x2c2e <DIO_enu_SetPinValue+0x1d0>
    2adc:	e0 c0       	rjmp	.+448    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    2ade:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	3c 87       	std	Y+12, r19	; 0x0c
    2ae6:	2b 87       	std	Y+11, r18	; 0x0b
    2ae8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aea:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	d1 f0       	breq	.+52     	; 0x2b24 <DIO_enu_SetPinValue+0xc6>
    2af0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2af2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2af4:	21 30       	cpi	r18, 0x01	; 1
    2af6:	31 05       	cpc	r19, r1
    2af8:	09 f0       	breq	.+2      	; 0x2afc <DIO_enu_SetPinValue+0x9e>
    2afa:	d1 c0       	rjmp	.+418    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    2afc:	ab e3       	ldi	r26, 0x3B	; 59
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	eb e3       	ldi	r30, 0x3B	; 59
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	48 2f       	mov	r20, r24
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	02 2e       	mov	r0, r18
    2b14:	02 c0       	rjmp	.+4      	; 0x2b1a <DIO_enu_SetPinValue+0xbc>
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	0a 94       	dec	r0
    2b1c:	e2 f7       	brpl	.-8      	; 0x2b16 <DIO_enu_SetPinValue+0xb8>
    2b1e:	84 2b       	or	r24, r20
    2b20:	8c 93       	st	X, r24
    2b22:	bd c0       	rjmp	.+378    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    2b24:	ab e3       	ldi	r26, 0x3B	; 59
    2b26:	b0 e0       	ldi	r27, 0x00	; 0
    2b28:	eb e3       	ldi	r30, 0x3B	; 59
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	80 81       	ld	r24, Z
    2b2e:	48 2f       	mov	r20, r24
    2b30:	8b 81       	ldd	r24, Y+3	; 0x03
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	02 2e       	mov	r0, r18
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <DIO_enu_SetPinValue+0xe4>
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	0a 94       	dec	r0
    2b44:	e2 f7       	brpl	.-8      	; 0x2b3e <DIO_enu_SetPinValue+0xe0>
    2b46:	80 95       	com	r24
    2b48:	84 23       	and	r24, r20
    2b4a:	8c 93       	st	X, r24
    2b4c:	a8 c0       	rjmp	.+336    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    2b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3a 87       	std	Y+10, r19	; 0x0a
    2b56:	29 87       	std	Y+9, r18	; 0x09
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	00 97       	sbiw	r24, 0x00	; 0
    2b5e:	d1 f0       	breq	.+52     	; 0x2b94 <DIO_enu_SetPinValue+0x136>
    2b60:	29 85       	ldd	r18, Y+9	; 0x09
    2b62:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b64:	21 30       	cpi	r18, 0x01	; 1
    2b66:	31 05       	cpc	r19, r1
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <DIO_enu_SetPinValue+0x10e>
    2b6a:	99 c0       	rjmp	.+306    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    2b6c:	a8 e3       	ldi	r26, 0x38	; 56
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e8 e3       	ldi	r30, 0x38	; 56
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	48 2f       	mov	r20, r24
    2b78:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 2e       	mov	r0, r18
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <DIO_enu_SetPinValue+0x12c>
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	0a 94       	dec	r0
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <DIO_enu_SetPinValue+0x128>
    2b8e:	84 2b       	or	r24, r20
    2b90:	8c 93       	st	X, r24
    2b92:	85 c0       	rjmp	.+266    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    2b94:	a8 e3       	ldi	r26, 0x38	; 56
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e8 e3       	ldi	r30, 0x38	; 56
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	48 2f       	mov	r20, r24
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	28 2f       	mov	r18, r24
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	02 2e       	mov	r0, r18
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_enu_SetPinValue+0x154>
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	0a 94       	dec	r0
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_enu_SetPinValue+0x150>
    2bb6:	80 95       	com	r24
    2bb8:	84 23       	and	r24, r20
    2bba:	8c 93       	st	X, r24
    2bbc:	70 c0       	rjmp	.+224    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    2bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	38 87       	std	Y+8, r19	; 0x08
    2bc6:	2f 83       	std	Y+7, r18	; 0x07
    2bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bca:	98 85       	ldd	r25, Y+8	; 0x08
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	d1 f0       	breq	.+52     	; 0x2c04 <DIO_enu_SetPinValue+0x1a6>
    2bd0:	2f 81       	ldd	r18, Y+7	; 0x07
    2bd2:	38 85       	ldd	r19, Y+8	; 0x08
    2bd4:	21 30       	cpi	r18, 0x01	; 1
    2bd6:	31 05       	cpc	r19, r1
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <DIO_enu_SetPinValue+0x17e>
    2bda:	61 c0       	rjmp	.+194    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    2bdc:	a5 e3       	ldi	r26, 0x35	; 53
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e5 e3       	ldi	r30, 0x35	; 53
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	48 2f       	mov	r20, r24
    2be8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	02 2e       	mov	r0, r18
    2bf4:	02 c0       	rjmp	.+4      	; 0x2bfa <DIO_enu_SetPinValue+0x19c>
    2bf6:	88 0f       	add	r24, r24
    2bf8:	99 1f       	adc	r25, r25
    2bfa:	0a 94       	dec	r0
    2bfc:	e2 f7       	brpl	.-8      	; 0x2bf6 <DIO_enu_SetPinValue+0x198>
    2bfe:	84 2b       	or	r24, r20
    2c00:	8c 93       	st	X, r24
    2c02:	4d c0       	rjmp	.+154    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    2c04:	a5 e3       	ldi	r26, 0x35	; 53
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e5 e3       	ldi	r30, 0x35	; 53
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	48 2f       	mov	r20, r24
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	02 2e       	mov	r0, r18
    2c1c:	02 c0       	rjmp	.+4      	; 0x2c22 <DIO_enu_SetPinValue+0x1c4>
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	0a 94       	dec	r0
    2c24:	e2 f7       	brpl	.-8      	; 0x2c1e <DIO_enu_SetPinValue+0x1c0>
    2c26:	80 95       	com	r24
    2c28:	84 23       	and	r24, r20
    2c2a:	8c 93       	st	X, r24
    2c2c:	38 c0       	rjmp	.+112    	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	3e 83       	std	Y+6, r19	; 0x06
    2c36:	2d 83       	std	Y+5, r18	; 0x05
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	c9 f0       	breq	.+50     	; 0x2c72 <DIO_enu_SetPinValue+0x214>
    2c40:	2d 81       	ldd	r18, Y+5	; 0x05
    2c42:	3e 81       	ldd	r19, Y+6	; 0x06
    2c44:	21 30       	cpi	r18, 0x01	; 1
    2c46:	31 05       	cpc	r19, r1
    2c48:	51 f5       	brne	.+84     	; 0x2c9e <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    2c4a:	a2 e3       	ldi	r26, 0x32	; 50
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e2 e3       	ldi	r30, 0x32	; 50
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	48 2f       	mov	r20, r24
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	02 2e       	mov	r0, r18
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <DIO_enu_SetPinValue+0x20a>
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	0a 94       	dec	r0
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <DIO_enu_SetPinValue+0x206>
    2c6c:	84 2b       	or	r24, r20
    2c6e:	8c 93       	st	X, r24
    2c70:	16 c0       	rjmp	.+44     	; 0x2c9e <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    2c72:	a2 e3       	ldi	r26, 0x32	; 50
    2c74:	b0 e0       	ldi	r27, 0x00	; 0
    2c76:	e2 e3       	ldi	r30, 0x32	; 50
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	80 81       	ld	r24, Z
    2c7c:	48 2f       	mov	r20, r24
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	28 2f       	mov	r18, r24
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	02 2e       	mov	r0, r18
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <DIO_enu_SetPinValue+0x232>
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	0a 94       	dec	r0
    2c92:	e2 f7       	brpl	.-8      	; 0x2c8c <DIO_enu_SetPinValue+0x22e>
    2c94:	80 95       	com	r24
    2c96:	84 23       	and	r24, r20
    2c98:	8c 93       	st	X, r24
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2c9c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ca0:	2e 96       	adiw	r28, 0x0e	; 14
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
    2cba:	27 97       	sbiw	r28, 0x07	; 7
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	8a 83       	std	Y+2, r24	; 0x02
    2cc8:	6b 83       	std	Y+3, r22	; 0x03
    2cca:	5d 83       	std	Y+5, r21	; 0x05
    2ccc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	84 30       	cpi	r24, 0x04	; 4
    2cd6:	08 f0       	brcs	.+2      	; 0x2cda <DIO_enu_GetPinValue+0x28>
    2cd8:	7a c0       	rjmp	.+244    	; 0x2dce <DIO_enu_GetPinValue+0x11c>
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	88 30       	cpi	r24, 0x08	; 8
    2cde:	08 f0       	brcs	.+2      	; 0x2ce2 <DIO_enu_GetPinValue+0x30>
    2ce0:	76 c0       	rjmp	.+236    	; 0x2dce <DIO_enu_GetPinValue+0x11c>
    2ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <DIO_enu_GetPinValue+0x3a>
    2cea:	71 c0       	rjmp	.+226    	; 0x2dce <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    2cec:	8a 81       	ldd	r24, Y+2	; 0x02
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	3f 83       	std	Y+7, r19	; 0x07
    2cf4:	2e 83       	std	Y+6, r18	; 0x06
    2cf6:	4e 81       	ldd	r20, Y+6	; 0x06
    2cf8:	5f 81       	ldd	r21, Y+7	; 0x07
    2cfa:	41 30       	cpi	r20, 0x01	; 1
    2cfc:	51 05       	cpc	r21, r1
    2cfe:	59 f1       	breq	.+86     	; 0x2d56 <DIO_enu_GetPinValue+0xa4>
    2d00:	8e 81       	ldd	r24, Y+6	; 0x06
    2d02:	9f 81       	ldd	r25, Y+7	; 0x07
    2d04:	82 30       	cpi	r24, 0x02	; 2
    2d06:	91 05       	cpc	r25, r1
    2d08:	34 f4       	brge	.+12     	; 0x2d16 <DIO_enu_GetPinValue+0x64>
    2d0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d0e:	21 15       	cp	r18, r1
    2d10:	31 05       	cpc	r19, r1
    2d12:	69 f0       	breq	.+26     	; 0x2d2e <DIO_enu_GetPinValue+0x7c>
    2d14:	5d c0       	rjmp	.+186    	; 0x2dd0 <DIO_enu_GetPinValue+0x11e>
    2d16:	4e 81       	ldd	r20, Y+6	; 0x06
    2d18:	5f 81       	ldd	r21, Y+7	; 0x07
    2d1a:	42 30       	cpi	r20, 0x02	; 2
    2d1c:	51 05       	cpc	r21, r1
    2d1e:	79 f1       	breq	.+94     	; 0x2d7e <DIO_enu_GetPinValue+0xcc>
    2d20:	8e 81       	ldd	r24, Y+6	; 0x06
    2d22:	9f 81       	ldd	r25, Y+7	; 0x07
    2d24:	83 30       	cpi	r24, 0x03	; 3
    2d26:	91 05       	cpc	r25, r1
    2d28:	09 f4       	brne	.+2      	; 0x2d2c <DIO_enu_GetPinValue+0x7a>
    2d2a:	3d c0       	rjmp	.+122    	; 0x2da6 <DIO_enu_GetPinValue+0xf4>
    2d2c:	51 c0       	rjmp	.+162    	; 0x2dd0 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    2d2e:	e9 e3       	ldi	r30, 0x39	; 57
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	a9 01       	movw	r20, r18
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <DIO_enu_GetPinValue+0x94>
    2d42:	55 95       	asr	r21
    2d44:	47 95       	ror	r20
    2d46:	8a 95       	dec	r24
    2d48:	e2 f7       	brpl	.-8      	; 0x2d42 <DIO_enu_GetPinValue+0x90>
    2d4a:	ca 01       	movw	r24, r20
    2d4c:	81 70       	andi	r24, 0x01	; 1
    2d4e:	ec 81       	ldd	r30, Y+4	; 0x04
    2d50:	fd 81       	ldd	r31, Y+5	; 0x05
    2d52:	80 83       	st	Z, r24
    2d54:	3d c0       	rjmp	.+122    	; 0x2dd0 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    2d56:	e6 e3       	ldi	r30, 0x36	; 54
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	8b 81       	ldd	r24, Y+3	; 0x03
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a9 01       	movw	r20, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <DIO_enu_GetPinValue+0xbc>
    2d6a:	55 95       	asr	r21
    2d6c:	47 95       	ror	r20
    2d6e:	8a 95       	dec	r24
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <DIO_enu_GetPinValue+0xb8>
    2d72:	ca 01       	movw	r24, r20
    2d74:	81 70       	andi	r24, 0x01	; 1
    2d76:	ec 81       	ldd	r30, Y+4	; 0x04
    2d78:	fd 81       	ldd	r31, Y+5	; 0x05
    2d7a:	80 83       	st	Z, r24
    2d7c:	29 c0       	rjmp	.+82     	; 0x2dd0 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    2d7e:	e3 e3       	ldi	r30, 0x33	; 51
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	88 2f       	mov	r24, r24
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a9 01       	movw	r20, r18
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <DIO_enu_GetPinValue+0xe4>
    2d92:	55 95       	asr	r21
    2d94:	47 95       	ror	r20
    2d96:	8a 95       	dec	r24
    2d98:	e2 f7       	brpl	.-8      	; 0x2d92 <DIO_enu_GetPinValue+0xe0>
    2d9a:	ca 01       	movw	r24, r20
    2d9c:	81 70       	andi	r24, 0x01	; 1
    2d9e:	ec 81       	ldd	r30, Y+4	; 0x04
    2da0:	fd 81       	ldd	r31, Y+5	; 0x05
    2da2:	80 83       	st	Z, r24
    2da4:	15 c0       	rjmp	.+42     	; 0x2dd0 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    2da6:	e0 e3       	ldi	r30, 0x30	; 48
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	80 81       	ld	r24, Z
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	a9 01       	movw	r20, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <DIO_enu_GetPinValue+0x10c>
    2dba:	55 95       	asr	r21
    2dbc:	47 95       	ror	r20
    2dbe:	8a 95       	dec	r24
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <DIO_enu_GetPinValue+0x108>
    2dc2:	ca 01       	movw	r24, r20
    2dc4:	81 70       	andi	r24, 0x01	; 1
    2dc6:	ec 81       	ldd	r30, Y+4	; 0x04
    2dc8:	fd 81       	ldd	r31, Y+5	; 0x05
    2dca:	80 83       	st	Z, r24
    2dcc:	01 c0       	rjmp	.+2      	; 0x2dd0 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2dce:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd2:	27 96       	adiw	r28, 0x07	; 7
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	cf 91       	pop	r28
    2de0:	df 91       	pop	r29
    2de2:	08 95       	ret

00002de4 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    2de4:	df 93       	push	r29
    2de6:	cf 93       	push	r28
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	2d 97       	sbiw	r28, 0x0d	; 13
    2dee:	0f b6       	in	r0, 0x3f	; 63
    2df0:	f8 94       	cli
    2df2:	de bf       	out	0x3e, r29	; 62
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	8a 83       	std	Y+2, r24	; 0x02
    2dfa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	84 30       	cpi	r24, 0x04	; 4
    2e04:	08 f0       	brcs	.+2      	; 0x2e08 <DIO_enu_SetPortDirection+0x24>
    2e06:	84 c0       	rjmp	.+264    	; 0x2f10 <DIO_enu_SetPortDirection+0x12c>
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	81 30       	cpi	r24, 0x01	; 1
    2e0c:	21 f0       	breq	.+8      	; 0x2e16 <DIO_enu_SetPortDirection+0x32>
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	88 23       	and	r24, r24
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <DIO_enu_SetPortDirection+0x32>
    2e14:	7d c0       	rjmp	.+250    	; 0x2f10 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	3d 87       	std	Y+13, r19	; 0x0d
    2e1e:	2c 87       	std	Y+12, r18	; 0x0c
    2e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	91 05       	cpc	r25, r1
    2e28:	71 f1       	breq	.+92     	; 0x2e86 <DIO_enu_SetPortDirection+0xa2>
    2e2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e2e:	22 30       	cpi	r18, 0x02	; 2
    2e30:	31 05       	cpc	r19, r1
    2e32:	2c f4       	brge	.+10     	; 0x2e3e <DIO_enu_SetPortDirection+0x5a>
    2e34:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e36:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	69 f0       	breq	.+26     	; 0x2e56 <DIO_enu_SetPortDirection+0x72>
    2e3c:	6a c0       	rjmp	.+212    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
    2e3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e40:	3d 85       	ldd	r19, Y+13	; 0x0d
    2e42:	22 30       	cpi	r18, 0x02	; 2
    2e44:	31 05       	cpc	r19, r1
    2e46:	b1 f1       	breq	.+108    	; 0x2eb4 <DIO_enu_SetPortDirection+0xd0>
    2e48:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e4a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e4c:	83 30       	cpi	r24, 0x03	; 3
    2e4e:	91 05       	cpc	r25, r1
    2e50:	09 f4       	brne	.+2      	; 0x2e54 <DIO_enu_SetPortDirection+0x70>
    2e52:	47 c0       	rjmp	.+142    	; 0x2ee2 <DIO_enu_SetPortDirection+0xfe>
    2e54:	5e c0       	rjmp	.+188    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	3b 87       	std	Y+11, r19	; 0x0b
    2e5e:	2a 87       	std	Y+10, r18	; 0x0a
    2e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	59 f0       	breq	.+22     	; 0x2e7e <DIO_enu_SetPortDirection+0x9a>
    2e68:	2a 85       	ldd	r18, Y+10	; 0x0a
    2e6a:	3b 85       	ldd	r19, Y+11	; 0x0b
    2e6c:	21 30       	cpi	r18, 0x01	; 1
    2e6e:	31 05       	cpc	r19, r1
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <DIO_enu_SetPortDirection+0x90>
    2e72:	4f c0       	rjmp	.+158    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    2e74:	ea e3       	ldi	r30, 0x3A	; 58
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	8f ef       	ldi	r24, 0xFF	; 255
    2e7a:	80 83       	st	Z, r24
    2e7c:	4a c0       	rjmp	.+148    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    2e7e:	ea e3       	ldi	r30, 0x3A	; 58
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	10 82       	st	Z, r1
    2e84:	46 c0       	rjmp	.+140    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	28 2f       	mov	r18, r24
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	39 87       	std	Y+9, r19	; 0x09
    2e8e:	28 87       	std	Y+8, r18	; 0x08
    2e90:	88 85       	ldd	r24, Y+8	; 0x08
    2e92:	99 85       	ldd	r25, Y+9	; 0x09
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	51 f0       	breq	.+20     	; 0x2eac <DIO_enu_SetPortDirection+0xc8>
    2e98:	28 85       	ldd	r18, Y+8	; 0x08
    2e9a:	39 85       	ldd	r19, Y+9	; 0x09
    2e9c:	21 30       	cpi	r18, 0x01	; 1
    2e9e:	31 05       	cpc	r19, r1
    2ea0:	c1 f5       	brne	.+112    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    2ea2:	e7 e3       	ldi	r30, 0x37	; 55
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	8f ef       	ldi	r24, 0xFF	; 255
    2ea8:	80 83       	st	Z, r24
    2eaa:	33 c0       	rjmp	.+102    	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    2eac:	e7 e3       	ldi	r30, 0x37	; 55
    2eae:	f0 e0       	ldi	r31, 0x00	; 0
    2eb0:	10 82       	st	Z, r1
    2eb2:	2f c0       	rjmp	.+94     	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	3f 83       	std	Y+7, r19	; 0x07
    2ebc:	2e 83       	std	Y+6, r18	; 0x06
    2ebe:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	51 f0       	breq	.+20     	; 0x2eda <DIO_enu_SetPortDirection+0xf6>
    2ec6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ec8:	3f 81       	ldd	r19, Y+7	; 0x07
    2eca:	21 30       	cpi	r18, 0x01	; 1
    2ecc:	31 05       	cpc	r19, r1
    2ece:	09 f5       	brne	.+66     	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    2ed0:	e4 e3       	ldi	r30, 0x34	; 52
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	8f ef       	ldi	r24, 0xFF	; 255
    2ed6:	80 83       	st	Z, r24
    2ed8:	1c c0       	rjmp	.+56     	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    2eda:	e4 e3       	ldi	r30, 0x34	; 52
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	10 82       	st	Z, r1
    2ee0:	18 c0       	rjmp	.+48     	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	3d 83       	std	Y+5, r19	; 0x05
    2eea:	2c 83       	std	Y+4, r18	; 0x04
    2eec:	8c 81       	ldd	r24, Y+4	; 0x04
    2eee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	51 f0       	breq	.+20     	; 0x2f08 <DIO_enu_SetPortDirection+0x124>
    2ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef8:	21 30       	cpi	r18, 0x01	; 1
    2efa:	31 05       	cpc	r19, r1
    2efc:	51 f4       	brne	.+20     	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    2efe:	e1 e3       	ldi	r30, 0x31	; 49
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	8f ef       	ldi	r24, 0xFF	; 255
    2f04:	80 83       	st	Z, r24
    2f06:	05 c0       	rjmp	.+10     	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    2f08:	e1 e3       	ldi	r30, 0x31	; 49
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	10 82       	st	Z, r1
    2f0e:	01 c0       	rjmp	.+2      	; 0x2f12 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    2f10:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f14:	2d 96       	adiw	r28, 0x0d	; 13
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <DIO_enu_SetPortValue+0x6>
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <DIO_enu_SetPortValue+0x8>
    2f2e:	0f 92       	push	r0
    2f30:	cd b7       	in	r28, 0x3d	; 61
    2f32:	de b7       	in	r29, 0x3e	; 62
    2f34:	8a 83       	std	Y+2, r24	; 0x02
    2f36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	84 30       	cpi	r24, 0x04	; 4
    2f40:	98 f5       	brcc	.+102    	; 0x2fa8 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	3d 83       	std	Y+5, r19	; 0x05
    2f4a:	2c 83       	std	Y+4, r18	; 0x04
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	91 05       	cpc	r25, r1
    2f54:	d1 f0       	breq	.+52     	; 0x2f8a <DIO_enu_SetPortValue+0x64>
    2f56:	2c 81       	ldd	r18, Y+4	; 0x04
    2f58:	3d 81       	ldd	r19, Y+5	; 0x05
    2f5a:	22 30       	cpi	r18, 0x02	; 2
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <DIO_enu_SetPortValue+0x44>
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
    2f62:	9d 81       	ldd	r25, Y+5	; 0x05
    2f64:	00 97       	sbiw	r24, 0x00	; 0
    2f66:	61 f0       	breq	.+24     	; 0x2f80 <DIO_enu_SetPortValue+0x5a>
    2f68:	20 c0       	rjmp	.+64     	; 0x2faa <DIO_enu_SetPortValue+0x84>
    2f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f6e:	22 30       	cpi	r18, 0x02	; 2
    2f70:	31 05       	cpc	r19, r1
    2f72:	81 f0       	breq	.+32     	; 0x2f94 <DIO_enu_SetPortValue+0x6e>
    2f74:	8c 81       	ldd	r24, Y+4	; 0x04
    2f76:	9d 81       	ldd	r25, Y+5	; 0x05
    2f78:	83 30       	cpi	r24, 0x03	; 3
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	81 f0       	breq	.+32     	; 0x2f9e <DIO_enu_SetPortValue+0x78>
    2f7e:	15 c0       	rjmp	.+42     	; 0x2faa <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    2f80:	eb e3       	ldi	r30, 0x3B	; 59
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	80 83       	st	Z, r24
    2f88:	10 c0       	rjmp	.+32     	; 0x2faa <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    2f8a:	e8 e3       	ldi	r30, 0x38	; 56
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	80 83       	st	Z, r24
    2f92:	0b c0       	rjmp	.+22     	; 0x2faa <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    2f94:	e5 e3       	ldi	r30, 0x35	; 53
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	80 83       	st	Z, r24
    2f9c:	06 c0       	rjmp	.+12     	; 0x2faa <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    2f9e:	e2 e3       	ldi	r30, 0x32	; 50
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	80 83       	st	Z, r24
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    2fa8:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <DIO_enu_GetPortValue+0x6>
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <DIO_enu_GetPortValue+0x8>
    2fc4:	00 d0       	rcall	.+0      	; 0x2fc6 <DIO_enu_GetPortValue+0xa>
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	8a 83       	std	Y+2, r24	; 0x02
    2fcc:	7c 83       	std	Y+4, r23	; 0x04
    2fce:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	84 30       	cpi	r24, 0x04	; 4
    2fd8:	08 f0       	brcs	.+2      	; 0x2fdc <DIO_enu_GetPortValue+0x20>
    2fda:	3f c0       	rjmp	.+126    	; 0x305a <DIO_enu_GetPortValue+0x9e>
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	00 97       	sbiw	r24, 0x00	; 0
    2fe2:	d9 f1       	breq	.+118    	; 0x305a <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	28 2f       	mov	r18, r24
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	3e 83       	std	Y+6, r19	; 0x06
    2fec:	2d 83       	std	Y+5, r18	; 0x05
    2fee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	91 05       	cpc	r25, r1
    2ff6:	e1 f0       	breq	.+56     	; 0x3030 <DIO_enu_GetPortValue+0x74>
    2ff8:	2d 81       	ldd	r18, Y+5	; 0x05
    2ffa:	3e 81       	ldd	r19, Y+6	; 0x06
    2ffc:	22 30       	cpi	r18, 0x02	; 2
    2ffe:	31 05       	cpc	r19, r1
    3000:	2c f4       	brge	.+10     	; 0x300c <DIO_enu_GetPortValue+0x50>
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	9e 81       	ldd	r25, Y+6	; 0x06
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	61 f0       	breq	.+24     	; 0x3022 <DIO_enu_GetPortValue+0x66>
    300a:	28 c0       	rjmp	.+80     	; 0x305c <DIO_enu_GetPortValue+0xa0>
    300c:	2d 81       	ldd	r18, Y+5	; 0x05
    300e:	3e 81       	ldd	r19, Y+6	; 0x06
    3010:	22 30       	cpi	r18, 0x02	; 2
    3012:	31 05       	cpc	r19, r1
    3014:	a1 f0       	breq	.+40     	; 0x303e <DIO_enu_GetPortValue+0x82>
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	9e 81       	ldd	r25, Y+6	; 0x06
    301a:	83 30       	cpi	r24, 0x03	; 3
    301c:	91 05       	cpc	r25, r1
    301e:	b1 f0       	breq	.+44     	; 0x304c <DIO_enu_GetPortValue+0x90>
    3020:	1d c0       	rjmp	.+58     	; 0x305c <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    3022:	e9 e3       	ldi	r30, 0x39	; 57
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	eb 81       	ldd	r30, Y+3	; 0x03
    302a:	fc 81       	ldd	r31, Y+4	; 0x04
    302c:	80 83       	st	Z, r24
    302e:	16 c0       	rjmp	.+44     	; 0x305c <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    3030:	e6 e3       	ldi	r30, 0x36	; 54
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	eb 81       	ldd	r30, Y+3	; 0x03
    3038:	fc 81       	ldd	r31, Y+4	; 0x04
    303a:	80 83       	st	Z, r24
    303c:	0f c0       	rjmp	.+30     	; 0x305c <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    303e:	e3 e3       	ldi	r30, 0x33	; 51
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	eb 81       	ldd	r30, Y+3	; 0x03
    3046:	fc 81       	ldd	r31, Y+4	; 0x04
    3048:	80 83       	st	Z, r24
    304a:	08 c0       	rjmp	.+16     	; 0x305c <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    304c:	e0 e3       	ldi	r30, 0x30	; 48
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	eb 81       	ldd	r30, Y+3	; 0x03
    3054:	fc 81       	ldd	r31, Y+4	; 0x04
    3056:	80 83       	st	Z, r24
    3058:	01 c0       	rjmp	.+2      	; 0x305c <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    305a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    305c:	89 81       	ldd	r24, Y+1	; 0x01
}
    305e:	26 96       	adiw	r28, 0x06	; 6
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	cf 91       	pop	r28
    306c:	df 91       	pop	r29
    306e:	08 95       	ret

00003070 <ADC_enu_Init>:
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;

ES_t ADC_enu_Init(void){
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    3078:	a7 e2       	ldi	r26, 0x27	; 39
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	e7 e2       	ldi	r30, 0x27	; 39
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	80 81       	ld	r24, Z
    3082:	8f 77       	andi	r24, 0x7F	; 127
    3084:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    3086:	a7 e2       	ldi	r26, 0x27	; 39
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e7 e2       	ldi	r30, 0x27	; 39
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 64       	ori	r24, 0x40	; 64
    3092:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    3094:	a7 e2       	ldi	r26, 0x27	; 39
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	e7 e2       	ldi	r30, 0x27	; 39
    309a:	f0 e0       	ldi	r31, 0x00	; 0
    309c:	80 81       	ld	r24, Z
    309e:	8f 7d       	andi	r24, 0xDF	; 223
    30a0:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == START_CONVERSION
    CLR_BIT(ADCSRA_REG,ADATE);
    30a2:	a6 e2       	ldi	r26, 0x26	; 38
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e6 e2       	ldi	r30, 0x26	; 38
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	8f 7d       	andi	r24, 0xDF	; 223
    30ae:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    30b0:	a6 e2       	ldi	r26, 0x26	; 38
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e6 e2       	ldi	r30, 0x26	; 38
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	87 60       	ori	r24, 0x07	; 7
    30bc:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    30be:	a6 e2       	ldi	r26, 0x26	; 38
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e6 e2       	ldi	r30, 0x26	; 38
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 68       	ori	r24, 0x80	; 128
    30ca:	8c 93       	st	X, r24
    
    return STATE_OK;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
}
    30ce:	cf 91       	pop	r28
    30d0:	df 91       	pop	r29
    30d2:	08 95       	ret

000030d4 <ADC_enu_GetDigitalValueSynchNonBlocking>:

ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    30d4:	df 93       	push	r29
    30d6:	cf 93       	push	r28
    30d8:	cd b7       	in	r28, 0x3d	; 61
    30da:	de b7       	in	r29, 0x3e	; 62
    30dc:	28 97       	sbiw	r28, 0x08	; 8
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	8e 83       	std	Y+6, r24	; 0x06
    30ea:	78 87       	std	Y+8, r23	; 0x08
    30ec:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    30f2:	19 82       	std	Y+1, r1	; 0x01
    30f4:	1a 82       	std	Y+2, r1	; 0x02
    30f6:	1b 82       	std	Y+3, r1	; 0x03
    30f8:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    30fa:	8e 81       	ldd	r24, Y+6	; 0x06
    30fc:	80 32       	cpi	r24, 0x20	; 32
    30fe:	08 f0       	brcs	.+2      	; 0x3102 <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    3100:	65 c0       	rjmp	.+202    	; 0x31cc <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    3102:	8f 81       	ldd	r24, Y+7	; 0x07
    3104:	98 85       	ldd	r25, Y+8	; 0x08
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	09 f4       	brne	.+2      	; 0x310c <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    310a:	60 c0       	rjmp	.+192    	; 0x31cc <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    310c:	80 91 aa 00 	lds	r24, 0x00AA
    3110:	88 23       	and	r24, r24
    3112:	09 f0       	breq	.+2      	; 0x3116 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    3114:	5b c0       	rjmp	.+182    	; 0x31cc <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	80 93 aa 00 	sts	0x00AA, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    311c:	a7 e2       	ldi	r26, 0x27	; 39
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e7 e2       	ldi	r30, 0x27	; 39
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 81       	ld	r24, Z
    3126:	80 7e       	andi	r24, 0xE0	; 224
    3128:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    312a:	a7 e2       	ldi	r26, 0x27	; 39
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e7 e2       	ldi	r30, 0x27	; 39
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	90 81       	ld	r25, Z
    3134:	8e 81       	ldd	r24, Y+6	; 0x06
    3136:	89 2b       	or	r24, r25
    3138:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    313a:	a6 e2       	ldi	r26, 0x26	; 38
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	e6 e2       	ldi	r30, 0x26	; 38
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	80 81       	ld	r24, Z
    3144:	80 64       	ori	r24, 0x40	; 64
    3146:	8c 93       	st	X, r24
    3148:	0b c0       	rjmp	.+22     	; 0x3160 <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	9a 81       	ldd	r25, Y+2	; 0x02
    314e:	ab 81       	ldd	r26, Y+3	; 0x03
    3150:	bc 81       	ldd	r27, Y+4	; 0x04
    3152:	01 96       	adiw	r24, 0x01	; 1
    3154:	a1 1d       	adc	r26, r1
    3156:	b1 1d       	adc	r27, r1
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	9a 83       	std	Y+2, r25	; 0x02
    315c:	ab 83       	std	Y+3, r26	; 0x03
    315e:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    3160:	e6 e2       	ldi	r30, 0x26	; 38
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	82 95       	swap	r24
    3168:	8f 70       	andi	r24, 0x0F	; 15
    316a:	88 2f       	mov	r24, r24
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	81 70       	andi	r24, 0x01	; 1
    3170:	90 70       	andi	r25, 0x00	; 0
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	61 f4       	brne	.+24     	; 0x318e <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	ab 81       	ldd	r26, Y+3	; 0x03
    317c:	bc 81       	ldd	r27, Y+4	; 0x04
    317e:	80 35       	cpi	r24, 0x50	; 80
    3180:	23 ec       	ldi	r18, 0xC3	; 195
    3182:	92 07       	cpc	r25, r18
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	a2 07       	cpc	r26, r18
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	b2 07       	cpc	r27, r18
    318c:	f0 f2       	brcs	.-68     	; 0x314a <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    318e:	e6 e2       	ldi	r30, 0x26	; 38
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	82 95       	swap	r24
    3196:	8f 70       	andi	r24, 0x0F	; 15
    3198:	88 2f       	mov	r24, r24
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	81 70       	andi	r24, 0x01	; 1
    319e:	90 70       	andi	r25, 0x00	; 0
    31a0:	88 23       	and	r24, r24
    31a2:	91 f0       	breq	.+36     	; 0x31c8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    31a4:	10 92 aa 00 	sts	0x00AA, r1
            SET_BIT(ADCSRA_REG,ADIF);
    31a8:	a6 e2       	ldi	r26, 0x26	; 38
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e6 e2       	ldi	r30, 0x26	; 38
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	80 61       	ori	r24, 0x10	; 16
    31b4:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    31b6:	e4 e2       	ldi	r30, 0x24	; 36
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	ef 81       	ldd	r30, Y+7	; 0x07
    31c0:	f8 85       	ldd	r31, Y+8	; 0x08
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	80 83       	st	Z, r24
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    31c8:	1d 82       	std	Y+5, r1	; 0x05
    31ca:	01 c0       	rjmp	.+2      	; 0x31ce <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    31cc:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    31ce:	8d 81       	ldd	r24, Y+5	; 0x05

}
    31d0:	28 96       	adiw	r28, 0x08	; 8
    31d2:	0f b6       	in	r0, 0x3f	; 63
    31d4:	f8 94       	cli
    31d6:	de bf       	out	0x3e, r29	; 62
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	cd bf       	out	0x3d, r28	; 61
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	00 d0       	rcall	.+0      	; 0x31e8 <ADC_enu_GetDigitalValueASynch+0x6>
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <ADC_enu_GetDigitalValueASynch+0x8>
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	8a 83       	std	Y+2, r24	; 0x02
    31f0:	7c 83       	std	Y+4, r23	; 0x04
    31f2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	80 32       	cpi	r24, 0x20	; 32
    31fc:	78 f5       	brcc	.+94     	; 0x325c <ADC_enu_GetDigitalValueASynch+0x7a>
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	9c 81       	ldd	r25, Y+4	; 0x04
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	59 f1       	breq	.+86     	; 0x325c <ADC_enu_GetDigitalValueASynch+0x7a>
    3206:	80 91 aa 00 	lds	r24, 0x00AA
    320a:	88 23       	and	r24, r24
    320c:	39 f5       	brne	.+78     	; 0x325c <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	80 93 aa 00 	sts	0x00AA, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    3214:	8b 81       	ldd	r24, Y+3	; 0x03
    3216:	9c 81       	ldd	r25, Y+4	; 0x04
    3218:	90 93 a9 00 	sts	0x00A9, r25
    321c:	80 93 a8 00 	sts	0x00A8, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    3220:	a6 e2       	ldi	r26, 0x26	; 38
    3222:	b0 e0       	ldi	r27, 0x00	; 0
    3224:	e6 e2       	ldi	r30, 0x26	; 38
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	88 60       	ori	r24, 0x08	; 8
    322c:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    322e:	a7 e2       	ldi	r26, 0x27	; 39
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e7 e2       	ldi	r30, 0x27	; 39
    3234:	f0 e0       	ldi	r31, 0x00	; 0
    3236:	80 81       	ld	r24, Z
    3238:	80 7e       	andi	r24, 0xE0	; 224
    323a:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    323c:	a7 e2       	ldi	r26, 0x27	; 39
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e7 e2       	ldi	r30, 0x27	; 39
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	90 81       	ld	r25, Z
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	89 2b       	or	r24, r25
    324a:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    324c:	a6 e2       	ldi	r26, 0x26	; 38
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	e6 e2       	ldi	r30, 0x26	; 38
    3252:	f0 e0       	ldi	r31, 0x00	; 0
    3254:	80 81       	ld	r24, Z
    3256:	80 64       	ori	r24, 0x40	; 64
    3258:	8c 93       	st	X, r24
    325a:	01 c0       	rjmp	.+2      	; 0x325e <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    325c:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_errorState;
    325e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	cf 91       	pop	r28
    326a:	df 91       	pop	r29
    326c:	08 95       	ret

0000326e <__vector_16>:

/***************ISR Function OF ADC*************/
void __vector_16(void){
    326e:	1f 92       	push	r1
    3270:	0f 92       	push	r0
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	0f 92       	push	r0
    3276:	11 24       	eor	r1, r1
    3278:	2f 93       	push	r18
    327a:	3f 93       	push	r19
    327c:	4f 93       	push	r20
    327e:	5f 93       	push	r21
    3280:	6f 93       	push	r22
    3282:	7f 93       	push	r23
    3284:	8f 93       	push	r24
    3286:	9f 93       	push	r25
    3288:	af 93       	push	r26
    328a:	bf 93       	push	r27
    328c:	ef 93       	push	r30
    328e:	ff 93       	push	r31
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    3298:	80 91 a8 00 	lds	r24, 0x00A8
    329c:	90 91 a9 00 	lds	r25, 0x00A9
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	99 f0       	breq	.+38     	; 0x32ca <__vector_16+0x5c>
        //Clear ADC Flag & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    32a4:	a6 e2       	ldi	r26, 0x26	; 38
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e6 e2       	ldi	r30, 0x26	; 38
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	87 7f       	andi	r24, 0xF7	; 247
    32b0:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    32b2:	10 92 aa 00 	sts	0x00AA, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    32b6:	20 91 a8 00 	lds	r18, 0x00A8
    32ba:	30 91 a9 00 	lds	r19, 0x00A9
    32be:	e4 e2       	ldi	r30, 0x24	; 36
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	80 81       	ld	r24, Z
    32c4:	91 81       	ldd	r25, Z+1	; 0x01
    32c6:	f9 01       	movw	r30, r18
    32c8:	09 95       	icall
    }
   

    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	ff 91       	pop	r31
    32d0:	ef 91       	pop	r30
    32d2:	bf 91       	pop	r27
    32d4:	af 91       	pop	r26
    32d6:	9f 91       	pop	r25
    32d8:	8f 91       	pop	r24
    32da:	7f 91       	pop	r23
    32dc:	6f 91       	pop	r22
    32de:	5f 91       	pop	r21
    32e0:	4f 91       	pop	r20
    32e2:	3f 91       	pop	r19
    32e4:	2f 91       	pop	r18
    32e6:	0f 90       	pop	r0
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	0f 90       	pop	r0
    32ec:	1f 90       	pop	r1
    32ee:	18 95       	reti

000032f0 <__udivmodsi4>:
    32f0:	a1 e2       	ldi	r26, 0x21	; 33
    32f2:	1a 2e       	mov	r1, r26
    32f4:	aa 1b       	sub	r26, r26
    32f6:	bb 1b       	sub	r27, r27
    32f8:	fd 01       	movw	r30, r26
    32fa:	0d c0       	rjmp	.+26     	; 0x3316 <__udivmodsi4_ep>

000032fc <__udivmodsi4_loop>:
    32fc:	aa 1f       	adc	r26, r26
    32fe:	bb 1f       	adc	r27, r27
    3300:	ee 1f       	adc	r30, r30
    3302:	ff 1f       	adc	r31, r31
    3304:	a2 17       	cp	r26, r18
    3306:	b3 07       	cpc	r27, r19
    3308:	e4 07       	cpc	r30, r20
    330a:	f5 07       	cpc	r31, r21
    330c:	20 f0       	brcs	.+8      	; 0x3316 <__udivmodsi4_ep>
    330e:	a2 1b       	sub	r26, r18
    3310:	b3 0b       	sbc	r27, r19
    3312:	e4 0b       	sbc	r30, r20
    3314:	f5 0b       	sbc	r31, r21

00003316 <__udivmodsi4_ep>:
    3316:	66 1f       	adc	r22, r22
    3318:	77 1f       	adc	r23, r23
    331a:	88 1f       	adc	r24, r24
    331c:	99 1f       	adc	r25, r25
    331e:	1a 94       	dec	r1
    3320:	69 f7       	brne	.-38     	; 0x32fc <__udivmodsi4_loop>
    3322:	60 95       	com	r22
    3324:	70 95       	com	r23
    3326:	80 95       	com	r24
    3328:	90 95       	com	r25
    332a:	9b 01       	movw	r18, r22
    332c:	ac 01       	movw	r20, r24
    332e:	bd 01       	movw	r22, r26
    3330:	cf 01       	movw	r24, r30
    3332:	08 95       	ret

00003334 <__prologue_saves__>:
    3334:	2f 92       	push	r2
    3336:	3f 92       	push	r3
    3338:	4f 92       	push	r4
    333a:	5f 92       	push	r5
    333c:	6f 92       	push	r6
    333e:	7f 92       	push	r7
    3340:	8f 92       	push	r8
    3342:	9f 92       	push	r9
    3344:	af 92       	push	r10
    3346:	bf 92       	push	r11
    3348:	cf 92       	push	r12
    334a:	df 92       	push	r13
    334c:	ef 92       	push	r14
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	ca 1b       	sub	r28, r26
    335e:	db 0b       	sbc	r29, r27
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	09 94       	ijmp

0000336c <__epilogue_restores__>:
    336c:	2a 88       	ldd	r2, Y+18	; 0x12
    336e:	39 88       	ldd	r3, Y+17	; 0x11
    3370:	48 88       	ldd	r4, Y+16	; 0x10
    3372:	5f 84       	ldd	r5, Y+15	; 0x0f
    3374:	6e 84       	ldd	r6, Y+14	; 0x0e
    3376:	7d 84       	ldd	r7, Y+13	; 0x0d
    3378:	8c 84       	ldd	r8, Y+12	; 0x0c
    337a:	9b 84       	ldd	r9, Y+11	; 0x0b
    337c:	aa 84       	ldd	r10, Y+10	; 0x0a
    337e:	b9 84       	ldd	r11, Y+9	; 0x09
    3380:	c8 84       	ldd	r12, Y+8	; 0x08
    3382:	df 80       	ldd	r13, Y+7	; 0x07
    3384:	ee 80       	ldd	r14, Y+6	; 0x06
    3386:	fd 80       	ldd	r15, Y+5	; 0x05
    3388:	0c 81       	ldd	r16, Y+4	; 0x04
    338a:	1b 81       	ldd	r17, Y+3	; 0x03
    338c:	aa 81       	ldd	r26, Y+2	; 0x02
    338e:	b9 81       	ldd	r27, Y+1	; 0x01
    3390:	ce 0f       	add	r28, r30
    3392:	d1 1d       	adc	r29, r1
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	ed 01       	movw	r28, r26
    33a0:	08 95       	ret

000033a2 <_exit>:
    33a2:	f8 94       	cli

000033a4 <__stop_program>:
    33a4:	ff cf       	rjmp	.-2      	; 0x33a4 <__stop_program>
