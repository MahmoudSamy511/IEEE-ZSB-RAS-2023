
UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ea8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00004ea8  00004f3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000ee  008000ee  00004fca  2**0
                  ALLOC
  3 .stab         00005afc  00000000  00000000  00004fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002129  00000000  00000000  0000aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000cbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000cd51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000cee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ef25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00010026  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00010fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00011128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000113ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011c78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 09 20 	jmp	0x4012	; 0x4012 <__vector_1>
       8:	0c 94 3c 20 	jmp	0x4078	; 0x4078 <__vector_2>
       c:	0c 94 6f 20 	jmp	0x40de	; 0x40de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__vector_7>
      20:	0c 94 84 1c 	jmp	0x3908	; 0x3908 <__vector_8>
      24:	0c 94 b7 1c 	jmp	0x396e	; 0x396e <__vector_9>
      28:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <__vector_10>
      2c:	0c 94 1d 1d 	jmp	0x3a3a	; 0x3a3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__vector_15>
      40:	0c 94 85 26 	jmp	0x4d0a	; 0x4d0a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 52 27 	jmp	0x4ea4	; 0x4ea4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 eb       	ldi	r26, 0xB7	; 183
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 eb       	ldi	r24, 0xB7	; 183
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 37 27 	jmp	0x4e6e	; 0x4e6e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 eb       	ldi	r22, 0xB7	; 183
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 3f 27 	jmp	0x4e7e	; 0x4e7e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 43 27 	jmp	0x4e86	; 0x4e86 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2b 27 	jmp	0x4e56	; 0x4e56 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 47 27 	jmp	0x4e8e	; 0x4e8e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#include"../1-MCAL/UART/UART_Interface.h"
#include"../1-MCAL/DIO/DIO_interface.h"
int main(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <main+0x6>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN0, DIO_U8_INPUT);
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(DIO_U8_PORTD, DIO_U8_PIN1, DIO_U8_OUTPUT);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(DIO_U8_PORTC, DIO_U8_PIN0, DIO_U8_OUTPUT);
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(DIO_U8_PORTC, DIO_U8_PIN1, DIO_U8_OUTPUT);
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
	DIO_enu_SetPinDirection(DIO_U8_PORTC, DIO_U8_PIN2, DIO_U8_OUTPUT);
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
	UART_enu_Init();
     cdc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <UART_enu_Init>
	while(1){
		static u8 rFlag = 0 ,gFlag=0, bFlag =0;
		u8 Data =0 ;
     ce0:	19 82       	std	Y+1, r1	; 0x01
		UART_enu_recieveChar(&Data);
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <UART_enu_recieveChar>
		switch(Data){
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	3b 83       	std	Y+3, r19	; 0x03
     cf2:	2a 83       	std	Y+2, r18	; 0x02
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	9b 81       	ldd	r25, Y+3	; 0x03
     cf8:	87 34       	cpi	r24, 0x47	; 71
     cfa:	91 05       	cpc	r25, r1
     cfc:	19 f1       	breq	.+70     	; 0xd44 <main+0xa6>
     cfe:	2a 81       	ldd	r18, Y+2	; 0x02
     d00:	3b 81       	ldd	r19, Y+3	; 0x03
     d02:	22 35       	cpi	r18, 0x52	; 82
     d04:	31 05       	cpc	r19, r1
     d06:	31 f0       	breq	.+12     	; 0xd14 <main+0x76>
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	82 34       	cpi	r24, 0x42	; 66
     d0e:	91 05       	cpc	r25, r1
     d10:	81 f1       	breq	.+96     	; 0xd72 <main+0xd4>
     d12:	e6 cf       	rjmp	.-52     	; 0xce0 <main+0x42>
		case 'R':
			if(!rFlag){
     d14:	80 91 f0 00 	lds	r24, 0x00F0
     d18:	88 23       	and	r24, r24
     d1a:	49 f4       	brne	.+18     	; 0xd2e <main+0x90>
				UART_enu_sendString("\rLED RED ON\n");
     d1c:	80 e6       	ldi	r24, 0x60	; 96
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_enu_sendString>
				rFlag = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	80 93 f0 00 	sts	0x00F0, r24
				Data = 0;
     d2a:	19 82       	std	Y+1, r1	; 0x01
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <main+0x9c>
			}
			else{
				UART_enu_sendString("\rLED RED OFF\n");
     d2e:	8d e6       	ldi	r24, 0x6D	; 109
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_enu_sendString>
				rFlag = 0;
     d36:	10 92 f0 00 	sts	0x00F0, r1
			}
			DIO_enu_ToggPin(DIO_U8_PORTC, DIO_U8_PIN0);
     d3a:	82 e0       	ldi	r24, 0x02	; 2
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <DIO_enu_ToggPin>
     d42:	ce cf       	rjmp	.-100    	; 0xce0 <main+0x42>
			break;
		case 'G':
			if(!gFlag){
     d44:	80 91 ef 00 	lds	r24, 0x00EF
     d48:	88 23       	and	r24, r24
     d4a:	41 f4       	brne	.+16     	; 0xd5c <main+0xbe>
				UART_enu_sendString("\rLED GREEN ON\n");
     d4c:	8b e7       	ldi	r24, 0x7B	; 123
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_enu_sendString>
				gFlag = 1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 ef 00 	sts	0x00EF, r24
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <main+0xca>
			}
			else{
				UART_enu_sendString("\rLED GREEN OFF\n");
     d5c:	8a e8       	ldi	r24, 0x8A	; 138
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_enu_sendString>
				gFlag = 0;
     d64:	10 92 ef 00 	sts	0x00EF, r1
			}
			DIO_enu_ToggPin(DIO_U8_PORTC, DIO_U8_PIN1);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <DIO_enu_ToggPin>
     d70:	b7 cf       	rjmp	.-146    	; 0xce0 <main+0x42>
			break;
		case 'B':
			if(!bFlag){
     d72:	80 91 ee 00 	lds	r24, 0x00EE
     d76:	88 23       	and	r24, r24
     d78:	41 f4       	brne	.+16     	; 0xd8a <main+0xec>
				UART_enu_sendString("\rLED BLUE ON\n");
     d7a:	8a e9       	ldi	r24, 0x9A	; 154
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_enu_sendString>
				bFlag = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	80 93 ee 00 	sts	0x00EE, r24
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <main+0xf8>
			}
			else{
				UART_enu_sendString("\rLED BLUE OFF\n");
     d8a:	88 ea       	ldi	r24, 0xA8	; 168
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_enu_sendString>
				bFlag =0;
     d92:	10 92 ee 00 	sts	0x00EE, r1
			}
			DIO_enu_ToggPin(DIO_U8_PORTC, DIO_U8_PIN2);
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	62 e0       	ldi	r22, 0x02	; 2
     d9a:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <DIO_enu_ToggPin>
     d9e:	a0 cf       	rjmp	.-192    	; 0xce0 <main+0x42>

00000da0 <SW_enu_Init>:
#include "Switch_Config.h"
#include "Switch_Private.h"


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <SW_enu_Init+0x6>
     da6:	00 d0       	rcall	.+0      	; 0xda8 <SW_enu_Init+0x8>
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	9b 83       	std	Y+3, r25	; 0x03
     dae:	8a 83       	std	Y+2, r24	; 0x02

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
     db0:	19 82       	std	Y+1, r1	; 0x01
     db2:	53 c0       	rjmp	.+166    	; 0xe5a <SW_enu_Init+0xba>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	c9 01       	movw	r24, r18
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	28 0f       	add	r18, r24
     dc2:	39 1f       	adc	r19, r25
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	9b 81       	ldd	r25, Y+3	; 0x03
     dc8:	fc 01       	movw	r30, r24
     dca:	e2 0f       	add	r30, r18
     dcc:	f3 1f       	adc	r31, r19
     dce:	40 81       	ld	r20, Z
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	28 0f       	add	r18, r24
     dde:	39 1f       	adc	r19, r25
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	fc 01       	movw	r30, r24
     de6:	e2 0f       	add	r30, r18
     de8:	f3 1f       	adc	r31, r19
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	84 2f       	mov	r24, r20
     dee:	69 2f       	mov	r22, r25
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
     df6:	89 81       	ldd	r24, Y+1	; 0x01
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	c9 01       	movw	r24, r18
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	28 0f       	add	r18, r24
     e04:	39 1f       	adc	r19, r25
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	9b 81       	ldd	r25, Y+3	; 0x03
     e0a:	fc 01       	movw	r30, r24
     e0c:	e2 0f       	add	r30, r18
     e0e:	f3 1f       	adc	r31, r19
     e10:	50 81       	ld	r21, Z
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	c9 01       	movw	r24, r18
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	28 0f       	add	r18, r24
     e20:	39 1f       	adc	r19, r25
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	9b 81       	ldd	r25, Y+3	; 0x03
     e26:	fc 01       	movw	r30, r24
     e28:	e2 0f       	add	r30, r18
     e2a:	f3 1f       	adc	r31, r19
     e2c:	41 81       	ldd	r20, Z+1	; 0x01
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	c9 01       	movw	r24, r18
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	28 0f       	add	r18, r24
     e3c:	39 1f       	adc	r19, r25
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	9b 81       	ldd	r25, Y+3	; 0x03
     e42:	fc 01       	movw	r30, r24
     e44:	e2 0f       	add	r30, r18
     e46:	f3 1f       	adc	r31, r19
     e48:	92 81       	ldd	r25, Z+2	; 0x02
     e4a:	85 2f       	mov	r24, r21
     e4c:	64 2f       	mov	r22, r20
     e4e:	49 2f       	mov	r20, r25
     e50:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <SW_enu_Init+0xc2>
     e60:	a9 cf       	rjmp	.-174    	; 0xdb4 <SW_enu_Init+0x14>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    }

}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <SW_enu_getValue>:

ES_t SW_enu_getValue(u8 * Copy_u8_Value,SW_t * Copy_Au8_Switchs)
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	63 97       	sbiw	r28, 0x13	; 19
     e7a:	0f b6       	in	r0, 0x3f	; 63
     e7c:	f8 94       	cli
     e7e:	de bf       	out	0x3e, r29	; 62
     e80:	0f be       	out	0x3f, r0	; 63
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	98 8b       	std	Y+16, r25	; 0x10
     e86:	8f 87       	std	Y+15, r24	; 0x0f
     e88:	7a 8b       	std	Y+18, r23	; 0x12
     e8a:	69 8b       	std	Y+17, r22	; 0x11

    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
     e8c:	e9 89       	ldd	r30, Y+17	; 0x11
     e8e:	fa 89       	ldd	r31, Y+18	; 0x12
     e90:	80 81       	ld	r24, Z
     e92:	e9 89       	ldd	r30, Y+17	; 0x11
     e94:	fa 89       	ldd	r31, Y+18	; 0x12
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	2f 85       	ldd	r18, Y+15	; 0x0f
     e9a:	38 89       	ldd	r19, Y+16	; 0x10
     e9c:	69 2f       	mov	r22, r25
     e9e:	a9 01       	movw	r20, r18
     ea0:	0e 94 1b 23 	call	0x4636	; 0x4636 <DIO_enu_GetPinValue>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a8 ec       	ldi	r26, 0xC8	; 200
     eaa:	b1 e4       	ldi	r27, 0x41	; 65
     eac:	8b 87       	std	Y+11, r24	; 0x0b
     eae:	9c 87       	std	Y+12, r25	; 0x0c
     eb0:	ad 87       	std	Y+13, r26	; 0x0d
     eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eba:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	4a e7       	ldi	r20, 0x7A	; 122
     ec2:	55 e4       	ldi	r21, 0x45	; 69
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	8f 83       	std	Y+7, r24	; 0x07
     ece:	98 87       	std	Y+8, r25	; 0x08
     ed0:	a9 87       	std	Y+9, r26	; 0x09
     ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ed4:	6f 81       	ldd	r22, Y+7	; 0x07
     ed6:	78 85       	ldd	r23, Y+8	; 0x08
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e8       	ldi	r20, 0x80	; 128
     ee2:	5f e3       	ldi	r21, 0x3F	; 63
     ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ee8:	88 23       	and	r24, r24
     eea:	2c f4       	brge	.+10     	; 0xef6 <SW_enu_getValue+0x86>
		__ticks = 1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	3f c0       	rjmp	.+126    	; 0xf74 <SW_enu_getValue+0x104>
	else if (__tmp > 65535)
     ef6:	6f 81       	ldd	r22, Y+7	; 0x07
     ef8:	78 85       	ldd	r23, Y+8	; 0x08
     efa:	89 85       	ldd	r24, Y+9	; 0x09
     efc:	9a 85       	ldd	r25, Y+10	; 0x0a
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	4c f5       	brge	.+82     	; 0xf60 <SW_enu_getValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f10:	7c 85       	ldd	r23, Y+12	; 0x0c
     f12:	8d 85       	ldd	r24, Y+13	; 0x0d
     f14:	9e 85       	ldd	r25, Y+14	; 0x0e
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	51 e4       	ldi	r21, 0x41	; 65
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	bc 01       	movw	r22, r24
     f28:	cd 01       	movw	r24, r26
     f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	0f c0       	rjmp	.+30     	; 0xf56 <SW_enu_getValue+0xe6>
     f38:	80 e9       	ldi	r24, 0x90	; 144
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <SW_enu_getValue+0xd4>
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f4c:	8d 81       	ldd	r24, Y+5	; 0x05
     f4e:	9e 81       	ldd	r25, Y+6	; 0x06
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f56:	8d 81       	ldd	r24, Y+5	; 0x05
     f58:	9e 81       	ldd	r25, Y+6	; 0x06
     f5a:	00 97       	sbiw	r24, 0x00	; 0
     f5c:	69 f7       	brne	.-38     	; 0xf38 <SW_enu_getValue+0xc8>
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <SW_enu_getValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f60:	6f 81       	ldd	r22, Y+7	; 0x07
     f62:	78 85       	ldd	r23, Y+8	; 0x08
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	8d 81       	ldd	r24, Y+5	; 0x05
     f76:	9e 81       	ldd	r25, Y+6	; 0x06
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <SW_enu_getValue+0x110>
     f84:	9a 83       	std	Y+2, r25	; 0x02
     f86:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(25);
    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
     f88:	e9 89       	ldd	r30, Y+17	; 0x11
     f8a:	fa 89       	ldd	r31, Y+18	; 0x12
     f8c:	80 81       	ld	r24, Z
     f8e:	e9 89       	ldd	r30, Y+17	; 0x11
     f90:	fa 89       	ldd	r31, Y+18	; 0x12
     f92:	91 81       	ldd	r25, Z+1	; 0x01
     f94:	2f 85       	ldd	r18, Y+15	; 0x0f
     f96:	38 89       	ldd	r19, Y+16	; 0x10
     f98:	69 2f       	mov	r22, r25
     f9a:	a9 01       	movw	r20, r18
     f9c:	0e 94 1b 23 	call	0x4636	; 0x4636 <DIO_enu_GetPinValue>
    
}
     fa0:	63 96       	adiw	r28, 0x13	; 19
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	41 e0       	ldi	r20, 0x01	; 1
     fc0:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	41 e0       	ldi	r20, 0x01	; 1
     fca:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	62 e0       	ldi	r22, 0x02	; 2
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	63 e0       	ldi	r22, 0x03	; 3
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	63 e0       	ldi	r22, 0x03	; 3
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>

    return STATE_OK;
    100a:	81 e0       	ldi	r24, 0x01	; 1
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	a5 97       	sbiw	r28, 0x25	; 37
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	8b a3       	std	Y+35, r24	; 0x23
    1028:	7d a3       	std	Y+37, r23	; 0x25
    102a:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1030:	8b a1       	ldd	r24, Y+35	; 0x23
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	21 f0       	breq	.+8      	; 0x103e <STEP_Motor_enu_Rotate+0x2c>
    1036:	8b a1       	ldd	r24, Y+35	; 0x23
    1038:	88 23       	and	r24, r24
    103a:	09 f0       	breq	.+2      	; 0x103e <STEP_Motor_enu_Rotate+0x2c>
    103c:	a5 c1       	rjmp	.+842    	; 0x1388 <STEP_Motor_enu_Rotate+0x376>
    103e:	8c a1       	ldd	r24, Y+36	; 0x24
    1040:	9d a1       	ldd	r25, Y+37	; 0x25
    1042:	21 e0       	ldi	r18, 0x01	; 1
    1044:	89 36       	cpi	r24, 0x69	; 105
    1046:	92 07       	cpc	r25, r18
    1048:	08 f0       	brcs	.+2      	; 0x104c <STEP_Motor_enu_Rotate+0x3a>
    104a:	9e c1       	rjmp	.+828    	; 0x1388 <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    104c:	8f e0       	ldi	r24, 0x0F	; 15
    104e:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1050:	8c a1       	ldd	r24, Y+36	; 0x24
    1052:	9d a1       	ldd	r25, Y+37	; 0x25
    1054:	2a e5       	ldi	r18, 0x5A	; 90
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	b9 01       	movw	r22, r18
    105a:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__udivmodhi4>
    105e:	cb 01       	movw	r24, r22
    1060:	98 a3       	std	Y+32, r25	; 0x20
    1062:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    1064:	8b a1       	ldd	r24, Y+35	; 0x23
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	09 f0       	breq	.+2      	; 0x106c <STEP_Motor_enu_Rotate+0x5a>
    106a:	c5 c0       	rjmp	.+394    	; 0x11f6 <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    106c:	1e 8e       	std	Y+30, r1	; 0x1e
    106e:	b9 c0       	rjmp	.+370    	; 0x11e2 <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1070:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9c 01       	movw	r18, r24
    1078:	23 70       	andi	r18, 0x03	; 3
    107a:	30 70       	andi	r19, 0x00	; 0
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <STEP_Motor_enu_Rotate+0x76>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <STEP_Motor_enu_Rotate+0x72>
    108c:	98 2f       	mov	r25, r24
    108e:	89 a1       	ldd	r24, Y+33	; 0x21
    1090:	89 23       	and	r24, r25
    1092:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1094:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	83 70       	andi	r24, 0x03	; 3
    109c:	90 70       	andi	r25, 0x00	; 0
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <STEP_Motor_enu_Rotate+0x96>
    10a4:	89 e0       	ldi	r24, 0x09	; 9
    10a6:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    10a8:	89 a1       	ldd	r24, Y+33	; 0x21
    10aa:	98 2f       	mov	r25, r24
    10ac:	91 70       	andi	r25, 0x01	; 1
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	63 e0       	ldi	r22, 0x03	; 3
    10b2:	49 2f       	mov	r20, r25
    10b4:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    10b8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ba:	86 95       	lsr	r24
    10bc:	98 2f       	mov	r25, r24
    10be:	91 70       	andi	r25, 0x01	; 1
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	49 2f       	mov	r20, r25
    10c6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    10ca:	89 a1       	ldd	r24, Y+33	; 0x21
    10cc:	86 95       	lsr	r24
    10ce:	86 95       	lsr	r24
    10d0:	98 2f       	mov	r25, r24
    10d2:	91 70       	andi	r25, 0x01	; 1
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	61 e0       	ldi	r22, 0x01	; 1
    10d8:	49 2f       	mov	r20, r25
    10da:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    10de:	89 a1       	ldd	r24, Y+33	; 0x21
    10e0:	86 95       	lsr	r24
    10e2:	86 95       	lsr	r24
    10e4:	86 95       	lsr	r24
    10e6:	98 2f       	mov	r25, r24
    10e8:	91 70       	andi	r25, 0x01	; 1
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	49 2f       	mov	r20, r25
    10f0:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	aa ef       	ldi	r26, 0xFA	; 250
    10fa:	b2 e4       	ldi	r27, 0x42	; 66
    10fc:	89 8f       	std	Y+25, r24	; 0x19
    10fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1100:	ab 8f       	std	Y+27, r26	; 0x1b
    1102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1104:	69 8d       	ldd	r22, Y+25	; 0x19
    1106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a e7       	ldi	r20, 0x7A	; 122
    1112:	55 e4       	ldi	r21, 0x45	; 69
    1114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	8d 8b       	std	Y+21, r24	; 0x15
    111e:	9e 8b       	std	Y+22, r25	; 0x16
    1120:	af 8b       	std	Y+23, r26	; 0x17
    1122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1124:	6d 89       	ldd	r22, Y+21	; 0x15
    1126:	7e 89       	ldd	r23, Y+22	; 0x16
    1128:	8f 89       	ldd	r24, Y+23	; 0x17
    112a:	98 8d       	ldd	r25, Y+24	; 0x18
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e8       	ldi	r20, 0x80	; 128
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1138:	88 23       	and	r24, r24
    113a:	2c f4       	brge	.+10     	; 0x1146 <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9c 8b       	std	Y+20, r25	; 0x14
    1142:	8b 8b       	std	Y+19, r24	; 0x13
    1144:	3f c0       	rjmp	.+126    	; 0x11c4 <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    1146:	6d 89       	ldd	r22, Y+21	; 0x15
    1148:	7e 89       	ldd	r23, Y+22	; 0x16
    114a:	8f 89       	ldd	r24, Y+23	; 0x17
    114c:	98 8d       	ldd	r25, Y+24	; 0x18
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	4f e7       	ldi	r20, 0x7F	; 127
    1154:	57 e4       	ldi	r21, 0x47	; 71
    1156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    115a:	18 16       	cp	r1, r24
    115c:	4c f5       	brge	.+82     	; 0x11b0 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115e:	69 8d       	ldd	r22, Y+25	; 0x19
    1160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e2       	ldi	r20, 0x20	; 32
    116c:	51 e4       	ldi	r21, 0x41	; 65
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9c 8b       	std	Y+20, r25	; 0x14
    1184:	8b 8b       	std	Y+19, r24	; 0x13
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <STEP_Motor_enu_Rotate+0x194>
    1188:	80 e9       	ldi	r24, 0x90	; 144
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	9a 8b       	std	Y+18, r25	; 0x12
    118e:	89 8b       	std	Y+17, r24	; 0x11
    1190:	89 89       	ldd	r24, Y+17	; 0x11
    1192:	9a 89       	ldd	r25, Y+18	; 0x12
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <STEP_Motor_enu_Rotate+0x182>
    1198:	9a 8b       	std	Y+18, r25	; 0x12
    119a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119c:	8b 89       	ldd	r24, Y+19	; 0x13
    119e:	9c 89       	ldd	r25, Y+20	; 0x14
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	9c 8b       	std	Y+20, r25	; 0x14
    11a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a6:	8b 89       	ldd	r24, Y+19	; 0x13
    11a8:	9c 89       	ldd	r25, Y+20	; 0x14
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	69 f7       	brne	.-38     	; 0x1188 <STEP_Motor_enu_Rotate+0x176>
    11ae:	14 c0       	rjmp	.+40     	; 0x11d8 <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b0:	6d 89       	ldd	r22, Y+21	; 0x15
    11b2:	7e 89       	ldd	r23, Y+22	; 0x16
    11b4:	8f 89       	ldd	r24, Y+23	; 0x17
    11b6:	98 8d       	ldd	r25, Y+24	; 0x18
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	9c 8b       	std	Y+20, r25	; 0x14
    11c2:	8b 8b       	std	Y+19, r24	; 0x13
    11c4:	8b 89       	ldd	r24, Y+19	; 0x13
    11c6:	9c 89       	ldd	r25, Y+20	; 0x14
    11c8:	98 8b       	std	Y+16, r25	; 0x10
    11ca:	8f 87       	std	Y+15, r24	; 0x0f
    11cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ce:	98 89       	ldd	r25, Y+16	; 0x10
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <STEP_Motor_enu_Rotate+0x1be>
    11d4:	98 8b       	std	Y+16, r25	; 0x10
    11d6:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    11d8:	8f e0       	ldi	r24, 0x0F	; 15
    11da:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    11dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	8e 8f       	std	Y+30, r24	; 0x1e
    11e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ea:	98 a1       	ldd	r25, Y+32	; 0x20
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	08 f4       	brcc	.+2      	; 0x11f4 <STEP_Motor_enu_Rotate+0x1e2>
    11f2:	3e cf       	rjmp	.-388    	; 0x1070 <STEP_Motor_enu_Rotate+0x5e>
    11f4:	ca c0       	rjmp	.+404    	; 0x138a <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    11f6:	8b a1       	ldd	r24, Y+35	; 0x23
    11f8:	88 23       	and	r24, r24
    11fa:	09 f0       	breq	.+2      	; 0x11fe <STEP_Motor_enu_Rotate+0x1ec>
    11fc:	c6 c0       	rjmp	.+396    	; 0x138a <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    11fe:	1d 8e       	std	Y+29, r1	; 0x1d
    1200:	b9 c0       	rjmp	.+370    	; 0x1374 <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1202:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 01       	movw	r18, r24
    120a:	23 70       	andi	r18, 0x03	; 3
    120c:	30 70       	andi	r19, 0x00	; 0
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <STEP_Motor_enu_Rotate+0x208>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <STEP_Motor_enu_Rotate+0x204>
    121e:	98 2f       	mov	r25, r24
    1220:	89 a1       	ldd	r24, Y+33	; 0x21
    1222:	89 23       	and	r24, r25
    1224:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1226:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1228:	88 2f       	mov	r24, r24
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	83 70       	andi	r24, 0x03	; 3
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	91 05       	cpc	r25, r1
    1234:	11 f4       	brne	.+4      	; 0x123a <STEP_Motor_enu_Rotate+0x228>
    1236:	89 e0       	ldi	r24, 0x09	; 9
    1238:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    123a:	89 a1       	ldd	r24, Y+33	; 0x21
    123c:	98 2f       	mov	r25, r24
    123e:	91 70       	andi	r25, 0x01	; 1
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	49 2f       	mov	r20, r25
    1246:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    124a:	89 a1       	ldd	r24, Y+33	; 0x21
    124c:	86 95       	lsr	r24
    124e:	98 2f       	mov	r25, r24
    1250:	91 70       	andi	r25, 0x01	; 1
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	61 e0       	ldi	r22, 0x01	; 1
    1256:	49 2f       	mov	r20, r25
    1258:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    125c:	89 a1       	ldd	r24, Y+33	; 0x21
    125e:	86 95       	lsr	r24
    1260:	86 95       	lsr	r24
    1262:	98 2f       	mov	r25, r24
    1264:	91 70       	andi	r25, 0x01	; 1
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	62 e0       	ldi	r22, 0x02	; 2
    126a:	49 2f       	mov	r20, r25
    126c:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    1270:	89 a1       	ldd	r24, Y+33	; 0x21
    1272:	86 95       	lsr	r24
    1274:	86 95       	lsr	r24
    1276:	86 95       	lsr	r24
    1278:	98 2f       	mov	r25, r24
    127a:	91 70       	andi	r25, 0x01	; 1
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	63 e0       	ldi	r22, 0x03	; 3
    1280:	49 2f       	mov	r20, r25
    1282:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	aa ef       	ldi	r26, 0xFA	; 250
    128c:	b2 e4       	ldi	r27, 0x42	; 66
    128e:	8b 87       	std	Y+11, r24	; 0x0b
    1290:	9c 87       	std	Y+12, r25	; 0x0c
    1292:	ad 87       	std	Y+13, r26	; 0x0d
    1294:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	6b 85       	ldd	r22, Y+11	; 0x0b
    1298:	7c 85       	ldd	r23, Y+12	; 0x0c
    129a:	8d 85       	ldd	r24, Y+13	; 0x0d
    129c:	9e 85       	ldd	r25, Y+14	; 0x0e
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a e7       	ldi	r20, 0x7A	; 122
    12a4:	55 e4       	ldi	r21, 0x45	; 69
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8f 83       	std	Y+7, r24	; 0x07
    12b0:	98 87       	std	Y+8, r25	; 0x08
    12b2:	a9 87       	std	Y+9, r26	; 0x09
    12b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b6:	6f 81       	ldd	r22, Y+7	; 0x07
    12b8:	78 85       	ldd	r23, Y+8	; 0x08
    12ba:	89 85       	ldd	r24, Y+9	; 0x09
    12bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <STEP_Motor_enu_Rotate+0x326>
    131a:	80 e9       	ldi	r24, 0x90	; 144
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <STEP_Motor_enu_Rotate+0x314>
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <STEP_Motor_enu_Rotate+0x308>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9e 83       	std	Y+6, r25	; 0x06
    1354:	8d 83       	std	Y+5, r24	; 0x05
    1356:	8d 81       	ldd	r24, Y+5	; 0x05
    1358:	9e 81       	ldd	r25, Y+6	; 0x06
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <STEP_Motor_enu_Rotate+0x350>
    1366:	9a 83       	std	Y+2, r25	; 0x02
    1368:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    136a:	8f e0       	ldi	r24, 0x0F	; 15
    136c:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    136e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1370:	8f 5f       	subi	r24, 0xFF	; 255
    1372:	8d 8f       	std	Y+29, r24	; 0x1d
    1374:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    137c:	98 a1       	ldd	r25, Y+32	; 0x20
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	08 f4       	brcc	.+2      	; 0x1386 <STEP_Motor_enu_Rotate+0x374>
    1384:	3e cf       	rjmp	.-388    	; 0x1202 <STEP_Motor_enu_Rotate+0x1f0>
    1386:	01 c0       	rjmp	.+2      	; 0x138a <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1388:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    138a:	8a a1       	ldd	r24, Y+34	; 0x22
}
    138c:	a5 96       	adiw	r28, 0x25	; 37
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	2e 97       	sbiw	r28, 0x0e	; 14
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	61 e0       	ldi	r22, 0x01	; 1
    13c0:	40 e0       	ldi	r20, 0x00	; 0
    13c2:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	62 e0       	ldi	r22, 0x02	; 2
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	63 e0       	ldi	r22, 0x03	; 3
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	aa ef       	ldi	r26, 0xFA	; 250
    13e0:	b2 e4       	ldi	r27, 0x42	; 66
    13e2:	8b 87       	std	Y+11, r24	; 0x0b
    13e4:	9c 87       	std	Y+12, r25	; 0x0c
    13e6:	ad 87       	std	Y+13, r26	; 0x0d
    13e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	4a e7       	ldi	r20, 0x7A	; 122
    13f8:	55 e4       	ldi	r21, 0x45	; 69
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	8f 83       	std	Y+7, r24	; 0x07
    1404:	98 87       	std	Y+8, r25	; 0x08
    1406:	a9 87       	std	Y+9, r26	; 0x09
    1408:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e8       	ldi	r20, 0x80	; 128
    1418:	5f e3       	ldi	r21, 0x3F	; 63
    141a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    141e:	88 23       	and	r24, r24
    1420:	2c f4       	brge	.+10     	; 0x142c <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	3f c0       	rjmp	.+126    	; 0x14aa <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    142c:	6f 81       	ldd	r22, Y+7	; 0x07
    142e:	78 85       	ldd	r23, Y+8	; 0x08
    1430:	89 85       	ldd	r24, Y+9	; 0x09
    1432:	9a 85       	ldd	r25, Y+10	; 0x0a
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	3f ef       	ldi	r19, 0xFF	; 255
    1438:	4f e7       	ldi	r20, 0x7F	; 127
    143a:	57 e4       	ldi	r21, 0x47	; 71
    143c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1440:	18 16       	cp	r1, r24
    1442:	4c f5       	brge	.+82     	; 0x1496 <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1444:	6b 85       	ldd	r22, Y+11	; 0x0b
    1446:	7c 85       	ldd	r23, Y+12	; 0x0c
    1448:	8d 85       	ldd	r24, Y+13	; 0x0d
    144a:	9e 85       	ldd	r25, Y+14	; 0x0e
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e2       	ldi	r20, 0x20	; 32
    1452:	51 e4       	ldi	r21, 0x41	; 65
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9e 83       	std	Y+6, r25	; 0x06
    146a:	8d 83       	std	Y+5, r24	; 0x05
    146c:	0f c0       	rjmp	.+30     	; 0x148c <STEP_Motor_enu_Stop+0xee>
    146e:	80 e9       	ldi	r24, 0x90	; 144
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	f1 f7       	brne	.-4      	; 0x147a <STEP_Motor_enu_Stop+0xdc>
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	69 f7       	brne	.-38     	; 0x146e <STEP_Motor_enu_Stop+0xd0>
    1494:	14 c0       	rjmp	.+40     	; 0x14be <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1496:	6f 81       	ldd	r22, Y+7	; 0x07
    1498:	78 85       	ldd	r23, Y+8	; 0x08
    149a:	89 85       	ldd	r24, Y+9	; 0x09
    149c:	9a 85       	ldd	r25, Y+10	; 0x0a
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <STEP_Motor_enu_Stop+0x118>
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    14be:	81 e0       	ldi	r24, 0x01	; 1
}
    14c0:	2e 96       	adiw	r28, 0x0e	; 14
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <sevenSeg_enu_displayNum+0x6>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	66 e0       	ldi	r22, 0x06	; 6
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	0e 94 b4 23 	call	0x4768	; 0x4768 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	8a 30       	cpi	r24, 0x0A	; 10
    14fa:	78 f5       	brcc	.+94     	; 0x155a <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	66 e0       	ldi	r22, 0x06	; 6
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1506:	19 82       	std	Y+1, r1	; 0x01
    1508:	24 c0       	rjmp	.+72     	; 0x1552 <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	fc 01       	movw	r30, r24
    1512:	e1 53       	subi	r30, 0x31	; 49
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	40 81       	ld	r20, Z
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	fc 01       	movw	r30, r24
    1520:	eb 53       	subi	r30, 0x3B	; 59
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	80 81       	ld	r24, Z
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	b9 01       	movw	r22, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <sevenSeg_enu_displayNum+0x66>
    1534:	75 95       	asr	r23
    1536:	67 95       	ror	r22
    1538:	8a 95       	dec	r24
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <sevenSeg_enu_displayNum+0x62>
    153c:	cb 01       	movw	r24, r22
    153e:	98 2f       	mov	r25, r24
    1540:	91 70       	andi	r25, 0x01	; 1
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	64 2f       	mov	r22, r20
    1546:	49 2f       	mov	r20, r25
    1548:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	8f 5f       	subi	r24, 0xFF	; 255
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	87 30       	cpi	r24, 0x07	; 7
    1556:	c8 f2       	brcs	.-78     	; 0x150a <sevenSeg_enu_displayNum+0x38>
    1558:	01 c0       	rjmp	.+2      	; 0x155c <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    155a:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <Servo_enu_Init>:
#include"../../1-MCAL/Timers/Timer_Interface.h"

#include"Servo_Config.h"
#include"Servo_Private.h"

ES_t Servo_enu_Init(void){
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	0f 92       	push	r0
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_OUTPUT);
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    Timers_enu_Init(TIMER1,FAST_PWM_NON_INVERTING,CLK_8);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	64 e0       	ldi	r22, 0x04	; 4
    1582:	42 e0       	ldi	r20, 0x02	; 2
    1584:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <Timers_enu_Init>
    Timers_enu_Timer1_setTopValue(SERVO_COMPLETE_CYCLE_TICKS-1);
    1588:	8f e3       	ldi	r24, 0x3F	; 63
    158a:	9c e9       	ldi	r25, 0x9C	; 156
    158c:	0e 94 b8 1b 	call	0x3770	; 0x3770 <Timers_enu_Timer1_setTopValue>
}
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <Servo_enu_SetAngle>:
ES_t Servo_enu_SetAngle(u8 Copy_u8_Angle){
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <Servo_enu_SetAngle+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <Servo_enu_SetAngle+0x8>
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	8c 83       	std	Y+4, r24	; 0x04
    ES_t Local_u8_errorState = STATE_OK;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    if(Copy_u8_Angle<=SERVO_MAX_ANGLE){
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	85 3b       	cpi	r24, 0xB5	; 181
    15ae:	58 f5       	brcc	.+86     	; 0x1606 <Servo_enu_SetAngle+0x6e>
        u16 Servo_u16_OCR1A_Value = ((SERVO_MIN_TIME+(Copy_u8_Angle*SERVO_MIN_TIME)/SERVO_MAX_ANGLE)*2)-1;
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a0 e0       	ldi	r26, 0x00	; 0
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	28 ee       	ldi	r18, 0xE8	; 232
    15bc:	33 e0       	ldi	r19, 0x03	; 3
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	bc 01       	movw	r22, r24
    15c4:	cd 01       	movw	r24, r26
    15c6:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__mulsi3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	24 eb       	ldi	r18, 0xB4	; 180
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <__udivmodsi4>
    15de:	da 01       	movw	r26, r20
    15e0:	c9 01       	movw	r24, r18
    15e2:	88 51       	subi	r24, 0x18	; 24
    15e4:	9c 4f       	sbci	r25, 0xFC	; 252
    15e6:	af 4f       	sbci	r26, 0xFF	; 255
    15e8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	aa 1f       	adc	r26, r26
    15f0:	bb 1f       	adc	r27, r27
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
        Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_A,Servo_u16_OCR1A_Value);
    15f8:	29 81       	ldd	r18, Y+1	; 0x01
    15fa:	3a 81       	ldd	r19, Y+2	; 0x02
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	b9 01       	movw	r22, r18
    1600:	0e 94 cc 1b 	call	0x3798	; 0x3798 <Timers_enu_Timer1SetCompareValue>
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <Servo_enu_SetAngle+0x70>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1606:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <Servo_enu_Stop>:
ES_t Servo_enu_Stop(void){
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    Timers_enu_Stop(TIMER1);
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	0e 94 03 1c 	call	0x3806	; 0x3806 <Timers_enu_Stop>
    return STATE_OK;
    1626:	81 e0       	ldi	r24, 0x01	; 1
}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <LCD_enu_SendCmnd>:
#include "../../1-MCAL/DIO/DIO_interface.h"
/*HAL*/
#include "../../2-HAL/LCD/LCD_Private.h"
#include "../../2-HAL/LCD/LCD_Config.h"
ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn)
{
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	e1 97       	sbiw	r28, 0x31	; 49
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	89 ab       	std	Y+49, r24	; 0x31
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
    /* RS = 0 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_LOW);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /*Write Command*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_7BIT) & MASK_BIT);
    1658:	89 a9       	ldd	r24, Y+49	; 0x31
    165a:	98 2f       	mov	r25, r24
    165c:	99 1f       	adc	r25, r25
    165e:	99 27       	eor	r25, r25
    1660:	99 1f       	adc	r25, r25
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	66 e0       	ldi	r22, 0x06	; 6
    1666:	49 2f       	mov	r20, r25
    1668:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_6BIT) & MASK_BIT);
    166c:	89 a9       	ldd	r24, Y+49	; 0x31
    166e:	82 95       	swap	r24
    1670:	86 95       	lsr	r24
    1672:	86 95       	lsr	r24
    1674:	83 70       	andi	r24, 0x03	; 3
    1676:	98 2f       	mov	r25, r24
    1678:	91 70       	andi	r25, 0x01	; 1
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	65 e0       	ldi	r22, 0x05	; 5
    167e:	49 2f       	mov	r20, r25
    1680:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_5BIT) & MASK_BIT);
    1684:	89 a9       	ldd	r24, Y+49	; 0x31
    1686:	82 95       	swap	r24
    1688:	86 95       	lsr	r24
    168a:	87 70       	andi	r24, 0x07	; 7
    168c:	98 2f       	mov	r25, r24
    168e:	91 70       	andi	r25, 0x01	; 1
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	49 2f       	mov	r20, r25
    1696:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_4BIT) & MASK_BIT);
    169a:	89 a9       	ldd	r24, Y+49	; 0x31
    169c:	82 95       	swap	r24
    169e:	8f 70       	andi	r24, 0x0F	; 15
    16a0:	98 2f       	mov	r25, r24
    16a2:	91 70       	andi	r25, 0x01	; 1
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	63 e0       	ldi	r22, 0x03	; 3
    16a8:	49 2f       	mov	r20, r25
    16aa:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	62 e0       	ldi	r22, 0x02	; 2
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e8       	ldi	r26, 0x80	; 128
    16be:	bf e3       	ldi	r27, 0x3F	; 63
    16c0:	8d a7       	std	Y+45, r24	; 0x2d
    16c2:	9e a7       	std	Y+46, r25	; 0x2e
    16c4:	af a7       	std	Y+47, r26	; 0x2f
    16c6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16c8:	6d a5       	ldd	r22, Y+45	; 0x2d
    16ca:	7e a5       	ldd	r23, Y+46	; 0x2e
    16cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ce:	98 a9       	ldd	r25, Y+48	; 0x30
    16d0:	2b ea       	ldi	r18, 0xAB	; 171
    16d2:	3a ea       	ldi	r19, 0xAA	; 170
    16d4:	4a ea       	ldi	r20, 0xAA	; 170
    16d6:	50 e4       	ldi	r21, 0x40	; 64
    16d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	89 a7       	std	Y+41, r24	; 0x29
    16e2:	9a a7       	std	Y+42, r25	; 0x2a
    16e4:	ab a7       	std	Y+43, r26	; 0x2b
    16e6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    16e8:	69 a5       	ldd	r22, Y+41	; 0x29
    16ea:	7a a5       	ldd	r23, Y+42	; 0x2a
    16ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	1c f4       	brge	.+6      	; 0x1706 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	88 a7       	std	Y+40, r24	; 0x28
    1704:	91 c0       	rjmp	.+290    	; 0x1828 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1706:	69 a5       	ldd	r22, Y+41	; 0x29
    1708:	7a a5       	ldd	r23, Y+42	; 0x2a
    170a:	8b a5       	ldd	r24, Y+43	; 0x2b
    170c:	9c a5       	ldd	r25, Y+44	; 0x2c
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	53 e4       	ldi	r21, 0x43	; 67
    1716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	0c f0       	brlt	.+2      	; 0x1720 <LCD_enu_SendCmnd+0xf2>
    171e:	7b c0       	rjmp	.+246    	; 0x1816 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1720:	6d a5       	ldd	r22, Y+45	; 0x2d
    1722:	7e a5       	ldd	r23, Y+46	; 0x2e
    1724:	8f a5       	ldd	r24, Y+47	; 0x2f
    1726:	98 a9       	ldd	r25, Y+48	; 0x30
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	4a e7       	ldi	r20, 0x7A	; 122
    172e:	54 e4       	ldi	r21, 0x44	; 68
    1730:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	8c a3       	std	Y+36, r24	; 0x24
    173a:	9d a3       	std	Y+37, r25	; 0x25
    173c:	ae a3       	std	Y+38, r26	; 0x26
    173e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1740:	6c a1       	ldd	r22, Y+36	; 0x24
    1742:	7d a1       	ldd	r23, Y+37	; 0x25
    1744:	8e a1       	ldd	r24, Y+38	; 0x26
    1746:	9f a1       	ldd	r25, Y+39	; 0x27
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	4a e7       	ldi	r20, 0x7A	; 122
    174e:	55 e4       	ldi	r21, 0x45	; 69
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	88 a3       	std	Y+32, r24	; 0x20
    175a:	99 a3       	std	Y+33, r25	; 0x21
    175c:	aa a3       	std	Y+34, r26	; 0x22
    175e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1760:	68 a1       	ldd	r22, Y+32	; 0x20
    1762:	79 a1       	ldd	r23, Y+33	; 0x21
    1764:	8a a1       	ldd	r24, Y+34	; 0x22
    1766:	9b a1       	ldd	r25, Y+35	; 0x23
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	40 e8       	ldi	r20, 0x80	; 128
    176e:	5f e3       	ldi	r21, 0x3F	; 63
    1770:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1774:	88 23       	and	r24, r24
    1776:	2c f4       	brge	.+10     	; 0x1782 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9f 8f       	std	Y+31, r25	; 0x1f
    177e:	8e 8f       	std	Y+30, r24	; 0x1e
    1780:	3f c0       	rjmp	.+126    	; 0x1800 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1782:	68 a1       	ldd	r22, Y+32	; 0x20
    1784:	79 a1       	ldd	r23, Y+33	; 0x21
    1786:	8a a1       	ldd	r24, Y+34	; 0x22
    1788:	9b a1       	ldd	r25, Y+35	; 0x23
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	4f e7       	ldi	r20, 0x7F	; 127
    1790:	57 e4       	ldi	r21, 0x47	; 71
    1792:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1796:	18 16       	cp	r1, r24
    1798:	4c f5       	brge	.+82     	; 0x17ec <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179a:	6c a1       	ldd	r22, Y+36	; 0x24
    179c:	7d a1       	ldd	r23, Y+37	; 0x25
    179e:	8e a1       	ldd	r24, Y+38	; 0x26
    17a0:	9f a1       	ldd	r25, Y+39	; 0x27
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e2       	ldi	r20, 0x20	; 32
    17a8:	51 e4       	ldi	r21, 0x41	; 65
    17aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	9f 8f       	std	Y+31, r25	; 0x1f
    17c0:	8e 8f       	std	Y+30, r24	; 0x1e
    17c2:	0f c0       	rjmp	.+30     	; 0x17e2 <LCD_enu_SendCmnd+0x1b4>
    17c4:	80 e9       	ldi	r24, 0x90	; 144
    17c6:	91 e0       	ldi	r25, 0x01	; 1
    17c8:	9d 8f       	std	Y+29, r25	; 0x1d
    17ca:	8c 8f       	std	Y+28, r24	; 0x1c
    17cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <LCD_enu_SendCmnd+0x1a2>
    17d4:	9d 8f       	std	Y+29, r25	; 0x1d
    17d6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17da:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	9f 8f       	std	Y+31, r25	; 0x1f
    17e0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	69 f7       	brne	.-38     	; 0x17c4 <LCD_enu_SendCmnd+0x196>
    17ea:	24 c0       	rjmp	.+72     	; 0x1834 <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ec:	68 a1       	ldd	r22, Y+32	; 0x20
    17ee:	79 a1       	ldd	r23, Y+33	; 0x21
    17f0:	8a a1       	ldd	r24, Y+34	; 0x22
    17f2:	9b a1       	ldd	r25, Y+35	; 0x23
    17f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	9f 8f       	std	Y+31, r25	; 0x1f
    17fe:	8e 8f       	std	Y+30, r24	; 0x1e
    1800:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1802:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1804:	9b 8f       	std	Y+27, r25	; 0x1b
    1806:	8a 8f       	std	Y+26, r24	; 0x1a
    1808:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <LCD_enu_SendCmnd+0x1de>
    1810:	9b 8f       	std	Y+27, r25	; 0x1b
    1812:	8a 8f       	std	Y+26, r24	; 0x1a
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1816:	69 a5       	ldd	r22, Y+41	; 0x29
    1818:	7a a5       	ldd	r23, Y+42	; 0x2a
    181a:	8b a5       	ldd	r24, Y+43	; 0x2b
    181c:	9c a5       	ldd	r25, Y+44	; 0x2c
    181e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	88 a7       	std	Y+40, r24	; 0x28
    1828:	88 a5       	ldd	r24, Y+40	; 0x28
    182a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    182c:	89 8d       	ldd	r24, Y+25	; 0x19
    182e:	8a 95       	dec	r24
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_enu_SendCmnd+0x200>
    1832:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /*Write the rest of the cmnd*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Cmdn >> SHIFT_3BIT) & MASK_BIT);
    183e:	89 a9       	ldd	r24, Y+49	; 0x31
    1840:	86 95       	lsr	r24
    1842:	86 95       	lsr	r24
    1844:	86 95       	lsr	r24
    1846:	98 2f       	mov	r25, r24
    1848:	91 70       	andi	r25, 0x01	; 1
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	66 e0       	ldi	r22, 0x06	; 6
    184e:	49 2f       	mov	r20, r25
    1850:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Cmdn >> SHIFT_2BIT) & MASK_BIT);
    1854:	89 a9       	ldd	r24, Y+49	; 0x31
    1856:	86 95       	lsr	r24
    1858:	86 95       	lsr	r24
    185a:	98 2f       	mov	r25, r24
    185c:	91 70       	andi	r25, 0x01	; 1
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	65 e0       	ldi	r22, 0x05	; 5
    1862:	49 2f       	mov	r20, r25
    1864:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Cmdn >> SHIFT_1BIT) & MASK_BIT);
    1868:	89 a9       	ldd	r24, Y+49	; 0x31
    186a:	86 95       	lsr	r24
    186c:	98 2f       	mov	r25, r24
    186e:	91 70       	andi	r25, 0x01	; 1
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	64 e0       	ldi	r22, 0x04	; 4
    1874:	49 2f       	mov	r20, r25
    1876:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Cmdn >> SHIFT_0BIT) & MASK_BIT);
    187a:	89 a9       	ldd	r24, Y+49	; 0x31
    187c:	98 2f       	mov	r25, r24
    187e:	91 70       	andi	r25, 0x01	; 1
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	63 e0       	ldi	r22, 0x03	; 3
    1884:	49 2f       	mov	r20, r25
    1886:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	62 e0       	ldi	r22, 0x02	; 2
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e8       	ldi	r26, 0x80	; 128
    189a:	bf e3       	ldi	r27, 0x3F	; 63
    189c:	8d 8b       	std	Y+21, r24	; 0x15
    189e:	9e 8b       	std	Y+22, r25	; 0x16
    18a0:	af 8b       	std	Y+23, r26	; 0x17
    18a2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18a4:	6d 89       	ldd	r22, Y+21	; 0x15
    18a6:	7e 89       	ldd	r23, Y+22	; 0x16
    18a8:	8f 89       	ldd	r24, Y+23	; 0x17
    18aa:	98 8d       	ldd	r25, Y+24	; 0x18
    18ac:	2b ea       	ldi	r18, 0xAB	; 171
    18ae:	3a ea       	ldi	r19, 0xAA	; 170
    18b0:	4a ea       	ldi	r20, 0xAA	; 170
    18b2:	50 e4       	ldi	r21, 0x40	; 64
    18b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	89 8b       	std	Y+17, r24	; 0x11
    18be:	9a 8b       	std	Y+18, r25	; 0x12
    18c0:	ab 8b       	std	Y+19, r26	; 0x13
    18c2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18c4:	69 89       	ldd	r22, Y+17	; 0x11
    18c6:	7a 89       	ldd	r23, Y+18	; 0x12
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	5f e3       	ldi	r21, 0x3F	; 63
    18d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d8:	88 23       	and	r24, r24
    18da:	1c f4       	brge	.+6      	; 0x18e2 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	88 8b       	std	Y+16, r24	; 0x10
    18e0:	91 c0       	rjmp	.+290    	; 0x1a04 <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    18e2:	69 89       	ldd	r22, Y+17	; 0x11
    18e4:	7a 89       	ldd	r23, Y+18	; 0x12
    18e6:	8b 89       	ldd	r24, Y+19	; 0x13
    18e8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	4f e7       	ldi	r20, 0x7F	; 127
    18f0:	53 e4       	ldi	r21, 0x43	; 67
    18f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f6:	18 16       	cp	r1, r24
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <LCD_enu_SendCmnd+0x2ce>
    18fa:	7b c0       	rjmp	.+246    	; 0x19f2 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    18fc:	6d 89       	ldd	r22, Y+21	; 0x15
    18fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1900:	8f 89       	ldd	r24, Y+23	; 0x17
    1902:	98 8d       	ldd	r25, Y+24	; 0x18
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	54 e4       	ldi	r21, 0x44	; 68
    190c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	8c 87       	std	Y+12, r24	; 0x0c
    1916:	9d 87       	std	Y+13, r25	; 0x0d
    1918:	ae 87       	std	Y+14, r26	; 0x0e
    191a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6c 85       	ldd	r22, Y+12	; 0x0c
    191e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1920:	8e 85       	ldd	r24, Y+14	; 0x0e
    1922:	9f 85       	ldd	r25, Y+15	; 0x0f
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a e7       	ldi	r20, 0x7A	; 122
    192a:	55 e4       	ldi	r21, 0x45	; 69
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	88 87       	std	Y+8, r24	; 0x08
    1936:	99 87       	std	Y+9, r25	; 0x09
    1938:	aa 87       	std	Y+10, r26	; 0x0a
    193a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    193c:	68 85       	ldd	r22, Y+8	; 0x08
    193e:	79 85       	ldd	r23, Y+9	; 0x09
    1940:	8a 85       	ldd	r24, Y+10	; 0x0a
    1942:	9b 85       	ldd	r25, Y+11	; 0x0b
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9f 83       	std	Y+7, r25	; 0x07
    195a:	8e 83       	std	Y+6, r24	; 0x06
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    195e:	68 85       	ldd	r22, Y+8	; 0x08
    1960:	79 85       	ldd	r23, Y+9	; 0x09
    1962:	8a 85       	ldd	r24, Y+10	; 0x0a
    1964:	9b 85       	ldd	r25, Y+11	; 0x0b
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	6c 85       	ldd	r22, Y+12	; 0x0c
    1978:	7d 85       	ldd	r23, Y+13	; 0x0d
    197a:	8e 85       	ldd	r24, Y+14	; 0x0e
    197c:	9f 85       	ldd	r25, Y+15	; 0x0f
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9f 83       	std	Y+7, r25	; 0x07
    199c:	8e 83       	std	Y+6, r24	; 0x06
    199e:	0f c0       	rjmp	.+30     	; 0x19be <LCD_enu_SendCmnd+0x390>
    19a0:	80 e9       	ldi	r24, 0x90	; 144
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	9d 83       	std	Y+5, r25	; 0x05
    19a6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19a8:	8c 81       	ldd	r24, Y+4	; 0x04
    19aa:	9d 81       	ldd	r25, Y+5	; 0x05
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_enu_SendCmnd+0x37e>
    19b0:	9d 83       	std	Y+5, r25	; 0x05
    19b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8e 81       	ldd	r24, Y+6	; 0x06
    19b6:	9f 81       	ldd	r25, Y+7	; 0x07
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9f 83       	std	Y+7, r25	; 0x07
    19bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	9f 81       	ldd	r25, Y+7	; 0x07
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <LCD_enu_SendCmnd+0x372>
    19c6:	24 c0       	rjmp	.+72     	; 0x1a10 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	68 85       	ldd	r22, Y+8	; 0x08
    19ca:	79 85       	ldd	r23, Y+9	; 0x09
    19cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9f 83       	std	Y+7, r25	; 0x07
    19da:	8e 83       	std	Y+6, r24	; 0x06
    19dc:	8e 81       	ldd	r24, Y+6	; 0x06
    19de:	9f 81       	ldd	r25, Y+7	; 0x07
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <LCD_enu_SendCmnd+0x3ba>
    19ec:	9b 83       	std	Y+3, r25	; 0x03
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19f2:	69 89       	ldd	r22, Y+17	; 0x11
    19f4:	7a 89       	ldd	r23, Y+18	; 0x12
    19f6:	8b 89       	ldd	r24, Y+19	; 0x13
    19f8:	9c 89       	ldd	r25, Y+20	; 0x14
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	88 8b       	std	Y+16, r24	; 0x10
    1a04:	88 89       	ldd	r24, Y+16	; 0x10
    1a06:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	8a 95       	dec	r24
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_enu_SendCmnd+0x3dc>
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	62 e0       	ldi	r22, 0x02	; 2
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    return STATE_OK;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    1a1c:	e1 96       	adiw	r28, 0x31	; 49
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <LCD_enu_SendChar>:
ES_t LCD_enu_SendChar(u8 Copy_u8_Char)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	e1 97       	sbiw	r28, 0x31	; 49
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_HIGH);
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	61 e0       	ldi	r22, 0x01	; 1
    1a48:	41 e0       	ldi	r20, 0x01	; 1
    1a4a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_LOW);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_7BIT) & MASK_BIT);
    1a58:	89 a9       	ldd	r24, Y+49	; 0x31
    1a5a:	98 2f       	mov	r25, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	99 27       	eor	r25, r25
    1a60:	99 1f       	adc	r25, r25
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	66 e0       	ldi	r22, 0x06	; 6
    1a66:	49 2f       	mov	r20, r25
    1a68:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_6BIT) & MASK_BIT);
    1a6c:	89 a9       	ldd	r24, Y+49	; 0x31
    1a6e:	82 95       	swap	r24
    1a70:	86 95       	lsr	r24
    1a72:	86 95       	lsr	r24
    1a74:	83 70       	andi	r24, 0x03	; 3
    1a76:	98 2f       	mov	r25, r24
    1a78:	91 70       	andi	r25, 0x01	; 1
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	65 e0       	ldi	r22, 0x05	; 5
    1a7e:	49 2f       	mov	r20, r25
    1a80:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_5BIT) & MASK_BIT);
    1a84:	89 a9       	ldd	r24, Y+49	; 0x31
    1a86:	82 95       	swap	r24
    1a88:	86 95       	lsr	r24
    1a8a:	87 70       	andi	r24, 0x07	; 7
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	91 70       	andi	r25, 0x01	; 1
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	64 e0       	ldi	r22, 0x04	; 4
    1a94:	49 2f       	mov	r20, r25
    1a96:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_4BIT) & MASK_BIT);
    1a9a:	89 a9       	ldd	r24, Y+49	; 0x31
    1a9c:	82 95       	swap	r24
    1a9e:	8f 70       	andi	r24, 0x0F	; 15
    1aa0:	98 2f       	mov	r25, r24
    1aa2:	91 70       	andi	r25, 0x01	; 1
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	63 e0       	ldi	r22, 0x03	; 3
    1aa8:	49 2f       	mov	r20, r25
    1aaa:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	62 e0       	ldi	r22, 0x02	; 2
    1ab2:	41 e0       	ldi	r20, 0x01	; 1
    1ab4:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	a0 e8       	ldi	r26, 0x80	; 128
    1abe:	bf e3       	ldi	r27, 0x3F	; 63
    1ac0:	8d a7       	std	Y+45, r24	; 0x2d
    1ac2:	9e a7       	std	Y+46, r25	; 0x2e
    1ac4:	af a7       	std	Y+47, r26	; 0x2f
    1ac6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ac8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1aca:	7e a5       	ldd	r23, Y+46	; 0x2e
    1acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ace:	98 a9       	ldd	r25, Y+48	; 0x30
    1ad0:	2b ea       	ldi	r18, 0xAB	; 171
    1ad2:	3a ea       	ldi	r19, 0xAA	; 170
    1ad4:	4a ea       	ldi	r20, 0xAA	; 170
    1ad6:	50 e4       	ldi	r21, 0x40	; 64
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	89 a7       	std	Y+41, r24	; 0x29
    1ae2:	9a a7       	std	Y+42, r25	; 0x2a
    1ae4:	ab a7       	std	Y+43, r26	; 0x2b
    1ae6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ae8:	69 a5       	ldd	r22, Y+41	; 0x29
    1aea:	7a a5       	ldd	r23, Y+42	; 0x2a
    1aec:	8b a5       	ldd	r24, Y+43	; 0x2b
    1aee:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e8       	ldi	r20, 0x80	; 128
    1af6:	5f e3       	ldi	r21, 0x3F	; 63
    1af8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afc:	88 23       	and	r24, r24
    1afe:	1c f4       	brge	.+6      	; 0x1b06 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	88 a7       	std	Y+40, r24	; 0x28
    1b04:	91 c0       	rjmp	.+290    	; 0x1c28 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    1b06:	69 a5       	ldd	r22, Y+41	; 0x29
    1b08:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	53 e4       	ldi	r21, 0x43	; 67
    1b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	0c f0       	brlt	.+2      	; 0x1b20 <LCD_enu_SendChar+0xf2>
    1b1e:	7b c0       	rjmp	.+246    	; 0x1c16 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1b20:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b22:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b26:	98 a9       	ldd	r25, Y+48	; 0x30
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a e7       	ldi	r20, 0x7A	; 122
    1b2e:	54 e4       	ldi	r21, 0x44	; 68
    1b30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	8c a3       	std	Y+36, r24	; 0x24
    1b3a:	9d a3       	std	Y+37, r25	; 0x25
    1b3c:	ae a3       	std	Y+38, r26	; 0x26
    1b3e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b40:	6c a1       	ldd	r22, Y+36	; 0x24
    1b42:	7d a1       	ldd	r23, Y+37	; 0x25
    1b44:	8e a1       	ldd	r24, Y+38	; 0x26
    1b46:	9f a1       	ldd	r25, Y+39	; 0x27
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	4a e7       	ldi	r20, 0x7A	; 122
    1b4e:	55 e4       	ldi	r21, 0x45	; 69
    1b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	88 a3       	std	Y+32, r24	; 0x20
    1b5a:	99 a3       	std	Y+33, r25	; 0x21
    1b5c:	aa a3       	std	Y+34, r26	; 0x22
    1b5e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b60:	68 a1       	ldd	r22, Y+32	; 0x20
    1b62:	79 a1       	ldd	r23, Y+33	; 0x21
    1b64:	8a a1       	ldd	r24, Y+34	; 0x22
    1b66:	9b a1       	ldd	r25, Y+35	; 0x23
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1b7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b80:	3f c0       	rjmp	.+126    	; 0x1c00 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1b82:	68 a1       	ldd	r22, Y+32	; 0x20
    1b84:	79 a1       	ldd	r23, Y+33	; 0x21
    1b86:	8a a1       	ldd	r24, Y+34	; 0x22
    1b88:	9b a1       	ldd	r25, Y+35	; 0x23
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	4c f5       	brge	.+82     	; 0x1bec <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9a:	6c a1       	ldd	r22, Y+36	; 0x24
    1b9c:	7d a1       	ldd	r23, Y+37	; 0x25
    1b9e:	8e a1       	ldd	r24, Y+38	; 0x26
    1ba0:	9f a1       	ldd	r25, Y+39	; 0x27
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	40 e2       	ldi	r20, 0x20	; 32
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	9f 8f       	std	Y+31, r25	; 0x1f
    1bc0:	8e 8f       	std	Y+30, r24	; 0x1e
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <LCD_enu_SendChar+0x1b4>
    1bc4:	80 e9       	ldi	r24, 0x90	; 144
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	9d 8f       	std	Y+29, r25	; 0x1d
    1bca:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <LCD_enu_SendChar+0x1a2>
    1bd4:	9d 8f       	std	Y+29, r25	; 0x1d
    1bd6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	9f 8f       	std	Y+31, r25	; 0x1f
    1be0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1be2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1be4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	69 f7       	brne	.-38     	; 0x1bc4 <LCD_enu_SendChar+0x196>
    1bea:	24 c0       	rjmp	.+72     	; 0x1c34 <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bec:	68 a1       	ldd	r22, Y+32	; 0x20
    1bee:	79 a1       	ldd	r23, Y+33	; 0x21
    1bf0:	8a a1       	ldd	r24, Y+34	; 0x22
    1bf2:	9b a1       	ldd	r25, Y+35	; 0x23
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	9f 8f       	std	Y+31, r25	; 0x1f
    1bfe:	8e 8f       	std	Y+30, r24	; 0x1e
    1c00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c04:	9b 8f       	std	Y+27, r25	; 0x1b
    1c06:	8a 8f       	std	Y+26, r24	; 0x1a
    1c08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <LCD_enu_SendChar+0x1de>
    1c10:	9b 8f       	std	Y+27, r25	; 0x1b
    1c12:	8a 8f       	std	Y+26, r24	; 0x1a
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c16:	69 a5       	ldd	r22, Y+41	; 0x29
    1c18:	7a a5       	ldd	r23, Y+42	; 0x2a
    1c1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	88 a7       	std	Y+40, r24	; 0x28
    1c28:	88 a5       	ldd	r24, Y+40	; 0x28
    1c2a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c2c:	89 8d       	ldd	r24, Y+25	; 0x19
    1c2e:	8a 95       	dec	r24
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <LCD_enu_SendChar+0x200>
    1c32:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	62 e0       	ldi	r22, 0x02	; 2
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D7, (Copy_u8_Char >> SHIFT_3BIT) & MASK_BIT);
    1c3e:	89 a9       	ldd	r24, Y+49	; 0x31
    1c40:	86 95       	lsr	r24
    1c42:	86 95       	lsr	r24
    1c44:	86 95       	lsr	r24
    1c46:	98 2f       	mov	r25, r24
    1c48:	91 70       	andi	r25, 0x01	; 1
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	66 e0       	ldi	r22, 0x06	; 6
    1c4e:	49 2f       	mov	r20, r25
    1c50:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D6, (Copy_u8_Char >> SHIFT_2BIT) & MASK_BIT);
    1c54:	89 a9       	ldd	r24, Y+49	; 0x31
    1c56:	86 95       	lsr	r24
    1c58:	86 95       	lsr	r24
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	91 70       	andi	r25, 0x01	; 1
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	65 e0       	ldi	r22, 0x05	; 5
    1c62:	49 2f       	mov	r20, r25
    1c64:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D5, (Copy_u8_Char >> SHIFT_1BIT) & MASK_BIT);
    1c68:	89 a9       	ldd	r24, Y+49	; 0x31
    1c6a:	86 95       	lsr	r24
    1c6c:	98 2f       	mov	r25, r24
    1c6e:	91 70       	andi	r25, 0x01	; 1
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	64 e0       	ldi	r22, 0x04	; 4
    1c74:	49 2f       	mov	r20, r25
    1c76:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT, D4, (Copy_u8_Char >> SHIFT_0BIT) & MASK_BIT);
    1c7a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	91 70       	andi	r25, 0x01	; 1
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	63 e0       	ldi	r22, 0x03	; 3
    1c84:	49 2f       	mov	r20, r25
    1c86:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_HIGH);
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	62 e0       	ldi	r22, 0x02	; 2
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e8       	ldi	r26, 0x80	; 128
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	8d 8b       	std	Y+21, r24	; 0x15
    1c9e:	9e 8b       	std	Y+22, r25	; 0x16
    1ca0:	af 8b       	std	Y+23, r26	; 0x17
    1ca2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    1caa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cac:	2b ea       	ldi	r18, 0xAB	; 171
    1cae:	3a ea       	ldi	r19, 0xAA	; 170
    1cb0:	4a ea       	ldi	r20, 0xAA	; 170
    1cb2:	50 e4       	ldi	r21, 0x40	; 64
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	89 8b       	std	Y+17, r24	; 0x11
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	ab 8b       	std	Y+19, r26	; 0x13
    1cc2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1cc4:	69 89       	ldd	r22, Y+17	; 0x11
    1cc6:	7a 89       	ldd	r23, Y+18	; 0x12
    1cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	1c f4       	brge	.+6      	; 0x1ce2 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	88 8b       	std	Y+16, r24	; 0x10
    1ce0:	91 c0       	rjmp	.+290    	; 0x1e04 <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    1ce2:	69 89       	ldd	r22, Y+17	; 0x11
    1ce4:	7a 89       	ldd	r23, Y+18	; 0x12
    1ce6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	4f e7       	ldi	r20, 0x7F	; 127
    1cf0:	53 e4       	ldi	r21, 0x43	; 67
    1cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf6:	18 16       	cp	r1, r24
    1cf8:	0c f0       	brlt	.+2      	; 0x1cfc <LCD_enu_SendChar+0x2ce>
    1cfa:	7b c0       	rjmp	.+246    	; 0x1df2 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1d00:	8f 89       	ldd	r24, Y+23	; 0x17
    1d02:	98 8d       	ldd	r25, Y+24	; 0x18
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8c 87       	std	Y+12, r24	; 0x0c
    1d16:	9d 87       	std	Y+13, r25	; 0x0d
    1d18:	ae 87       	std	Y+14, r26	; 0x0e
    1d1a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d20:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d22:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	55 e4       	ldi	r21, 0x45	; 69
    1d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	88 87       	std	Y+8, r24	; 0x08
    1d36:	99 87       	std	Y+9, r25	; 0x09
    1d38:	aa 87       	std	Y+10, r26	; 0x0a
    1d3a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d3c:	68 85       	ldd	r22, Y+8	; 0x08
    1d3e:	79 85       	ldd	r23, Y+9	; 0x09
    1d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	40 e8       	ldi	r20, 0x80	; 128
    1d4a:	5f e3       	ldi	r21, 0x3F	; 63
    1d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d50:	88 23       	and	r24, r24
    1d52:	2c f4       	brge	.+10     	; 0x1d5e <LCD_enu_SendChar+0x330>
		__ticks = 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9f 83       	std	Y+7, r25	; 0x07
    1d5a:	8e 83       	std	Y+6, r24	; 0x06
    1d5c:	3f c0       	rjmp	.+126    	; 0x1ddc <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    1d5e:	68 85       	ldd	r22, Y+8	; 0x08
    1d60:	79 85       	ldd	r23, Y+9	; 0x09
    1d62:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d64:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	3f ef       	ldi	r19, 0xFF	; 255
    1d6a:	4f e7       	ldi	r20, 0x7F	; 127
    1d6c:	57 e4       	ldi	r21, 0x47	; 71
    1d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d72:	18 16       	cp	r1, r24
    1d74:	4c f5       	brge	.+82     	; 0x1dc8 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d76:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d78:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	bc 01       	movw	r22, r24
    1d90:	cd 01       	movw	r24, r26
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9f 83       	std	Y+7, r25	; 0x07
    1d9c:	8e 83       	std	Y+6, r24	; 0x06
    1d9e:	0f c0       	rjmp	.+30     	; 0x1dbe <LCD_enu_SendChar+0x390>
    1da0:	80 e9       	ldi	r24, 0x90	; 144
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	9d 83       	std	Y+5, r25	; 0x05
    1da6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <LCD_enu_SendChar+0x37e>
    1db0:	9d 83       	std	Y+5, r25	; 0x05
    1db2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db4:	8e 81       	ldd	r24, Y+6	; 0x06
    1db6:	9f 81       	ldd	r25, Y+7	; 0x07
    1db8:	01 97       	sbiw	r24, 0x01	; 1
    1dba:	9f 83       	std	Y+7, r25	; 0x07
    1dbc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	69 f7       	brne	.-38     	; 0x1da0 <LCD_enu_SendChar+0x372>
    1dc6:	24 c0       	rjmp	.+72     	; 0x1e10 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	68 85       	ldd	r22, Y+8	; 0x08
    1dca:	79 85       	ldd	r23, Y+9	; 0x09
    1dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dce:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9f 83       	std	Y+7, r25	; 0x07
    1dda:	8e 83       	std	Y+6, r24	; 0x06
    1ddc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dde:	9f 81       	ldd	r25, Y+7	; 0x07
    1de0:	9b 83       	std	Y+3, r25	; 0x03
    1de2:	8a 83       	std	Y+2, r24	; 0x02
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	f1 f7       	brne	.-4      	; 0x1de8 <LCD_enu_SendChar+0x3ba>
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	8a 83       	std	Y+2, r24	; 0x02
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1df2:	69 89       	ldd	r22, Y+17	; 0x11
    1df4:	7a 89       	ldd	r23, Y+18	; 0x12
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	88 8b       	std	Y+16, r24	; 0x10
    1e04:	88 89       	ldd	r24, Y+16	; 0x10
    1e06:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	8a 95       	dec	r24
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_enu_SendChar+0x3dc>
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_LOW);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	62 e0       	ldi	r22, 0x02	; 2
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    return STATE_OK;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    1e1c:	e1 96       	adiw	r28, 0x31	; 49
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <LCD_enu_SendString+0x6>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <LCD_enu_SendString+0x8>
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    if (Copy_pu8_String != NULL)
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	e1 f0       	breq	.+56     	; 0x1e82 <LCD_enu_SendString+0x54>
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    1e4a:	19 82       	std	Y+1, r1	; 0x01
    1e4c:	0e c0       	rjmp	.+28     	; 0x1e6a <LCD_enu_SendString+0x3c>
        {
            LCD_enu_SendChar(Copy_pu8_String[i]);
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	fc 01       	movw	r30, r24
    1e5a:	e2 0f       	add	r30, r18
    1e5c:	f3 1f       	adc	r31, r19
    1e5e:	80 81       	ld	r24, Z
    1e60:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enu_SendChar>
ES_t LCD_enu_SendString(u8 *Copy_pu8_String)
{
    u8 Local_u8_errorState = STATE_OK;
    if (Copy_pu8_String != NULL)
    {
        for (u8 i = 0; Copy_pu8_String[i] != '\0'; i++)
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	fc 01       	movw	r30, r24
    1e76:	e2 0f       	add	r30, r18
    1e78:	f3 1f       	adc	r31, r19
    1e7a:	80 81       	ld	r24, Z
    1e7c:	88 23       	and	r24, r24
    1e7e:	39 f7       	brne	.-50     	; 0x1e4e <LCD_enu_SendString+0x20>
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <LCD_enu_SendString+0x56>
            LCD_enu_SendChar(Copy_pu8_String[i]);
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1e82:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <LCD_enu_SendNum>:
ES_t LCD_enu_SendNum(u32 Copy_u32_Num)
{
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	60 97       	sbiw	r28, 0x10	; 16
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	6d 87       	std	Y+13, r22	; 0x0d
    1eae:	7e 87       	std	Y+14, r23	; 0x0e
    1eb0:	8f 87       	std	Y+15, r24	; 0x0f
    1eb2:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10], Local_u8_iterator1 = 0;
    1eb4:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u32_Num == 0)
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	af 85       	ldd	r26, Y+15	; 0x0f
    1ebe:	b8 89       	ldd	r27, Y+16	; 0x10
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	a1 05       	cpc	r26, r1
    1ec4:	b1 05       	cpc	r27, r1
    1ec6:	89 f5       	brne	.+98     	; 0x1f2a <LCD_enu_SendNum+0x96>
        LCD_enu_SendChar('0');
    1ec8:	80 e3       	ldi	r24, 0x30	; 48
    1eca:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enu_SendChar>
    1ece:	4d c0       	rjmp	.+154    	; 0x1f6a <LCD_enu_SendNum+0xd6>
    else
    {
        while (Copy_u32_Num != 0)
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	08 2f       	mov	r16, r24
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
    1ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eda:	af 85       	ldd	r26, Y+15	; 0x0f
    1edc:	b8 89       	ldd	r27, Y+16	; 0x10
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <__udivmodsi4>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	03 96       	adiw	r24, 0x03	; 3
    1ef8:	fc 01       	movw	r30, r24
    1efa:	e0 0f       	add	r30, r16
    1efc:	f1 1f       	adc	r31, r17
    1efe:	20 83       	st	Z, r18
            Copy_u32_Num /= 10;
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	af 85       	ldd	r26, Y+15	; 0x0f
    1f06:	b8 89       	ldd	r27, Y+16	; 0x10
    1f08:	2a e0       	ldi	r18, 0x0A	; 10
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <__udivmodsi4>
    1f18:	da 01       	movw	r26, r20
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	8d 87       	std	Y+13, r24	; 0x0d
    1f1e:	9e 87       	std	Y+14, r25	; 0x0e
    1f20:	af 87       	std	Y+15, r26	; 0x0f
    1f22:	b8 8b       	std	Y+16, r27	; 0x10
            Local_u8_iterator1++;
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	8a 83       	std	Y+2, r24	; 0x02
    s8 Local_u8_iterator2 = 0;
    if (Copy_u32_Num == 0)
        LCD_enu_SendChar('0');
    else
    {
        while (Copy_u32_Num != 0)
    1f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2e:	af 85       	ldd	r26, Y+15	; 0x0f
    1f30:	b8 89       	ldd	r27, Y+16	; 0x10
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	a1 05       	cpc	r26, r1
    1f36:	b1 05       	cpc	r27, r1
    1f38:	59 f6       	brne	.-106    	; 0x1ed0 <LCD_enu_SendNum+0x3c>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	81 50       	subi	r24, 0x01	; 1
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	11 c0       	rjmp	.+34     	; 0x1f64 <LCD_enu_SendNum+0xd0>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	28 2f       	mov	r18, r24
    1f46:	33 27       	eor	r19, r19
    1f48:	27 fd       	sbrc	r18, 7
    1f4a:	30 95       	com	r19
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	03 96       	adiw	r24, 0x03	; 3
    1f50:	fc 01       	movw	r30, r24
    1f52:	e2 0f       	add	r30, r18
    1f54:	f3 1f       	adc	r31, r19
    1f56:	80 81       	ld	r24, Z
    1f58:	80 5d       	subi	r24, 0xD0	; 208
    1f5a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enu_SendChar>
        {
            Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10;
            Copy_u32_Num /= 10;
            Local_u8_iterator1++;
        }
        for (Local_u8_iterator2 = Local_u8_iterator1 - 1; Local_u8_iterator2 >= 0; Local_u8_iterator2--)
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	81 50       	subi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	88 23       	and	r24, r24
    1f68:	64 f7       	brge	.-40     	; 0x1f42 <LCD_enu_SendNum+0xae>
        {
            LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2] + '0');
        }
    }
    return STATE_OK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
}
    1f6c:	60 96       	adiw	r28, 0x10	; 16
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <LCD_enu_SetCursor+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <LCD_enu_SetCursor+0x8>
    1f8a:	0f 92       	push	r0
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	8a 83       	std	Y+2, r24	; 0x02
    1f92:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Location < MAX_NUM_OF_LOCATIONS)
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	88 32       	cpi	r24, 0x28	; 40
    1f9c:	d8 f4       	brcc	.+54     	; 0x1fd4 <LCD_enu_SetCursor+0x52>
    {
        switch (Copy_u8_lineNum)
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	3d 83       	std	Y+5, r19	; 0x05
    1fa6:	2c 83       	std	Y+4, r18	; 0x04
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	31 f0       	breq	.+12     	; 0x1fbc <LCD_enu_SetCursor+0x3a>
    1fb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb4:	21 30       	cpi	r18, 0x01	; 1
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	31 f0       	breq	.+12     	; 0x1fc6 <LCD_enu_SetCursor+0x44>
    1fba:	0a c0       	rjmp	.+20     	; 0x1fd0 <LCD_enu_SetCursor+0x4e>
        {
        case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    1fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbe:	80 58       	subi	r24, 0x80	; 128
    1fc0:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    1fc4:	08 c0       	rjmp	.+16     	; 0x1fd6 <LCD_enu_SetCursor+0x54>
        case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	80 54       	subi	r24, 0x40	; 64
    1fca:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    1fce:	03 c0       	rjmp	.+6      	; 0x1fd6 <LCD_enu_SetCursor+0x54>
        default:Local_u8_errorState = STATE_NOT_OK;break;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <LCD_enu_SetCursor+0x54>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1fd4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <LCD_enu_Init>:
ES_t LCD_enu_Init(void)
{
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	cc 54       	subi	r28, 0x4C	; 76
    1ff6:	d0 40       	sbci	r29, 0x00	; 0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT, LCD_U8_RS_PIN, DIO_U8_OUTPUT);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT, LCD_U8_RW_PIN, DIO_U8_OUTPUT);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT, LCD_U8_E_PIN, DIO_U8_OUTPUT);
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D7, DIO_U8_OUTPUT);
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	66 e0       	ldi	r22, 0x06	; 6
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D6, DIO_U8_OUTPUT);
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	65 e0       	ldi	r22, 0x05	; 5
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D5, DIO_U8_OUTPUT);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	64 e0       	ldi	r22, 0x04	; 4
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT, D4, DIO_U8_OUTPUT);
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	63 e0       	ldi	r22, 0x03	; 3
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    2048:	fe 01       	movw	r30, r28
    204a:	e7 5b       	subi	r30, 0xB7	; 183
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	ac e0       	ldi	r26, 0x0C	; 12
    2054:	b2 e4       	ldi	r27, 0x42	; 66
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	8e 01       	movw	r16, r28
    2060:	0b 5b       	subi	r16, 0xBB	; 187
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	fe 01       	movw	r30, r28
    2066:	e7 5b       	subi	r30, 0xB7	; 183
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	55 e4       	ldi	r21, 0x45	; 69
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208c:	fe 01       	movw	r30, r28
    208e:	eb 5b       	subi	r30, 0xBB	; 187
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	44 f4       	brge	.+16     	; 0x20ba <LCD_enu_Init+0xd2>
		__ticks = 1;
    20aa:	fe 01       	movw	r30, r28
    20ac:	ed 5b       	subi	r30, 0xBD	; 189
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	64 c0       	rjmp	.+200    	; 0x2182 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    20ba:	fe 01       	movw	r30, r28
    20bc:	eb 5b       	subi	r30, 0xBB	; 187
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	0c f0       	brlt	.+2      	; 0x20da <LCD_enu_Init+0xf2>
    20d8:	43 c0       	rjmp	.+134    	; 0x2160 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	fe 01       	movw	r30, r28
    20dc:	e7 5b       	subi	r30, 0xB7	; 183
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 01       	movw	r16, r28
    20fa:	0d 5b       	subi	r16, 0xBD	; 189
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	1f c0       	rjmp	.+62     	; 0x2150 <LCD_enu_Init+0x168>
    2112:	fe 01       	movw	r30, r28
    2114:	ef 5b       	subi	r30, 0xBF	; 191
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 e9       	ldi	r24, 0x90	; 144
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2120:	fe 01       	movw	r30, r28
    2122:	ef 5b       	subi	r30, 0xBF	; 191
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <LCD_enu_Init+0x142>
    212e:	fe 01       	movw	r30, r28
    2130:	ef 5b       	subi	r30, 0xBF	; 191
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	de 01       	movw	r26, r28
    213a:	ad 5b       	subi	r26, 0xBD	; 189
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	ed 5b       	subi	r30, 0xBD	; 189
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	11 96       	adiw	r26, 0x01	; 1
    214c:	9c 93       	st	X, r25
    214e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	fe 01       	movw	r30, r28
    2152:	ed 5b       	subi	r30, 0xBD	; 189
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	d1 f6       	brne	.-76     	; 0x2112 <LCD_enu_Init+0x12a>
    215e:	24 c0       	rjmp	.+72     	; 0x21a8 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	8e 01       	movw	r16, r28
    2162:	0d 5b       	subi	r16, 0xBD	; 189
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	fe 01       	movw	r30, r28
    2168:	eb 5b       	subi	r30, 0xBB	; 187
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	fe 01       	movw	r30, r28
    2184:	ed 5b       	subi	r30, 0xBD	; 189
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	fe 01       	movw	r30, r28
    218e:	ff 96       	adiw	r30, 0x3f	; 63
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
    2194:	fe 01       	movw	r30, r28
    2196:	ff 96       	adiw	r30, 0x3f	; 63
    2198:	80 81       	ld	r24, Z
    219a:	91 81       	ldd	r25, Z+1	; 0x01
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_enu_Init+0x1b4>
    21a0:	fe 01       	movw	r30, r28
    21a2:	ff 96       	adiw	r30, 0x3f	; 63
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    return STATE_OK;
#elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    21a8:	83 e3       	ldi	r24, 0x33	; 51
    21aa:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    21ae:	82 e3       	ldi	r24, 0x32	; 50
    21b0:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    21b4:	88 e2       	ldi	r24, 0x28	; 40
    21b6:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e2       	ldi	r26, 0x20	; 32
    21c0:	b2 e4       	ldi	r27, 0x42	; 66
    21c2:	8b af       	std	Y+59, r24	; 0x3b
    21c4:	9c af       	std	Y+60, r25	; 0x3c
    21c6:	ad af       	std	Y+61, r26	; 0x3d
    21c8:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21ca:	6b ad       	ldd	r22, Y+59	; 0x3b
    21cc:	7c ad       	ldd	r23, Y+60	; 0x3c
    21ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d2:	2b ea       	ldi	r18, 0xAB	; 171
    21d4:	3a ea       	ldi	r19, 0xAA	; 170
    21d6:	4a ea       	ldi	r20, 0xAA	; 170
    21d8:	50 e4       	ldi	r21, 0x40	; 64
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8f ab       	std	Y+55, r24	; 0x37
    21e4:	98 af       	std	Y+56, r25	; 0x38
    21e6:	a9 af       	std	Y+57, r26	; 0x39
    21e8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    21ea:	6f a9       	ldd	r22, Y+55	; 0x37
    21ec:	78 ad       	ldd	r23, Y+56	; 0x38
    21ee:	89 ad       	ldd	r24, Y+57	; 0x39
    21f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	1c f4       	brge	.+6      	; 0x2208 <LCD_enu_Init+0x220>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	8e ab       	std	Y+54, r24	; 0x36
    2206:	91 c0       	rjmp	.+290    	; 0x232a <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    2208:	6f a9       	ldd	r22, Y+55	; 0x37
    220a:	78 ad       	ldd	r23, Y+56	; 0x38
    220c:	89 ad       	ldd	r24, Y+57	; 0x39
    220e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	53 e4       	ldi	r21, 0x43	; 67
    2218:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	0c f0       	brlt	.+2      	; 0x2222 <LCD_enu_Init+0x23a>
    2220:	7b c0       	rjmp	.+246    	; 0x2318 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    2222:	6b ad       	ldd	r22, Y+59	; 0x3b
    2224:	7c ad       	ldd	r23, Y+60	; 0x3c
    2226:	8d ad       	ldd	r24, Y+61	; 0x3d
    2228:	9e ad       	ldd	r25, Y+62	; 0x3e
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	4a e7       	ldi	r20, 0x7A	; 122
    2230:	54 e4       	ldi	r21, 0x44	; 68
    2232:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	8a ab       	std	Y+50, r24	; 0x32
    223c:	9b ab       	std	Y+51, r25	; 0x33
    223e:	ac ab       	std	Y+52, r26	; 0x34
    2240:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2242:	6a a9       	ldd	r22, Y+50	; 0x32
    2244:	7b a9       	ldd	r23, Y+51	; 0x33
    2246:	8c a9       	ldd	r24, Y+52	; 0x34
    2248:	9d a9       	ldd	r25, Y+53	; 0x35
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	4a e7       	ldi	r20, 0x7A	; 122
    2250:	55 e4       	ldi	r21, 0x45	; 69
    2252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	8e a7       	std	Y+46, r24	; 0x2e
    225c:	9f a7       	std	Y+47, r25	; 0x2f
    225e:	a8 ab       	std	Y+48, r26	; 0x30
    2260:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2262:	6e a5       	ldd	r22, Y+46	; 0x2e
    2264:	7f a5       	ldd	r23, Y+47	; 0x2f
    2266:	88 a9       	ldd	r24, Y+48	; 0x30
    2268:	99 a9       	ldd	r25, Y+49	; 0x31
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e8       	ldi	r20, 0x80	; 128
    2270:	5f e3       	ldi	r21, 0x3F	; 63
    2272:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2276:	88 23       	and	r24, r24
    2278:	2c f4       	brge	.+10     	; 0x2284 <LCD_enu_Init+0x29c>
		__ticks = 1;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9d a7       	std	Y+45, r25	; 0x2d
    2280:	8c a7       	std	Y+44, r24	; 0x2c
    2282:	3f c0       	rjmp	.+126    	; 0x2302 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    2284:	6e a5       	ldd	r22, Y+46	; 0x2e
    2286:	7f a5       	ldd	r23, Y+47	; 0x2f
    2288:	88 a9       	ldd	r24, Y+48	; 0x30
    228a:	99 a9       	ldd	r25, Y+49	; 0x31
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	3f ef       	ldi	r19, 0xFF	; 255
    2290:	4f e7       	ldi	r20, 0x7F	; 127
    2292:	57 e4       	ldi	r21, 0x47	; 71
    2294:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2298:	18 16       	cp	r1, r24
    229a:	4c f5       	brge	.+82     	; 0x22ee <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229c:	6a a9       	ldd	r22, Y+50	; 0x32
    229e:	7b a9       	ldd	r23, Y+51	; 0x33
    22a0:	8c a9       	ldd	r24, Y+52	; 0x34
    22a2:	9d a9       	ldd	r25, Y+53	; 0x35
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e2       	ldi	r20, 0x20	; 32
    22aa:	51 e4       	ldi	r21, 0x41	; 65
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9d a7       	std	Y+45, r25	; 0x2d
    22c2:	8c a7       	std	Y+44, r24	; 0x2c
    22c4:	0f c0       	rjmp	.+30     	; 0x22e4 <LCD_enu_Init+0x2fc>
    22c6:	80 e9       	ldi	r24, 0x90	; 144
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	9b a7       	std	Y+43, r25	; 0x2b
    22cc:	8a a7       	std	Y+42, r24	; 0x2a
    22ce:	8a a5       	ldd	r24, Y+42	; 0x2a
    22d0:	9b a5       	ldd	r25, Y+43	; 0x2b
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_enu_Init+0x2ea>
    22d6:	9b a7       	std	Y+43, r25	; 0x2b
    22d8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22da:	8c a5       	ldd	r24, Y+44	; 0x2c
    22dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	9d a7       	std	Y+45, r25	; 0x2d
    22e2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    22e6:	9d a5       	ldd	r25, Y+45	; 0x2d
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	69 f7       	brne	.-38     	; 0x22c6 <LCD_enu_Init+0x2de>
    22ec:	24 c0       	rjmp	.+72     	; 0x2336 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ee:	6e a5       	ldd	r22, Y+46	; 0x2e
    22f0:	7f a5       	ldd	r23, Y+47	; 0x2f
    22f2:	88 a9       	ldd	r24, Y+48	; 0x30
    22f4:	99 a9       	ldd	r25, Y+49	; 0x31
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9d a7       	std	Y+45, r25	; 0x2d
    2300:	8c a7       	std	Y+44, r24	; 0x2c
    2302:	8c a5       	ldd	r24, Y+44	; 0x2c
    2304:	9d a5       	ldd	r25, Y+45	; 0x2d
    2306:	99 a7       	std	Y+41, r25	; 0x29
    2308:	88 a7       	std	Y+40, r24	; 0x28
    230a:	88 a5       	ldd	r24, Y+40	; 0x28
    230c:	99 a5       	ldd	r25, Y+41	; 0x29
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <LCD_enu_Init+0x326>
    2312:	99 a7       	std	Y+41, r25	; 0x29
    2314:	88 a7       	std	Y+40, r24	; 0x28
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2318:	6f a9       	ldd	r22, Y+55	; 0x37
    231a:	78 ad       	ldd	r23, Y+56	; 0x38
    231c:	89 ad       	ldd	r24, Y+57	; 0x39
    231e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8e ab       	std	Y+54, r24	; 0x36
    232a:	8e a9       	ldd	r24, Y+54	; 0x36
    232c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    232e:	8f a1       	ldd	r24, Y+39	; 0x27
    2330:	8a 95       	dec	r24
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_enu_Init+0x348>
    2334:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(LCD_U8_CURSOR);
    2336:	8f e0       	ldi	r24, 0x0F	; 15
    2338:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e2       	ldi	r26, 0x20	; 32
    2342:	b2 e4       	ldi	r27, 0x42	; 66
    2344:	8b a3       	std	Y+35, r24	; 0x23
    2346:	9c a3       	std	Y+36, r25	; 0x24
    2348:	ad a3       	std	Y+37, r26	; 0x25
    234a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    234c:	6b a1       	ldd	r22, Y+35	; 0x23
    234e:	7c a1       	ldd	r23, Y+36	; 0x24
    2350:	8d a1       	ldd	r24, Y+37	; 0x25
    2352:	9e a1       	ldd	r25, Y+38	; 0x26
    2354:	2b ea       	ldi	r18, 0xAB	; 171
    2356:	3a ea       	ldi	r19, 0xAA	; 170
    2358:	4a ea       	ldi	r20, 0xAA	; 170
    235a:	50 e4       	ldi	r21, 0x40	; 64
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	8f 8f       	std	Y+31, r24	; 0x1f
    2366:	98 a3       	std	Y+32, r25	; 0x20
    2368:	a9 a3       	std	Y+33, r26	; 0x21
    236a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    236c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    236e:	78 a1       	ldd	r23, Y+32	; 0x20
    2370:	89 a1       	ldd	r24, Y+33	; 0x21
    2372:	9a a1       	ldd	r25, Y+34	; 0x22
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	1c f4       	brge	.+6      	; 0x238a <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	8e 8f       	std	Y+30, r24	; 0x1e
    2388:	91 c0       	rjmp	.+290    	; 0x24ac <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    238a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    238c:	78 a1       	ldd	r23, Y+32	; 0x20
    238e:	89 a1       	ldd	r24, Y+33	; 0x21
    2390:	9a a1       	ldd	r25, Y+34	; 0x22
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4f e7       	ldi	r20, 0x7F	; 127
    2398:	53 e4       	ldi	r21, 0x43	; 67
    239a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239e:	18 16       	cp	r1, r24
    23a0:	0c f0       	brlt	.+2      	; 0x23a4 <LCD_enu_Init+0x3bc>
    23a2:	7b c0       	rjmp	.+246    	; 0x249a <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    23a4:	6b a1       	ldd	r22, Y+35	; 0x23
    23a6:	7c a1       	ldd	r23, Y+36	; 0x24
    23a8:	8d a1       	ldd	r24, Y+37	; 0x25
    23aa:	9e a1       	ldd	r25, Y+38	; 0x26
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a e7       	ldi	r20, 0x7A	; 122
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8a 8f       	std	Y+26, r24	; 0x1a
    23be:	9b 8f       	std	Y+27, r25	; 0x1b
    23c0:	ac 8f       	std	Y+28, r26	; 0x1c
    23c2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	4a e7       	ldi	r20, 0x7A	; 122
    23d2:	55 e4       	ldi	r21, 0x45	; 69
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8e 8b       	std	Y+22, r24	; 0x16
    23de:	9f 8b       	std	Y+23, r25	; 0x17
    23e0:	a8 8f       	std	Y+24, r26	; 0x18
    23e2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23e4:	6e 89       	ldd	r22, Y+22	; 0x16
    23e6:	7f 89       	ldd	r23, Y+23	; 0x17
    23e8:	88 8d       	ldd	r24, Y+24	; 0x18
    23ea:	99 8d       	ldd	r25, Y+25	; 0x19
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	2c f4       	brge	.+10     	; 0x2406 <LCD_enu_Init+0x41e>
		__ticks = 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	9d 8b       	std	Y+21, r25	; 0x15
    2402:	8c 8b       	std	Y+20, r24	; 0x14
    2404:	3f c0       	rjmp	.+126    	; 0x2484 <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    2406:	6e 89       	ldd	r22, Y+22	; 0x16
    2408:	7f 89       	ldd	r23, Y+23	; 0x17
    240a:	88 8d       	ldd	r24, Y+24	; 0x18
    240c:	99 8d       	ldd	r25, Y+25	; 0x19
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	4c f5       	brge	.+82     	; 0x2470 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2420:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2422:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2424:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e2       	ldi	r20, 0x20	; 32
    242c:	51 e4       	ldi	r21, 0x41	; 65
    242e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9d 8b       	std	Y+21, r25	; 0x15
    2444:	8c 8b       	std	Y+20, r24	; 0x14
    2446:	0f c0       	rjmp	.+30     	; 0x2466 <LCD_enu_Init+0x47e>
    2448:	80 e9       	ldi	r24, 0x90	; 144
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	9b 8b       	std	Y+19, r25	; 0x13
    244e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2450:	8a 89       	ldd	r24, Y+18	; 0x12
    2452:	9b 89       	ldd	r25, Y+19	; 0x13
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_enu_Init+0x46c>
    2458:	9b 8b       	std	Y+19, r25	; 0x13
    245a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	8c 89       	ldd	r24, Y+20	; 0x14
    245e:	9d 89       	ldd	r25, Y+21	; 0x15
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9d 8b       	std	Y+21, r25	; 0x15
    2464:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	8c 89       	ldd	r24, Y+20	; 0x14
    2468:	9d 89       	ldd	r25, Y+21	; 0x15
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	69 f7       	brne	.-38     	; 0x2448 <LCD_enu_Init+0x460>
    246e:	24 c0       	rjmp	.+72     	; 0x24b8 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2470:	6e 89       	ldd	r22, Y+22	; 0x16
    2472:	7f 89       	ldd	r23, Y+23	; 0x17
    2474:	88 8d       	ldd	r24, Y+24	; 0x18
    2476:	99 8d       	ldd	r25, Y+25	; 0x19
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9d 8b       	std	Y+21, r25	; 0x15
    2482:	8c 8b       	std	Y+20, r24	; 0x14
    2484:	8c 89       	ldd	r24, Y+20	; 0x14
    2486:	9d 89       	ldd	r25, Y+21	; 0x15
    2488:	99 8b       	std	Y+17, r25	; 0x11
    248a:	88 8b       	std	Y+16, r24	; 0x10
    248c:	88 89       	ldd	r24, Y+16	; 0x10
    248e:	99 89       	ldd	r25, Y+17	; 0x11
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	f1 f7       	brne	.-4      	; 0x2490 <LCD_enu_Init+0x4a8>
    2494:	99 8b       	std	Y+17, r25	; 0x11
    2496:	88 8b       	std	Y+16, r24	; 0x10
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    249a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    249c:	78 a1       	ldd	r23, Y+32	; 0x20
    249e:	89 a1       	ldd	r24, Y+33	; 0x21
    24a0:	9a a1       	ldd	r25, Y+34	; 0x22
    24a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8e 8f       	std	Y+30, r24	; 0x1e
    24ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ae:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24b2:	8a 95       	dec	r24
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_enu_Init+0x4ca>
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    24be:	80 e0       	ldi	r24, 0x00	; 0
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	a0 e0       	ldi	r26, 0x00	; 0
    24c4:	b0 e4       	ldi	r27, 0x40	; 64
    24c6:	8b 87       	std	Y+11, r24	; 0x0b
    24c8:	9c 87       	std	Y+12, r25	; 0x0c
    24ca:	ad 87       	std	Y+13, r26	; 0x0d
    24cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	4a e7       	ldi	r20, 0x7A	; 122
    24dc:	55 e4       	ldi	r21, 0x45	; 69
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	8f 83       	std	Y+7, r24	; 0x07
    24e8:	98 87       	std	Y+8, r25	; 0x08
    24ea:	a9 87       	std	Y+9, r26	; 0x09
    24ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2502:	88 23       	and	r24, r24
    2504:	2c f4       	brge	.+10     	; 0x2510 <LCD_enu_Init+0x528>
		__ticks = 1;
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	9e 83       	std	Y+6, r25	; 0x06
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	3f c0       	rjmp	.+126    	; 0x258e <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	4c f5       	brge	.+82     	; 0x257a <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	6b 85       	ldd	r22, Y+11	; 0x0b
    252a:	7c 85       	ldd	r23, Y+12	; 0x0c
    252c:	8d 85       	ldd	r24, Y+13	; 0x0d
    252e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
    2550:	0f c0       	rjmp	.+30     	; 0x2570 <LCD_enu_Init+0x588>
    2552:	80 e9       	ldi	r24, 0x90	; 144
    2554:	91 e0       	ldi	r25, 0x01	; 1
    2556:	9c 83       	std	Y+4, r25	; 0x04
    2558:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <LCD_enu_Init+0x576>
    2562:	9c 83       	std	Y+4, r25	; 0x04
    2564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	9e 81       	ldd	r25, Y+6	; 0x06
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	9e 83       	std	Y+6, r25	; 0x06
    256e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2570:	8d 81       	ldd	r24, Y+5	; 0x05
    2572:	9e 81       	ldd	r25, Y+6	; 0x06
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	69 f7       	brne	.-38     	; 0x2552 <LCD_enu_Init+0x56a>
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	9e 83       	std	Y+6, r25	; 0x06
    258c:	8d 83       	std	Y+5, r24	; 0x05
    258e:	8d 81       	ldd	r24, Y+5	; 0x05
    2590:	9e 81       	ldd	r25, Y+6	; 0x06
    2592:	9a 83       	std	Y+2, r25	; 0x02
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <LCD_enu_Init+0x5b2>
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    25a2:	86 e0       	ldi	r24, 0x06	; 6
    25a4:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    return STATE_OK;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
    25aa:	c4 5b       	subi	r28, 0xB4	; 180
    25ac:	df 4f       	sbci	r29, 0xFF	; 255
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	08 95       	ret

000025c2 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void)
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	cd b7       	in	r28, 0x3d	; 61
    25c8:	de b7       	in	r29, 0x3e	; 62
    25ca:	2e 97       	sbiw	r28, 0x0e	; 14
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	de bf       	out	0x3e, r29	; 62
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	cd bf       	out	0x3d, r28	; 61
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	a0 e0       	ldi	r26, 0x00	; 0
    25e2:	b0 e4       	ldi	r27, 0x40	; 64
    25e4:	8b 87       	std	Y+11, r24	; 0x0b
    25e6:	9c 87       	std	Y+12, r25	; 0x0c
    25e8:	ad 87       	std	Y+13, r26	; 0x0d
    25ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a e7       	ldi	r20, 0x7A	; 122
    25fa:	55 e4       	ldi	r21, 0x45	; 69
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8f 83       	std	Y+7, r24	; 0x07
    2606:	98 87       	std	Y+8, r25	; 0x08
    2608:	a9 87       	std	Y+9, r26	; 0x09
    260a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <LCD_enu_Clear+0x6c>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	0f c0       	rjmp	.+30     	; 0x268e <LCD_enu_Clear+0xcc>
    2670:	80 e9       	ldi	r24, 0x90	; 144
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_enu_Clear+0xba>
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <LCD_enu_Clear+0xae>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <LCD_enu_Clear+0xf6>
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    return STATE_OK;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
}
    26c2:	2e 96       	adiw	r28, 0x0e	; 14
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <LCD_enu_sendCustomChar>:
ES_t LCD_enu_sendCustomChar(u8 Copy_u8_charNum, u8 *Copy_pu8_charArray, u8 Copy_u8_lineNum, u8 Copy_u8_Location)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	27 97       	sbiw	r28, 0x07	; 7
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	8b 83       	std	Y+3, r24	; 0x03
    26ea:	7d 83       	std	Y+5, r23	; 0x05
    26ec:	6c 83       	std	Y+4, r22	; 0x04
    26ee:	4e 83       	std	Y+6, r20	; 0x06
    26f0:	2f 83       	std	Y+7, r18	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	8a 83       	std	Y+2, r24	; 0x02
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	81 f1       	breq	.+96     	; 0x275e <LCD_enu_sendCustomChar+0x8a>
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	88 30       	cpi	r24, 0x08	; 8
    2702:	68 f5       	brcc	.+90     	; 0x275e <LCD_enu_sendCustomChar+0x8a>
    2704:	8e 81       	ldd	r24, Y+6	; 0x06
    2706:	82 30       	cpi	r24, 0x02	; 2
    2708:	50 f5       	brcc	.+84     	; 0x275e <LCD_enu_sendCustomChar+0x8a>
    270a:	8f 81       	ldd	r24, Y+7	; 0x07
    270c:	88 32       	cpi	r24, 0x28	; 40
    270e:	38 f5       	brcc	.+78     	; 0x275e <LCD_enu_sendCustomChar+0x8a>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	88 2f       	mov	r24, r24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	08 96       	adiw	r24, 0x08	; 8
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	0e 94 17 0b 	call	0x162e	; 0x162e <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2728:	19 82       	std	Y+1, r1	; 0x01
    272a:	0e c0       	rjmp	.+28     	; 0x2748 <LCD_enu_sendCustomChar+0x74>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	8c 81       	ldd	r24, Y+4	; 0x04
    2734:	9d 81       	ldd	r25, Y+5	; 0x05
    2736:	fc 01       	movw	r30, r24
    2738:	e2 0f       	add	r30, r18
    273a:	f3 1f       	adc	r31, r19
    273c:	80 81       	ld	r24, Z
    273e:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enu_SendChar>
{
    u8 Local_u8_errorState = STATE_OK;
    if ((Copy_pu8_charArray != NULL) && (Copy_u8_charNum < MAX_CHARACTERS) && (Copy_u8_lineNum < NUM_OF_LINES) && (Copy_u8_Location < MAX_NUM_OF_LOCATIONS))
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_charNum * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	8f 5f       	subi	r24, 0xFF	; 255
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	88 30       	cpi	r24, 0x08	; 8
    274c:	78 f3       	brcs	.-34     	; 0x272c <LCD_enu_sendCustomChar+0x58>
        {
            LCD_enu_SendChar(Copy_pu8_charArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(Copy_u8_lineNum, Copy_u8_Location);
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_enu_SetCursor>
        LCD_enu_SendChar(Copy_u8_charNum);
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_enu_SendChar>
    275c:	01 c0       	rjmp	.+2      	; 0x2760 <LCD_enu_sendCustomChar+0x8c>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    275e:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2762:	27 96       	adiw	r28, 0x07	; 7
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	0f 92       	push	r0
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    277e:	19 82       	std	Y+1, r1	; 0x01
    2780:	33 c0       	rjmp	.+102    	; 0x27e8 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	fc 01       	movw	r30, r24
    278a:	ea 51       	subi	r30, 0x1A	; 26
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	90 81       	ld	r25, Z
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	69 2f       	mov	r22, r25
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	fc 01       	movw	r30, r24
    27a2:	ea 51       	subi	r30, 0x1A	; 26
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	90 81       	ld	r25, Z
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	69 2f       	mov	r22, r25
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	88 2f       	mov	r24, r24
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	fc 01       	movw	r30, r24
    27ba:	e6 51       	subi	r30, 0x16	; 22
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	90 81       	ld	r25, Z
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	69 2f       	mov	r22, r25
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	fc 01       	movw	r30, r24
    27d2:	e6 51       	subi	r30, 0x16	; 22
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	90 81       	ld	r25, Z
    27d8:	83 e0       	ldi	r24, 0x03	; 3
    27da:	69 2f       	mov	r22, r25
    27dc:	41 e0       	ldi	r20, 0x01	; 1
    27de:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	84 30       	cpi	r24, 0x04	; 4
    27ec:	50 f2       	brcs	.-108    	; 0x2782 <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
}
    27f0:	0f 90       	pop	r0
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	65 97       	sbiw	r28, 0x15	; 21
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	9d 8b       	std	Y+21, r25	; 0x15
    280e:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	8a 8b       	std	Y+18, r24	; 0x12
    2814:	1b 8a       	std	Y+19, r1	; 0x13
    2816:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    2818:	8c 89       	ldd	r24, Y+20	; 0x14
    281a:	9d 89       	ldd	r25, Y+21	; 0x15
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	09 f4       	brne	.+2      	; 0x2822 <Keypad_enu_getKey+0x2a>
    2820:	f0 c0       	rjmp	.+480    	; 0x2a02 <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    2822:	ec 89       	ldd	r30, Y+20	; 0x14
    2824:	fd 89       	ldd	r31, Y+21	; 0x15
    2826:	8f ef       	ldi	r24, 0xFF	; 255
    2828:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    282a:	19 8a       	std	Y+17, r1	; 0x11
    282c:	e5 c0       	rjmp	.+458    	; 0x29f8 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    282e:	89 89       	ldd	r24, Y+17	; 0x11
    2830:	88 2f       	mov	r24, r24
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	fc 01       	movw	r30, r24
    2836:	ea 51       	subi	r30, 0x1A	; 26
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	90 81       	ld	r25, Z
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	69 2f       	mov	r22, r25
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2846:	18 8a       	std	Y+16, r1	; 0x10
    2848:	c1 c0       	rjmp	.+386    	; 0x29cc <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    284a:	88 89       	ldd	r24, Y+16	; 0x10
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	fc 01       	movw	r30, r24
    2852:	e6 51       	subi	r30, 0x16	; 22
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	90 81       	ld	r25, Z
    2858:	9e 01       	movw	r18, r28
    285a:	2d 5e       	subi	r18, 0xED	; 237
    285c:	3f 4f       	sbci	r19, 0xFF	; 255
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	69 2f       	mov	r22, r25
    2862:	a9 01       	movw	r20, r18
    2864:	0e 94 1b 23 	call	0x4636	; 0x4636 <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	88 23       	and	r24, r24
    286c:	09 f0       	breq	.+2      	; 0x2870 <Keypad_enu_getKey+0x78>
    286e:	ab c0       	rjmp	.+342    	; 0x29c6 <Keypad_enu_getKey+0x1ce>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	a0 ea       	ldi	r26, 0xA0	; 160
    2876:	b1 e4       	ldi	r27, 0x41	; 65
    2878:	8b 87       	std	Y+11, r24	; 0x0b
    287a:	9c 87       	std	Y+12, r25	; 0x0c
    287c:	ad 87       	std	Y+13, r26	; 0x0d
    287e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2880:	6b 85       	ldd	r22, Y+11	; 0x0b
    2882:	7c 85       	ldd	r23, Y+12	; 0x0c
    2884:	8d 85       	ldd	r24, Y+13	; 0x0d
    2886:	9e 85       	ldd	r25, Y+14	; 0x0e
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a e7       	ldi	r20, 0x7A	; 122
    288e:	55 e4       	ldi	r21, 0x45	; 69
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	8f 83       	std	Y+7, r24	; 0x07
    289a:	98 87       	std	Y+8, r25	; 0x08
    289c:	a9 87       	std	Y+9, r26	; 0x09
    289e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a0:	6f 81       	ldd	r22, Y+7	; 0x07
    28a2:	78 85       	ldd	r23, Y+8	; 0x08
    28a4:	89 85       	ldd	r24, Y+9	; 0x09
    28a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <Keypad_enu_getKey+0xca>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9e 83       	std	Y+6, r25	; 0x06
    28be:	8d 83       	std	Y+5, r24	; 0x05
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    28c2:	6f 81       	ldd	r22, Y+7	; 0x07
    28c4:	78 85       	ldd	r23, Y+8	; 0x08
    28c6:	89 85       	ldd	r24, Y+9	; 0x09
    28c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	4c f5       	brge	.+82     	; 0x292c <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	6b 85       	ldd	r22, Y+11	; 0x0b
    28dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28de:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9e 83       	std	Y+6, r25	; 0x06
    2900:	8d 83       	std	Y+5, r24	; 0x05
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <Keypad_enu_getKey+0x12a>
    2904:	80 e9       	ldi	r24, 0x90	; 144
    2906:	91 e0       	ldi	r25, 0x01	; 1
    2908:	9c 83       	std	Y+4, r25	; 0x04
    290a:	8b 83       	std	Y+3, r24	; 0x03
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <Keypad_enu_getKey+0x118>
    2914:	9c 83       	std	Y+4, r25	; 0x04
    2916:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <Keypad_enu_getKey+0x10c>
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9e 83       	std	Y+6, r25	; 0x06
    293e:	8d 83       	std	Y+5, r24	; 0x05
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <Keypad_enu_getKey+0x154>
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2954:	88 89       	ldd	r24, Y+16	; 0x10
    2956:	88 2f       	mov	r24, r24
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	fc 01       	movw	r30, r24
    295c:	e6 51       	subi	r30, 0x16	; 22
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	90 81       	ld	r25, Z
    2962:	9e 01       	movw	r18, r28
    2964:	2d 5e       	subi	r18, 0xED	; 237
    2966:	3f 4f       	sbci	r19, 0xFF	; 255
    2968:	83 e0       	ldi	r24, 0x03	; 3
    296a:	69 2f       	mov	r22, r25
    296c:	a9 01       	movw	r20, r18
    296e:	0e 94 1b 23 	call	0x4636	; 0x4636 <DIO_enu_GetPinValue>
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2974:	88 89       	ldd	r24, Y+16	; 0x10
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	fc 01       	movw	r30, r24
    297c:	e6 51       	subi	r30, 0x16	; 22
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	90 81       	ld	r25, Z
    2982:	9e 01       	movw	r18, r28
    2984:	2d 5e       	subi	r18, 0xED	; 237
    2986:	3f 4f       	sbci	r19, 0xFF	; 255
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	69 2f       	mov	r22, r25
    298c:	a9 01       	movw	r20, r18
    298e:	0e 94 1b 23 	call	0x4636	; 0x4636 <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2992:	8b 89       	ldd	r24, Y+19	; 0x13
    2994:	88 23       	and	r24, r24
    2996:	71 f3       	breq	.-36     	; 0x2974 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2998:	89 89       	ldd	r24, Y+17	; 0x11
    299a:	48 2f       	mov	r20, r24
    299c:	50 e0       	ldi	r21, 0x00	; 0
    299e:	88 89       	ldd	r24, Y+16	; 0x10
    29a0:	28 2f       	mov	r18, r24
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	ca 01       	movw	r24, r20
    29a6:	88 0f       	add	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	82 0f       	add	r24, r18
    29b0:	93 1f       	adc	r25, r19
    29b2:	fc 01       	movw	r30, r24
    29b4:	ea 52       	subi	r30, 0x2A	; 42
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	80 81       	ld	r24, Z
    29ba:	ec 89       	ldd	r30, Y+20	; 0x14
    29bc:	fd 89       	ldd	r31, Y+21	; 0x15
    29be:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	8f 87       	std	Y+15, r24	; 0x0f
    29c4:	07 c0       	rjmp	.+14     	; 0x29d4 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    29c6:	88 89       	ldd	r24, Y+16	; 0x10
    29c8:	8f 5f       	subi	r24, 0xFF	; 255
    29ca:	88 8b       	std	Y+16, r24	; 0x10
    29cc:	88 89       	ldd	r24, Y+16	; 0x10
    29ce:	84 30       	cpi	r24, 0x04	; 4
    29d0:	08 f4       	brcc	.+2      	; 0x29d4 <Keypad_enu_getKey+0x1dc>
    29d2:	3b cf       	rjmp	.-394    	; 0x284a <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    29d4:	89 89       	ldd	r24, Y+17	; 0x11
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	fc 01       	movw	r30, r24
    29dc:	ea 51       	subi	r30, 0x1A	; 26
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	90 81       	ld	r25, Z
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	69 2f       	mov	r22, r25
    29e6:	41 e0       	ldi	r20, 0x01	; 1
    29e8:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    29ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ee:	88 23       	and	r24, r24
    29f0:	49 f4       	brne	.+18     	; 0x2a04 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    29f2:	89 89       	ldd	r24, Y+17	; 0x11
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	89 8b       	std	Y+17, r24	; 0x11
    29f8:	89 89       	ldd	r24, Y+17	; 0x11
    29fa:	84 30       	cpi	r24, 0x04	; 4
    29fc:	08 f4       	brcc	.+2      	; 0x2a00 <Keypad_enu_getKey+0x208>
    29fe:	17 cf       	rjmp	.-466    	; 0x282e <Keypad_enu_getKey+0x36>
    2a00:	01 c0       	rjmp	.+2      	; 0x2a04 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2a02:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2a04:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2a06:	65 96       	adiw	r28, 0x15	; 21
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	00 d0       	rcall	.+0      	; 0x2a1e <DC_Motor_enu_Init+0x6>
    2a1e:	0f 92       	push	r0
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	8a 83       	std	Y+2, r24	; 0x02
    2a26:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	19 f0       	breq	.+6      	; 0x2a38 <DC_Motor_enu_Init+0x20>
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	88 23       	and	r24, r24
    2a36:	59 f5       	brne	.+86     	; 0x2a8e <DC_Motor_enu_Init+0x76>
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	81 30       	cpi	r24, 0x01	; 1
    2a3c:	19 f0       	breq	.+6      	; 0x2a44 <DC_Motor_enu_Init+0x2c>
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	88 23       	and	r24, r24
    2a42:	29 f5       	brne	.+74     	; 0x2a8e <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	79 f4       	brne	.+30     	; 0x2a68 <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
    2a4c:	64 e0       	ldi	r22, 0x04	; 4
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	60 e0       	ldi	r22, 0x00	; 0
    2a58:	41 e0       	ldi	r20, 0x01	; 1
    2a5a:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    2a5e:	82 e0       	ldi	r24, 0x02	; 2
    2a60:	61 e0       	ldi	r22, 0x01	; 1
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	89 f4       	brne	.+34     	; 0x2a90 <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	65 e0       	ldi	r22, 0x05	; 5
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	62 e0       	ldi	r22, 0x02	; 2
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	63 e0       	ldi	r22, 0x03	; 3
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	0e 94 c7 20 	call	0x418e	; 0x418e <DIO_enu_SetPinDirection>
    2a8c:	01 c0       	rjmp	.+2      	; 0x2a90 <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	29 97       	sbiw	r28, 0x09	; 9
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	8a 83       	std	Y+2, r24	; 0x02
    2ab4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	39 87       	std	Y+9, r19	; 0x09
    2ac2:	28 87       	std	Y+8, r18	; 0x08
    2ac4:	88 85       	ldd	r24, Y+8	; 0x08
    2ac6:	99 85       	ldd	r25, Y+9	; 0x09
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	31 f0       	breq	.+12     	; 0x2ad8 <DC_Motor_enu_Rotate+0x3a>
    2acc:	28 85       	ldd	r18, Y+8	; 0x08
    2ace:	39 85       	ldd	r19, Y+9	; 0x09
    2ad0:	21 30       	cpi	r18, 0x01	; 1
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	89 f1       	breq	.+98     	; 0x2b38 <DC_Motor_enu_Rotate+0x9a>
    2ad6:	60 c0       	rjmp	.+192    	; 0x2b98 <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	3f 83       	std	Y+7, r19	; 0x07
    2ae0:	2e 83       	std	Y+6, r18	; 0x06
    2ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	a9 f0       	breq	.+42     	; 0x2b14 <DC_Motor_enu_Rotate+0x76>
    2aea:	2e 81       	ldd	r18, Y+6	; 0x06
    2aec:	3f 81       	ldd	r19, Y+7	; 0x07
    2aee:	21 30       	cpi	r18, 0x01	; 1
    2af0:	31 05       	cpc	r19, r1
    2af2:	01 f5       	brne	.+64     	; 0x2b34 <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	64 e0       	ldi	r22, 0x04	; 4
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	60 e0       	ldi	r22, 0x00	; 0
    2b02:	41 e0       	ldi	r20, 0x01	; 1
    2b04:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    2b12:	43 c0       	rjmp	.+134    	; 0x2b9a <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    2b14:	82 e0       	ldi	r24, 0x02	; 2
    2b16:	64 e0       	ldi	r22, 0x04	; 4
    2b18:	41 e0       	ldi	r20, 0x01	; 1
    2b1a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    2b1e:	82 e0       	ldi	r24, 0x02	; 2
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	40 e0       	ldi	r20, 0x00	; 0
    2b24:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	61 e0       	ldi	r22, 0x01	; 1
    2b2c:	41 e0       	ldi	r20, 0x01	; 1
    2b2e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    2b32:	33 c0       	rjmp	.+102    	; 0x2b9a <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    2b34:	19 82       	std	Y+1, r1	; 0x01
    2b36:	31 c0       	rjmp	.+98     	; 0x2b9a <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	3d 83       	std	Y+5, r19	; 0x05
    2b40:	2c 83       	std	Y+4, r18	; 0x04
    2b42:	8c 81       	ldd	r24, Y+4	; 0x04
    2b44:	9d 81       	ldd	r25, Y+5	; 0x05
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	a9 f0       	breq	.+42     	; 0x2b74 <DC_Motor_enu_Rotate+0xd6>
    2b4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b4e:	21 30       	cpi	r18, 0x01	; 1
    2b50:	31 05       	cpc	r19, r1
    2b52:	01 f5       	brne	.+64     	; 0x2b94 <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	65 e0       	ldi	r22, 0x05	; 5
    2b58:	41 e0       	ldi	r20, 0x01	; 1
    2b5a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    2b5e:	82 e0       	ldi	r24, 0x02	; 2
    2b60:	62 e0       	ldi	r22, 0x02	; 2
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	63 e0       	ldi	r22, 0x03	; 3
    2b6c:	40 e0       	ldi	r20, 0x00	; 0
    2b6e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    2b72:	13 c0       	rjmp	.+38     	; 0x2b9a <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    2b74:	82 e0       	ldi	r24, 0x02	; 2
    2b76:	65 e0       	ldi	r22, 0x05	; 5
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    2b7e:	82 e0       	ldi	r24, 0x02	; 2
    2b80:	62 e0       	ldi	r22, 0x02	; 2
    2b82:	40 e0       	ldi	r20, 0x00	; 0
    2b84:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	63 e0       	ldi	r22, 0x03	; 3
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    2b92:	03 c0       	rjmp	.+6      	; 0x2b9a <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    2b94:	19 82       	std	Y+1, r1	; 0x01
    2b96:	01 c0       	rjmp	.+2      	; 0x2b9a <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    2b98:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9c:	29 96       	adiw	r28, 0x09	; 9
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	00 d0       	rcall	.+0      	; 0x2bb4 <DC_Motor_enu_Stop+0x6>
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	88 23       	and	r24, r24
    2bc2:	31 f4       	brne	.+12     	; 0x2bd0 <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	64 e0       	ldi	r22, 0x04	; 4
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    2bce:	0a c0       	rjmp	.+20     	; 0x2be4 <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	81 30       	cpi	r24, 0x01	; 1
    2bd4:	31 f4       	brne	.+12     	; 0x2be2 <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    2bd6:	82 e0       	ldi	r24, 0x02	; 2
    2bd8:	65 e0       	ldi	r22, 0x05	; 5
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <DIO_enu_SetPinValue>
    2be0:	01 c0       	rjmp	.+2      	; 0x2be4 <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2be2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <WDT_enu_Enable>:
#include"../../5-LIB/BIT_MATH.h"
#include"WDT_Config.h"
#include"WDT_Private.h"


ES_t WDT_enu_Enable(u8 Copy_u8_Time){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <WDT_enu_Enable+0x6>
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_enu_errorState = STATE_OK;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Time<8){
    2c00:	8a 81       	ldd	r24, Y+2	; 0x02
    2c02:	88 30       	cpi	r24, 0x08	; 8
    2c04:	80 f4       	brcc	.+32     	; 0x2c26 <WDT_enu_Enable+0x36>
        /*Enable With Input Time*/
        WDT_WDTCR_REG |= Copy_u8_Time;
    2c06:	a1 e4       	ldi	r26, 0x41	; 65
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e1 e4       	ldi	r30, 0x41	; 65
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	90 81       	ld	r25, Z
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	89 2b       	or	r24, r25
    2c14:	8c 93       	st	X, r24
        SET_BIT(WDT_WDTCR_REG,WDE);
    2c16:	a1 e4       	ldi	r26, 0x41	; 65
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e1 e4       	ldi	r30, 0x41	; 65
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 60       	ori	r24, 0x08	; 8
    2c22:	8c 93       	st	X, r24
    2c24:	01 c0       	rjmp	.+2      	; 0x2c28 <WDT_enu_Enable+0x38>
    }else{
        Local_enu_errorState = STATE_NOT_OK;
    2c26:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_enu_errorState;
    2c28:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <WDT_enu_Disable>:
ES_t WDT_enu_Disable(void){
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	0f 92       	push	r0
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    /*Disable Sequance*/
    WDT_WDTCR_REG |= ((1<<WDTOE) | (1<<WDE));
    2c3e:	a1 e4       	ldi	r26, 0x41	; 65
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e1 e4       	ldi	r30, 0x41	; 65
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	88 61       	ori	r24, 0x18	; 24
    2c4a:	8c 93       	st	X, r24
    WDT_WDTCR_REG = 0x00;
    2c4c:	e1 e4       	ldi	r30, 0x41	; 65
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	10 82       	st	Z, r1
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_enu_Init>:
#include"UART_Private.h"
static void(*UART_pf_TX)(void) =NULL;
static void(*UART_pf_RX)(void) =NULL;
static u8 *UART_pu8_String = NULL;

ES_t UART_enu_Init(void){
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <UART_enu_Init+0x6>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <UART_enu_Init+0x8>
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    u16 Local_u16_boudRateValue = 0;
    2c66:	1b 82       	std	Y+3, r1	; 0x03
    2c68:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_UCSRCValue = UCSRC_INITIAL_VALUE;
    2c6a:	80 e8       	ldi	r24, 0x80	; 128
    2c6c:	89 83       	std	Y+1, r24	; 0x01
/****************** UART Mode ****************/
    #if UART_MODE == ASYNCH_NORMAL_MODE
    CLR_BIT(UART_UCSRA_REG,U2X);
    2c6e:	ab e2       	ldi	r26, 0x2B	; 43
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	eb e2       	ldi	r30, 0x2B	; 43
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	8d 7f       	andi	r24, 0xFD	; 253
    2c7a:	8c 93       	st	X, r24
    //CLR_BIT(UART_UCSRA_REG,MPCM);
    CLR_BIT(Local_u8_UCSRCValue,UMSEL);
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	8f 7b       	andi	r24, 0xBF	; 191
    2c80:	89 83       	std	Y+1, r24	; 0x01
    Local_u16_boudRateValue = (F_CPU/(16UL*UART_BAUD_RATE))-1;
    2c82:	87 e6       	ldi	r24, 0x67	; 103
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9b 83       	std	Y+3, r25	; 0x03
    2c88:	8a 83       	std	Y+2, r24	; 0x02
    SET_BIT(Local_u8_UCSRCValue,UMSEL);
    Local_u16_boudRateValue = (F_CPU/(2UL*UART_BAUD_RATE))-1;
    #endif
/****************** UART Stop Bits ****************/
    #if UART_STOP_BITS == ONE_BIT
    CLR_BIT(Local_u8_UCSRCValue,USBS);
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	87 7f       	andi	r24, 0xF7	; 247
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_DATA_BITS == _7_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    CLR_BIT(Local_u8_UCSRCValue,UCZ0);
    #elif UART_DATA_BITS == _8_BITS
    CLR_BIT(UART_UCSRB_REG,UCZ2);
    2c90:	aa e2       	ldi	r26, 0x2A	; 42
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	ea e2       	ldi	r30, 0x2A	; 42
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	8b 7f       	andi	r24, 0xFB	; 251
    2c9c:	8c 93       	st	X, r24
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	84 60       	ori	r24, 0x04	; 4
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	82 60       	ori	r24, 0x02	; 2
    2ca8:	89 83       	std	Y+1, r24	; 0x01
    SET_BIT(Local_u8_UCSRCValue,UCZ1);
    SET_BIT(Local_u8_UCSRCValue,UCZ0);
    #endif
/******************UART Parity Bit****************/
    #if UART_PARITY_BIT == NONE
    CLR_BIT(Local_u8_UCSRCValue,UPM1);
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
    2cac:	8f 7d       	andi	r24, 0xDF	; 223
    2cae:	89 83       	std	Y+1, r24	; 0x01
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 7e       	andi	r24, 0xEF	; 239
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    #elif UART_PARITY_BIT == EVEN_PARITY
    SET_BIT(Local_u8_UCSRCValue,UPM1);
    CLR_BIT(Local_u8_UCSRCValue,UPM0);
    #endif   
/************** Update UCSRC REG ********************/
    UART_UCSRC_REG = Local_u8_UCSRCValue;
    2cb6:	e0 e4       	ldi	r30, 0x40	; 64
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	80 83       	st	Z, r24
/************** Baud Rate Value***********************/
    UART_UBRRL_REG = (u8)Local_u16_boudRateValue;
    2cbe:	e9 e2       	ldi	r30, 0x29	; 41
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	80 83       	st	Z, r24
    UART_UBRRH_REG = (u8)(Local_u16_boudRateValue>>8);
    2cc6:	e0 e4       	ldi	r30, 0x40	; 64
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	89 2f       	mov	r24, r25
    2cd0:	99 27       	eor	r25, r25
    2cd2:	80 83       	st	Z, r24
/************** Enable (RX-TX) ************************/
    SET_BIT(UART_UCSRB_REG,RXEN);
    2cd4:	aa e2       	ldi	r26, 0x2A	; 42
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	ea e2       	ldi	r30, 0x2A	; 42
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	80 61       	ori	r24, 0x10	; 16
    2ce0:	8c 93       	st	X, r24
    SET_BIT(UART_UCSRB_REG,TXEN);
    2ce2:	aa e2       	ldi	r26, 0x2A	; 42
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	ea e2       	ldi	r30, 0x2A	; 42
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	88 60       	ori	r24, 0x08	; 8
    2cee:	8c 93       	st	X, r24
}
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <UART_enu_sendChar>:
ES_t UART_enu_sendChar(u8 Copy_u8_Char){
    2cfe:	df 93       	push	r29
    2d00:	cf 93       	push	r28
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <UART_enu_sendChar+0x6>
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <UART_enu_sendChar+0x8>
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	8b 83       	std	Y+3, r24	; 0x03
    u16 Local_u16_timeOutCounter = 0;
    2d0c:	1a 82       	std	Y+2, r1	; 0x02
    2d0e:	19 82       	std	Y+1, r1	; 0x01
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <UART_enu_sendChar+0x1e>
    /*Wait Transmit register is empty*/
    while((!GET_BIT(UART_UCSRA_REG,UDRE))&& (Local_u16_timeOutCounter<50000)){Local_u16_timeOutCounter++;}
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	9a 83       	std	Y+2, r25	; 0x02
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	eb e2       	ldi	r30, 0x2B	; 43
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	82 95       	swap	r24
    2d24:	86 95       	lsr	r24
    2d26:	87 70       	andi	r24, 0x07	; 7
    2d28:	88 2f       	mov	r24, r24
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	81 70       	andi	r24, 0x01	; 1
    2d2e:	90 70       	andi	r25, 0x00	; 0
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	31 f4       	brne	.+12     	; 0x2d40 <UART_enu_sendChar+0x42>
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	23 ec       	ldi	r18, 0xC3	; 195
    2d3a:	80 35       	cpi	r24, 0x50	; 80
    2d3c:	92 07       	cpc	r25, r18
    2d3e:	48 f3       	brcs	.-46     	; 0x2d12 <UART_enu_sendChar+0x14>
    /*Send Byte Value*/
    UART_UDR_REG = Copy_u8_Char;
    2d40:	ec e2       	ldi	r30, 0x2C	; 44
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	80 83       	st	Z, r24
}
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	cf 91       	pop	r28
    2d52:	df 91       	pop	r29
    2d54:	08 95       	ret

00002d56 <UART_enu_recieveChar>:
ES_t UART_enu_recieveChar(u8 *Copy_pu8_recievedChar){
    2d56:	df 93       	push	r29
    2d58:	cf 93       	push	r28
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <UART_enu_recieveChar+0x6>
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <UART_enu_recieveChar+0x8>
    2d5e:	0f 92       	push	r0
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9d 83       	std	Y+5, r25	; 0x05
    2d66:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	8b 83       	std	Y+3, r24	; 0x03
    u16 Local_u16_timeOutCounter = 0;
    2d6c:	1a 82       	std	Y+2, r1	; 0x02
    2d6e:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_pu8_recievedChar!= NULL){
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	9d 81       	ldd	r25, Y+5	; 0x05
    2d74:	00 97       	sbiw	r24, 0x00	; 0
    2d76:	c1 f0       	breq	.+48     	; 0x2da8 <UART_enu_recieveChar+0x52>
    2d78:	05 c0       	rjmp	.+10     	; 0x2d84 <UART_enu_recieveChar+0x2e>
        /*Wait The Data Is Recieved */
        while((!GET_BIT(UART_UCSRA_REG,RXC))&&(Local_u16_timeOutCounter<50000)){Local_u16_timeOutCounter++;}
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	eb e2       	ldi	r30, 0x2B	; 43
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	88 23       	and	r24, r24
    2d8c:	34 f0       	brlt	.+12     	; 0x2d9a <UART_enu_recieveChar+0x44>
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	23 ec       	ldi	r18, 0xC3	; 195
    2d94:	80 35       	cpi	r24, 0x50	; 80
    2d96:	92 07       	cpc	r25, r18
    2d98:	80 f3       	brcs	.-32     	; 0x2d7a <UART_enu_recieveChar+0x24>
        *Copy_pu8_recievedChar = UART_UDR_REG;
    2d9a:	ec e2       	ldi	r30, 0x2C	; 44
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	ec 81       	ldd	r30, Y+4	; 0x04
    2da2:	fd 81       	ldd	r31, Y+5	; 0x05
    2da4:	80 83       	st	Z, r24
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <UART_enu_recieveChar+0x54>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2da8:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <UART_enu_sendString>:
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <UART_enu_sendString+0x6>
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <UART_enu_sendString+0x8>
    2dc4:	00 d0       	rcall	.+0      	; 0x2dc6 <UART_enu_sendString+0xa>
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	8c 83       	std	Y+4, r24	; 0x04
    if(Copy_pu8_String!=NULL){
    2dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	b1 f1       	breq	.+108    	; 0x2e46 <UART_enu_sendString+0x8a>
    u16 Local_u16_timeOutCounter = 0;
    2dda:	1b 82       	std	Y+3, r1	; 0x03
    2ddc:	1a 82       	std	Y+2, r1	; 0x02
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    2dde:	19 82       	std	Y+1, r1	; 0x01
    2de0:	26 c0       	rjmp	.+76     	; 0x2e2e <UART_enu_sendString+0x72>
        /*Wait Transmit register is empty*/
        while((!GET_BIT(UART_UCSRA_REG,UDRE))&&(Local_u16_timeOutCounter<50000)){Local_u16_timeOutCounter++;}
    2de2:	8a 81       	ldd	r24, Y+2	; 0x02
    2de4:	9b 81       	ldd	r25, Y+3	; 0x03
    2de6:	01 96       	adiw	r24, 0x01	; 1
    2de8:	9b 83       	std	Y+3, r25	; 0x03
    2dea:	8a 83       	std	Y+2, r24	; 0x02
    2dec:	eb e2       	ldi	r30, 0x2B	; 43
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	82 95       	swap	r24
    2df4:	86 95       	lsr	r24
    2df6:	87 70       	andi	r24, 0x07	; 7
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	81 70       	andi	r24, 0x01	; 1
    2dfe:	90 70       	andi	r25, 0x00	; 0
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	31 f4       	brne	.+12     	; 0x2e10 <UART_enu_sendString+0x54>
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	23 ec       	ldi	r18, 0xC3	; 195
    2e0a:	80 35       	cpi	r24, 0x50	; 80
    2e0c:	92 07       	cpc	r25, r18
    2e0e:	48 f3       	brcs	.-46     	; 0x2de2 <UART_enu_sendString+0x26>
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    2e10:	ac e2       	ldi	r26, 0x2C	; 44
    2e12:	b0 e0       	ldi	r27, 0x00	; 0
    2e14:	89 81       	ldd	r24, Y+1	; 0x01
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	fc 01       	movw	r30, r24
    2e20:	e2 0f       	add	r30, r18
    2e22:	f3 1f       	adc	r31, r19
    2e24:	80 81       	ld	r24, Z
    2e26:	8c 93       	st	X, r24
}
ES_t UART_enu_sendString(u8 *Copy_pu8_String){
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_String!=NULL){
    u16 Local_u16_timeOutCounter = 0;
    for(u8 Local_u8_Iterator =0;Copy_pu8_String[Local_u8_Iterator]!='\0';Local_u8_Iterator++){
    2e28:	89 81       	ldd	r24, Y+1	; 0x01
    2e2a:	8f 5f       	subi	r24, 0xFF	; 255
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	28 2f       	mov	r18, r24
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	8d 81       	ldd	r24, Y+5	; 0x05
    2e36:	9e 81       	ldd	r25, Y+6	; 0x06
    2e38:	fc 01       	movw	r30, r24
    2e3a:	e2 0f       	add	r30, r18
    2e3c:	f3 1f       	adc	r31, r19
    2e3e:	80 81       	ld	r24, Z
    2e40:	88 23       	and	r24, r24
    2e42:	a1 f6       	brne	.-88     	; 0x2dec <UART_enu_sendString+0x30>
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <UART_enu_sendString+0x8c>
        /*Wait Transmit register is empty*/
        while((!GET_BIT(UART_UCSRA_REG,UDRE))&&(Local_u16_timeOutCounter<50000)){Local_u16_timeOutCounter++;}
        UART_UDR_REG = Copy_pu8_String[Local_u8_Iterator];
    }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2e46:	1c 82       	std	Y+4, r1	; 0x04
    }
    return Local_u8_errorState;
    2e48:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2e4a:	26 96       	adiw	r28, 0x06	; 6
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	cf 91       	pop	r28
    2e58:	df 91       	pop	r29
    2e5a:	08 95       	ret

00002e5c <UART_enu_recieveString>:
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	27 97       	sbiw	r28, 0x07	; 7
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_Iterator = 0;
    2e76:	1c 82       	std	Y+4, r1	; 0x04
    u16 Local_u16_timeOutCounter = 0;
    2e78:	1b 82       	std	Y+3, r1	; 0x03
    2e7a:	1a 82       	std	Y+2, r1	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_pu8_recievedString!= NULL){
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	00 97       	sbiw	r24, 0x00	; 0
    2e86:	71 f1       	breq	.+92     	; 0x2ee4 <UART_enu_recieveString+0x88>
    2e88:	1f c0       	rjmp	.+62     	; 0x2ec8 <UART_enu_recieveString+0x6c>
        while(Local_u8_Iterator < Copy_u8_messageSize){
            while((!GET_BIT(UART_UCSRA_REG,RXC)) && (Local_u16_timeOutCounter<50000)){Local_u16_timeOutCounter++;}
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	01 96       	adiw	r24, 0x01	; 1
    2e90:	9b 83       	std	Y+3, r25	; 0x03
    2e92:	8a 83       	std	Y+2, r24	; 0x02
    2e94:	eb e2       	ldi	r30, 0x2B	; 43
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	88 23       	and	r24, r24
    2e9c:	34 f0       	brlt	.+12     	; 0x2eaa <UART_enu_recieveString+0x4e>
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	23 ec       	ldi	r18, 0xC3	; 195
    2ea4:	80 35       	cpi	r24, 0x50	; 80
    2ea6:	92 07       	cpc	r25, r18
    2ea8:	80 f3       	brcs	.-32     	; 0x2e8a <UART_enu_recieveString+0x2e>
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
    2eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	a2 0f       	add	r26, r18
    2eb8:	b3 1f       	adc	r27, r19
    2eba:	ec e2       	ldi	r30, 0x2C	; 44
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	8c 93       	st	X, r24
            Local_u8_Iterator++;
    2ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec4:	8f 5f       	subi	r24, 0xFF	; 255
    2ec6:	8c 83       	std	Y+4, r24	; 0x04
ES_t UART_enu_recieveString(u8 *Copy_pu8_recievedString,u8 Copy_u8_messageSize){
    u8 Local_u8_Iterator = 0;
    u16 Local_u16_timeOutCounter = 0;
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_pu8_recievedString!= NULL){
        while(Local_u8_Iterator < Copy_u8_messageSize){
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ecc:	98 17       	cp	r25, r24
    2ece:	10 f3       	brcs	.-60     	; 0x2e94 <UART_enu_recieveString+0x38>
            while((!GET_BIT(UART_UCSRA_REG,RXC)) && (Local_u16_timeOutCounter<50000)){Local_u16_timeOutCounter++;}
            Copy_pu8_recievedString[Local_u8_Iterator] = UART_UDR_REG;
            Local_u8_Iterator++;
        }
        Copy_pu8_recievedString[Local_u8_Iterator] = '\0';
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eda:	fc 01       	movw	r30, r24
    2edc:	e2 0f       	add	r30, r18
    2ede:	f3 1f       	adc	r31, r19
    2ee0:	10 82       	st	Z, r1
    2ee2:	01 c0       	rjmp	.+2      	; 0x2ee6 <UART_enu_recieveString+0x8a>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2ee4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee8:	27 96       	adiw	r28, 0x07	; 7
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <__vector_13>:
/*************ISR(Recieve)**********/
void __vector_13(void){
    2efa:	1f 92       	push	r1
    2efc:	0f 92       	push	r0
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	0f 92       	push	r0
    2f02:	11 24       	eor	r1, r1
    2f04:	2f 93       	push	r18
    2f06:	3f 93       	push	r19
    2f08:	4f 93       	push	r20
    2f0a:	5f 93       	push	r21
    2f0c:	6f 93       	push	r22
    2f0e:	7f 93       	push	r23
    2f10:	8f 93       	push	r24
    2f12:	9f 93       	push	r25
    2f14:	af 93       	push	r26
    2f16:	bf 93       	push	r27
    2f18:	ef 93       	push	r30
    2f1a:	ff 93       	push	r31
    2f1c:	df 93       	push	r29
    2f1e:	cf 93       	push	r28
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_RX != NULL)
    2f24:	80 91 f3 00 	lds	r24, 0x00F3
    2f28:	90 91 f4 00 	lds	r25, 0x00F4
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	29 f0       	breq	.+10     	; 0x2f3a <__vector_13+0x40>
        UART_pf_RX();
    2f30:	e0 91 f3 00 	lds	r30, 0x00F3
    2f34:	f0 91 f4 00 	lds	r31, 0x00F4
    2f38:	09 95       	icall
}
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	7f 91       	pop	r23
    2f4c:	6f 91       	pop	r22
    2f4e:	5f 91       	pop	r21
    2f50:	4f 91       	pop	r20
    2f52:	3f 91       	pop	r19
    2f54:	2f 91       	pop	r18
    2f56:	0f 90       	pop	r0
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	0f 90       	pop	r0
    2f5c:	1f 90       	pop	r1
    2f5e:	18 95       	reti

00002f60 <__vector_15>:
/*************ISR(Transmit)**********/
void __vector_15(void){
    2f60:	1f 92       	push	r1
    2f62:	0f 92       	push	r0
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	0f 92       	push	r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	2f 93       	push	r18
    2f6c:	3f 93       	push	r19
    2f6e:	4f 93       	push	r20
    2f70:	5f 93       	push	r21
    2f72:	6f 93       	push	r22
    2f74:	7f 93       	push	r23
    2f76:	8f 93       	push	r24
    2f78:	9f 93       	push	r25
    2f7a:	af 93       	push	r26
    2f7c:	bf 93       	push	r27
    2f7e:	ef 93       	push	r30
    2f80:	ff 93       	push	r31
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    if(UART_pf_TX != NULL)
    2f8a:	80 91 f1 00 	lds	r24, 0x00F1
    2f8e:	90 91 f2 00 	lds	r25, 0x00F2
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	29 f0       	breq	.+10     	; 0x2fa0 <__vector_15+0x40>
        UART_pf_RX();
    2f96:	e0 91 f3 00 	lds	r30, 0x00F3
    2f9a:	f0 91 f4 00 	lds	r31, 0x00F4
    2f9e:	09 95       	icall

    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	ff 91       	pop	r31
    2fa6:	ef 91       	pop	r30
    2fa8:	bf 91       	pop	r27
    2faa:	af 91       	pop	r26
    2fac:	9f 91       	pop	r25
    2fae:	8f 91       	pop	r24
    2fb0:	7f 91       	pop	r23
    2fb2:	6f 91       	pop	r22
    2fb4:	5f 91       	pop	r21
    2fb6:	4f 91       	pop	r20
    2fb8:	3f 91       	pop	r19
    2fba:	2f 91       	pop	r18
    2fbc:	0f 90       	pop	r0
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	0f 90       	pop	r0
    2fc2:	1f 90       	pop	r1
    2fc4:	18 95       	reti

00002fc6 <Timers_enu_Init>:
#include"Timer_Config.h"
static u8 Timer0_u8_Prescaler , Timer1_u8_Prescaler;
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[3])(void)= {NULL};
ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	2a 97       	sbiw	r28, 0x0a	; 10
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	8a 83       	std	Y+2, r24	; 0x02
    2fdc:	6b 83       	std	Y+3, r22	; 0x03
    2fde:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<2)&& (Copy_u8_Mode < 7)&&(Copy_u8_Prescaler<8)){
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	82 30       	cpi	r24, 0x02	; 2
    2fe8:	08 f0       	brcs	.+2      	; 0x2fec <Timers_enu_Init+0x26>
    2fea:	e4 c1       	rjmp	.+968    	; 0x33b4 <Timers_enu_Init+0x3ee>
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	87 30       	cpi	r24, 0x07	; 7
    2ff0:	08 f0       	brcs	.+2      	; 0x2ff4 <Timers_enu_Init+0x2e>
    2ff2:	e0 c1       	rjmp	.+960    	; 0x33b4 <Timers_enu_Init+0x3ee>
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	88 30       	cpi	r24, 0x08	; 8
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <Timers_enu_Init+0x36>
    2ffa:	dc c1       	rjmp	.+952    	; 0x33b4 <Timers_enu_Init+0x3ee>
    switch (Copy_u8_TimerNo)
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	3a 87       	std	Y+10, r19	; 0x0a
    3004:	29 87       	std	Y+9, r18	; 0x09
    3006:	89 85       	ldd	r24, Y+9	; 0x09
    3008:	9a 85       	ldd	r25, Y+10	; 0x0a
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	39 f0       	breq	.+14     	; 0x301c <Timers_enu_Init+0x56>
    300e:	29 85       	ldd	r18, Y+9	; 0x09
    3010:	3a 85       	ldd	r19, Y+10	; 0x0a
    3012:	21 30       	cpi	r18, 0x01	; 1
    3014:	31 05       	cpc	r19, r1
    3016:	09 f4       	brne	.+2      	; 0x301a <Timers_enu_Init+0x54>
    3018:	d9 c0       	rjmp	.+434    	; 0x31cc <Timers_enu_Init+0x206>
    301a:	cd c1       	rjmp	.+922    	; 0x33b6 <Timers_enu_Init+0x3f0>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	38 87       	std	Y+8, r19	; 0x08
    3024:	2f 83       	std	Y+7, r18	; 0x07
    3026:	8f 81       	ldd	r24, Y+7	; 0x07
    3028:	98 85       	ldd	r25, Y+8	; 0x08
    302a:	83 30       	cpi	r24, 0x03	; 3
    302c:	91 05       	cpc	r25, r1
    302e:	09 f4       	brne	.+2      	; 0x3032 <Timers_enu_Init+0x6c>
    3030:	4e c0       	rjmp	.+156    	; 0x30ce <Timers_enu_Init+0x108>
    3032:	2f 81       	ldd	r18, Y+7	; 0x07
    3034:	38 85       	ldd	r19, Y+8	; 0x08
    3036:	24 30       	cpi	r18, 0x04	; 4
    3038:	31 05       	cpc	r19, r1
    303a:	54 f4       	brge	.+20     	; 0x3050 <Timers_enu_Init+0x8a>
    303c:	8f 81       	ldd	r24, Y+7	; 0x07
    303e:	98 85       	ldd	r25, Y+8	; 0x08
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	c9 f0       	breq	.+50     	; 0x3076 <Timers_enu_Init+0xb0>
    3044:	2f 81       	ldd	r18, Y+7	; 0x07
    3046:	38 85       	ldd	r19, Y+8	; 0x08
    3048:	21 30       	cpi	r18, 0x01	; 1
    304a:	31 05       	cpc	r19, r1
    304c:	51 f1       	breq	.+84     	; 0x30a2 <Timers_enu_Init+0xdc>
    304e:	b2 c0       	rjmp	.+356    	; 0x31b4 <Timers_enu_Init+0x1ee>
    3050:	8f 81       	ldd	r24, Y+7	; 0x07
    3052:	98 85       	ldd	r25, Y+8	; 0x08
    3054:	85 30       	cpi	r24, 0x05	; 5
    3056:	91 05       	cpc	r25, r1
    3058:	09 f4       	brne	.+2      	; 0x305c <Timers_enu_Init+0x96>
    305a:	73 c0       	rjmp	.+230    	; 0x3142 <Timers_enu_Init+0x17c>
    305c:	2f 81       	ldd	r18, Y+7	; 0x07
    305e:	38 85       	ldd	r19, Y+8	; 0x08
    3060:	25 30       	cpi	r18, 0x05	; 5
    3062:	31 05       	cpc	r19, r1
    3064:	0c f4       	brge	.+2      	; 0x3068 <Timers_enu_Init+0xa2>
    3066:	50 c0       	rjmp	.+160    	; 0x3108 <Timers_enu_Init+0x142>
    3068:	8f 81       	ldd	r24, Y+7	; 0x07
    306a:	98 85       	ldd	r25, Y+8	; 0x08
    306c:	86 30       	cpi	r24, 0x06	; 6
    306e:	91 05       	cpc	r25, r1
    3070:	09 f4       	brne	.+2      	; 0x3074 <Timers_enu_Init+0xae>
    3072:	84 c0       	rjmp	.+264    	; 0x317c <Timers_enu_Init+0x1b6>
    3074:	9f c0       	rjmp	.+318    	; 0x31b4 <Timers_enu_Init+0x1ee>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    3076:	a3 e5       	ldi	r26, 0x53	; 83
    3078:	b0 e0       	ldi	r27, 0x00	; 0
    307a:	e3 e5       	ldi	r30, 0x53	; 83
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	8f 7b       	andi	r24, 0xBF	; 191
    3082:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    3084:	a3 e5       	ldi	r26, 0x53	; 83
    3086:	b0 e0       	ldi	r27, 0x00	; 0
    3088:	e3 e5       	ldi	r30, 0x53	; 83
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
    308e:	87 7f       	andi	r24, 0xF7	; 247
    3090:	8c 93       	st	X, r24
            // Enable OverFlow Interrupt
            SET_BIT(TIMER_TIMSK_REG, TOIE0);
    3092:	a9 e5       	ldi	r26, 0x59	; 89
    3094:	b0 e0       	ldi	r27, 0x00	; 0
    3096:	e9 e5       	ldi	r30, 0x59	; 89
    3098:	f0 e0       	ldi	r31, 0x00	; 0
    309a:	80 81       	ld	r24, Z
    309c:	81 60       	ori	r24, 0x01	; 1
    309e:	8c 93       	st	X, r24
    30a0:	89 c0       	rjmp	.+274    	; 0x31b4 <Timers_enu_Init+0x1ee>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    30a2:	a3 e5       	ldi	r26, 0x53	; 83
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e3 e5       	ldi	r30, 0x53	; 83
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	8f 7b       	andi	r24, 0xBF	; 191
    30ae:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    30b0:	a3 e5       	ldi	r26, 0x53	; 83
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e3 e5       	ldi	r30, 0x53	; 83
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	88 60       	ori	r24, 0x08	; 8
    30bc:	8c 93       	st	X, r24
            // Enable CTC Interrupt
            SET_BIT(TIMER_TIMSK_REG, OCIE0);
    30be:	a9 e5       	ldi	r26, 0x59	; 89
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e9 e5       	ldi	r30, 0x59	; 89
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	82 60       	ori	r24, 0x02	; 2
    30ca:	8c 93       	st	X, r24
    30cc:	73 c0       	rjmp	.+230    	; 0x31b4 <Timers_enu_Init+0x1ee>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    30ce:	a3 e5       	ldi	r26, 0x53	; 83
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e3 e5       	ldi	r30, 0x53	; 83
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	80 64       	ori	r24, 0x40	; 64
    30da:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    30dc:	a3 e5       	ldi	r26, 0x53	; 83
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e3 e5       	ldi	r30, 0x53	; 83
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	88 60       	ori	r24, 0x08	; 8
    30e8:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    30ea:	a3 e5       	ldi	r26, 0x53	; 83
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e3 e5       	ldi	r30, 0x53	; 83
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	80 62       	ori	r24, 0x20	; 32
    30f6:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    30f8:	a3 e5       	ldi	r26, 0x53	; 83
    30fa:	b0 e0       	ldi	r27, 0x00	; 0
    30fc:	e3 e5       	ldi	r30, 0x53	; 83
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	80 81       	ld	r24, Z
    3102:	80 61       	ori	r24, 0x10	; 16
    3104:	8c 93       	st	X, r24
    3106:	56 c0       	rjmp	.+172    	; 0x31b4 <Timers_enu_Init+0x1ee>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3108:	a3 e5       	ldi	r26, 0x53	; 83
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	e3 e5       	ldi	r30, 0x53	; 83
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	80 64       	ori	r24, 0x40	; 64
    3114:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3116:	a3 e5       	ldi	r26, 0x53	; 83
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e3 e5       	ldi	r30, 0x53	; 83
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	88 60       	ori	r24, 0x08	; 8
    3122:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3124:	a3 e5       	ldi	r26, 0x53	; 83
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e3 e5       	ldi	r30, 0x53	; 83
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	80 62       	ori	r24, 0x20	; 32
    3130:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    3132:	a3 e5       	ldi	r26, 0x53	; 83
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	e3 e5       	ldi	r30, 0x53	; 83
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	8f 7e       	andi	r24, 0xEF	; 239
    313e:	8c 93       	st	X, r24
    3140:	39 c0       	rjmp	.+114    	; 0x31b4 <Timers_enu_Init+0x1ee>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3142:	a3 e5       	ldi	r26, 0x53	; 83
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	e3 e5       	ldi	r30, 0x53	; 83
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	80 64       	ori	r24, 0x40	; 64
    314e:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    3150:	a3 e5       	ldi	r26, 0x53	; 83
    3152:	b0 e0       	ldi	r27, 0x00	; 0
    3154:	e3 e5       	ldi	r30, 0x53	; 83
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	80 81       	ld	r24, Z
    315a:	87 7f       	andi	r24, 0xF7	; 247
    315c:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    315e:	a3 e5       	ldi	r26, 0x53	; 83
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e3 e5       	ldi	r30, 0x53	; 83
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	80 62       	ori	r24, 0x20	; 32
    316a:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    316c:	a3 e5       	ldi	r26, 0x53	; 83
    316e:	b0 e0       	ldi	r27, 0x00	; 0
    3170:	e3 e5       	ldi	r30, 0x53	; 83
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	80 81       	ld	r24, Z
    3176:	80 61       	ori	r24, 0x10	; 16
    3178:	8c 93       	st	X, r24
    317a:	1c c0       	rjmp	.+56     	; 0x31b4 <Timers_enu_Init+0x1ee>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    317c:	a3 e5       	ldi	r26, 0x53	; 83
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e3 e5       	ldi	r30, 0x53	; 83
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	80 64       	ori	r24, 0x40	; 64
    3188:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    318a:	a3 e5       	ldi	r26, 0x53	; 83
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e3 e5       	ldi	r30, 0x53	; 83
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	87 7f       	andi	r24, 0xF7	; 247
    3196:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3198:	a3 e5       	ldi	r26, 0x53	; 83
    319a:	b0 e0       	ldi	r27, 0x00	; 0
    319c:	e3 e5       	ldi	r30, 0x53	; 83
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	80 81       	ld	r24, Z
    31a2:	80 62       	ori	r24, 0x20	; 32
    31a4:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    31a6:	a3 e5       	ldi	r26, 0x53	; 83
    31a8:	b0 e0       	ldi	r27, 0x00	; 0
    31aa:	e3 e5       	ldi	r30, 0x53	; 83
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8f 7e       	andi	r24, 0xEF	; 239
    31b2:	8c 93       	st	X, r24
        break;
        }
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    31b4:	a3 e5       	ldi	r26, 0x53	; 83
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e3 e5       	ldi	r30, 0x53	; 83
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	90 81       	ld	r25, Z
    31be:	8c 81       	ldd	r24, Y+4	; 0x04
    31c0:	89 2b       	or	r24, r25
    31c2:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    31c4:	8c 81       	ldd	r24, Y+4	; 0x04
    31c6:	80 93 01 01 	sts	0x0101, r24
    31ca:	f5 c0       	rjmp	.+490    	; 0x33b6 <Timers_enu_Init+0x3f0>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	3e 83       	std	Y+6, r19	; 0x06
    31d4:	2d 83       	std	Y+5, r18	; 0x05
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	82 30       	cpi	r24, 0x02	; 2
    31dc:	91 05       	cpc	r25, r1
    31de:	09 f4       	brne	.+2      	; 0x31e2 <Timers_enu_Init+0x21c>
    31e0:	64 c0       	rjmp	.+200    	; 0x32aa <Timers_enu_Init+0x2e4>
    31e2:	2d 81       	ldd	r18, Y+5	; 0x05
    31e4:	3e 81       	ldd	r19, Y+6	; 0x06
    31e6:	23 30       	cpi	r18, 0x03	; 3
    31e8:	31 05       	cpc	r19, r1
    31ea:	54 f4       	brge	.+20     	; 0x3200 <Timers_enu_Init+0x23a>
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	99 f0       	breq	.+38     	; 0x321a <Timers_enu_Init+0x254>
    31f4:	2d 81       	ldd	r18, Y+5	; 0x05
    31f6:	3e 81       	ldd	r19, Y+6	; 0x06
    31f8:	21 30       	cpi	r18, 0x01	; 1
    31fa:	31 05       	cpc	r19, r1
    31fc:	91 f1       	breq	.+100    	; 0x3262 <Timers_enu_Init+0x29c>
    31fe:	ce c0       	rjmp	.+412    	; 0x339c <Timers_enu_Init+0x3d6>
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	9e 81       	ldd	r25, Y+6	; 0x06
    3204:	84 30       	cpi	r24, 0x04	; 4
    3206:	91 05       	cpc	r25, r1
    3208:	09 f4       	brne	.+2      	; 0x320c <Timers_enu_Init+0x246>
    320a:	73 c0       	rjmp	.+230    	; 0x32f2 <Timers_enu_Init+0x32c>
    320c:	2d 81       	ldd	r18, Y+5	; 0x05
    320e:	3e 81       	ldd	r19, Y+6	; 0x06
    3210:	26 30       	cpi	r18, 0x06	; 6
    3212:	31 05       	cpc	r19, r1
    3214:	09 f4       	brne	.+2      	; 0x3218 <Timers_enu_Init+0x252>
    3216:	98 c0       	rjmp	.+304    	; 0x3348 <Timers_enu_Init+0x382>
    3218:	c1 c0       	rjmp	.+386    	; 0x339c <Timers_enu_Init+0x3d6>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    321a:	af e4       	ldi	r26, 0x4F	; 79
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	ef e4       	ldi	r30, 0x4F	; 79
    3220:	f0 e0       	ldi	r31, 0x00	; 0
    3222:	80 81       	ld	r24, Z
    3224:	8e 7f       	andi	r24, 0xFE	; 254
    3226:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    3228:	af e4       	ldi	r26, 0x4F	; 79
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	ef e4       	ldi	r30, 0x4F	; 79
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	8d 7f       	andi	r24, 0xFD	; 253
    3234:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3236:	ae e4       	ldi	r26, 0x4E	; 78
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	ee e4       	ldi	r30, 0x4E	; 78
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	87 7f       	andi	r24, 0xF7	; 247
    3242:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3244:	ae e4       	ldi	r26, 0x4E	; 78
    3246:	b0 e0       	ldi	r27, 0x00	; 0
    3248:	ee e4       	ldi	r30, 0x4E	; 78
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	8f 7e       	andi	r24, 0xEF	; 239
    3250:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, TOIE1);
    3252:	a9 e5       	ldi	r26, 0x59	; 89
    3254:	b0 e0       	ldi	r27, 0x00	; 0
    3256:	e9 e5       	ldi	r30, 0x59	; 89
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	84 60       	ori	r24, 0x04	; 4
    325e:	8c 93       	st	X, r24
    3260:	9d c0       	rjmp	.+314    	; 0x339c <Timers_enu_Init+0x3d6>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3262:	af e4       	ldi	r26, 0x4F	; 79
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	ef e4       	ldi	r30, 0x4F	; 79
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	8e 7f       	andi	r24, 0xFE	; 254
    326e:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    3270:	af e4       	ldi	r26, 0x4F	; 79
    3272:	b0 e0       	ldi	r27, 0x00	; 0
    3274:	ef e4       	ldi	r30, 0x4F	; 79
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	80 81       	ld	r24, Z
    327a:	8d 7f       	andi	r24, 0xFD	; 253
    327c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    327e:	ae e4       	ldi	r26, 0x4E	; 78
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	ee e4       	ldi	r30, 0x4E	; 78
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	88 60       	ori	r24, 0x08	; 8
    328a:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    328c:	ae e4       	ldi	r26, 0x4E	; 78
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	ee e4       	ldi	r30, 0x4E	; 78
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	8f 7e       	andi	r24, 0xEF	; 239
    3298:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, OCIE1A);
    329a:	a9 e5       	ldi	r26, 0x59	; 89
    329c:	b0 e0       	ldi	r27, 0x00	; 0
    329e:	e9 e5       	ldi	r30, 0x59	; 89
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	80 61       	ori	r24, 0x10	; 16
    32a6:	8c 93       	st	X, r24
    32a8:	79 c0       	rjmp	.+242    	; 0x339c <Timers_enu_Init+0x3d6>
        break;
        case CTC_MODE_B:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    32aa:	af e4       	ldi	r26, 0x4F	; 79
    32ac:	b0 e0       	ldi	r27, 0x00	; 0
    32ae:	ef e4       	ldi	r30, 0x4F	; 79
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	8e 7f       	andi	r24, 0xFE	; 254
    32b6:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    32b8:	af e4       	ldi	r26, 0x4F	; 79
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	ef e4       	ldi	r30, 0x4F	; 79
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	8d 7f       	andi	r24, 0xFD	; 253
    32c4:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    32c6:	ae e4       	ldi	r26, 0x4E	; 78
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	ee e4       	ldi	r30, 0x4E	; 78
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	87 7f       	andi	r24, 0xF7	; 247
    32d2:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    32d4:	ae e4       	ldi	r26, 0x4E	; 78
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	ee e4       	ldi	r30, 0x4E	; 78
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	8f 7e       	andi	r24, 0xEF	; 239
    32e0:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, OCIE1B);
    32e2:	a9 e5       	ldi	r26, 0x59	; 89
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e9 e5       	ldi	r30, 0x59	; 89
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	88 60       	ori	r24, 0x08	; 8
    32ee:	8c 93       	st	X, r24
    32f0:	55 c0       	rjmp	.+170    	; 0x339c <Timers_enu_Init+0x3d6>
        break;
        case FAST_PWM_NON_INVERTING:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    32f2:	af e4       	ldi	r26, 0x4F	; 79
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	ef e4       	ldi	r30, 0x4F	; 79
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	8e 7f       	andi	r24, 0xFE	; 254
    32fe:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3300:	af e4       	ldi	r26, 0x4F	; 79
    3302:	b0 e0       	ldi	r27, 0x00	; 0
    3304:	ef e4       	ldi	r30, 0x4F	; 79
    3306:	f0 e0       	ldi	r31, 0x00	; 0
    3308:	80 81       	ld	r24, Z
    330a:	82 60       	ori	r24, 0x02	; 2
    330c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    330e:	ae e4       	ldi	r26, 0x4E	; 78
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	ee e4       	ldi	r30, 0x4E	; 78
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	88 60       	ori	r24, 0x08	; 8
    331a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    331c:	ae e4       	ldi	r26, 0x4E	; 78
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	ee e4       	ldi	r30, 0x4E	; 78
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	80 61       	ori	r24, 0x10	; 16
    3328:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    332a:	af e4       	ldi	r26, 0x4F	; 79
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	ef e4       	ldi	r30, 0x4F	; 79
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	80 68       	ori	r24, 0x80	; 128
    3336:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    3338:	af e4       	ldi	r26, 0x4F	; 79
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	ef e4       	ldi	r30, 0x4F	; 79
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	8f 7b       	andi	r24, 0xBF	; 191
    3344:	8c 93       	st	X, r24
    3346:	2a c0       	rjmp	.+84     	; 0x339c <Timers_enu_Init+0x3d6>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    3348:	af e4       	ldi	r26, 0x4F	; 79
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	ef e4       	ldi	r30, 0x4F	; 79
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	81 60       	ori	r24, 0x01	; 1
    3354:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3356:	af e4       	ldi	r26, 0x4F	; 79
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	ef e4       	ldi	r30, 0x4F	; 79
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	82 60       	ori	r24, 0x02	; 2
    3362:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3364:	ae e4       	ldi	r26, 0x4E	; 78
    3366:	b0 e0       	ldi	r27, 0x00	; 0
    3368:	ee e4       	ldi	r30, 0x4E	; 78
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	80 81       	ld	r24, Z
    336e:	87 7f       	andi	r24, 0xF7	; 247
    3370:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    3372:	ae e4       	ldi	r26, 0x4E	; 78
    3374:	b0 e0       	ldi	r27, 0x00	; 0
    3376:	ee e4       	ldi	r30, 0x4E	; 78
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
    337c:	80 61       	ori	r24, 0x10	; 16
    337e:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    3380:	af e4       	ldi	r26, 0x4F	; 79
    3382:	b0 e0       	ldi	r27, 0x00	; 0
    3384:	ef e4       	ldi	r30, 0x4F	; 79
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	80 81       	ld	r24, Z
    338a:	80 68       	ori	r24, 0x80	; 128
    338c:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    338e:	af e4       	ldi	r26, 0x4F	; 79
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	ef e4       	ldi	r30, 0x4F	; 79
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	8f 7b       	andi	r24, 0xBF	; 191
    339a:	8c 93       	st	X, r24
        break;
        }
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    339c:	ae e4       	ldi	r26, 0x4E	; 78
    339e:	b0 e0       	ldi	r27, 0x00	; 0
    33a0:	ee e4       	ldi	r30, 0x4E	; 78
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	90 81       	ld	r25, Z
    33a6:	8c 81       	ldd	r24, Y+4	; 0x04
    33a8:	89 2b       	or	r24, r25
    33aa:	8c 93       	st	X, r24
    Timer1_u8_Prescaler = Copy_u8_Prescaler;
    33ac:	8c 81       	ldd	r24, Y+4	; 0x04
    33ae:	80 93 02 01 	sts	0x0102, r24
    33b2:	01 c0       	rjmp	.+2      	; 0x33b6 <Timers_enu_Init+0x3f0>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    33b4:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    33b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    33b8:	2a 96       	adiw	r28, 0x0a	; 10
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	29 97       	sbiw	r28, 0x09	; 9
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	8a 83       	std	Y+2, r24	; 0x02
    33e0:	7c 83       	std	Y+4, r23	; 0x04
    33e2:	6b 83       	std	Y+3, r22	; 0x03
    33e4:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo<2)&(Copy_pf != NULL) && (Copy_u8_Mode<7)){
    33ea:	19 86       	std	Y+9, r1	; 0x09
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	82 30       	cpi	r24, 0x02	; 2
    33f0:	10 f4       	brcc	.+4      	; 0x33f6 <Timers_enu_SetCallBack+0x2c>
    33f2:	21 e0       	ldi	r18, 0x01	; 1
    33f4:	29 87       	std	Y+9, r18	; 0x09
    33f6:	18 86       	std	Y+8, r1	; 0x08
    33f8:	8b 81       	ldd	r24, Y+3	; 0x03
    33fa:	9c 81       	ldd	r25, Y+4	; 0x04
    33fc:	00 97       	sbiw	r24, 0x00	; 0
    33fe:	11 f0       	breq	.+4      	; 0x3404 <Timers_enu_SetCallBack+0x3a>
    3400:	31 e0       	ldi	r19, 0x01	; 1
    3402:	38 87       	std	Y+8, r19	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	98 85       	ldd	r25, Y+8	; 0x08
    3408:	89 23       	and	r24, r25
    340a:	91 e0       	ldi	r25, 0x01	; 1
    340c:	89 27       	eor	r24, r25
    340e:	88 23       	and	r24, r24
    3410:	61 f5       	brne	.+88     	; 0x346a <Timers_enu_SetCallBack+0xa0>
    3412:	8d 81       	ldd	r24, Y+5	; 0x05
    3414:	87 30       	cpi	r24, 0x07	; 7
    3416:	48 f5       	brcc	.+82     	; 0x346a <Timers_enu_SetCallBack+0xa0>
        switch (Copy_u8_TimerNo)
    3418:	8a 81       	ldd	r24, Y+2	; 0x02
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	3f 83       	std	Y+7, r19	; 0x07
    3420:	2e 83       	std	Y+6, r18	; 0x06
    3422:	8e 81       	ldd	r24, Y+6	; 0x06
    3424:	9f 81       	ldd	r25, Y+7	; 0x07
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	31 f0       	breq	.+12     	; 0x3436 <Timers_enu_SetCallBack+0x6c>
    342a:	2e 81       	ldd	r18, Y+6	; 0x06
    342c:	3f 81       	ldd	r19, Y+7	; 0x07
    342e:	21 30       	cpi	r18, 0x01	; 1
    3430:	31 05       	cpc	r19, r1
    3432:	71 f0       	breq	.+28     	; 0x3450 <Timers_enu_SetCallBack+0x86>
    3434:	1b c0       	rjmp	.+54     	; 0x346c <Timers_enu_SetCallBack+0xa2>
        {
        case TIMER0:
            Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	88 2f       	mov	r24, r24
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	fc 01       	movw	r30, r24
    3442:	e9 50       	subi	r30, 0x09	; 9
    3444:	ff 4f       	sbci	r31, 0xFF	; 255
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	9c 81       	ldd	r25, Y+4	; 0x04
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	80 83       	st	Z, r24
    344e:	0e c0       	rjmp	.+28     	; 0x346c <Timers_enu_SetCallBack+0xa2>
        break;
        case TIMER1:
            Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	88 2f       	mov	r24, r24
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	88 0f       	add	r24, r24
    3458:	99 1f       	adc	r25, r25
    345a:	fc 01       	movw	r30, r24
    345c:	e5 50       	subi	r30, 0x05	; 5
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	9c 81       	ldd	r25, Y+4	; 0x04
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	80 83       	st	Z, r24
    3468:	01 c0       	rjmp	.+2      	; 0x346c <Timers_enu_SetCallBack+0xa2>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    346a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    346c:	89 81       	ldd	r24, Y+1	; 0x01
}
    346e:	29 96       	adiw	r28, 0x09	; 9
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	00 d0       	rcall	.+0      	; 0x3486 <Timers_enu_SetCLKSource+0x6>
    3486:	00 d0       	rcall	.+0      	; 0x3488 <Timers_enu_SetCLKSource+0x8>
    3488:	0f 92       	push	r0
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	8a 83       	std	Y+2, r24	; 0x02
    3490:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 2)){
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	88 30       	cpi	r24, 0x08	; 8
    349a:	c0 f5       	brcc	.+112    	; 0x350c <Timers_enu_SetCLKSource+0x8c>
    349c:	8a 81       	ldd	r24, Y+2	; 0x02
    349e:	82 30       	cpi	r24, 0x02	; 2
    34a0:	a8 f5       	brcc	.+106    	; 0x350c <Timers_enu_SetCLKSource+0x8c>
        switch (Copy_u8_TimerNo)
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	28 2f       	mov	r18, r24
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	3d 83       	std	Y+5, r19	; 0x05
    34aa:	2c 83       	std	Y+4, r18	; 0x04
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	9d 81       	ldd	r25, Y+5	; 0x05
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	31 f0       	breq	.+12     	; 0x34c0 <Timers_enu_SetCLKSource+0x40>
    34b4:	2c 81       	ldd	r18, Y+4	; 0x04
    34b6:	3d 81       	ldd	r19, Y+5	; 0x05
    34b8:	21 30       	cpi	r18, 0x01	; 1
    34ba:	31 05       	cpc	r19, r1
    34bc:	a1 f0       	breq	.+40     	; 0x34e6 <Timers_enu_SetCLKSource+0x66>
    34be:	27 c0       	rjmp	.+78     	; 0x350e <Timers_enu_SetCLKSource+0x8e>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    34c0:	a3 e5       	ldi	r26, 0x53	; 83
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e3 e5       	ldi	r30, 0x53	; 83
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	88 7f       	andi	r24, 0xF8	; 248
    34cc:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    34ce:	a3 e5       	ldi	r26, 0x53	; 83
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e3 e5       	ldi	r30, 0x53	; 83
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	90 81       	ld	r25, Z
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	89 2b       	or	r24, r25
    34dc:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	80 93 01 01 	sts	0x0101, r24
    34e4:	14 c0       	rjmp	.+40     	; 0x350e <Timers_enu_SetCLKSource+0x8e>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    34e6:	ae e4       	ldi	r26, 0x4E	; 78
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	ee e4       	ldi	r30, 0x4E	; 78
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	88 7f       	andi	r24, 0xF8	; 248
    34f2:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    34f4:	ae e4       	ldi	r26, 0x4E	; 78
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	ee e4       	ldi	r30, 0x4E	; 78
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	90 81       	ld	r25, Z
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	89 2b       	or	r24, r25
    3502:	8c 93       	st	X, r24
            Timer1_u8_Prescaler = Copy_u8_CLK_Source;
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	80 93 02 01 	sts	0x0102, r24
    350a:	01 c0       	rjmp	.+2      	; 0x350e <Timers_enu_SetCLKSource+0x8e>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    350c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    350e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	cf 91       	pop	r28
    351c:	df 91       	pop	r29
    351e:	08 95       	ret

00003520 <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)
{
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	2d 97       	sbiw	r28, 0x0d	; 13
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	69 87       	std	Y+9, r22	; 0x09
    353e:	7a 87       	std	Y+10, r23	; 0x0a
    3540:	8b 87       	std	Y+11, r24	; 0x0b
    3542:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    3544:	a3 e5       	ldi	r26, 0x53	; 83
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e3 e5       	ldi	r30, 0x53	; 83
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	90 81       	ld	r25, Z
    354e:	80 91 01 01 	lds	r24, 0x0101
    3552:	89 2b       	or	r24, r25
    3554:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = 256 * 8 / F_CPU;
    3556:	80 e8       	ldi	r24, 0x80	; 128
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	98 87       	std	Y+8, r25	; 0x08
    355c:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000) / local_u16_OVF_Time;
    355e:	89 85       	ldd	r24, Y+9	; 0x09
    3560:	9a 85       	ldd	r25, Y+10	; 0x0a
    3562:	ab 85       	ldd	r26, Y+11	; 0x0b
    3564:	bc 85       	ldd	r27, Y+12	; 0x0c
    3566:	28 ee       	ldi	r18, 0xE8	; 232
    3568:	33 e0       	ldi	r19, 0x03	; 3
    356a:	40 e0       	ldi	r20, 0x00	; 0
    356c:	50 e0       	ldi	r21, 0x00	; 0
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__mulsi3>
    3576:	7b 01       	movw	r14, r22
    3578:	8c 01       	movw	r16, r24
    357a:	8f 81       	ldd	r24, Y+7	; 0x07
    357c:	98 85       	ldd	r25, Y+8	; 0x08
    357e:	9c 01       	movw	r18, r24
    3580:	40 e0       	ldi	r20, 0x00	; 0
    3582:	50 e0       	ldi	r21, 0x00	; 0
    3584:	c8 01       	movw	r24, r16
    3586:	b7 01       	movw	r22, r14
    3588:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <__udivmodsi4>
    358c:	da 01       	movw	r26, r20
    358e:	c9 01       	movw	r24, r18
    3590:	9e 83       	std	Y+6, r25	; 0x06
    3592:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    3594:	89 85       	ldd	r24, Y+9	; 0x09
    3596:	9a 85       	ldd	r25, Y+10	; 0x0a
    3598:	ab 85       	ldd	r26, Y+11	; 0x0b
    359a:	bc 85       	ldd	r27, Y+12	; 0x0c
    359c:	28 ee       	ldi	r18, 0xE8	; 232
    359e:	33 e0       	ldi	r19, 0x03	; 3
    35a0:	40 e0       	ldi	r20, 0x00	; 0
    35a2:	50 e0       	ldi	r21, 0x00	; 0
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__mulsi3>
    35ac:	7b 01       	movw	r14, r22
    35ae:	8c 01       	movw	r16, r24
    35b0:	8f 81       	ldd	r24, Y+7	; 0x07
    35b2:	98 85       	ldd	r25, Y+8	; 0x08
    35b4:	9c 01       	movw	r18, r24
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	c8 01       	movw	r24, r16
    35bc:	b7 01       	movw	r22, r14
    35be:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <__udivmodsi4>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	aa 1f       	adc	r26, r26
    35cc:	bb 1f       	adc	r27, r27
    35ce:	88 0f       	add	r24, r24
    35d0:	99 1f       	adc	r25, r25
    35d2:	aa 1f       	adc	r26, r26
    35d4:	bb 1f       	adc	r27, r27
    35d6:	88 0f       	add	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	aa 1f       	adc	r26, r26
    35dc:	bb 1f       	adc	r27, r27
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	aa 1f       	adc	r26, r26
    35e4:	bb 1f       	adc	r27, r27
    35e6:	68 94       	set
    35e8:	12 f8       	bld	r1, 2
    35ea:	b6 95       	lsr	r27
    35ec:	a7 95       	ror	r26
    35ee:	97 95       	ror	r25
    35f0:	87 95       	ror	r24
    35f2:	16 94       	lsr	r1
    35f4:	d1 f7       	brne	.-12     	; 0x35ea <Timers_enu_delay_ms+0xca>
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    35fa:	e2 e5       	ldi	r30, 0x52	; 82
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	81 95       	neg	r24
    3602:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    3604:	1a 82       	std	Y+2, r1	; 0x02
    3606:	19 82       	std	Y+1, r1	; 0x01
    3608:	15 c0       	rjmp	.+42     	; 0x3634 <Timers_enu_delay_ms+0x114>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    360a:	a8 e5       	ldi	r26, 0x58	; 88
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e8 e5       	ldi	r30, 0x58	; 88
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	81 60       	ori	r24, 0x01	; 1
    3616:	8c 93       	st	X, r24
        local_u16_counter++;
    3618:	89 81       	ldd	r24, Y+1	; 0x01
    361a:	9a 81       	ldd	r25, Y+2	; 0x02
    361c:	01 96       	adiw	r24, 0x01	; 1
    361e:	9a 83       	std	Y+2, r25	; 0x02
    3620:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    3622:	e8 e5       	ldi	r30, 0x58	; 88
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	88 2f       	mov	r24, r24
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	81 70       	andi	r24, 0x01	; 1
    362e:	90 70       	andi	r25, 0x00	; 0
    3630:	88 23       	and	r24, r24
    3632:	59 f7       	brne	.-42     	; 0x360a <Timers_enu_delay_ms+0xea>
    u16 local_u16_OVF_Time = 256 * 8 / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    3634:	8d 81       	ldd	r24, Y+5	; 0x05
    3636:	9e 81       	ldd	r25, Y+6	; 0x06
    3638:	9c 01       	movw	r18, r24
    363a:	2f 5f       	subi	r18, 0xFF	; 255
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	89 81       	ldd	r24, Y+1	; 0x01
    3640:	9a 81       	ldd	r25, Y+2	; 0x02
    3642:	28 17       	cp	r18, r24
    3644:	39 07       	cpc	r19, r25
    3646:	69 f7       	brne	.-38     	; 0x3622 <Timers_enu_delay_ms+0x102>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3648:	a3 e5       	ldi	r26, 0x53	; 83
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e3 e5       	ldi	r30, 0x53	; 83
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	88 7f       	andi	r24, 0xF8	; 248
    3654:	8c 93       	st	X, r24
}
    3656:	2d 96       	adiw	r28, 0x0d	; 13
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	08 95       	ret

00003670 <Timers_enu_SetTimerValue>:
ES_t Timers_enu_SetTimerValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	00 d0       	rcall	.+0      	; 0x3676 <Timers_enu_SetTimerValue+0x6>
    3676:	00 d0       	rcall	.+0      	; 0x3678 <Timers_enu_SetTimerValue+0x8>
    3678:	00 d0       	rcall	.+0      	; 0x367a <Timers_enu_SetTimerValue+0xa>
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	8a 83       	std	Y+2, r24	; 0x02
    3680:	7c 83       	std	Y+4, r23	; 0x04
    3682:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	83 30       	cpi	r24, 0x03	; 3
    368c:	d8 f4       	brcc	.+54     	; 0x36c4 <Timers_enu_SetTimerValue+0x54>
        switch (Copy_u8_TimerNo)
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	3e 83       	std	Y+6, r19	; 0x06
    3696:	2d 83       	std	Y+5, r18	; 0x05
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	31 f0       	breq	.+12     	; 0x36ac <Timers_enu_SetTimerValue+0x3c>
    36a0:	2d 81       	ldd	r18, Y+5	; 0x05
    36a2:	3e 81       	ldd	r19, Y+6	; 0x06
    36a4:	21 30       	cpi	r18, 0x01	; 1
    36a6:	31 05       	cpc	r19, r1
    36a8:	31 f0       	breq	.+12     	; 0x36b6 <Timers_enu_SetTimerValue+0x46>
    36aa:	0d c0       	rjmp	.+26     	; 0x36c6 <Timers_enu_SetTimerValue+0x56>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    36ac:	e2 e5       	ldi	r30, 0x52	; 82
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	8b 81       	ldd	r24, Y+3	; 0x03
    36b2:	80 83       	st	Z, r24
    36b4:	08 c0       	rjmp	.+16     	; 0x36c6 <Timers_enu_SetTimerValue+0x56>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    36b6:	ec e4       	ldi	r30, 0x4C	; 76
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	8b 81       	ldd	r24, Y+3	; 0x03
    36bc:	9c 81       	ldd	r25, Y+4	; 0x04
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
    36c2:	01 c0       	rjmp	.+2      	; 0x36c6 <Timers_enu_SetTimerValue+0x56>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    36c4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    36c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    36c8:	26 96       	adiw	r28, 0x06	; 6
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <Timers_enu_GetTimerValue>:
ES_t Timers_enu_GetTimerValue(u8 Copy_u8_TimerNo,u16 *Copy_u8_Value){
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <Timers_enu_GetTimerValue+0x6>
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <Timers_enu_GetTimerValue+0x8>
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <Timers_enu_GetTimerValue+0xa>
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	8a 83       	std	Y+2, r24	; 0x02
    36ea:	7c 83       	std	Y+4, r23	; 0x04
    36ec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	83 30       	cpi	r24, 0x03	; 3
    36f6:	10 f5       	brcc	.+68     	; 0x373c <Timers_enu_GetTimerValue+0x62>
        switch (Copy_u8_TimerNo)
    36f8:	8a 81       	ldd	r24, Y+2	; 0x02
    36fa:	28 2f       	mov	r18, r24
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	3e 83       	std	Y+6, r19	; 0x06
    3700:	2d 83       	std	Y+5, r18	; 0x05
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	31 f0       	breq	.+12     	; 0x3716 <Timers_enu_GetTimerValue+0x3c>
    370a:	2d 81       	ldd	r18, Y+5	; 0x05
    370c:	3e 81       	ldd	r19, Y+6	; 0x06
    370e:	21 30       	cpi	r18, 0x01	; 1
    3710:	31 05       	cpc	r19, r1
    3712:	59 f0       	breq	.+22     	; 0x372a <Timers_enu_GetTimerValue+0x50>
    3714:	14 c0       	rjmp	.+40     	; 0x373e <Timers_enu_GetTimerValue+0x64>
        {
        case TIMER0:
            *Copy_u8_Value = TIMER0_TCNT0_REG;
    3716:	e2 e5       	ldi	r30, 0x52	; 82
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	eb 81       	ldd	r30, Y+3	; 0x03
    3722:	fc 81       	ldd	r31, Y+4	; 0x04
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	80 83       	st	Z, r24
    3728:	0a c0       	rjmp	.+20     	; 0x373e <Timers_enu_GetTimerValue+0x64>
        break;
        case TIMER1:
            *Copy_u8_Value = TIMER1_TCNT1_REG;
    372a:	ec e4       	ldi	r30, 0x4C	; 76
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	eb 81       	ldd	r30, Y+3	; 0x03
    3734:	fc 81       	ldd	r31, Y+4	; 0x04
    3736:	91 83       	std	Z+1, r25	; 0x01
    3738:	80 83       	st	Z, r24
    373a:	01 c0       	rjmp	.+2      	; 0x373e <Timers_enu_GetTimerValue+0x64>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    373c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    373e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3740:	26 96       	adiw	r28, 0x06	; 6
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <Timers_enu_Timer0SetCompareValue>:
ES_t Timers_enu_Timer0SetCompareValue(u8 Copy_u8_Value){
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	0f 92       	push	r0
    3758:	cd b7       	in	r28, 0x3d	; 61
    375a:	de b7       	in	r29, 0x3e	; 62
    375c:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OCR0_REG = Copy_u8_Value;
    375e:	ec e5       	ldi	r30, 0x5C	; 92
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	80 83       	st	Z, r24
    return STATE_OK;
    3766:	81 e0       	ldi	r24, 0x01	; 1
}
    3768:	0f 90       	pop	r0
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <Timers_enu_Timer1_setTopValue+0x6>
    3776:	0f 92       	push	r0
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    3780:	e6 e4       	ldi	r30, 0x46	; 70
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	9a 81       	ldd	r25, Y+2	; 0x02
    3788:	91 83       	std	Z+1, r25	; 0x01
    378a:	80 83       	st	Z, r24
}
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	0f 90       	pop	r0
    3792:	cf 91       	pop	r28
    3794:	df 91       	pop	r29
    3796:	08 95       	ret

00003798 <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    3798:	df 93       	push	r29
    379a:	cf 93       	push	r28
    379c:	00 d0       	rcall	.+0      	; 0x379e <Timers_enu_Timer1SetCompareValue+0x6>
    379e:	00 d0       	rcall	.+0      	; 0x37a0 <Timers_enu_Timer1SetCompareValue+0x8>
    37a0:	00 d0       	rcall	.+0      	; 0x37a2 <Timers_enu_Timer1SetCompareValue+0xa>
    37a2:	cd b7       	in	r28, 0x3d	; 61
    37a4:	de b7       	in	r29, 0x3e	; 62
    37a6:	8a 83       	std	Y+2, r24	; 0x02
    37a8:	7c 83       	std	Y+4, r23	; 0x04
    37aa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	82 30       	cpi	r24, 0x02	; 2
    37b4:	e8 f4       	brcc	.+58     	; 0x37f0 <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	28 2f       	mov	r18, r24
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	3e 83       	std	Y+6, r19	; 0x06
    37be:	2d 83       	std	Y+5, r18	; 0x05
    37c0:	8d 81       	ldd	r24, Y+5	; 0x05
    37c2:	9e 81       	ldd	r25, Y+6	; 0x06
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	31 f0       	breq	.+12     	; 0x37d4 <Timers_enu_Timer1SetCompareValue+0x3c>
    37c8:	2d 81       	ldd	r18, Y+5	; 0x05
    37ca:	3e 81       	ldd	r19, Y+6	; 0x06
    37cc:	21 30       	cpi	r18, 0x01	; 1
    37ce:	31 05       	cpc	r19, r1
    37d0:	41 f0       	breq	.+16     	; 0x37e2 <Timers_enu_Timer1SetCompareValue+0x4a>
    37d2:	0f c0       	rjmp	.+30     	; 0x37f2 <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    37d4:	ea e4       	ldi	r30, 0x4A	; 74
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	8b 81       	ldd	r24, Y+3	; 0x03
    37da:	9c 81       	ldd	r25, Y+4	; 0x04
    37dc:	91 83       	std	Z+1, r25	; 0x01
    37de:	80 83       	st	Z, r24
    37e0:	08 c0       	rjmp	.+16     	; 0x37f2 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    37e2:	e8 e4       	ldi	r30, 0x48	; 72
    37e4:	f0 e0       	ldi	r31, 0x00	; 0
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	91 83       	std	Z+1, r25	; 0x01
    37ec:	80 83       	st	Z, r24
    37ee:	01 c0       	rjmp	.+2      	; 0x37f2 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    37f0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37f4:	26 96       	adiw	r28, 0x06	; 6
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	00 d0       	rcall	.+0      	; 0x380c <Timers_enu_Stop+0x6>
    380c:	00 d0       	rcall	.+0      	; 0x380e <Timers_enu_Stop+0x8>
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<2){
    3818:	8a 81       	ldd	r24, Y+2	; 0x02
    381a:	82 30       	cpi	r24, 0x02	; 2
    381c:	c8 f5       	brcc	.+114    	; 0x3890 <Timers_enu_Stop+0x8a>
        switch (Copy_u8_TimerNo)
    381e:	8a 81       	ldd	r24, Y+2	; 0x02
    3820:	28 2f       	mov	r18, r24
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	3c 83       	std	Y+4, r19	; 0x04
    3826:	2b 83       	std	Y+3, r18	; 0x03
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	9c 81       	ldd	r25, Y+4	; 0x04
    382c:	00 97       	sbiw	r24, 0x00	; 0
    382e:	31 f0       	breq	.+12     	; 0x383c <Timers_enu_Stop+0x36>
    3830:	eb 81       	ldd	r30, Y+3	; 0x03
    3832:	fc 81       	ldd	r31, Y+4	; 0x04
    3834:	e1 30       	cpi	r30, 0x01	; 1
    3836:	f1 05       	cpc	r31, r1
    3838:	81 f0       	breq	.+32     	; 0x385a <Timers_enu_Stop+0x54>
    383a:	2b c0       	rjmp	.+86     	; 0x3892 <Timers_enu_Stop+0x8c>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    383c:	a3 e5       	ldi	r26, 0x53	; 83
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	e3 e5       	ldi	r30, 0x53	; 83
    3842:	f0 e0       	ldi	r31, 0x00	; 0
    3844:	80 81       	ld	r24, Z
    3846:	88 7f       	andi	r24, 0xF8	; 248
    3848:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    384a:	a2 e5       	ldi	r26, 0x52	; 82
    384c:	b0 e0       	ldi	r27, 0x00	; 0
    384e:	ec e5       	ldi	r30, 0x5C	; 92
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	10 82       	st	Z, r1
    3854:	80 81       	ld	r24, Z
    3856:	8c 93       	st	X, r24
    3858:	1c c0       	rjmp	.+56     	; 0x3892 <Timers_enu_Stop+0x8c>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    385a:	ae e4       	ldi	r26, 0x4E	; 78
    385c:	b0 e0       	ldi	r27, 0x00	; 0
    385e:	ee e4       	ldi	r30, 0x4E	; 78
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	80 81       	ld	r24, Z
    3864:	88 7f       	andi	r24, 0xF8	; 248
    3866:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    3868:	2c e4       	ldi	r18, 0x4C	; 76
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	aa e4       	ldi	r26, 0x4A	; 74
    386e:	b0 e0       	ldi	r27, 0x00	; 0
    3870:	e8 e4       	ldi	r30, 0x48	; 72
    3872:	f0 e0       	ldi	r31, 0x00	; 0
    3874:	11 82       	std	Z+1, r1	; 0x01
    3876:	10 82       	st	Z, r1
    3878:	80 81       	ld	r24, Z
    387a:	91 81       	ldd	r25, Z+1	; 0x01
    387c:	11 96       	adiw	r26, 0x01	; 1
    387e:	9c 93       	st	X, r25
    3880:	8e 93       	st	-X, r24
    3882:	8d 91       	ld	r24, X+
    3884:	9c 91       	ld	r25, X
    3886:	11 97       	sbiw	r26, 0x01	; 1
    3888:	f9 01       	movw	r30, r18
    388a:	91 83       	std	Z+1, r25	; 0x01
    388c:	80 83       	st	Z, r24
    388e:	01 c0       	rjmp	.+2      	; 0x3892 <Timers_enu_Stop+0x8c>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    3890:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3892:	89 81       	ldd	r24, Y+1	; 0x01
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	08 95       	ret

000038a2 <__vector_7>:

/*****ISR(Timer1) CTC Mode A*****/
void __vector_7(void){
    38a2:	1f 92       	push	r1
    38a4:	0f 92       	push	r0
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	0f 92       	push	r0
    38aa:	11 24       	eor	r1, r1
    38ac:	2f 93       	push	r18
    38ae:	3f 93       	push	r19
    38b0:	4f 93       	push	r20
    38b2:	5f 93       	push	r21
    38b4:	6f 93       	push	r22
    38b6:	7f 93       	push	r23
    38b8:	8f 93       	push	r24
    38ba:	9f 93       	push	r25
    38bc:	af 93       	push	r26
    38be:	bf 93       	push	r27
    38c0:	ef 93       	push	r30
    38c2:	ff 93       	push	r31
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    38cc:	80 91 fd 00 	lds	r24, 0x00FD
    38d0:	90 91 fe 00 	lds	r25, 0x00FE
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	29 f0       	breq	.+10     	; 0x38e2 <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    38d8:	e0 91 fd 00 	lds	r30, 0x00FD
    38dc:	f0 91 fe 00 	lds	r31, 0x00FE
    38e0:	09 95       	icall
}
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	ff 91       	pop	r31
    38e8:	ef 91       	pop	r30
    38ea:	bf 91       	pop	r27
    38ec:	af 91       	pop	r26
    38ee:	9f 91       	pop	r25
    38f0:	8f 91       	pop	r24
    38f2:	7f 91       	pop	r23
    38f4:	6f 91       	pop	r22
    38f6:	5f 91       	pop	r21
    38f8:	4f 91       	pop	r20
    38fa:	3f 91       	pop	r19
    38fc:	2f 91       	pop	r18
    38fe:	0f 90       	pop	r0
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	0f 90       	pop	r0
    3904:	1f 90       	pop	r1
    3906:	18 95       	reti

00003908 <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
void __vector_8(void){
    3908:	1f 92       	push	r1
    390a:	0f 92       	push	r0
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	0f 92       	push	r0
    3910:	11 24       	eor	r1, r1
    3912:	2f 93       	push	r18
    3914:	3f 93       	push	r19
    3916:	4f 93       	push	r20
    3918:	5f 93       	push	r21
    391a:	6f 93       	push	r22
    391c:	7f 93       	push	r23
    391e:	8f 93       	push	r24
    3920:	9f 93       	push	r25
    3922:	af 93       	push	r26
    3924:	bf 93       	push	r27
    3926:	ef 93       	push	r30
    3928:	ff 93       	push	r31
    392a:	df 93       	push	r29
    392c:	cf 93       	push	r28
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    3932:	80 91 ff 00 	lds	r24, 0x00FF
    3936:	90 91 00 01 	lds	r25, 0x0100
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	29 f0       	breq	.+10     	; 0x3948 <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    393e:	e0 91 ff 00 	lds	r30, 0x00FF
    3942:	f0 91 00 01 	lds	r31, 0x0100
    3946:	09 95       	icall
}
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	ff 91       	pop	r31
    394e:	ef 91       	pop	r30
    3950:	bf 91       	pop	r27
    3952:	af 91       	pop	r26
    3954:	9f 91       	pop	r25
    3956:	8f 91       	pop	r24
    3958:	7f 91       	pop	r23
    395a:	6f 91       	pop	r22
    395c:	5f 91       	pop	r21
    395e:	4f 91       	pop	r20
    3960:	3f 91       	pop	r19
    3962:	2f 91       	pop	r18
    3964:	0f 90       	pop	r0
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	0f 90       	pop	r0
    396a:	1f 90       	pop	r1
    396c:	18 95       	reti

0000396e <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
void __vector_9(void){
    396e:	1f 92       	push	r1
    3970:	0f 92       	push	r0
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	0f 92       	push	r0
    3976:	11 24       	eor	r1, r1
    3978:	2f 93       	push	r18
    397a:	3f 93       	push	r19
    397c:	4f 93       	push	r20
    397e:	5f 93       	push	r21
    3980:	6f 93       	push	r22
    3982:	7f 93       	push	r23
    3984:	8f 93       	push	r24
    3986:	9f 93       	push	r25
    3988:	af 93       	push	r26
    398a:	bf 93       	push	r27
    398c:	ef 93       	push	r30
    398e:	ff 93       	push	r31
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    3998:	80 91 fb 00 	lds	r24, 0x00FB
    399c:	90 91 fc 00 	lds	r25, 0x00FC
    39a0:	00 97       	sbiw	r24, 0x00	; 0
    39a2:	29 f0       	breq	.+10     	; 0x39ae <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    39a4:	e0 91 fb 00 	lds	r30, 0x00FB
    39a8:	f0 91 fc 00 	lds	r31, 0x00FC
    39ac:	09 95       	icall
}
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	ff 91       	pop	r31
    39b4:	ef 91       	pop	r30
    39b6:	bf 91       	pop	r27
    39b8:	af 91       	pop	r26
    39ba:	9f 91       	pop	r25
    39bc:	8f 91       	pop	r24
    39be:	7f 91       	pop	r23
    39c0:	6f 91       	pop	r22
    39c2:	5f 91       	pop	r21
    39c4:	4f 91       	pop	r20
    39c6:	3f 91       	pop	r19
    39c8:	2f 91       	pop	r18
    39ca:	0f 90       	pop	r0
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	0f 90       	pop	r0
    39d0:	1f 90       	pop	r1
    39d2:	18 95       	reti

000039d4 <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
void __vector_10(void){
    39d4:	1f 92       	push	r1
    39d6:	0f 92       	push	r0
    39d8:	0f b6       	in	r0, 0x3f	; 63
    39da:	0f 92       	push	r0
    39dc:	11 24       	eor	r1, r1
    39de:	2f 93       	push	r18
    39e0:	3f 93       	push	r19
    39e2:	4f 93       	push	r20
    39e4:	5f 93       	push	r21
    39e6:	6f 93       	push	r22
    39e8:	7f 93       	push	r23
    39ea:	8f 93       	push	r24
    39ec:	9f 93       	push	r25
    39ee:	af 93       	push	r26
    39f0:	bf 93       	push	r27
    39f2:	ef 93       	push	r30
    39f4:	ff 93       	push	r31
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    39fe:	80 91 f9 00 	lds	r24, 0x00F9
    3a02:	90 91 fa 00 	lds	r25, 0x00FA
    3a06:	00 97       	sbiw	r24, 0x00	; 0
    3a08:	29 f0       	breq	.+10     	; 0x3a14 <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    3a0a:	e0 91 f9 00 	lds	r30, 0x00F9
    3a0e:	f0 91 fa 00 	lds	r31, 0x00FA
    3a12:	09 95       	icall
}
    3a14:	cf 91       	pop	r28
    3a16:	df 91       	pop	r29
    3a18:	ff 91       	pop	r31
    3a1a:	ef 91       	pop	r30
    3a1c:	bf 91       	pop	r27
    3a1e:	af 91       	pop	r26
    3a20:	9f 91       	pop	r25
    3a22:	8f 91       	pop	r24
    3a24:	7f 91       	pop	r23
    3a26:	6f 91       	pop	r22
    3a28:	5f 91       	pop	r21
    3a2a:	4f 91       	pop	r20
    3a2c:	3f 91       	pop	r19
    3a2e:	2f 91       	pop	r18
    3a30:	0f 90       	pop	r0
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	0f 90       	pop	r0
    3a36:	1f 90       	pop	r1
    3a38:	18 95       	reti

00003a3a <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
void __vector_11(void){
    3a3a:	1f 92       	push	r1
    3a3c:	0f 92       	push	r0
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	0f 92       	push	r0
    3a42:	11 24       	eor	r1, r1
    3a44:	2f 93       	push	r18
    3a46:	3f 93       	push	r19
    3a48:	4f 93       	push	r20
    3a4a:	5f 93       	push	r21
    3a4c:	6f 93       	push	r22
    3a4e:	7f 93       	push	r23
    3a50:	8f 93       	push	r24
    3a52:	9f 93       	push	r25
    3a54:	af 93       	push	r26
    3a56:	bf 93       	push	r27
    3a58:	ef 93       	push	r30
    3a5a:	ff 93       	push	r31
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    3a64:	80 91 f7 00 	lds	r24, 0x00F7
    3a68:	90 91 f8 00 	lds	r25, 0x00F8
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	29 f0       	breq	.+10     	; 0x3a7a <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    3a70:	e0 91 f7 00 	lds	r30, 0x00F7
    3a74:	f0 91 f8 00 	lds	r31, 0x00F8
    3a78:	09 95       	icall
}
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	ff 91       	pop	r31
    3a80:	ef 91       	pop	r30
    3a82:	bf 91       	pop	r27
    3a84:	af 91       	pop	r26
    3a86:	9f 91       	pop	r25
    3a88:	8f 91       	pop	r24
    3a8a:	7f 91       	pop	r23
    3a8c:	6f 91       	pop	r22
    3a8e:	5f 91       	pop	r21
    3a90:	4f 91       	pop	r20
    3a92:	3f 91       	pop	r19
    3a94:	2f 91       	pop	r18
    3a96:	0f 90       	pop	r0
    3a98:	0f be       	out	0x3f, r0	; 63
    3a9a:	0f 90       	pop	r0
    3a9c:	1f 90       	pop	r1
    3a9e:	18 95       	reti

00003aa0 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    3aa8:	af e5       	ldi	r26, 0x5F	; 95
    3aaa:	b0 e0       	ldi	r27, 0x00	; 0
    3aac:	ef e5       	ldi	r30, 0x5F	; 95
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	80 68       	ori	r24, 0x80	; 128
    3ab4:	8c 93       	st	X, r24
    return STATE_OK;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
}
    3ab8:	cf 91       	pop	r28
    3aba:	df 91       	pop	r29
    3abc:	08 95       	ret

00003abe <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    3abe:	df 93       	push	r29
    3ac0:	cf 93       	push	r28
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    3ac6:	af e5       	ldi	r26, 0x5F	; 95
    3ac8:	b0 e0       	ldi	r27, 0x00	; 0
    3aca:	ef e5       	ldi	r30, 0x5F	; 95
    3acc:	f0 e0       	ldi	r31, 0x00	; 0
    3ace:	80 81       	ld	r24, Z
    3ad0:	8f 77       	andi	r24, 0x7F	; 127
    3ad2:	8c 93       	st	X, r24
    return STATE_OK;
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
}
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	08 95       	ret

00003adc <EXTI_enu_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
    3ae4:	2b 97       	sbiw	r28, 0x0b	; 11
    3ae6:	0f b6       	in	r0, 0x3f	; 63
    3ae8:	f8 94       	cli
    3aea:	de bf       	out	0x3e, r29	; 62
    3aec:	0f be       	out	0x3f, r0	; 63
    3aee:	cd bf       	out	0x3d, r28	; 61
    3af0:	8a 83       	std	Y+2, r24	; 0x02
    3af2:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	83 30       	cpi	r24, 0x03	; 3
    3afc:	08 f0       	brcs	.+2      	; 0x3b00 <EXTI_enu_Enable+0x24>
    3afe:	07 c1       	rjmp	.+526    	; 0x3d0e <EXTI_enu_Enable+0x232>
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	84 30       	cpi	r24, 0x04	; 4
    3b04:	08 f0       	brcs	.+2      	; 0x3b08 <EXTI_enu_Enable+0x2c>
    3b06:	03 c1       	rjmp	.+518    	; 0x3d0e <EXTI_enu_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	3b 87       	std	Y+11, r19	; 0x0b
    3b10:	2a 87       	std	Y+10, r18	; 0x0a
    3b12:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b14:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b16:	81 30       	cpi	r24, 0x01	; 1
    3b18:	91 05       	cpc	r25, r1
    3b1a:	09 f4       	brne	.+2      	; 0x3b1e <EXTI_enu_Enable+0x42>
    3b1c:	6d c0       	rjmp	.+218    	; 0x3bf8 <EXTI_enu_Enable+0x11c>
    3b1e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b20:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b22:	22 30       	cpi	r18, 0x02	; 2
    3b24:	31 05       	cpc	r19, r1
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <EXTI_enu_Enable+0x4e>
    3b28:	c9 c0       	rjmp	.+402    	; 0x3cbc <EXTI_enu_Enable+0x1e0>
    3b2a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b2c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <EXTI_enu_Enable+0x58>
    3b32:	ee c0       	rjmp	.+476    	; 0x3d10 <EXTI_enu_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    3b34:	ab e5       	ldi	r26, 0x5B	; 91
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	eb e5       	ldi	r30, 0x5B	; 91
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	80 81       	ld	r24, Z
    3b3e:	80 64       	ori	r24, 0x40	; 64
    3b40:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	28 2f       	mov	r18, r24
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	39 87       	std	Y+9, r19	; 0x09
    3b4a:	28 87       	std	Y+8, r18	; 0x08
    3b4c:	88 85       	ldd	r24, Y+8	; 0x08
    3b4e:	99 85       	ldd	r25, Y+9	; 0x09
    3b50:	81 30       	cpi	r24, 0x01	; 1
    3b52:	91 05       	cpc	r25, r1
    3b54:	21 f1       	breq	.+72     	; 0x3b9e <EXTI_enu_Enable+0xc2>
    3b56:	28 85       	ldd	r18, Y+8	; 0x08
    3b58:	39 85       	ldd	r19, Y+9	; 0x09
    3b5a:	22 30       	cpi	r18, 0x02	; 2
    3b5c:	31 05       	cpc	r19, r1
    3b5e:	2c f4       	brge	.+10     	; 0x3b6a <EXTI_enu_Enable+0x8e>
    3b60:	88 85       	ldd	r24, Y+8	; 0x08
    3b62:	99 85       	ldd	r25, Y+9	; 0x09
    3b64:	00 97       	sbiw	r24, 0x00	; 0
    3b66:	61 f0       	breq	.+24     	; 0x3b80 <EXTI_enu_Enable+0xa4>
    3b68:	d3 c0       	rjmp	.+422    	; 0x3d10 <EXTI_enu_Enable+0x234>
    3b6a:	28 85       	ldd	r18, Y+8	; 0x08
    3b6c:	39 85       	ldd	r19, Y+9	; 0x09
    3b6e:	22 30       	cpi	r18, 0x02	; 2
    3b70:	31 05       	cpc	r19, r1
    3b72:	21 f1       	breq	.+72     	; 0x3bbc <EXTI_enu_Enable+0xe0>
    3b74:	88 85       	ldd	r24, Y+8	; 0x08
    3b76:	99 85       	ldd	r25, Y+9	; 0x09
    3b78:	83 30       	cpi	r24, 0x03	; 3
    3b7a:	91 05       	cpc	r25, r1
    3b7c:	71 f1       	breq	.+92     	; 0x3bda <EXTI_enu_Enable+0xfe>
    3b7e:	c8 c0       	rjmp	.+400    	; 0x3d10 <EXTI_enu_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3b80:	a5 e5       	ldi	r26, 0x55	; 85
    3b82:	b0 e0       	ldi	r27, 0x00	; 0
    3b84:	e5 e5       	ldi	r30, 0x55	; 85
    3b86:	f0 e0       	ldi	r31, 0x00	; 0
    3b88:	80 81       	ld	r24, Z
    3b8a:	8e 7f       	andi	r24, 0xFE	; 254
    3b8c:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3b8e:	a5 e5       	ldi	r26, 0x55	; 85
    3b90:	b0 e0       	ldi	r27, 0x00	; 0
    3b92:	e5 e5       	ldi	r30, 0x55	; 85
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	8d 7f       	andi	r24, 0xFD	; 253
    3b9a:	8c 93       	st	X, r24
    3b9c:	b9 c0       	rjmp	.+370    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3b9e:	a5 e5       	ldi	r26, 0x55	; 85
    3ba0:	b0 e0       	ldi	r27, 0x00	; 0
    3ba2:	e5 e5       	ldi	r30, 0x55	; 85
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 81       	ld	r24, Z
    3ba8:	81 60       	ori	r24, 0x01	; 1
    3baa:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3bac:	a5 e5       	ldi	r26, 0x55	; 85
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	e5 e5       	ldi	r30, 0x55	; 85
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	80 81       	ld	r24, Z
    3bb6:	8d 7f       	andi	r24, 0xFD	; 253
    3bb8:	8c 93       	st	X, r24
    3bba:	aa c0       	rjmp	.+340    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3bbc:	a5 e5       	ldi	r26, 0x55	; 85
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	e5 e5       	ldi	r30, 0x55	; 85
    3bc2:	f0 e0       	ldi	r31, 0x00	; 0
    3bc4:	80 81       	ld	r24, Z
    3bc6:	8e 7f       	andi	r24, 0xFE	; 254
    3bc8:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3bca:	a5 e5       	ldi	r26, 0x55	; 85
    3bcc:	b0 e0       	ldi	r27, 0x00	; 0
    3bce:	e5 e5       	ldi	r30, 0x55	; 85
    3bd0:	f0 e0       	ldi	r31, 0x00	; 0
    3bd2:	80 81       	ld	r24, Z
    3bd4:	82 60       	ori	r24, 0x02	; 2
    3bd6:	8c 93       	st	X, r24
    3bd8:	9b c0       	rjmp	.+310    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3bda:	a5 e5       	ldi	r26, 0x55	; 85
    3bdc:	b0 e0       	ldi	r27, 0x00	; 0
    3bde:	e5 e5       	ldi	r30, 0x55	; 85
    3be0:	f0 e0       	ldi	r31, 0x00	; 0
    3be2:	80 81       	ld	r24, Z
    3be4:	81 60       	ori	r24, 0x01	; 1
    3be6:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3be8:	a5 e5       	ldi	r26, 0x55	; 85
    3bea:	b0 e0       	ldi	r27, 0x00	; 0
    3bec:	e5 e5       	ldi	r30, 0x55	; 85
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	82 60       	ori	r24, 0x02	; 2
    3bf4:	8c 93       	st	X, r24
    3bf6:	8c c0       	rjmp	.+280    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    3bf8:	ab e5       	ldi	r26, 0x5B	; 91
    3bfa:	b0 e0       	ldi	r27, 0x00	; 0
    3bfc:	eb e5       	ldi	r30, 0x5B	; 91
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	80 68       	ori	r24, 0x80	; 128
    3c04:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3c06:	8b 81       	ldd	r24, Y+3	; 0x03
    3c08:	28 2f       	mov	r18, r24
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	3f 83       	std	Y+7, r19	; 0x07
    3c0e:	2e 83       	std	Y+6, r18	; 0x06
    3c10:	8e 81       	ldd	r24, Y+6	; 0x06
    3c12:	9f 81       	ldd	r25, Y+7	; 0x07
    3c14:	81 30       	cpi	r24, 0x01	; 1
    3c16:	91 05       	cpc	r25, r1
    3c18:	21 f1       	breq	.+72     	; 0x3c62 <EXTI_enu_Enable+0x186>
    3c1a:	2e 81       	ldd	r18, Y+6	; 0x06
    3c1c:	3f 81       	ldd	r19, Y+7	; 0x07
    3c1e:	22 30       	cpi	r18, 0x02	; 2
    3c20:	31 05       	cpc	r19, r1
    3c22:	2c f4       	brge	.+10     	; 0x3c2e <EXTI_enu_Enable+0x152>
    3c24:	8e 81       	ldd	r24, Y+6	; 0x06
    3c26:	9f 81       	ldd	r25, Y+7	; 0x07
    3c28:	00 97       	sbiw	r24, 0x00	; 0
    3c2a:	61 f0       	breq	.+24     	; 0x3c44 <EXTI_enu_Enable+0x168>
    3c2c:	71 c0       	rjmp	.+226    	; 0x3d10 <EXTI_enu_Enable+0x234>
    3c2e:	2e 81       	ldd	r18, Y+6	; 0x06
    3c30:	3f 81       	ldd	r19, Y+7	; 0x07
    3c32:	22 30       	cpi	r18, 0x02	; 2
    3c34:	31 05       	cpc	r19, r1
    3c36:	21 f1       	breq	.+72     	; 0x3c80 <EXTI_enu_Enable+0x1a4>
    3c38:	8e 81       	ldd	r24, Y+6	; 0x06
    3c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c3c:	83 30       	cpi	r24, 0x03	; 3
    3c3e:	91 05       	cpc	r25, r1
    3c40:	71 f1       	breq	.+92     	; 0x3c9e <EXTI_enu_Enable+0x1c2>
    3c42:	66 c0       	rjmp	.+204    	; 0x3d10 <EXTI_enu_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c44:	a5 e5       	ldi	r26, 0x55	; 85
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	e5 e5       	ldi	r30, 0x55	; 85
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	8b 7f       	andi	r24, 0xFB	; 251
    3c50:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c52:	a5 e5       	ldi	r26, 0x55	; 85
    3c54:	b0 e0       	ldi	r27, 0x00	; 0
    3c56:	e5 e5       	ldi	r30, 0x55	; 85
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	80 81       	ld	r24, Z
    3c5c:	87 7f       	andi	r24, 0xF7	; 247
    3c5e:	8c 93       	st	X, r24
    3c60:	57 c0       	rjmp	.+174    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c62:	a5 e5       	ldi	r26, 0x55	; 85
    3c64:	b0 e0       	ldi	r27, 0x00	; 0
    3c66:	e5 e5       	ldi	r30, 0x55	; 85
    3c68:	f0 e0       	ldi	r31, 0x00	; 0
    3c6a:	80 81       	ld	r24, Z
    3c6c:	84 60       	ori	r24, 0x04	; 4
    3c6e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c70:	a5 e5       	ldi	r26, 0x55	; 85
    3c72:	b0 e0       	ldi	r27, 0x00	; 0
    3c74:	e5 e5       	ldi	r30, 0x55	; 85
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	80 81       	ld	r24, Z
    3c7a:	87 7f       	andi	r24, 0xF7	; 247
    3c7c:	8c 93       	st	X, r24
    3c7e:	48 c0       	rjmp	.+144    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c80:	a5 e5       	ldi	r26, 0x55	; 85
    3c82:	b0 e0       	ldi	r27, 0x00	; 0
    3c84:	e5 e5       	ldi	r30, 0x55	; 85
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	80 81       	ld	r24, Z
    3c8a:	8b 7f       	andi	r24, 0xFB	; 251
    3c8c:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c8e:	a5 e5       	ldi	r26, 0x55	; 85
    3c90:	b0 e0       	ldi	r27, 0x00	; 0
    3c92:	e5 e5       	ldi	r30, 0x55	; 85
    3c94:	f0 e0       	ldi	r31, 0x00	; 0
    3c96:	80 81       	ld	r24, Z
    3c98:	88 60       	ori	r24, 0x08	; 8
    3c9a:	8c 93       	st	X, r24
    3c9c:	39 c0       	rjmp	.+114    	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c9e:	a5 e5       	ldi	r26, 0x55	; 85
    3ca0:	b0 e0       	ldi	r27, 0x00	; 0
    3ca2:	e5 e5       	ldi	r30, 0x55	; 85
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	80 81       	ld	r24, Z
    3ca8:	84 60       	ori	r24, 0x04	; 4
    3caa:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3cac:	a5 e5       	ldi	r26, 0x55	; 85
    3cae:	b0 e0       	ldi	r27, 0x00	; 0
    3cb0:	e5 e5       	ldi	r30, 0x55	; 85
    3cb2:	f0 e0       	ldi	r31, 0x00	; 0
    3cb4:	80 81       	ld	r24, Z
    3cb6:	88 60       	ori	r24, 0x08	; 8
    3cb8:	8c 93       	st	X, r24
    3cba:	2a c0       	rjmp	.+84     	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    3cbc:	ab e5       	ldi	r26, 0x5B	; 91
    3cbe:	b0 e0       	ldi	r27, 0x00	; 0
    3cc0:	eb e5       	ldi	r30, 0x5B	; 91
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	80 81       	ld	r24, Z
    3cc6:	80 62       	ori	r24, 0x20	; 32
    3cc8:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3cca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ccc:	28 2f       	mov	r18, r24
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	3d 83       	std	Y+5, r19	; 0x05
    3cd2:	2c 83       	std	Y+4, r18	; 0x04
    3cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cd8:	82 30       	cpi	r24, 0x02	; 2
    3cda:	91 05       	cpc	r25, r1
    3cdc:	31 f0       	breq	.+12     	; 0x3cea <EXTI_enu_Enable+0x20e>
    3cde:	2c 81       	ldd	r18, Y+4	; 0x04
    3ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    3ce2:	23 30       	cpi	r18, 0x03	; 3
    3ce4:	31 05       	cpc	r19, r1
    3ce6:	49 f0       	breq	.+18     	; 0x3cfa <EXTI_enu_Enable+0x21e>
    3ce8:	10 c0       	rjmp	.+32     	; 0x3d0a <EXTI_enu_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3cea:	a4 e5       	ldi	r26, 0x54	; 84
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	e4 e5       	ldi	r30, 0x54	; 84
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	8f 7b       	andi	r24, 0xBF	; 191
    3cf6:	8c 93       	st	X, r24
    3cf8:	0b c0       	rjmp	.+22     	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3cfa:	a4 e5       	ldi	r26, 0x54	; 84
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	e4 e5       	ldi	r30, 0x54	; 84
    3d00:	f0 e0       	ldi	r31, 0x00	; 0
    3d02:	80 81       	ld	r24, Z
    3d04:	80 64       	ori	r24, 0x40	; 64
    3d06:	8c 93       	st	X, r24
    3d08:	03 c0       	rjmp	.+6      	; 0x3d10 <EXTI_enu_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    3d0a:	19 82       	std	Y+1, r1	; 0x01
    3d0c:	01 c0       	rjmp	.+2      	; 0x3d10 <EXTI_enu_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3d0e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d12:	2b 96       	adiw	r28, 0x0b	; 11
    3d14:	0f b6       	in	r0, 0x3f	; 63
    3d16:	f8 94       	cli
    3d18:	de bf       	out	0x3e, r29	; 62
    3d1a:	0f be       	out	0x3f, r0	; 63
    3d1c:	cd bf       	out	0x3d, r28	; 61
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret

00003d24 <EXTI_enu_Disable>:
ES_t EXTI_enu_Disable(u8 Copy_u8_EXTI_Index)
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	00 d0       	rcall	.+0      	; 0x3d2a <EXTI_enu_Disable+0x6>
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <EXTI_enu_Disable+0x8>
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    3d36:	8a 81       	ldd	r24, Y+2	; 0x02
    3d38:	83 30       	cpi	r24, 0x03	; 3
    3d3a:	58 f5       	brcc	.+86     	; 0x3d92 <EXTI_enu_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    3d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d3e:	28 2f       	mov	r18, r24
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	3c 83       	std	Y+4, r19	; 0x04
    3d44:	2b 83       	std	Y+3, r18	; 0x03
    3d46:	8b 81       	ldd	r24, Y+3	; 0x03
    3d48:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4a:	81 30       	cpi	r24, 0x01	; 1
    3d4c:	91 05       	cpc	r25, r1
    3d4e:	89 f0       	breq	.+34     	; 0x3d72 <EXTI_enu_Disable+0x4e>
    3d50:	2b 81       	ldd	r18, Y+3	; 0x03
    3d52:	3c 81       	ldd	r19, Y+4	; 0x04
    3d54:	22 30       	cpi	r18, 0x02	; 2
    3d56:	31 05       	cpc	r19, r1
    3d58:	a1 f0       	breq	.+40     	; 0x3d82 <EXTI_enu_Disable+0x5e>
    3d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5e:	00 97       	sbiw	r24, 0x00	; 0
    3d60:	c9 f4       	brne	.+50     	; 0x3d94 <EXTI_enu_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    3d62:	ab e5       	ldi	r26, 0x5B	; 91
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	eb e5       	ldi	r30, 0x5B	; 91
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	8f 7b       	andi	r24, 0xBF	; 191
    3d6e:	8c 93       	st	X, r24
    3d70:	11 c0       	rjmp	.+34     	; 0x3d94 <EXTI_enu_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    3d72:	ab e5       	ldi	r26, 0x5B	; 91
    3d74:	b0 e0       	ldi	r27, 0x00	; 0
    3d76:	eb e5       	ldi	r30, 0x5B	; 91
    3d78:	f0 e0       	ldi	r31, 0x00	; 0
    3d7a:	80 81       	ld	r24, Z
    3d7c:	8f 77       	andi	r24, 0x7F	; 127
    3d7e:	8c 93       	st	X, r24
    3d80:	09 c0       	rjmp	.+18     	; 0x3d94 <EXTI_enu_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    3d82:	ab e5       	ldi	r26, 0x5B	; 91
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	eb e5       	ldi	r30, 0x5B	; 91
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	80 81       	ld	r24, Z
    3d8c:	8f 7d       	andi	r24, 0xDF	; 223
    3d8e:	8c 93       	st	X, r24
    3d90:	01 c0       	rjmp	.+2      	; 0x3d94 <EXTI_enu_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3d92:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d96:	0f 90       	pop	r0
    3d98:	0f 90       	pop	r0
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <EXTI_enu_setSenseControl>:
ES_t EXTI_enu_setSenseControl(u8 Copy_u8_EXTI_Index,u8 Copy_u8_EXTI_Edge){
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
    3dac:	2b 97       	sbiw	r28, 0x0b	; 11
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	cd bf       	out	0x3d, r28	; 61
    3db8:	8a 83       	std	Y+2, r24	; 0x02
    3dba:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    3dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc2:	83 30       	cpi	r24, 0x03	; 3
    3dc4:	08 f0       	brcs	.+2      	; 0x3dc8 <EXTI_enu_setSenseControl+0x24>
    3dc6:	f2 c0       	rjmp	.+484    	; 0x3fac <EXTI_enu_setSenseControl+0x208>
    3dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dca:	84 30       	cpi	r24, 0x04	; 4
    3dcc:	08 f0       	brcs	.+2      	; 0x3dd0 <EXTI_enu_setSenseControl+0x2c>
    3dce:	ee c0       	rjmp	.+476    	; 0x3fac <EXTI_enu_setSenseControl+0x208>
    {
        switch (Copy_u8_EXTI_Index)
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	3b 87       	std	Y+11, r19	; 0x0b
    3dd8:	2a 87       	std	Y+10, r18	; 0x0a
    3dda:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ddc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3dde:	81 30       	cpi	r24, 0x01	; 1
    3de0:	91 05       	cpc	r25, r1
    3de2:	09 f4       	brne	.+2      	; 0x3de6 <EXTI_enu_setSenseControl+0x42>
    3de4:	66 c0       	rjmp	.+204    	; 0x3eb2 <EXTI_enu_setSenseControl+0x10e>
    3de6:	2a 85       	ldd	r18, Y+10	; 0x0a
    3de8:	3b 85       	ldd	r19, Y+11	; 0x0b
    3dea:	22 30       	cpi	r18, 0x02	; 2
    3dec:	31 05       	cpc	r19, r1
    3dee:	09 f4       	brne	.+2      	; 0x3df2 <EXTI_enu_setSenseControl+0x4e>
    3df0:	bb c0       	rjmp	.+374    	; 0x3f68 <EXTI_enu_setSenseControl+0x1c4>
    3df2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3df4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3df6:	00 97       	sbiw	r24, 0x00	; 0
    3df8:	09 f0       	breq	.+2      	; 0x3dfc <EXTI_enu_setSenseControl+0x58>
    3dfa:	d9 c0       	rjmp	.+434    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    3dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	39 87       	std	Y+9, r19	; 0x09
    3e04:	28 87       	std	Y+8, r18	; 0x08
    3e06:	88 85       	ldd	r24, Y+8	; 0x08
    3e08:	99 85       	ldd	r25, Y+9	; 0x09
    3e0a:	81 30       	cpi	r24, 0x01	; 1
    3e0c:	91 05       	cpc	r25, r1
    3e0e:	21 f1       	breq	.+72     	; 0x3e58 <EXTI_enu_setSenseControl+0xb4>
    3e10:	28 85       	ldd	r18, Y+8	; 0x08
    3e12:	39 85       	ldd	r19, Y+9	; 0x09
    3e14:	22 30       	cpi	r18, 0x02	; 2
    3e16:	31 05       	cpc	r19, r1
    3e18:	2c f4       	brge	.+10     	; 0x3e24 <EXTI_enu_setSenseControl+0x80>
    3e1a:	88 85       	ldd	r24, Y+8	; 0x08
    3e1c:	99 85       	ldd	r25, Y+9	; 0x09
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	61 f0       	breq	.+24     	; 0x3e3a <EXTI_enu_setSenseControl+0x96>
    3e22:	c5 c0       	rjmp	.+394    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
    3e24:	28 85       	ldd	r18, Y+8	; 0x08
    3e26:	39 85       	ldd	r19, Y+9	; 0x09
    3e28:	22 30       	cpi	r18, 0x02	; 2
    3e2a:	31 05       	cpc	r19, r1
    3e2c:	21 f1       	breq	.+72     	; 0x3e76 <EXTI_enu_setSenseControl+0xd2>
    3e2e:	88 85       	ldd	r24, Y+8	; 0x08
    3e30:	99 85       	ldd	r25, Y+9	; 0x09
    3e32:	83 30       	cpi	r24, 0x03	; 3
    3e34:	91 05       	cpc	r25, r1
    3e36:	71 f1       	breq	.+92     	; 0x3e94 <EXTI_enu_setSenseControl+0xf0>
    3e38:	ba c0       	rjmp	.+372    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3e3a:	a5 e5       	ldi	r26, 0x55	; 85
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	e5 e5       	ldi	r30, 0x55	; 85
    3e40:	f0 e0       	ldi	r31, 0x00	; 0
    3e42:	80 81       	ld	r24, Z
    3e44:	8e 7f       	andi	r24, 0xFE	; 254
    3e46:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3e48:	a5 e5       	ldi	r26, 0x55	; 85
    3e4a:	b0 e0       	ldi	r27, 0x00	; 0
    3e4c:	e5 e5       	ldi	r30, 0x55	; 85
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	8d 7f       	andi	r24, 0xFD	; 253
    3e54:	8c 93       	st	X, r24
    3e56:	ab c0       	rjmp	.+342    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3e58:	a5 e5       	ldi	r26, 0x55	; 85
    3e5a:	b0 e0       	ldi	r27, 0x00	; 0
    3e5c:	e5 e5       	ldi	r30, 0x55	; 85
    3e5e:	f0 e0       	ldi	r31, 0x00	; 0
    3e60:	80 81       	ld	r24, Z
    3e62:	81 60       	ori	r24, 0x01	; 1
    3e64:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3e66:	a5 e5       	ldi	r26, 0x55	; 85
    3e68:	b0 e0       	ldi	r27, 0x00	; 0
    3e6a:	e5 e5       	ldi	r30, 0x55	; 85
    3e6c:	f0 e0       	ldi	r31, 0x00	; 0
    3e6e:	80 81       	ld	r24, Z
    3e70:	8d 7f       	andi	r24, 0xFD	; 253
    3e72:	8c 93       	st	X, r24
    3e74:	9c c0       	rjmp	.+312    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3e76:	a5 e5       	ldi	r26, 0x55	; 85
    3e78:	b0 e0       	ldi	r27, 0x00	; 0
    3e7a:	e5 e5       	ldi	r30, 0x55	; 85
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	80 81       	ld	r24, Z
    3e80:	8e 7f       	andi	r24, 0xFE	; 254
    3e82:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3e84:	a5 e5       	ldi	r26, 0x55	; 85
    3e86:	b0 e0       	ldi	r27, 0x00	; 0
    3e88:	e5 e5       	ldi	r30, 0x55	; 85
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	80 81       	ld	r24, Z
    3e8e:	82 60       	ori	r24, 0x02	; 2
    3e90:	8c 93       	st	X, r24
    3e92:	8d c0       	rjmp	.+282    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3e94:	a5 e5       	ldi	r26, 0x55	; 85
    3e96:	b0 e0       	ldi	r27, 0x00	; 0
    3e98:	e5 e5       	ldi	r30, 0x55	; 85
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	80 81       	ld	r24, Z
    3e9e:	81 60       	ori	r24, 0x01	; 1
    3ea0:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3ea2:	a5 e5       	ldi	r26, 0x55	; 85
    3ea4:	b0 e0       	ldi	r27, 0x00	; 0
    3ea6:	e5 e5       	ldi	r30, 0x55	; 85
    3ea8:	f0 e0       	ldi	r31, 0x00	; 0
    3eaa:	80 81       	ld	r24, Z
    3eac:	82 60       	ori	r24, 0x02	; 2
    3eae:	8c 93       	st	X, r24
    3eb0:	7e c0       	rjmp	.+252    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    3eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb4:	28 2f       	mov	r18, r24
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	3f 83       	std	Y+7, r19	; 0x07
    3eba:	2e 83       	std	Y+6, r18	; 0x06
    3ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec0:	81 30       	cpi	r24, 0x01	; 1
    3ec2:	91 05       	cpc	r25, r1
    3ec4:	21 f1       	breq	.+72     	; 0x3f0e <EXTI_enu_setSenseControl+0x16a>
    3ec6:	2e 81       	ldd	r18, Y+6	; 0x06
    3ec8:	3f 81       	ldd	r19, Y+7	; 0x07
    3eca:	22 30       	cpi	r18, 0x02	; 2
    3ecc:	31 05       	cpc	r19, r1
    3ece:	2c f4       	brge	.+10     	; 0x3eda <EXTI_enu_setSenseControl+0x136>
    3ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ed4:	00 97       	sbiw	r24, 0x00	; 0
    3ed6:	61 f0       	breq	.+24     	; 0x3ef0 <EXTI_enu_setSenseControl+0x14c>
    3ed8:	6a c0       	rjmp	.+212    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
    3eda:	2e 81       	ldd	r18, Y+6	; 0x06
    3edc:	3f 81       	ldd	r19, Y+7	; 0x07
    3ede:	22 30       	cpi	r18, 0x02	; 2
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	21 f1       	breq	.+72     	; 0x3f2c <EXTI_enu_setSenseControl+0x188>
    3ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ee6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ee8:	83 30       	cpi	r24, 0x03	; 3
    3eea:	91 05       	cpc	r25, r1
    3eec:	71 f1       	breq	.+92     	; 0x3f4a <EXTI_enu_setSenseControl+0x1a6>
    3eee:	5f c0       	rjmp	.+190    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3ef0:	a5 e5       	ldi	r26, 0x55	; 85
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	e5 e5       	ldi	r30, 0x55	; 85
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	80 81       	ld	r24, Z
    3efa:	8b 7f       	andi	r24, 0xFB	; 251
    3efc:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3efe:	a5 e5       	ldi	r26, 0x55	; 85
    3f00:	b0 e0       	ldi	r27, 0x00	; 0
    3f02:	e5 e5       	ldi	r30, 0x55	; 85
    3f04:	f0 e0       	ldi	r31, 0x00	; 0
    3f06:	80 81       	ld	r24, Z
    3f08:	87 7f       	andi	r24, 0xF7	; 247
    3f0a:	8c 93       	st	X, r24
    3f0c:	50 c0       	rjmp	.+160    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3f0e:	a5 e5       	ldi	r26, 0x55	; 85
    3f10:	b0 e0       	ldi	r27, 0x00	; 0
    3f12:	e5 e5       	ldi	r30, 0x55	; 85
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	80 81       	ld	r24, Z
    3f18:	84 60       	ori	r24, 0x04	; 4
    3f1a:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3f1c:	a5 e5       	ldi	r26, 0x55	; 85
    3f1e:	b0 e0       	ldi	r27, 0x00	; 0
    3f20:	e5 e5       	ldi	r30, 0x55	; 85
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	80 81       	ld	r24, Z
    3f26:	87 7f       	andi	r24, 0xF7	; 247
    3f28:	8c 93       	st	X, r24
    3f2a:	41 c0       	rjmp	.+130    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3f2c:	a5 e5       	ldi	r26, 0x55	; 85
    3f2e:	b0 e0       	ldi	r27, 0x00	; 0
    3f30:	e5 e5       	ldi	r30, 0x55	; 85
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	80 81       	ld	r24, Z
    3f36:	8b 7f       	andi	r24, 0xFB	; 251
    3f38:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3f3a:	a5 e5       	ldi	r26, 0x55	; 85
    3f3c:	b0 e0       	ldi	r27, 0x00	; 0
    3f3e:	e5 e5       	ldi	r30, 0x55	; 85
    3f40:	f0 e0       	ldi	r31, 0x00	; 0
    3f42:	80 81       	ld	r24, Z
    3f44:	88 60       	ori	r24, 0x08	; 8
    3f46:	8c 93       	st	X, r24
    3f48:	32 c0       	rjmp	.+100    	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3f4a:	a5 e5       	ldi	r26, 0x55	; 85
    3f4c:	b0 e0       	ldi	r27, 0x00	; 0
    3f4e:	e5 e5       	ldi	r30, 0x55	; 85
    3f50:	f0 e0       	ldi	r31, 0x00	; 0
    3f52:	80 81       	ld	r24, Z
    3f54:	84 60       	ori	r24, 0x04	; 4
    3f56:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3f58:	a5 e5       	ldi	r26, 0x55	; 85
    3f5a:	b0 e0       	ldi	r27, 0x00	; 0
    3f5c:	e5 e5       	ldi	r30, 0x55	; 85
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	80 81       	ld	r24, Z
    3f62:	88 60       	ori	r24, 0x08	; 8
    3f64:	8c 93       	st	X, r24
    3f66:	23 c0       	rjmp	.+70     	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    3f68:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6a:	28 2f       	mov	r18, r24
    3f6c:	30 e0       	ldi	r19, 0x00	; 0
    3f6e:	3d 83       	std	Y+5, r19	; 0x05
    3f70:	2c 83       	std	Y+4, r18	; 0x04
    3f72:	8c 81       	ldd	r24, Y+4	; 0x04
    3f74:	9d 81       	ldd	r25, Y+5	; 0x05
    3f76:	82 30       	cpi	r24, 0x02	; 2
    3f78:	91 05       	cpc	r25, r1
    3f7a:	31 f0       	breq	.+12     	; 0x3f88 <EXTI_enu_setSenseControl+0x1e4>
    3f7c:	2c 81       	ldd	r18, Y+4	; 0x04
    3f7e:	3d 81       	ldd	r19, Y+5	; 0x05
    3f80:	23 30       	cpi	r18, 0x03	; 3
    3f82:	31 05       	cpc	r19, r1
    3f84:	49 f0       	breq	.+18     	; 0x3f98 <EXTI_enu_setSenseControl+0x1f4>
    3f86:	10 c0       	rjmp	.+32     	; 0x3fa8 <EXTI_enu_setSenseControl+0x204>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3f88:	a4 e5       	ldi	r26, 0x54	; 84
    3f8a:	b0 e0       	ldi	r27, 0x00	; 0
    3f8c:	e4 e5       	ldi	r30, 0x54	; 84
    3f8e:	f0 e0       	ldi	r31, 0x00	; 0
    3f90:	80 81       	ld	r24, Z
    3f92:	8f 7b       	andi	r24, 0xBF	; 191
    3f94:	8c 93       	st	X, r24
    3f96:	0b c0       	rjmp	.+22     	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3f98:	a4 e5       	ldi	r26, 0x54	; 84
    3f9a:	b0 e0       	ldi	r27, 0x00	; 0
    3f9c:	e4 e5       	ldi	r30, 0x54	; 84
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	80 64       	ori	r24, 0x40	; 64
    3fa4:	8c 93       	st	X, r24
    3fa6:	03 c0       	rjmp	.+6      	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    3fa8:	19 82       	std	Y+1, r1	; 0x01
    3faa:	01 c0       	rjmp	.+2      	; 0x3fae <EXTI_enu_setSenseControl+0x20a>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3fac:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3fae:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fb0:	2b 96       	adiw	r28, 0x0b	; 11
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	cf 91       	pop	r28
    3fbe:	df 91       	pop	r29
    3fc0:	08 95       	ret

00003fc2 <EXTI_enu_setCallBack>:
ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    3fc2:	df 93       	push	r29
    3fc4:	cf 93       	push	r28
    3fc6:	00 d0       	rcall	.+0      	; 0x3fc8 <EXTI_enu_setCallBack+0x6>
    3fc8:	00 d0       	rcall	.+0      	; 0x3fca <EXTI_enu_setCallBack+0x8>
    3fca:	cd b7       	in	r28, 0x3d	; 61
    3fcc:	de b7       	in	r29, 0x3e	; 62
    3fce:	9b 83       	std	Y+3, r25	; 0x03
    3fd0:	8a 83       	std	Y+2, r24	; 0x02
    3fd2:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    3fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fda:	9b 81       	ldd	r25, Y+3	; 0x03
    3fdc:	00 97       	sbiw	r24, 0x00	; 0
    3fde:	81 f0       	breq	.+32     	; 0x4000 <EXTI_enu_setCallBack+0x3e>
    3fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe2:	83 30       	cpi	r24, 0x03	; 3
    3fe4:	68 f4       	brcc	.+26     	; 0x4000 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    3fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe8:	88 2f       	mov	r24, r24
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	88 0f       	add	r24, r24
    3fee:	99 1f       	adc	r25, r25
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	ed 5f       	subi	r30, 0xFD	; 253
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	01 c0       	rjmp	.+2      	; 0x4002 <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    4000:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4002:	89 81       	ldd	r24, Y+1	; 0x01
}
    4004:	0f 90       	pop	r0
    4006:	0f 90       	pop	r0
    4008:	0f 90       	pop	r0
    400a:	0f 90       	pop	r0
    400c:	cf 91       	pop	r28
    400e:	df 91       	pop	r29
    4010:	08 95       	ret

00004012 <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    4012:	1f 92       	push	r1
    4014:	0f 92       	push	r0
    4016:	0f b6       	in	r0, 0x3f	; 63
    4018:	0f 92       	push	r0
    401a:	11 24       	eor	r1, r1
    401c:	2f 93       	push	r18
    401e:	3f 93       	push	r19
    4020:	4f 93       	push	r20
    4022:	5f 93       	push	r21
    4024:	6f 93       	push	r22
    4026:	7f 93       	push	r23
    4028:	8f 93       	push	r24
    402a:	9f 93       	push	r25
    402c:	af 93       	push	r26
    402e:	bf 93       	push	r27
    4030:	ef 93       	push	r30
    4032:	ff 93       	push	r31
    4034:	df 93       	push	r29
    4036:	cf 93       	push	r28
    4038:	cd b7       	in	r28, 0x3d	; 61
    403a:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    403c:	80 91 03 01 	lds	r24, 0x0103
    4040:	90 91 04 01 	lds	r25, 0x0104
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	29 f0       	breq	.+10     	; 0x4052 <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    4048:	e0 91 03 01 	lds	r30, 0x0103
    404c:	f0 91 04 01 	lds	r31, 0x0104
    4050:	09 95       	icall
}
    4052:	cf 91       	pop	r28
    4054:	df 91       	pop	r29
    4056:	ff 91       	pop	r31
    4058:	ef 91       	pop	r30
    405a:	bf 91       	pop	r27
    405c:	af 91       	pop	r26
    405e:	9f 91       	pop	r25
    4060:	8f 91       	pop	r24
    4062:	7f 91       	pop	r23
    4064:	6f 91       	pop	r22
    4066:	5f 91       	pop	r21
    4068:	4f 91       	pop	r20
    406a:	3f 91       	pop	r19
    406c:	2f 91       	pop	r18
    406e:	0f 90       	pop	r0
    4070:	0f be       	out	0x3f, r0	; 63
    4072:	0f 90       	pop	r0
    4074:	1f 90       	pop	r1
    4076:	18 95       	reti

00004078 <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    4078:	1f 92       	push	r1
    407a:	0f 92       	push	r0
    407c:	0f b6       	in	r0, 0x3f	; 63
    407e:	0f 92       	push	r0
    4080:	11 24       	eor	r1, r1
    4082:	2f 93       	push	r18
    4084:	3f 93       	push	r19
    4086:	4f 93       	push	r20
    4088:	5f 93       	push	r21
    408a:	6f 93       	push	r22
    408c:	7f 93       	push	r23
    408e:	8f 93       	push	r24
    4090:	9f 93       	push	r25
    4092:	af 93       	push	r26
    4094:	bf 93       	push	r27
    4096:	ef 93       	push	r30
    4098:	ff 93       	push	r31
    409a:	df 93       	push	r29
    409c:	cf 93       	push	r28
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    40a2:	80 91 05 01 	lds	r24, 0x0105
    40a6:	90 91 06 01 	lds	r25, 0x0106
    40aa:	00 97       	sbiw	r24, 0x00	; 0
    40ac:	29 f0       	breq	.+10     	; 0x40b8 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    40ae:	e0 91 05 01 	lds	r30, 0x0105
    40b2:	f0 91 06 01 	lds	r31, 0x0106
    40b6:	09 95       	icall
}
    40b8:	cf 91       	pop	r28
    40ba:	df 91       	pop	r29
    40bc:	ff 91       	pop	r31
    40be:	ef 91       	pop	r30
    40c0:	bf 91       	pop	r27
    40c2:	af 91       	pop	r26
    40c4:	9f 91       	pop	r25
    40c6:	8f 91       	pop	r24
    40c8:	7f 91       	pop	r23
    40ca:	6f 91       	pop	r22
    40cc:	5f 91       	pop	r21
    40ce:	4f 91       	pop	r20
    40d0:	3f 91       	pop	r19
    40d2:	2f 91       	pop	r18
    40d4:	0f 90       	pop	r0
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	0f 90       	pop	r0
    40da:	1f 90       	pop	r1
    40dc:	18 95       	reti

000040de <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    40de:	1f 92       	push	r1
    40e0:	0f 92       	push	r0
    40e2:	0f b6       	in	r0, 0x3f	; 63
    40e4:	0f 92       	push	r0
    40e6:	11 24       	eor	r1, r1
    40e8:	2f 93       	push	r18
    40ea:	3f 93       	push	r19
    40ec:	4f 93       	push	r20
    40ee:	5f 93       	push	r21
    40f0:	6f 93       	push	r22
    40f2:	7f 93       	push	r23
    40f4:	8f 93       	push	r24
    40f6:	9f 93       	push	r25
    40f8:	af 93       	push	r26
    40fa:	bf 93       	push	r27
    40fc:	ef 93       	push	r30
    40fe:	ff 93       	push	r31
    4100:	df 93       	push	r29
    4102:	cf 93       	push	r28
    4104:	cd b7       	in	r28, 0x3d	; 61
    4106:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    4108:	80 91 07 01 	lds	r24, 0x0107
    410c:	90 91 08 01 	lds	r25, 0x0108
    4110:	00 97       	sbiw	r24, 0x00	; 0
    4112:	29 f0       	breq	.+10     	; 0x411e <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    4114:	e0 91 07 01 	lds	r30, 0x0107
    4118:	f0 91 08 01 	lds	r31, 0x0108
    411c:	09 95       	icall
    411e:	cf 91       	pop	r28
    4120:	df 91       	pop	r29
    4122:	ff 91       	pop	r31
    4124:	ef 91       	pop	r30
    4126:	bf 91       	pop	r27
    4128:	af 91       	pop	r26
    412a:	9f 91       	pop	r25
    412c:	8f 91       	pop	r24
    412e:	7f 91       	pop	r23
    4130:	6f 91       	pop	r22
    4132:	5f 91       	pop	r21
    4134:	4f 91       	pop	r20
    4136:	3f 91       	pop	r19
    4138:	2f 91       	pop	r18
    413a:	0f 90       	pop	r0
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	0f 90       	pop	r0
    4140:	1f 90       	pop	r1
    4142:	18 95       	reti

00004144 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    414c:	ea e3       	ldi	r30, 0x3A	; 58
    414e:	f0 e0       	ldi	r31, 0x00	; 0
    4150:	8f e7       	ldi	r24, 0x7F	; 127
    4152:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    4154:	e7 e3       	ldi	r30, 0x37	; 55
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	8d ef       	ldi	r24, 0xFD	; 253
    415a:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    415c:	e4 e3       	ldi	r30, 0x34	; 52
    415e:	f0 e0       	ldi	r31, 0x00	; 0
    4160:	83 e1       	ldi	r24, 0x13	; 19
    4162:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    4164:	e1 e3       	ldi	r30, 0x31	; 49
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    416a:	eb e3       	ldi	r30, 0x3B	; 59
    416c:	f0 e0       	ldi	r31, 0x00	; 0
    416e:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    4170:	e8 e3       	ldi	r30, 0x38	; 56
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	84 ef       	ldi	r24, 0xF4	; 244
    4176:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    4178:	e5 e3       	ldi	r30, 0x35	; 53
    417a:	f0 e0       	ldi	r31, 0x00	; 0
    417c:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    417e:	e2 e3       	ldi	r30, 0x32	; 50
    4180:	f0 e0       	ldi	r31, 0x00	; 0
    4182:	8c e3       	ldi	r24, 0x3C	; 60
    4184:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    4186:	81 e0       	ldi	r24, 0x01	; 1
}
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	08 95       	ret

0000418e <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    418e:	df 93       	push	r29
    4190:	cf 93       	push	r28
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	2e 97       	sbiw	r28, 0x0e	; 14
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	de bf       	out	0x3e, r29	; 62
    419e:	0f be       	out	0x3f, r0	; 63
    41a0:	cd bf       	out	0x3d, r28	; 61
    41a2:	8a 83       	std	Y+2, r24	; 0x02
    41a4:	6b 83       	std	Y+3, r22	; 0x03
    41a6:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    41ac:	8a 81       	ldd	r24, Y+2	; 0x02
    41ae:	84 30       	cpi	r24, 0x04	; 4
    41b0:	08 f0       	brcs	.+2      	; 0x41b4 <DIO_enu_SetPinDirection+0x26>
    41b2:	0c c1       	rjmp	.+536    	; 0x43cc <DIO_enu_SetPinDirection+0x23e>
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	88 30       	cpi	r24, 0x08	; 8
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <DIO_enu_SetPinDirection+0x2e>
    41ba:	08 c1       	rjmp	.+528    	; 0x43cc <DIO_enu_SetPinDirection+0x23e>
    41bc:	8c 81       	ldd	r24, Y+4	; 0x04
    41be:	81 30       	cpi	r24, 0x01	; 1
    41c0:	21 f0       	breq	.+8      	; 0x41ca <DIO_enu_SetPinDirection+0x3c>
    41c2:	8c 81       	ldd	r24, Y+4	; 0x04
    41c4:	88 23       	and	r24, r24
    41c6:	09 f0       	breq	.+2      	; 0x41ca <DIO_enu_SetPinDirection+0x3c>
    41c8:	01 c1       	rjmp	.+514    	; 0x43cc <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	3e 87       	std	Y+14, r19	; 0x0e
    41d2:	2d 87       	std	Y+13, r18	; 0x0d
    41d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d8:	81 30       	cpi	r24, 0x01	; 1
    41da:	91 05       	cpc	r25, r1
    41dc:	09 f4       	brne	.+2      	; 0x41e0 <DIO_enu_SetPinDirection+0x52>
    41de:	4f c0       	rjmp	.+158    	; 0x427e <DIO_enu_SetPinDirection+0xf0>
    41e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    41e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    41e4:	22 30       	cpi	r18, 0x02	; 2
    41e6:	31 05       	cpc	r19, r1
    41e8:	2c f4       	brge	.+10     	; 0x41f4 <DIO_enu_SetPinDirection+0x66>
    41ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	71 f0       	breq	.+28     	; 0x420e <DIO_enu_SetPinDirection+0x80>
    41f2:	ed c0       	rjmp	.+474    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
    41f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    41f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    41f8:	22 30       	cpi	r18, 0x02	; 2
    41fa:	31 05       	cpc	r19, r1
    41fc:	09 f4       	brne	.+2      	; 0x4200 <DIO_enu_SetPinDirection+0x72>
    41fe:	77 c0       	rjmp	.+238    	; 0x42ee <DIO_enu_SetPinDirection+0x160>
    4200:	8d 85       	ldd	r24, Y+13	; 0x0d
    4202:	9e 85       	ldd	r25, Y+14	; 0x0e
    4204:	83 30       	cpi	r24, 0x03	; 3
    4206:	91 05       	cpc	r25, r1
    4208:	09 f4       	brne	.+2      	; 0x420c <DIO_enu_SetPinDirection+0x7e>
    420a:	a9 c0       	rjmp	.+338    	; 0x435e <DIO_enu_SetPinDirection+0x1d0>
    420c:	e0 c0       	rjmp	.+448    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    420e:	8c 81       	ldd	r24, Y+4	; 0x04
    4210:	28 2f       	mov	r18, r24
    4212:	30 e0       	ldi	r19, 0x00	; 0
    4214:	3c 87       	std	Y+12, r19	; 0x0c
    4216:	2b 87       	std	Y+11, r18	; 0x0b
    4218:	8b 85       	ldd	r24, Y+11	; 0x0b
    421a:	9c 85       	ldd	r25, Y+12	; 0x0c
    421c:	00 97       	sbiw	r24, 0x00	; 0
    421e:	d1 f0       	breq	.+52     	; 0x4254 <DIO_enu_SetPinDirection+0xc6>
    4220:	2b 85       	ldd	r18, Y+11	; 0x0b
    4222:	3c 85       	ldd	r19, Y+12	; 0x0c
    4224:	21 30       	cpi	r18, 0x01	; 1
    4226:	31 05       	cpc	r19, r1
    4228:	09 f0       	breq	.+2      	; 0x422c <DIO_enu_SetPinDirection+0x9e>
    422a:	d1 c0       	rjmp	.+418    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    422c:	aa e3       	ldi	r26, 0x3A	; 58
    422e:	b0 e0       	ldi	r27, 0x00	; 0
    4230:	ea e3       	ldi	r30, 0x3A	; 58
    4232:	f0 e0       	ldi	r31, 0x00	; 0
    4234:	80 81       	ld	r24, Z
    4236:	48 2f       	mov	r20, r24
    4238:	8b 81       	ldd	r24, Y+3	; 0x03
    423a:	28 2f       	mov	r18, r24
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	02 2e       	mov	r0, r18
    4244:	02 c0       	rjmp	.+4      	; 0x424a <DIO_enu_SetPinDirection+0xbc>
    4246:	88 0f       	add	r24, r24
    4248:	99 1f       	adc	r25, r25
    424a:	0a 94       	dec	r0
    424c:	e2 f7       	brpl	.-8      	; 0x4246 <DIO_enu_SetPinDirection+0xb8>
    424e:	84 2b       	or	r24, r20
    4250:	8c 93       	st	X, r24
    4252:	bd c0       	rjmp	.+378    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    4254:	aa e3       	ldi	r26, 0x3A	; 58
    4256:	b0 e0       	ldi	r27, 0x00	; 0
    4258:	ea e3       	ldi	r30, 0x3A	; 58
    425a:	f0 e0       	ldi	r31, 0x00	; 0
    425c:	80 81       	ld	r24, Z
    425e:	48 2f       	mov	r20, r24
    4260:	8b 81       	ldd	r24, Y+3	; 0x03
    4262:	28 2f       	mov	r18, r24
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	02 2e       	mov	r0, r18
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <DIO_enu_SetPinDirection+0xe4>
    426e:	88 0f       	add	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	0a 94       	dec	r0
    4274:	e2 f7       	brpl	.-8      	; 0x426e <DIO_enu_SetPinDirection+0xe0>
    4276:	80 95       	com	r24
    4278:	84 23       	and	r24, r20
    427a:	8c 93       	st	X, r24
    427c:	a8 c0       	rjmp	.+336    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    427e:	8c 81       	ldd	r24, Y+4	; 0x04
    4280:	28 2f       	mov	r18, r24
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	3a 87       	std	Y+10, r19	; 0x0a
    4286:	29 87       	std	Y+9, r18	; 0x09
    4288:	89 85       	ldd	r24, Y+9	; 0x09
    428a:	9a 85       	ldd	r25, Y+10	; 0x0a
    428c:	00 97       	sbiw	r24, 0x00	; 0
    428e:	d1 f0       	breq	.+52     	; 0x42c4 <DIO_enu_SetPinDirection+0x136>
    4290:	29 85       	ldd	r18, Y+9	; 0x09
    4292:	3a 85       	ldd	r19, Y+10	; 0x0a
    4294:	21 30       	cpi	r18, 0x01	; 1
    4296:	31 05       	cpc	r19, r1
    4298:	09 f0       	breq	.+2      	; 0x429c <DIO_enu_SetPinDirection+0x10e>
    429a:	99 c0       	rjmp	.+306    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    429c:	a7 e3       	ldi	r26, 0x37	; 55
    429e:	b0 e0       	ldi	r27, 0x00	; 0
    42a0:	e7 e3       	ldi	r30, 0x37	; 55
    42a2:	f0 e0       	ldi	r31, 0x00	; 0
    42a4:	80 81       	ld	r24, Z
    42a6:	48 2f       	mov	r20, r24
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	28 2f       	mov	r18, r24
    42ac:	30 e0       	ldi	r19, 0x00	; 0
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	02 2e       	mov	r0, r18
    42b4:	02 c0       	rjmp	.+4      	; 0x42ba <DIO_enu_SetPinDirection+0x12c>
    42b6:	88 0f       	add	r24, r24
    42b8:	99 1f       	adc	r25, r25
    42ba:	0a 94       	dec	r0
    42bc:	e2 f7       	brpl	.-8      	; 0x42b6 <DIO_enu_SetPinDirection+0x128>
    42be:	84 2b       	or	r24, r20
    42c0:	8c 93       	st	X, r24
    42c2:	85 c0       	rjmp	.+266    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    42c4:	a7 e3       	ldi	r26, 0x37	; 55
    42c6:	b0 e0       	ldi	r27, 0x00	; 0
    42c8:	e7 e3       	ldi	r30, 0x37	; 55
    42ca:	f0 e0       	ldi	r31, 0x00	; 0
    42cc:	80 81       	ld	r24, Z
    42ce:	48 2f       	mov	r20, r24
    42d0:	8b 81       	ldd	r24, Y+3	; 0x03
    42d2:	28 2f       	mov	r18, r24
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	02 2e       	mov	r0, r18
    42dc:	02 c0       	rjmp	.+4      	; 0x42e2 <DIO_enu_SetPinDirection+0x154>
    42de:	88 0f       	add	r24, r24
    42e0:	99 1f       	adc	r25, r25
    42e2:	0a 94       	dec	r0
    42e4:	e2 f7       	brpl	.-8      	; 0x42de <DIO_enu_SetPinDirection+0x150>
    42e6:	80 95       	com	r24
    42e8:	84 23       	and	r24, r20
    42ea:	8c 93       	st	X, r24
    42ec:	70 c0       	rjmp	.+224    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    42ee:	8c 81       	ldd	r24, Y+4	; 0x04
    42f0:	28 2f       	mov	r18, r24
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	38 87       	std	Y+8, r19	; 0x08
    42f6:	2f 83       	std	Y+7, r18	; 0x07
    42f8:	8f 81       	ldd	r24, Y+7	; 0x07
    42fa:	98 85       	ldd	r25, Y+8	; 0x08
    42fc:	00 97       	sbiw	r24, 0x00	; 0
    42fe:	d1 f0       	breq	.+52     	; 0x4334 <DIO_enu_SetPinDirection+0x1a6>
    4300:	2f 81       	ldd	r18, Y+7	; 0x07
    4302:	38 85       	ldd	r19, Y+8	; 0x08
    4304:	21 30       	cpi	r18, 0x01	; 1
    4306:	31 05       	cpc	r19, r1
    4308:	09 f0       	breq	.+2      	; 0x430c <DIO_enu_SetPinDirection+0x17e>
    430a:	61 c0       	rjmp	.+194    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    430c:	a4 e3       	ldi	r26, 0x34	; 52
    430e:	b0 e0       	ldi	r27, 0x00	; 0
    4310:	e4 e3       	ldi	r30, 0x34	; 52
    4312:	f0 e0       	ldi	r31, 0x00	; 0
    4314:	80 81       	ld	r24, Z
    4316:	48 2f       	mov	r20, r24
    4318:	8b 81       	ldd	r24, Y+3	; 0x03
    431a:	28 2f       	mov	r18, r24
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	02 2e       	mov	r0, r18
    4324:	02 c0       	rjmp	.+4      	; 0x432a <DIO_enu_SetPinDirection+0x19c>
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	0a 94       	dec	r0
    432c:	e2 f7       	brpl	.-8      	; 0x4326 <DIO_enu_SetPinDirection+0x198>
    432e:	84 2b       	or	r24, r20
    4330:	8c 93       	st	X, r24
    4332:	4d c0       	rjmp	.+154    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    4334:	a4 e3       	ldi	r26, 0x34	; 52
    4336:	b0 e0       	ldi	r27, 0x00	; 0
    4338:	e4 e3       	ldi	r30, 0x34	; 52
    433a:	f0 e0       	ldi	r31, 0x00	; 0
    433c:	80 81       	ld	r24, Z
    433e:	48 2f       	mov	r20, r24
    4340:	8b 81       	ldd	r24, Y+3	; 0x03
    4342:	28 2f       	mov	r18, r24
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	02 2e       	mov	r0, r18
    434c:	02 c0       	rjmp	.+4      	; 0x4352 <DIO_enu_SetPinDirection+0x1c4>
    434e:	88 0f       	add	r24, r24
    4350:	99 1f       	adc	r25, r25
    4352:	0a 94       	dec	r0
    4354:	e2 f7       	brpl	.-8      	; 0x434e <DIO_enu_SetPinDirection+0x1c0>
    4356:	80 95       	com	r24
    4358:	84 23       	and	r24, r20
    435a:	8c 93       	st	X, r24
    435c:	38 c0       	rjmp	.+112    	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    435e:	8c 81       	ldd	r24, Y+4	; 0x04
    4360:	28 2f       	mov	r18, r24
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	3e 83       	std	Y+6, r19	; 0x06
    4366:	2d 83       	std	Y+5, r18	; 0x05
    4368:	8d 81       	ldd	r24, Y+5	; 0x05
    436a:	9e 81       	ldd	r25, Y+6	; 0x06
    436c:	00 97       	sbiw	r24, 0x00	; 0
    436e:	c9 f0       	breq	.+50     	; 0x43a2 <DIO_enu_SetPinDirection+0x214>
    4370:	2d 81       	ldd	r18, Y+5	; 0x05
    4372:	3e 81       	ldd	r19, Y+6	; 0x06
    4374:	21 30       	cpi	r18, 0x01	; 1
    4376:	31 05       	cpc	r19, r1
    4378:	51 f5       	brne	.+84     	; 0x43ce <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    437a:	a1 e3       	ldi	r26, 0x31	; 49
    437c:	b0 e0       	ldi	r27, 0x00	; 0
    437e:	e1 e3       	ldi	r30, 0x31	; 49
    4380:	f0 e0       	ldi	r31, 0x00	; 0
    4382:	80 81       	ld	r24, Z
    4384:	48 2f       	mov	r20, r24
    4386:	8b 81       	ldd	r24, Y+3	; 0x03
    4388:	28 2f       	mov	r18, r24
    438a:	30 e0       	ldi	r19, 0x00	; 0
    438c:	81 e0       	ldi	r24, 0x01	; 1
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	02 2e       	mov	r0, r18
    4392:	02 c0       	rjmp	.+4      	; 0x4398 <DIO_enu_SetPinDirection+0x20a>
    4394:	88 0f       	add	r24, r24
    4396:	99 1f       	adc	r25, r25
    4398:	0a 94       	dec	r0
    439a:	e2 f7       	brpl	.-8      	; 0x4394 <DIO_enu_SetPinDirection+0x206>
    439c:	84 2b       	or	r24, r20
    439e:	8c 93       	st	X, r24
    43a0:	16 c0       	rjmp	.+44     	; 0x43ce <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    43a2:	a1 e3       	ldi	r26, 0x31	; 49
    43a4:	b0 e0       	ldi	r27, 0x00	; 0
    43a6:	e1 e3       	ldi	r30, 0x31	; 49
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	80 81       	ld	r24, Z
    43ac:	48 2f       	mov	r20, r24
    43ae:	8b 81       	ldd	r24, Y+3	; 0x03
    43b0:	28 2f       	mov	r18, r24
    43b2:	30 e0       	ldi	r19, 0x00	; 0
    43b4:	81 e0       	ldi	r24, 0x01	; 1
    43b6:	90 e0       	ldi	r25, 0x00	; 0
    43b8:	02 2e       	mov	r0, r18
    43ba:	02 c0       	rjmp	.+4      	; 0x43c0 <DIO_enu_SetPinDirection+0x232>
    43bc:	88 0f       	add	r24, r24
    43be:	99 1f       	adc	r25, r25
    43c0:	0a 94       	dec	r0
    43c2:	e2 f7       	brpl	.-8      	; 0x43bc <DIO_enu_SetPinDirection+0x22e>
    43c4:	80 95       	com	r24
    43c6:	84 23       	and	r24, r20
    43c8:	8c 93       	st	X, r24
    43ca:	01 c0       	rjmp	.+2      	; 0x43ce <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    43cc:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    43d0:	2e 96       	adiw	r28, 0x0e	; 14
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	f8 94       	cli
    43d6:	de bf       	out	0x3e, r29	; 62
    43d8:	0f be       	out	0x3f, r0	; 63
    43da:	cd bf       	out	0x3d, r28	; 61
    43dc:	cf 91       	pop	r28
    43de:	df 91       	pop	r29
    43e0:	08 95       	ret

000043e2 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
    43ea:	2e 97       	sbiw	r28, 0x0e	; 14
    43ec:	0f b6       	in	r0, 0x3f	; 63
    43ee:	f8 94       	cli
    43f0:	de bf       	out	0x3e, r29	; 62
    43f2:	0f be       	out	0x3f, r0	; 63
    43f4:	cd bf       	out	0x3d, r28	; 61
    43f6:	8a 83       	std	Y+2, r24	; 0x02
    43f8:	6b 83       	std	Y+3, r22	; 0x03
    43fa:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    43fc:	81 e0       	ldi	r24, 0x01	; 1
    43fe:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    4400:	8a 81       	ldd	r24, Y+2	; 0x02
    4402:	84 30       	cpi	r24, 0x04	; 4
    4404:	08 f0       	brcs	.+2      	; 0x4408 <DIO_enu_SetPinValue+0x26>
    4406:	0c c1       	rjmp	.+536    	; 0x4620 <DIO_enu_SetPinValue+0x23e>
    4408:	8b 81       	ldd	r24, Y+3	; 0x03
    440a:	88 30       	cpi	r24, 0x08	; 8
    440c:	08 f0       	brcs	.+2      	; 0x4410 <DIO_enu_SetPinValue+0x2e>
    440e:	08 c1       	rjmp	.+528    	; 0x4620 <DIO_enu_SetPinValue+0x23e>
    4410:	8c 81       	ldd	r24, Y+4	; 0x04
    4412:	81 30       	cpi	r24, 0x01	; 1
    4414:	21 f0       	breq	.+8      	; 0x441e <DIO_enu_SetPinValue+0x3c>
    4416:	8c 81       	ldd	r24, Y+4	; 0x04
    4418:	88 23       	and	r24, r24
    441a:	09 f0       	breq	.+2      	; 0x441e <DIO_enu_SetPinValue+0x3c>
    441c:	01 c1       	rjmp	.+514    	; 0x4620 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    441e:	8a 81       	ldd	r24, Y+2	; 0x02
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	3e 87       	std	Y+14, r19	; 0x0e
    4426:	2d 87       	std	Y+13, r18	; 0x0d
    4428:	8d 85       	ldd	r24, Y+13	; 0x0d
    442a:	9e 85       	ldd	r25, Y+14	; 0x0e
    442c:	81 30       	cpi	r24, 0x01	; 1
    442e:	91 05       	cpc	r25, r1
    4430:	09 f4       	brne	.+2      	; 0x4434 <DIO_enu_SetPinValue+0x52>
    4432:	4f c0       	rjmp	.+158    	; 0x44d2 <DIO_enu_SetPinValue+0xf0>
    4434:	2d 85       	ldd	r18, Y+13	; 0x0d
    4436:	3e 85       	ldd	r19, Y+14	; 0x0e
    4438:	22 30       	cpi	r18, 0x02	; 2
    443a:	31 05       	cpc	r19, r1
    443c:	2c f4       	brge	.+10     	; 0x4448 <DIO_enu_SetPinValue+0x66>
    443e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4440:	9e 85       	ldd	r25, Y+14	; 0x0e
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	71 f0       	breq	.+28     	; 0x4462 <DIO_enu_SetPinValue+0x80>
    4446:	ed c0       	rjmp	.+474    	; 0x4622 <DIO_enu_SetPinValue+0x240>
    4448:	2d 85       	ldd	r18, Y+13	; 0x0d
    444a:	3e 85       	ldd	r19, Y+14	; 0x0e
    444c:	22 30       	cpi	r18, 0x02	; 2
    444e:	31 05       	cpc	r19, r1
    4450:	09 f4       	brne	.+2      	; 0x4454 <DIO_enu_SetPinValue+0x72>
    4452:	77 c0       	rjmp	.+238    	; 0x4542 <DIO_enu_SetPinValue+0x160>
    4454:	8d 85       	ldd	r24, Y+13	; 0x0d
    4456:	9e 85       	ldd	r25, Y+14	; 0x0e
    4458:	83 30       	cpi	r24, 0x03	; 3
    445a:	91 05       	cpc	r25, r1
    445c:	09 f4       	brne	.+2      	; 0x4460 <DIO_enu_SetPinValue+0x7e>
    445e:	a9 c0       	rjmp	.+338    	; 0x45b2 <DIO_enu_SetPinValue+0x1d0>
    4460:	e0 c0       	rjmp	.+448    	; 0x4622 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    4462:	8c 81       	ldd	r24, Y+4	; 0x04
    4464:	28 2f       	mov	r18, r24
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	3c 87       	std	Y+12, r19	; 0x0c
    446a:	2b 87       	std	Y+11, r18	; 0x0b
    446c:	8b 85       	ldd	r24, Y+11	; 0x0b
    446e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4470:	00 97       	sbiw	r24, 0x00	; 0
    4472:	d1 f0       	breq	.+52     	; 0x44a8 <DIO_enu_SetPinValue+0xc6>
    4474:	2b 85       	ldd	r18, Y+11	; 0x0b
    4476:	3c 85       	ldd	r19, Y+12	; 0x0c
    4478:	21 30       	cpi	r18, 0x01	; 1
    447a:	31 05       	cpc	r19, r1
    447c:	09 f0       	breq	.+2      	; 0x4480 <DIO_enu_SetPinValue+0x9e>
    447e:	d1 c0       	rjmp	.+418    	; 0x4622 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    4480:	ab e3       	ldi	r26, 0x3B	; 59
    4482:	b0 e0       	ldi	r27, 0x00	; 0
    4484:	eb e3       	ldi	r30, 0x3B	; 59
    4486:	f0 e0       	ldi	r31, 0x00	; 0
    4488:	80 81       	ld	r24, Z
    448a:	48 2f       	mov	r20, r24
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	28 2f       	mov	r18, r24
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	02 2e       	mov	r0, r18
    4498:	02 c0       	rjmp	.+4      	; 0x449e <DIO_enu_SetPinValue+0xbc>
    449a:	88 0f       	add	r24, r24
    449c:	99 1f       	adc	r25, r25
    449e:	0a 94       	dec	r0
    44a0:	e2 f7       	brpl	.-8      	; 0x449a <DIO_enu_SetPinValue+0xb8>
    44a2:	84 2b       	or	r24, r20
    44a4:	8c 93       	st	X, r24
    44a6:	bd c0       	rjmp	.+378    	; 0x4622 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    44a8:	ab e3       	ldi	r26, 0x3B	; 59
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	eb e3       	ldi	r30, 0x3B	; 59
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	80 81       	ld	r24, Z
    44b2:	48 2f       	mov	r20, r24
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	28 2f       	mov	r18, r24
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	81 e0       	ldi	r24, 0x01	; 1
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	02 2e       	mov	r0, r18
    44c0:	02 c0       	rjmp	.+4      	; 0x44c6 <DIO_enu_SetPinValue+0xe4>
    44c2:	88 0f       	add	r24, r24
    44c4:	99 1f       	adc	r25, r25
    44c6:	0a 94       	dec	r0
    44c8:	e2 f7       	brpl	.-8      	; 0x44c2 <DIO_enu_SetPinValue+0xe0>
    44ca:	80 95       	com	r24
    44cc:	84 23       	and	r24, r20
    44ce:	8c 93       	st	X, r24
    44d0:	a8 c0       	rjmp	.+336    	; 0x4622 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	28 2f       	mov	r18, r24
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	3a 87       	std	Y+10, r19	; 0x0a
    44da:	29 87       	std	Y+9, r18	; 0x09
    44dc:	89 85       	ldd	r24, Y+9	; 0x09
    44de:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	d1 f0       	breq	.+52     	; 0x4518 <DIO_enu_SetPinValue+0x136>
    44e4:	29 85       	ldd	r18, Y+9	; 0x09
    44e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    44e8:	21 30       	cpi	r18, 0x01	; 1
    44ea:	31 05       	cpc	r19, r1
    44ec:	09 f0       	breq	.+2      	; 0x44f0 <DIO_enu_SetPinValue+0x10e>
    44ee:	99 c0       	rjmp	.+306    	; 0x4622 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    44f0:	a8 e3       	ldi	r26, 0x38	; 56
    44f2:	b0 e0       	ldi	r27, 0x00	; 0
    44f4:	e8 e3       	ldi	r30, 0x38	; 56
    44f6:	f0 e0       	ldi	r31, 0x00	; 0
    44f8:	80 81       	ld	r24, Z
    44fa:	48 2f       	mov	r20, r24
    44fc:	8b 81       	ldd	r24, Y+3	; 0x03
    44fe:	28 2f       	mov	r18, r24
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	02 2e       	mov	r0, r18
    4508:	02 c0       	rjmp	.+4      	; 0x450e <DIO_enu_SetPinValue+0x12c>
    450a:	88 0f       	add	r24, r24
    450c:	99 1f       	adc	r25, r25
    450e:	0a 94       	dec	r0
    4510:	e2 f7       	brpl	.-8      	; 0x450a <DIO_enu_SetPinValue+0x128>
    4512:	84 2b       	or	r24, r20
    4514:	8c 93       	st	X, r24
    4516:	85 c0       	rjmp	.+266    	; 0x4622 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    4518:	a8 e3       	ldi	r26, 0x38	; 56
    451a:	b0 e0       	ldi	r27, 0x00	; 0
    451c:	e8 e3       	ldi	r30, 0x38	; 56
    451e:	f0 e0       	ldi	r31, 0x00	; 0
    4520:	80 81       	ld	r24, Z
    4522:	48 2f       	mov	r20, r24
    4524:	8b 81       	ldd	r24, Y+3	; 0x03
    4526:	28 2f       	mov	r18, r24
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	90 e0       	ldi	r25, 0x00	; 0
    452e:	02 2e       	mov	r0, r18
    4530:	02 c0       	rjmp	.+4      	; 0x4536 <DIO_enu_SetPinValue+0x154>
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	0a 94       	dec	r0
    4538:	e2 f7       	brpl	.-8      	; 0x4532 <DIO_enu_SetPinValue+0x150>
    453a:	80 95       	com	r24
    453c:	84 23       	and	r24, r20
    453e:	8c 93       	st	X, r24
    4540:	70 c0       	rjmp	.+224    	; 0x4622 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    4542:	8c 81       	ldd	r24, Y+4	; 0x04
    4544:	28 2f       	mov	r18, r24
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	38 87       	std	Y+8, r19	; 0x08
    454a:	2f 83       	std	Y+7, r18	; 0x07
    454c:	8f 81       	ldd	r24, Y+7	; 0x07
    454e:	98 85       	ldd	r25, Y+8	; 0x08
    4550:	00 97       	sbiw	r24, 0x00	; 0
    4552:	d1 f0       	breq	.+52     	; 0x4588 <DIO_enu_SetPinValue+0x1a6>
    4554:	2f 81       	ldd	r18, Y+7	; 0x07
    4556:	38 85       	ldd	r19, Y+8	; 0x08
    4558:	21 30       	cpi	r18, 0x01	; 1
    455a:	31 05       	cpc	r19, r1
    455c:	09 f0       	breq	.+2      	; 0x4560 <DIO_enu_SetPinValue+0x17e>
    455e:	61 c0       	rjmp	.+194    	; 0x4622 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    4560:	a5 e3       	ldi	r26, 0x35	; 53
    4562:	b0 e0       	ldi	r27, 0x00	; 0
    4564:	e5 e3       	ldi	r30, 0x35	; 53
    4566:	f0 e0       	ldi	r31, 0x00	; 0
    4568:	80 81       	ld	r24, Z
    456a:	48 2f       	mov	r20, r24
    456c:	8b 81       	ldd	r24, Y+3	; 0x03
    456e:	28 2f       	mov	r18, r24
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	81 e0       	ldi	r24, 0x01	; 1
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	02 2e       	mov	r0, r18
    4578:	02 c0       	rjmp	.+4      	; 0x457e <DIO_enu_SetPinValue+0x19c>
    457a:	88 0f       	add	r24, r24
    457c:	99 1f       	adc	r25, r25
    457e:	0a 94       	dec	r0
    4580:	e2 f7       	brpl	.-8      	; 0x457a <DIO_enu_SetPinValue+0x198>
    4582:	84 2b       	or	r24, r20
    4584:	8c 93       	st	X, r24
    4586:	4d c0       	rjmp	.+154    	; 0x4622 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    4588:	a5 e3       	ldi	r26, 0x35	; 53
    458a:	b0 e0       	ldi	r27, 0x00	; 0
    458c:	e5 e3       	ldi	r30, 0x35	; 53
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	80 81       	ld	r24, Z
    4592:	48 2f       	mov	r20, r24
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	28 2f       	mov	r18, r24
    4598:	30 e0       	ldi	r19, 0x00	; 0
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	90 e0       	ldi	r25, 0x00	; 0
    459e:	02 2e       	mov	r0, r18
    45a0:	02 c0       	rjmp	.+4      	; 0x45a6 <DIO_enu_SetPinValue+0x1c4>
    45a2:	88 0f       	add	r24, r24
    45a4:	99 1f       	adc	r25, r25
    45a6:	0a 94       	dec	r0
    45a8:	e2 f7       	brpl	.-8      	; 0x45a2 <DIO_enu_SetPinValue+0x1c0>
    45aa:	80 95       	com	r24
    45ac:	84 23       	and	r24, r20
    45ae:	8c 93       	st	X, r24
    45b0:	38 c0       	rjmp	.+112    	; 0x4622 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    45b2:	8c 81       	ldd	r24, Y+4	; 0x04
    45b4:	28 2f       	mov	r18, r24
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	3e 83       	std	Y+6, r19	; 0x06
    45ba:	2d 83       	std	Y+5, r18	; 0x05
    45bc:	8d 81       	ldd	r24, Y+5	; 0x05
    45be:	9e 81       	ldd	r25, Y+6	; 0x06
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	c9 f0       	breq	.+50     	; 0x45f6 <DIO_enu_SetPinValue+0x214>
    45c4:	2d 81       	ldd	r18, Y+5	; 0x05
    45c6:	3e 81       	ldd	r19, Y+6	; 0x06
    45c8:	21 30       	cpi	r18, 0x01	; 1
    45ca:	31 05       	cpc	r19, r1
    45cc:	51 f5       	brne	.+84     	; 0x4622 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    45ce:	a2 e3       	ldi	r26, 0x32	; 50
    45d0:	b0 e0       	ldi	r27, 0x00	; 0
    45d2:	e2 e3       	ldi	r30, 0x32	; 50
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	80 81       	ld	r24, Z
    45d8:	48 2f       	mov	r20, r24
    45da:	8b 81       	ldd	r24, Y+3	; 0x03
    45dc:	28 2f       	mov	r18, r24
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	81 e0       	ldi	r24, 0x01	; 1
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	02 2e       	mov	r0, r18
    45e6:	02 c0       	rjmp	.+4      	; 0x45ec <DIO_enu_SetPinValue+0x20a>
    45e8:	88 0f       	add	r24, r24
    45ea:	99 1f       	adc	r25, r25
    45ec:	0a 94       	dec	r0
    45ee:	e2 f7       	brpl	.-8      	; 0x45e8 <DIO_enu_SetPinValue+0x206>
    45f0:	84 2b       	or	r24, r20
    45f2:	8c 93       	st	X, r24
    45f4:	16 c0       	rjmp	.+44     	; 0x4622 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    45f6:	a2 e3       	ldi	r26, 0x32	; 50
    45f8:	b0 e0       	ldi	r27, 0x00	; 0
    45fa:	e2 e3       	ldi	r30, 0x32	; 50
    45fc:	f0 e0       	ldi	r31, 0x00	; 0
    45fe:	80 81       	ld	r24, Z
    4600:	48 2f       	mov	r20, r24
    4602:	8b 81       	ldd	r24, Y+3	; 0x03
    4604:	28 2f       	mov	r18, r24
    4606:	30 e0       	ldi	r19, 0x00	; 0
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	02 2e       	mov	r0, r18
    460e:	02 c0       	rjmp	.+4      	; 0x4614 <DIO_enu_SetPinValue+0x232>
    4610:	88 0f       	add	r24, r24
    4612:	99 1f       	adc	r25, r25
    4614:	0a 94       	dec	r0
    4616:	e2 f7       	brpl	.-8      	; 0x4610 <DIO_enu_SetPinValue+0x22e>
    4618:	80 95       	com	r24
    461a:	84 23       	and	r24, r20
    461c:	8c 93       	st	X, r24
    461e:	01 c0       	rjmp	.+2      	; 0x4622 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    4620:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4622:	89 81       	ldd	r24, Y+1	; 0x01
}
    4624:	2e 96       	adiw	r28, 0x0e	; 14
    4626:	0f b6       	in	r0, 0x3f	; 63
    4628:	f8 94       	cli
    462a:	de bf       	out	0x3e, r29	; 62
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	cd bf       	out	0x3d, r28	; 61
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	08 95       	ret

00004636 <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    4636:	df 93       	push	r29
    4638:	cf 93       	push	r28
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    463e:	27 97       	sbiw	r28, 0x07	; 7
    4640:	0f b6       	in	r0, 0x3f	; 63
    4642:	f8 94       	cli
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	0f be       	out	0x3f, r0	; 63
    4648:	cd bf       	out	0x3d, r28	; 61
    464a:	8a 83       	std	Y+2, r24	; 0x02
    464c:	6b 83       	std	Y+3, r22	; 0x03
    464e:	5d 83       	std	Y+5, r21	; 0x05
    4650:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    4652:	81 e0       	ldi	r24, 0x01	; 1
    4654:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    4656:	8a 81       	ldd	r24, Y+2	; 0x02
    4658:	84 30       	cpi	r24, 0x04	; 4
    465a:	08 f0       	brcs	.+2      	; 0x465e <DIO_enu_GetPinValue+0x28>
    465c:	7a c0       	rjmp	.+244    	; 0x4752 <DIO_enu_GetPinValue+0x11c>
    465e:	8b 81       	ldd	r24, Y+3	; 0x03
    4660:	88 30       	cpi	r24, 0x08	; 8
    4662:	08 f0       	brcs	.+2      	; 0x4666 <DIO_enu_GetPinValue+0x30>
    4664:	76 c0       	rjmp	.+236    	; 0x4752 <DIO_enu_GetPinValue+0x11c>
    4666:	8c 81       	ldd	r24, Y+4	; 0x04
    4668:	9d 81       	ldd	r25, Y+5	; 0x05
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	09 f4       	brne	.+2      	; 0x4670 <DIO_enu_GetPinValue+0x3a>
    466e:	71 c0       	rjmp	.+226    	; 0x4752 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    4670:	8a 81       	ldd	r24, Y+2	; 0x02
    4672:	28 2f       	mov	r18, r24
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	3f 83       	std	Y+7, r19	; 0x07
    4678:	2e 83       	std	Y+6, r18	; 0x06
    467a:	4e 81       	ldd	r20, Y+6	; 0x06
    467c:	5f 81       	ldd	r21, Y+7	; 0x07
    467e:	41 30       	cpi	r20, 0x01	; 1
    4680:	51 05       	cpc	r21, r1
    4682:	59 f1       	breq	.+86     	; 0x46da <DIO_enu_GetPinValue+0xa4>
    4684:	8e 81       	ldd	r24, Y+6	; 0x06
    4686:	9f 81       	ldd	r25, Y+7	; 0x07
    4688:	82 30       	cpi	r24, 0x02	; 2
    468a:	91 05       	cpc	r25, r1
    468c:	34 f4       	brge	.+12     	; 0x469a <DIO_enu_GetPinValue+0x64>
    468e:	2e 81       	ldd	r18, Y+6	; 0x06
    4690:	3f 81       	ldd	r19, Y+7	; 0x07
    4692:	21 15       	cp	r18, r1
    4694:	31 05       	cpc	r19, r1
    4696:	69 f0       	breq	.+26     	; 0x46b2 <DIO_enu_GetPinValue+0x7c>
    4698:	5d c0       	rjmp	.+186    	; 0x4754 <DIO_enu_GetPinValue+0x11e>
    469a:	4e 81       	ldd	r20, Y+6	; 0x06
    469c:	5f 81       	ldd	r21, Y+7	; 0x07
    469e:	42 30       	cpi	r20, 0x02	; 2
    46a0:	51 05       	cpc	r21, r1
    46a2:	79 f1       	breq	.+94     	; 0x4702 <DIO_enu_GetPinValue+0xcc>
    46a4:	8e 81       	ldd	r24, Y+6	; 0x06
    46a6:	9f 81       	ldd	r25, Y+7	; 0x07
    46a8:	83 30       	cpi	r24, 0x03	; 3
    46aa:	91 05       	cpc	r25, r1
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <DIO_enu_GetPinValue+0x7a>
    46ae:	3d c0       	rjmp	.+122    	; 0x472a <DIO_enu_GetPinValue+0xf4>
    46b0:	51 c0       	rjmp	.+162    	; 0x4754 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    46b2:	e9 e3       	ldi	r30, 0x39	; 57
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	28 2f       	mov	r18, r24
    46ba:	30 e0       	ldi	r19, 0x00	; 0
    46bc:	8b 81       	ldd	r24, Y+3	; 0x03
    46be:	88 2f       	mov	r24, r24
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	a9 01       	movw	r20, r18
    46c4:	02 c0       	rjmp	.+4      	; 0x46ca <DIO_enu_GetPinValue+0x94>
    46c6:	55 95       	asr	r21
    46c8:	47 95       	ror	r20
    46ca:	8a 95       	dec	r24
    46cc:	e2 f7       	brpl	.-8      	; 0x46c6 <DIO_enu_GetPinValue+0x90>
    46ce:	ca 01       	movw	r24, r20
    46d0:	81 70       	andi	r24, 0x01	; 1
    46d2:	ec 81       	ldd	r30, Y+4	; 0x04
    46d4:	fd 81       	ldd	r31, Y+5	; 0x05
    46d6:	80 83       	st	Z, r24
    46d8:	3d c0       	rjmp	.+122    	; 0x4754 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    46da:	e6 e3       	ldi	r30, 0x36	; 54
    46dc:	f0 e0       	ldi	r31, 0x00	; 0
    46de:	80 81       	ld	r24, Z
    46e0:	28 2f       	mov	r18, r24
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	8b 81       	ldd	r24, Y+3	; 0x03
    46e6:	88 2f       	mov	r24, r24
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	a9 01       	movw	r20, r18
    46ec:	02 c0       	rjmp	.+4      	; 0x46f2 <DIO_enu_GetPinValue+0xbc>
    46ee:	55 95       	asr	r21
    46f0:	47 95       	ror	r20
    46f2:	8a 95       	dec	r24
    46f4:	e2 f7       	brpl	.-8      	; 0x46ee <DIO_enu_GetPinValue+0xb8>
    46f6:	ca 01       	movw	r24, r20
    46f8:	81 70       	andi	r24, 0x01	; 1
    46fa:	ec 81       	ldd	r30, Y+4	; 0x04
    46fc:	fd 81       	ldd	r31, Y+5	; 0x05
    46fe:	80 83       	st	Z, r24
    4700:	29 c0       	rjmp	.+82     	; 0x4754 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    4702:	e3 e3       	ldi	r30, 0x33	; 51
    4704:	f0 e0       	ldi	r31, 0x00	; 0
    4706:	80 81       	ld	r24, Z
    4708:	28 2f       	mov	r18, r24
    470a:	30 e0       	ldi	r19, 0x00	; 0
    470c:	8b 81       	ldd	r24, Y+3	; 0x03
    470e:	88 2f       	mov	r24, r24
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	a9 01       	movw	r20, r18
    4714:	02 c0       	rjmp	.+4      	; 0x471a <DIO_enu_GetPinValue+0xe4>
    4716:	55 95       	asr	r21
    4718:	47 95       	ror	r20
    471a:	8a 95       	dec	r24
    471c:	e2 f7       	brpl	.-8      	; 0x4716 <DIO_enu_GetPinValue+0xe0>
    471e:	ca 01       	movw	r24, r20
    4720:	81 70       	andi	r24, 0x01	; 1
    4722:	ec 81       	ldd	r30, Y+4	; 0x04
    4724:	fd 81       	ldd	r31, Y+5	; 0x05
    4726:	80 83       	st	Z, r24
    4728:	15 c0       	rjmp	.+42     	; 0x4754 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    472a:	e0 e3       	ldi	r30, 0x30	; 48
    472c:	f0 e0       	ldi	r31, 0x00	; 0
    472e:	80 81       	ld	r24, Z
    4730:	28 2f       	mov	r18, r24
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	8b 81       	ldd	r24, Y+3	; 0x03
    4736:	88 2f       	mov	r24, r24
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	a9 01       	movw	r20, r18
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <DIO_enu_GetPinValue+0x10c>
    473e:	55 95       	asr	r21
    4740:	47 95       	ror	r20
    4742:	8a 95       	dec	r24
    4744:	e2 f7       	brpl	.-8      	; 0x473e <DIO_enu_GetPinValue+0x108>
    4746:	ca 01       	movw	r24, r20
    4748:	81 70       	andi	r24, 0x01	; 1
    474a:	ec 81       	ldd	r30, Y+4	; 0x04
    474c:	fd 81       	ldd	r31, Y+5	; 0x05
    474e:	80 83       	st	Z, r24
    4750:	01 c0       	rjmp	.+2      	; 0x4754 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    4752:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4754:	89 81       	ldd	r24, Y+1	; 0x01
}
    4756:	27 96       	adiw	r28, 0x07	; 7
    4758:	0f b6       	in	r0, 0x3f	; 63
    475a:	f8 94       	cli
    475c:	de bf       	out	0x3e, r29	; 62
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	cd bf       	out	0x3d, r28	; 61
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	08 95       	ret

00004768 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    4770:	2d 97       	sbiw	r28, 0x0d	; 13
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	f8 94       	cli
    4776:	de bf       	out	0x3e, r29	; 62
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	cd bf       	out	0x3d, r28	; 61
    477c:	8a 83       	std	Y+2, r24	; 0x02
    477e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    4780:	81 e0       	ldi	r24, 0x01	; 1
    4782:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    4784:	8a 81       	ldd	r24, Y+2	; 0x02
    4786:	84 30       	cpi	r24, 0x04	; 4
    4788:	08 f0       	brcs	.+2      	; 0x478c <DIO_enu_SetPortDirection+0x24>
    478a:	84 c0       	rjmp	.+264    	; 0x4894 <DIO_enu_SetPortDirection+0x12c>
    478c:	8b 81       	ldd	r24, Y+3	; 0x03
    478e:	81 30       	cpi	r24, 0x01	; 1
    4790:	21 f0       	breq	.+8      	; 0x479a <DIO_enu_SetPortDirection+0x32>
    4792:	8b 81       	ldd	r24, Y+3	; 0x03
    4794:	88 23       	and	r24, r24
    4796:	09 f0       	breq	.+2      	; 0x479a <DIO_enu_SetPortDirection+0x32>
    4798:	7d c0       	rjmp	.+250    	; 0x4894 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	28 2f       	mov	r18, r24
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	3d 87       	std	Y+13, r19	; 0x0d
    47a2:	2c 87       	std	Y+12, r18	; 0x0c
    47a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    47a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	91 05       	cpc	r25, r1
    47ac:	71 f1       	breq	.+92     	; 0x480a <DIO_enu_SetPortDirection+0xa2>
    47ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    47b0:	3d 85       	ldd	r19, Y+13	; 0x0d
    47b2:	22 30       	cpi	r18, 0x02	; 2
    47b4:	31 05       	cpc	r19, r1
    47b6:	2c f4       	brge	.+10     	; 0x47c2 <DIO_enu_SetPortDirection+0x5a>
    47b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    47ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    47bc:	00 97       	sbiw	r24, 0x00	; 0
    47be:	69 f0       	breq	.+26     	; 0x47da <DIO_enu_SetPortDirection+0x72>
    47c0:	6a c0       	rjmp	.+212    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
    47c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    47c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    47c6:	22 30       	cpi	r18, 0x02	; 2
    47c8:	31 05       	cpc	r19, r1
    47ca:	b1 f1       	breq	.+108    	; 0x4838 <DIO_enu_SetPortDirection+0xd0>
    47cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    47ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    47d0:	83 30       	cpi	r24, 0x03	; 3
    47d2:	91 05       	cpc	r25, r1
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <DIO_enu_SetPortDirection+0x70>
    47d6:	47 c0       	rjmp	.+142    	; 0x4866 <DIO_enu_SetPortDirection+0xfe>
    47d8:	5e c0       	rjmp	.+188    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    47da:	8b 81       	ldd	r24, Y+3	; 0x03
    47dc:	28 2f       	mov	r18, r24
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	3b 87       	std	Y+11, r19	; 0x0b
    47e2:	2a 87       	std	Y+10, r18	; 0x0a
    47e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    47e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    47e8:	00 97       	sbiw	r24, 0x00	; 0
    47ea:	59 f0       	breq	.+22     	; 0x4802 <DIO_enu_SetPortDirection+0x9a>
    47ec:	2a 85       	ldd	r18, Y+10	; 0x0a
    47ee:	3b 85       	ldd	r19, Y+11	; 0x0b
    47f0:	21 30       	cpi	r18, 0x01	; 1
    47f2:	31 05       	cpc	r19, r1
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <DIO_enu_SetPortDirection+0x90>
    47f6:	4f c0       	rjmp	.+158    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    47f8:	ea e3       	ldi	r30, 0x3A	; 58
    47fa:	f0 e0       	ldi	r31, 0x00	; 0
    47fc:	8f ef       	ldi	r24, 0xFF	; 255
    47fe:	80 83       	st	Z, r24
    4800:	4a c0       	rjmp	.+148    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    4802:	ea e3       	ldi	r30, 0x3A	; 58
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	10 82       	st	Z, r1
    4808:	46 c0       	rjmp	.+140    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    480a:	8b 81       	ldd	r24, Y+3	; 0x03
    480c:	28 2f       	mov	r18, r24
    480e:	30 e0       	ldi	r19, 0x00	; 0
    4810:	39 87       	std	Y+9, r19	; 0x09
    4812:	28 87       	std	Y+8, r18	; 0x08
    4814:	88 85       	ldd	r24, Y+8	; 0x08
    4816:	99 85       	ldd	r25, Y+9	; 0x09
    4818:	00 97       	sbiw	r24, 0x00	; 0
    481a:	51 f0       	breq	.+20     	; 0x4830 <DIO_enu_SetPortDirection+0xc8>
    481c:	28 85       	ldd	r18, Y+8	; 0x08
    481e:	39 85       	ldd	r19, Y+9	; 0x09
    4820:	21 30       	cpi	r18, 0x01	; 1
    4822:	31 05       	cpc	r19, r1
    4824:	c1 f5       	brne	.+112    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    4826:	e7 e3       	ldi	r30, 0x37	; 55
    4828:	f0 e0       	ldi	r31, 0x00	; 0
    482a:	8f ef       	ldi	r24, 0xFF	; 255
    482c:	80 83       	st	Z, r24
    482e:	33 c0       	rjmp	.+102    	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    4830:	e7 e3       	ldi	r30, 0x37	; 55
    4832:	f0 e0       	ldi	r31, 0x00	; 0
    4834:	10 82       	st	Z, r1
    4836:	2f c0       	rjmp	.+94     	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    4838:	8b 81       	ldd	r24, Y+3	; 0x03
    483a:	28 2f       	mov	r18, r24
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	3f 83       	std	Y+7, r19	; 0x07
    4840:	2e 83       	std	Y+6, r18	; 0x06
    4842:	8e 81       	ldd	r24, Y+6	; 0x06
    4844:	9f 81       	ldd	r25, Y+7	; 0x07
    4846:	00 97       	sbiw	r24, 0x00	; 0
    4848:	51 f0       	breq	.+20     	; 0x485e <DIO_enu_SetPortDirection+0xf6>
    484a:	2e 81       	ldd	r18, Y+6	; 0x06
    484c:	3f 81       	ldd	r19, Y+7	; 0x07
    484e:	21 30       	cpi	r18, 0x01	; 1
    4850:	31 05       	cpc	r19, r1
    4852:	09 f5       	brne	.+66     	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    4854:	e4 e3       	ldi	r30, 0x34	; 52
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	8f ef       	ldi	r24, 0xFF	; 255
    485a:	80 83       	st	Z, r24
    485c:	1c c0       	rjmp	.+56     	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    485e:	e4 e3       	ldi	r30, 0x34	; 52
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	10 82       	st	Z, r1
    4864:	18 c0       	rjmp	.+48     	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    4866:	8b 81       	ldd	r24, Y+3	; 0x03
    4868:	28 2f       	mov	r18, r24
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	3d 83       	std	Y+5, r19	; 0x05
    486e:	2c 83       	std	Y+4, r18	; 0x04
    4870:	8c 81       	ldd	r24, Y+4	; 0x04
    4872:	9d 81       	ldd	r25, Y+5	; 0x05
    4874:	00 97       	sbiw	r24, 0x00	; 0
    4876:	51 f0       	breq	.+20     	; 0x488c <DIO_enu_SetPortDirection+0x124>
    4878:	2c 81       	ldd	r18, Y+4	; 0x04
    487a:	3d 81       	ldd	r19, Y+5	; 0x05
    487c:	21 30       	cpi	r18, 0x01	; 1
    487e:	31 05       	cpc	r19, r1
    4880:	51 f4       	brne	.+20     	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    4882:	e1 e3       	ldi	r30, 0x31	; 49
    4884:	f0 e0       	ldi	r31, 0x00	; 0
    4886:	8f ef       	ldi	r24, 0xFF	; 255
    4888:	80 83       	st	Z, r24
    488a:	05 c0       	rjmp	.+10     	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    488c:	e1 e3       	ldi	r30, 0x31	; 49
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	10 82       	st	Z, r1
    4892:	01 c0       	rjmp	.+2      	; 0x4896 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    4894:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4896:	89 81       	ldd	r24, Y+1	; 0x01
}
    4898:	2d 96       	adiw	r28, 0x0d	; 13
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
    48a4:	cf 91       	pop	r28
    48a6:	df 91       	pop	r29
    48a8:	08 95       	ret

000048aa <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    48aa:	df 93       	push	r29
    48ac:	cf 93       	push	r28
    48ae:	00 d0       	rcall	.+0      	; 0x48b0 <DIO_enu_SetPortValue+0x6>
    48b0:	00 d0       	rcall	.+0      	; 0x48b2 <DIO_enu_SetPortValue+0x8>
    48b2:	0f 92       	push	r0
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	8a 83       	std	Y+2, r24	; 0x02
    48ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    48c0:	8a 81       	ldd	r24, Y+2	; 0x02
    48c2:	84 30       	cpi	r24, 0x04	; 4
    48c4:	98 f5       	brcc	.+102    	; 0x492c <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    48c6:	8a 81       	ldd	r24, Y+2	; 0x02
    48c8:	28 2f       	mov	r18, r24
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	3d 83       	std	Y+5, r19	; 0x05
    48ce:	2c 83       	std	Y+4, r18	; 0x04
    48d0:	8c 81       	ldd	r24, Y+4	; 0x04
    48d2:	9d 81       	ldd	r25, Y+5	; 0x05
    48d4:	81 30       	cpi	r24, 0x01	; 1
    48d6:	91 05       	cpc	r25, r1
    48d8:	d1 f0       	breq	.+52     	; 0x490e <DIO_enu_SetPortValue+0x64>
    48da:	2c 81       	ldd	r18, Y+4	; 0x04
    48dc:	3d 81       	ldd	r19, Y+5	; 0x05
    48de:	22 30       	cpi	r18, 0x02	; 2
    48e0:	31 05       	cpc	r19, r1
    48e2:	2c f4       	brge	.+10     	; 0x48ee <DIO_enu_SetPortValue+0x44>
    48e4:	8c 81       	ldd	r24, Y+4	; 0x04
    48e6:	9d 81       	ldd	r25, Y+5	; 0x05
    48e8:	00 97       	sbiw	r24, 0x00	; 0
    48ea:	61 f0       	breq	.+24     	; 0x4904 <DIO_enu_SetPortValue+0x5a>
    48ec:	20 c0       	rjmp	.+64     	; 0x492e <DIO_enu_SetPortValue+0x84>
    48ee:	2c 81       	ldd	r18, Y+4	; 0x04
    48f0:	3d 81       	ldd	r19, Y+5	; 0x05
    48f2:	22 30       	cpi	r18, 0x02	; 2
    48f4:	31 05       	cpc	r19, r1
    48f6:	81 f0       	breq	.+32     	; 0x4918 <DIO_enu_SetPortValue+0x6e>
    48f8:	8c 81       	ldd	r24, Y+4	; 0x04
    48fa:	9d 81       	ldd	r25, Y+5	; 0x05
    48fc:	83 30       	cpi	r24, 0x03	; 3
    48fe:	91 05       	cpc	r25, r1
    4900:	81 f0       	breq	.+32     	; 0x4922 <DIO_enu_SetPortValue+0x78>
    4902:	15 c0       	rjmp	.+42     	; 0x492e <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    4904:	eb e3       	ldi	r30, 0x3B	; 59
    4906:	f0 e0       	ldi	r31, 0x00	; 0
    4908:	8b 81       	ldd	r24, Y+3	; 0x03
    490a:	80 83       	st	Z, r24
    490c:	10 c0       	rjmp	.+32     	; 0x492e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    490e:	e8 e3       	ldi	r30, 0x38	; 56
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	8b 81       	ldd	r24, Y+3	; 0x03
    4914:	80 83       	st	Z, r24
    4916:	0b c0       	rjmp	.+22     	; 0x492e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    4918:	e5 e3       	ldi	r30, 0x35	; 53
    491a:	f0 e0       	ldi	r31, 0x00	; 0
    491c:	8b 81       	ldd	r24, Y+3	; 0x03
    491e:	80 83       	st	Z, r24
    4920:	06 c0       	rjmp	.+12     	; 0x492e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    4922:	e2 e3       	ldi	r30, 0x32	; 50
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	8b 81       	ldd	r24, Y+3	; 0x03
    4928:	80 83       	st	Z, r24
    492a:	01 c0       	rjmp	.+2      	; 0x492e <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    492c:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    492e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	0f 90       	pop	r0
    4938:	0f 90       	pop	r0
    493a:	cf 91       	pop	r28
    493c:	df 91       	pop	r29
    493e:	08 95       	ret

00004940 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    4940:	df 93       	push	r29
    4942:	cf 93       	push	r28
    4944:	00 d0       	rcall	.+0      	; 0x4946 <DIO_enu_GetPortValue+0x6>
    4946:	00 d0       	rcall	.+0      	; 0x4948 <DIO_enu_GetPortValue+0x8>
    4948:	00 d0       	rcall	.+0      	; 0x494a <DIO_enu_GetPortValue+0xa>
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
    494e:	8a 83       	std	Y+2, r24	; 0x02
    4950:	7c 83       	std	Y+4, r23	; 0x04
    4952:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    4958:	8a 81       	ldd	r24, Y+2	; 0x02
    495a:	84 30       	cpi	r24, 0x04	; 4
    495c:	08 f0       	brcs	.+2      	; 0x4960 <DIO_enu_GetPortValue+0x20>
    495e:	3f c0       	rjmp	.+126    	; 0x49de <DIO_enu_GetPortValue+0x9e>
    4960:	8b 81       	ldd	r24, Y+3	; 0x03
    4962:	9c 81       	ldd	r25, Y+4	; 0x04
    4964:	00 97       	sbiw	r24, 0x00	; 0
    4966:	d9 f1       	breq	.+118    	; 0x49de <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    4968:	8a 81       	ldd	r24, Y+2	; 0x02
    496a:	28 2f       	mov	r18, r24
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	3e 83       	std	Y+6, r19	; 0x06
    4970:	2d 83       	std	Y+5, r18	; 0x05
    4972:	8d 81       	ldd	r24, Y+5	; 0x05
    4974:	9e 81       	ldd	r25, Y+6	; 0x06
    4976:	81 30       	cpi	r24, 0x01	; 1
    4978:	91 05       	cpc	r25, r1
    497a:	e1 f0       	breq	.+56     	; 0x49b4 <DIO_enu_GetPortValue+0x74>
    497c:	2d 81       	ldd	r18, Y+5	; 0x05
    497e:	3e 81       	ldd	r19, Y+6	; 0x06
    4980:	22 30       	cpi	r18, 0x02	; 2
    4982:	31 05       	cpc	r19, r1
    4984:	2c f4       	brge	.+10     	; 0x4990 <DIO_enu_GetPortValue+0x50>
    4986:	8d 81       	ldd	r24, Y+5	; 0x05
    4988:	9e 81       	ldd	r25, Y+6	; 0x06
    498a:	00 97       	sbiw	r24, 0x00	; 0
    498c:	61 f0       	breq	.+24     	; 0x49a6 <DIO_enu_GetPortValue+0x66>
    498e:	28 c0       	rjmp	.+80     	; 0x49e0 <DIO_enu_GetPortValue+0xa0>
    4990:	2d 81       	ldd	r18, Y+5	; 0x05
    4992:	3e 81       	ldd	r19, Y+6	; 0x06
    4994:	22 30       	cpi	r18, 0x02	; 2
    4996:	31 05       	cpc	r19, r1
    4998:	a1 f0       	breq	.+40     	; 0x49c2 <DIO_enu_GetPortValue+0x82>
    499a:	8d 81       	ldd	r24, Y+5	; 0x05
    499c:	9e 81       	ldd	r25, Y+6	; 0x06
    499e:	83 30       	cpi	r24, 0x03	; 3
    49a0:	91 05       	cpc	r25, r1
    49a2:	b1 f0       	breq	.+44     	; 0x49d0 <DIO_enu_GetPortValue+0x90>
    49a4:	1d c0       	rjmp	.+58     	; 0x49e0 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    49a6:	e9 e3       	ldi	r30, 0x39	; 57
    49a8:	f0 e0       	ldi	r31, 0x00	; 0
    49aa:	80 81       	ld	r24, Z
    49ac:	eb 81       	ldd	r30, Y+3	; 0x03
    49ae:	fc 81       	ldd	r31, Y+4	; 0x04
    49b0:	80 83       	st	Z, r24
    49b2:	16 c0       	rjmp	.+44     	; 0x49e0 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    49b4:	e6 e3       	ldi	r30, 0x36	; 54
    49b6:	f0 e0       	ldi	r31, 0x00	; 0
    49b8:	80 81       	ld	r24, Z
    49ba:	eb 81       	ldd	r30, Y+3	; 0x03
    49bc:	fc 81       	ldd	r31, Y+4	; 0x04
    49be:	80 83       	st	Z, r24
    49c0:	0f c0       	rjmp	.+30     	; 0x49e0 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    49c2:	e3 e3       	ldi	r30, 0x33	; 51
    49c4:	f0 e0       	ldi	r31, 0x00	; 0
    49c6:	80 81       	ld	r24, Z
    49c8:	eb 81       	ldd	r30, Y+3	; 0x03
    49ca:	fc 81       	ldd	r31, Y+4	; 0x04
    49cc:	80 83       	st	Z, r24
    49ce:	08 c0       	rjmp	.+16     	; 0x49e0 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    49d0:	e0 e3       	ldi	r30, 0x30	; 48
    49d2:	f0 e0       	ldi	r31, 0x00	; 0
    49d4:	80 81       	ld	r24, Z
    49d6:	eb 81       	ldd	r30, Y+3	; 0x03
    49d8:	fc 81       	ldd	r31, Y+4	; 0x04
    49da:	80 83       	st	Z, r24
    49dc:	01 c0       	rjmp	.+2      	; 0x49e0 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    49de:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    49e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    49e2:	26 96       	adiw	r28, 0x06	; 6
    49e4:	0f b6       	in	r0, 0x3f	; 63
    49e6:	f8 94       	cli
    49e8:	de bf       	out	0x3e, r29	; 62
    49ea:	0f be       	out	0x3f, r0	; 63
    49ec:	cd bf       	out	0x3d, r28	; 61
    49ee:	cf 91       	pop	r28
    49f0:	df 91       	pop	r29
    49f2:	08 95       	ret

000049f4 <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    49f4:	df 93       	push	r29
    49f6:	cf 93       	push	r28
    49f8:	00 d0       	rcall	.+0      	; 0x49fa <DIO_enu_ToggPin+0x6>
    49fa:	00 d0       	rcall	.+0      	; 0x49fc <DIO_enu_ToggPin+0x8>
    49fc:	0f 92       	push	r0
    49fe:	cd b7       	in	r28, 0x3d	; 61
    4a00:	de b7       	in	r29, 0x3e	; 62
    4a02:	8a 83       	std	Y+2, r24	; 0x02
    4a04:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    4a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0c:	84 30       	cpi	r24, 0x04	; 4
    4a0e:	08 f0       	brcs	.+2      	; 0x4a12 <DIO_enu_ToggPin+0x1e>
    4a10:	73 c0       	rjmp	.+230    	; 0x4af8 <DIO_enu_ToggPin+0x104>
    4a12:	8b 81       	ldd	r24, Y+3	; 0x03
    4a14:	88 30       	cpi	r24, 0x08	; 8
    4a16:	08 f0       	brcs	.+2      	; 0x4a1a <DIO_enu_ToggPin+0x26>
    4a18:	6f c0       	rjmp	.+222    	; 0x4af8 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    4a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1c:	28 2f       	mov	r18, r24
    4a1e:	30 e0       	ldi	r19, 0x00	; 0
    4a20:	3d 83       	std	Y+5, r19	; 0x05
    4a22:	2c 83       	std	Y+4, r18	; 0x04
    4a24:	8c 81       	ldd	r24, Y+4	; 0x04
    4a26:	9d 81       	ldd	r25, Y+5	; 0x05
    4a28:	81 30       	cpi	r24, 0x01	; 1
    4a2a:	91 05       	cpc	r25, r1
    4a2c:	49 f1       	breq	.+82     	; 0x4a80 <DIO_enu_ToggPin+0x8c>
    4a2e:	2c 81       	ldd	r18, Y+4	; 0x04
    4a30:	3d 81       	ldd	r19, Y+5	; 0x05
    4a32:	22 30       	cpi	r18, 0x02	; 2
    4a34:	31 05       	cpc	r19, r1
    4a36:	2c f4       	brge	.+10     	; 0x4a42 <DIO_enu_ToggPin+0x4e>
    4a38:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a3c:	00 97       	sbiw	r24, 0x00	; 0
    4a3e:	61 f0       	breq	.+24     	; 0x4a58 <DIO_enu_ToggPin+0x64>
    4a40:	5c c0       	rjmp	.+184    	; 0x4afa <DIO_enu_ToggPin+0x106>
    4a42:	2c 81       	ldd	r18, Y+4	; 0x04
    4a44:	3d 81       	ldd	r19, Y+5	; 0x05
    4a46:	22 30       	cpi	r18, 0x02	; 2
    4a48:	31 05       	cpc	r19, r1
    4a4a:	71 f1       	breq	.+92     	; 0x4aa8 <DIO_enu_ToggPin+0xb4>
    4a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a50:	83 30       	cpi	r24, 0x03	; 3
    4a52:	91 05       	cpc	r25, r1
    4a54:	e9 f1       	breq	.+122    	; 0x4ad0 <DIO_enu_ToggPin+0xdc>
    4a56:	51 c0       	rjmp	.+162    	; 0x4afa <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    4a58:	ab e3       	ldi	r26, 0x3B	; 59
    4a5a:	b0 e0       	ldi	r27, 0x00	; 0
    4a5c:	eb e3       	ldi	r30, 0x3B	; 59
    4a5e:	f0 e0       	ldi	r31, 0x00	; 0
    4a60:	80 81       	ld	r24, Z
    4a62:	48 2f       	mov	r20, r24
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	28 2f       	mov	r18, r24
    4a68:	30 e0       	ldi	r19, 0x00	; 0
    4a6a:	81 e0       	ldi	r24, 0x01	; 1
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	02 2e       	mov	r0, r18
    4a70:	02 c0       	rjmp	.+4      	; 0x4a76 <DIO_enu_ToggPin+0x82>
    4a72:	88 0f       	add	r24, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	0a 94       	dec	r0
    4a78:	e2 f7       	brpl	.-8      	; 0x4a72 <DIO_enu_ToggPin+0x7e>
    4a7a:	84 27       	eor	r24, r20
    4a7c:	8c 93       	st	X, r24
    4a7e:	3d c0       	rjmp	.+122    	; 0x4afa <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    4a80:	a8 e3       	ldi	r26, 0x38	; 56
    4a82:	b0 e0       	ldi	r27, 0x00	; 0
    4a84:	e8 e3       	ldi	r30, 0x38	; 56
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	80 81       	ld	r24, Z
    4a8a:	48 2f       	mov	r20, r24
    4a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8e:	28 2f       	mov	r18, r24
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	81 e0       	ldi	r24, 0x01	; 1
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	02 2e       	mov	r0, r18
    4a98:	02 c0       	rjmp	.+4      	; 0x4a9e <DIO_enu_ToggPin+0xaa>
    4a9a:	88 0f       	add	r24, r24
    4a9c:	99 1f       	adc	r25, r25
    4a9e:	0a 94       	dec	r0
    4aa0:	e2 f7       	brpl	.-8      	; 0x4a9a <DIO_enu_ToggPin+0xa6>
    4aa2:	84 27       	eor	r24, r20
    4aa4:	8c 93       	st	X, r24
    4aa6:	29 c0       	rjmp	.+82     	; 0x4afa <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    4aa8:	a5 e3       	ldi	r26, 0x35	; 53
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	e5 e3       	ldi	r30, 0x35	; 53
    4aae:	f0 e0       	ldi	r31, 0x00	; 0
    4ab0:	80 81       	ld	r24, Z
    4ab2:	48 2f       	mov	r20, r24
    4ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab6:	28 2f       	mov	r18, r24
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	90 e0       	ldi	r25, 0x00	; 0
    4abe:	02 2e       	mov	r0, r18
    4ac0:	02 c0       	rjmp	.+4      	; 0x4ac6 <DIO_enu_ToggPin+0xd2>
    4ac2:	88 0f       	add	r24, r24
    4ac4:	99 1f       	adc	r25, r25
    4ac6:	0a 94       	dec	r0
    4ac8:	e2 f7       	brpl	.-8      	; 0x4ac2 <DIO_enu_ToggPin+0xce>
    4aca:	84 27       	eor	r24, r20
    4acc:	8c 93       	st	X, r24
    4ace:	15 c0       	rjmp	.+42     	; 0x4afa <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    4ad0:	a2 e3       	ldi	r26, 0x32	; 50
    4ad2:	b0 e0       	ldi	r27, 0x00	; 0
    4ad4:	e2 e3       	ldi	r30, 0x32	; 50
    4ad6:	f0 e0       	ldi	r31, 0x00	; 0
    4ad8:	80 81       	ld	r24, Z
    4ada:	48 2f       	mov	r20, r24
    4adc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ade:	28 2f       	mov	r18, r24
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	81 e0       	ldi	r24, 0x01	; 1
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	02 2e       	mov	r0, r18
    4ae8:	02 c0       	rjmp	.+4      	; 0x4aee <DIO_enu_ToggPin+0xfa>
    4aea:	88 0f       	add	r24, r24
    4aec:	99 1f       	adc	r25, r25
    4aee:	0a 94       	dec	r0
    4af0:	e2 f7       	brpl	.-8      	; 0x4aea <DIO_enu_ToggPin+0xf6>
    4af2:	84 27       	eor	r24, r20
    4af4:	8c 93       	st	X, r24
    4af6:	01 c0       	rjmp	.+2      	; 0x4afa <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4af8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    4afa:	89 81       	ldd	r24, Y+1	; 0x01


}
    4afc:	0f 90       	pop	r0
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	cf 91       	pop	r28
    4b08:	df 91       	pop	r29
    4b0a:	08 95       	ret

00004b0c <ADC_enu_Init>:
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;

ES_t ADC_enu_Init(void){
    4b0c:	df 93       	push	r29
    4b0e:	cf 93       	push	r28
    4b10:	cd b7       	in	r28, 0x3d	; 61
    4b12:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    4b14:	a7 e2       	ldi	r26, 0x27	; 39
    4b16:	b0 e0       	ldi	r27, 0x00	; 0
    4b18:	e7 e2       	ldi	r30, 0x27	; 39
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	80 81       	ld	r24, Z
    4b1e:	8f 77       	andi	r24, 0x7F	; 127
    4b20:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    4b22:	a7 e2       	ldi	r26, 0x27	; 39
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	e7 e2       	ldi	r30, 0x27	; 39
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	80 81       	ld	r24, Z
    4b2c:	80 64       	ori	r24, 0x40	; 64
    4b2e:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    4b30:	a7 e2       	ldi	r26, 0x27	; 39
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	e7 e2       	ldi	r30, 0x27	; 39
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	80 81       	ld	r24, Z
    4b3a:	8f 7d       	andi	r24, 0xDF	; 223
    4b3c:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == START_CONVERSION
    CLR_BIT(ADCSRA_REG,ADATE);
    4b3e:	a6 e2       	ldi	r26, 0x26	; 38
    4b40:	b0 e0       	ldi	r27, 0x00	; 0
    4b42:	e6 e2       	ldi	r30, 0x26	; 38
    4b44:	f0 e0       	ldi	r31, 0x00	; 0
    4b46:	80 81       	ld	r24, Z
    4b48:	8f 7d       	andi	r24, 0xDF	; 223
    4b4a:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    4b4c:	a6 e2       	ldi	r26, 0x26	; 38
    4b4e:	b0 e0       	ldi	r27, 0x00	; 0
    4b50:	e6 e2       	ldi	r30, 0x26	; 38
    4b52:	f0 e0       	ldi	r31, 0x00	; 0
    4b54:	80 81       	ld	r24, Z
    4b56:	87 60       	ori	r24, 0x07	; 7
    4b58:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    4b5a:	a6 e2       	ldi	r26, 0x26	; 38
    4b5c:	b0 e0       	ldi	r27, 0x00	; 0
    4b5e:	e6 e2       	ldi	r30, 0x26	; 38
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	80 81       	ld	r24, Z
    4b64:	80 68       	ori	r24, 0x80	; 128
    4b66:	8c 93       	st	X, r24
    
    return STATE_OK;
    4b68:	81 e0       	ldi	r24, 0x01	; 1
}
    4b6a:	cf 91       	pop	r28
    4b6c:	df 91       	pop	r29
    4b6e:	08 95       	ret

00004b70 <ADC_enu_GetDigitalValueSynchNonBlocking>:

ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    4b70:	df 93       	push	r29
    4b72:	cf 93       	push	r28
    4b74:	cd b7       	in	r28, 0x3d	; 61
    4b76:	de b7       	in	r29, 0x3e	; 62
    4b78:	28 97       	sbiw	r28, 0x08	; 8
    4b7a:	0f b6       	in	r0, 0x3f	; 63
    4b7c:	f8 94       	cli
    4b7e:	de bf       	out	0x3e, r29	; 62
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	cd bf       	out	0x3d, r28	; 61
    4b84:	8e 83       	std	Y+6, r24	; 0x06
    4b86:	78 87       	std	Y+8, r23	; 0x08
    4b88:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    4b8e:	19 82       	std	Y+1, r1	; 0x01
    4b90:	1a 82       	std	Y+2, r1	; 0x02
    4b92:	1b 82       	std	Y+3, r1	; 0x03
    4b94:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    4b96:	8e 81       	ldd	r24, Y+6	; 0x06
    4b98:	80 32       	cpi	r24, 0x20	; 32
    4b9a:	08 f0       	brcs	.+2      	; 0x4b9e <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    4b9c:	65 c0       	rjmp	.+202    	; 0x4c68 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    4b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    4ba0:	98 85       	ldd	r25, Y+8	; 0x08
    4ba2:	00 97       	sbiw	r24, 0x00	; 0
    4ba4:	09 f4       	brne	.+2      	; 0x4ba8 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    4ba6:	60 c0       	rjmp	.+192    	; 0x4c68 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    4ba8:	80 91 0b 01 	lds	r24, 0x010B
    4bac:	88 23       	and	r24, r24
    4bae:	09 f0       	breq	.+2      	; 0x4bb2 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    4bb0:	5b c0       	rjmp	.+182    	; 0x4c68 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	80 93 0b 01 	sts	0x010B, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    4bb8:	a7 e2       	ldi	r26, 0x27	; 39
    4bba:	b0 e0       	ldi	r27, 0x00	; 0
    4bbc:	e7 e2       	ldi	r30, 0x27	; 39
    4bbe:	f0 e0       	ldi	r31, 0x00	; 0
    4bc0:	80 81       	ld	r24, Z
    4bc2:	80 7e       	andi	r24, 0xE0	; 224
    4bc4:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    4bc6:	a7 e2       	ldi	r26, 0x27	; 39
    4bc8:	b0 e0       	ldi	r27, 0x00	; 0
    4bca:	e7 e2       	ldi	r30, 0x27	; 39
    4bcc:	f0 e0       	ldi	r31, 0x00	; 0
    4bce:	90 81       	ld	r25, Z
    4bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    4bd2:	89 2b       	or	r24, r25
    4bd4:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    4bd6:	a6 e2       	ldi	r26, 0x26	; 38
    4bd8:	b0 e0       	ldi	r27, 0x00	; 0
    4bda:	e6 e2       	ldi	r30, 0x26	; 38
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	80 81       	ld	r24, Z
    4be0:	80 64       	ori	r24, 0x40	; 64
    4be2:	8c 93       	st	X, r24
    4be4:	0b c0       	rjmp	.+22     	; 0x4bfc <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bea:	ab 81       	ldd	r26, Y+3	; 0x03
    4bec:	bc 81       	ldd	r27, Y+4	; 0x04
    4bee:	01 96       	adiw	r24, 0x01	; 1
    4bf0:	a1 1d       	adc	r26, r1
    4bf2:	b1 1d       	adc	r27, r1
    4bf4:	89 83       	std	Y+1, r24	; 0x01
    4bf6:	9a 83       	std	Y+2, r25	; 0x02
    4bf8:	ab 83       	std	Y+3, r26	; 0x03
    4bfa:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    4bfc:	e6 e2       	ldi	r30, 0x26	; 38
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	82 95       	swap	r24
    4c04:	8f 70       	andi	r24, 0x0F	; 15
    4c06:	88 2f       	mov	r24, r24
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	81 70       	andi	r24, 0x01	; 1
    4c0c:	90 70       	andi	r25, 0x00	; 0
    4c0e:	00 97       	sbiw	r24, 0x00	; 0
    4c10:	61 f4       	brne	.+24     	; 0x4c2a <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
    4c14:	9a 81       	ldd	r25, Y+2	; 0x02
    4c16:	ab 81       	ldd	r26, Y+3	; 0x03
    4c18:	bc 81       	ldd	r27, Y+4	; 0x04
    4c1a:	80 35       	cpi	r24, 0x50	; 80
    4c1c:	23 ec       	ldi	r18, 0xC3	; 195
    4c1e:	92 07       	cpc	r25, r18
    4c20:	20 e0       	ldi	r18, 0x00	; 0
    4c22:	a2 07       	cpc	r26, r18
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	b2 07       	cpc	r27, r18
    4c28:	f0 f2       	brcs	.-68     	; 0x4be6 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    4c2a:	e6 e2       	ldi	r30, 0x26	; 38
    4c2c:	f0 e0       	ldi	r31, 0x00	; 0
    4c2e:	80 81       	ld	r24, Z
    4c30:	82 95       	swap	r24
    4c32:	8f 70       	andi	r24, 0x0F	; 15
    4c34:	88 2f       	mov	r24, r24
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	81 70       	andi	r24, 0x01	; 1
    4c3a:	90 70       	andi	r25, 0x00	; 0
    4c3c:	88 23       	and	r24, r24
    4c3e:	91 f0       	breq	.+36     	; 0x4c64 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    4c40:	10 92 0b 01 	sts	0x010B, r1
            SET_BIT(ADCSRA_REG,ADIF);
    4c44:	a6 e2       	ldi	r26, 0x26	; 38
    4c46:	b0 e0       	ldi	r27, 0x00	; 0
    4c48:	e6 e2       	ldi	r30, 0x26	; 38
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	80 81       	ld	r24, Z
    4c4e:	80 61       	ori	r24, 0x10	; 16
    4c50:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    4c52:	e4 e2       	ldi	r30, 0x24	; 36
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	80 81       	ld	r24, Z
    4c58:	91 81       	ldd	r25, Z+1	; 0x01
    4c5a:	ef 81       	ldd	r30, Y+7	; 0x07
    4c5c:	f8 85       	ldd	r31, Y+8	; 0x08
    4c5e:	91 83       	std	Z+1, r25	; 0x01
    4c60:	80 83       	st	Z, r24
    4c62:	03 c0       	rjmp	.+6      	; 0x4c6a <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    4c64:	1d 82       	std	Y+5, r1	; 0x05
    4c66:	01 c0       	rjmp	.+2      	; 0x4c6a <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    4c68:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    4c6a:	8d 81       	ldd	r24, Y+5	; 0x05

}
    4c6c:	28 96       	adiw	r28, 0x08	; 8
    4c6e:	0f b6       	in	r0, 0x3f	; 63
    4c70:	f8 94       	cli
    4c72:	de bf       	out	0x3e, r29	; 62
    4c74:	0f be       	out	0x3f, r0	; 63
    4c76:	cd bf       	out	0x3d, r28	; 61
    4c78:	cf 91       	pop	r28
    4c7a:	df 91       	pop	r29
    4c7c:	08 95       	ret

00004c7e <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    4c7e:	df 93       	push	r29
    4c80:	cf 93       	push	r28
    4c82:	00 d0       	rcall	.+0      	; 0x4c84 <ADC_enu_GetDigitalValueASynch+0x6>
    4c84:	00 d0       	rcall	.+0      	; 0x4c86 <ADC_enu_GetDigitalValueASynch+0x8>
    4c86:	cd b7       	in	r28, 0x3d	; 61
    4c88:	de b7       	in	r29, 0x3e	; 62
    4c8a:	8a 83       	std	Y+2, r24	; 0x02
    4c8c:	7c 83       	std	Y+4, r23	; 0x04
    4c8e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    4c94:	8a 81       	ldd	r24, Y+2	; 0x02
    4c96:	80 32       	cpi	r24, 0x20	; 32
    4c98:	78 f5       	brcc	.+94     	; 0x4cf8 <ADC_enu_GetDigitalValueASynch+0x7a>
    4c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c9e:	00 97       	sbiw	r24, 0x00	; 0
    4ca0:	59 f1       	breq	.+86     	; 0x4cf8 <ADC_enu_GetDigitalValueASynch+0x7a>
    4ca2:	80 91 0b 01 	lds	r24, 0x010B
    4ca6:	88 23       	and	r24, r24
    4ca8:	39 f5       	brne	.+78     	; 0x4cf8 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	80 93 0b 01 	sts	0x010B, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    4cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb4:	90 93 0a 01 	sts	0x010A, r25
    4cb8:	80 93 09 01 	sts	0x0109, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    4cbc:	a6 e2       	ldi	r26, 0x26	; 38
    4cbe:	b0 e0       	ldi	r27, 0x00	; 0
    4cc0:	e6 e2       	ldi	r30, 0x26	; 38
    4cc2:	f0 e0       	ldi	r31, 0x00	; 0
    4cc4:	80 81       	ld	r24, Z
    4cc6:	88 60       	ori	r24, 0x08	; 8
    4cc8:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    4cca:	a7 e2       	ldi	r26, 0x27	; 39
    4ccc:	b0 e0       	ldi	r27, 0x00	; 0
    4cce:	e7 e2       	ldi	r30, 0x27	; 39
    4cd0:	f0 e0       	ldi	r31, 0x00	; 0
    4cd2:	80 81       	ld	r24, Z
    4cd4:	80 7e       	andi	r24, 0xE0	; 224
    4cd6:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    4cd8:	a7 e2       	ldi	r26, 0x27	; 39
    4cda:	b0 e0       	ldi	r27, 0x00	; 0
    4cdc:	e7 e2       	ldi	r30, 0x27	; 39
    4cde:	f0 e0       	ldi	r31, 0x00	; 0
    4ce0:	90 81       	ld	r25, Z
    4ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce4:	89 2b       	or	r24, r25
    4ce6:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    4ce8:	a6 e2       	ldi	r26, 0x26	; 38
    4cea:	b0 e0       	ldi	r27, 0x00	; 0
    4cec:	e6 e2       	ldi	r30, 0x26	; 38
    4cee:	f0 e0       	ldi	r31, 0x00	; 0
    4cf0:	80 81       	ld	r24, Z
    4cf2:	80 64       	ori	r24, 0x40	; 64
    4cf4:	8c 93       	st	X, r24
    4cf6:	01 c0       	rjmp	.+2      	; 0x4cfa <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    4cf8:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_errorState;
    4cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    4cfc:	0f 90       	pop	r0
    4cfe:	0f 90       	pop	r0
    4d00:	0f 90       	pop	r0
    4d02:	0f 90       	pop	r0
    4d04:	cf 91       	pop	r28
    4d06:	df 91       	pop	r29
    4d08:	08 95       	ret

00004d0a <__vector_16>:

/***************ISR Function OF ADC*************/
void __vector_16(void){
    4d0a:	1f 92       	push	r1
    4d0c:	0f 92       	push	r0
    4d0e:	0f b6       	in	r0, 0x3f	; 63
    4d10:	0f 92       	push	r0
    4d12:	11 24       	eor	r1, r1
    4d14:	2f 93       	push	r18
    4d16:	3f 93       	push	r19
    4d18:	4f 93       	push	r20
    4d1a:	5f 93       	push	r21
    4d1c:	6f 93       	push	r22
    4d1e:	7f 93       	push	r23
    4d20:	8f 93       	push	r24
    4d22:	9f 93       	push	r25
    4d24:	af 93       	push	r26
    4d26:	bf 93       	push	r27
    4d28:	ef 93       	push	r30
    4d2a:	ff 93       	push	r31
    4d2c:	df 93       	push	r29
    4d2e:	cf 93       	push	r28
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    4d34:	80 91 09 01 	lds	r24, 0x0109
    4d38:	90 91 0a 01 	lds	r25, 0x010A
    4d3c:	00 97       	sbiw	r24, 0x00	; 0
    4d3e:	99 f0       	breq	.+38     	; 0x4d66 <__vector_16+0x5c>
        //Clear ADC Flag & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    4d40:	a6 e2       	ldi	r26, 0x26	; 38
    4d42:	b0 e0       	ldi	r27, 0x00	; 0
    4d44:	e6 e2       	ldi	r30, 0x26	; 38
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	80 81       	ld	r24, Z
    4d4a:	87 7f       	andi	r24, 0xF7	; 247
    4d4c:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    4d4e:	10 92 0b 01 	sts	0x010B, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    4d52:	20 91 09 01 	lds	r18, 0x0109
    4d56:	30 91 0a 01 	lds	r19, 0x010A
    4d5a:	e4 e2       	ldi	r30, 0x24	; 36
    4d5c:	f0 e0       	ldi	r31, 0x00	; 0
    4d5e:	80 81       	ld	r24, Z
    4d60:	91 81       	ldd	r25, Z+1	; 0x01
    4d62:	f9 01       	movw	r30, r18
    4d64:	09 95       	icall
    }
   

    4d66:	cf 91       	pop	r28
    4d68:	df 91       	pop	r29
    4d6a:	ff 91       	pop	r31
    4d6c:	ef 91       	pop	r30
    4d6e:	bf 91       	pop	r27
    4d70:	af 91       	pop	r26
    4d72:	9f 91       	pop	r25
    4d74:	8f 91       	pop	r24
    4d76:	7f 91       	pop	r23
    4d78:	6f 91       	pop	r22
    4d7a:	5f 91       	pop	r21
    4d7c:	4f 91       	pop	r20
    4d7e:	3f 91       	pop	r19
    4d80:	2f 91       	pop	r18
    4d82:	0f 90       	pop	r0
    4d84:	0f be       	out	0x3f, r0	; 63
    4d86:	0f 90       	pop	r0
    4d88:	1f 90       	pop	r1
    4d8a:	18 95       	reti

00004d8c <__mulsi3>:
    4d8c:	62 9f       	mul	r22, r18
    4d8e:	d0 01       	movw	r26, r0
    4d90:	73 9f       	mul	r23, r19
    4d92:	f0 01       	movw	r30, r0
    4d94:	82 9f       	mul	r24, r18
    4d96:	e0 0d       	add	r30, r0
    4d98:	f1 1d       	adc	r31, r1
    4d9a:	64 9f       	mul	r22, r20
    4d9c:	e0 0d       	add	r30, r0
    4d9e:	f1 1d       	adc	r31, r1
    4da0:	92 9f       	mul	r25, r18
    4da2:	f0 0d       	add	r31, r0
    4da4:	83 9f       	mul	r24, r19
    4da6:	f0 0d       	add	r31, r0
    4da8:	74 9f       	mul	r23, r20
    4daa:	f0 0d       	add	r31, r0
    4dac:	65 9f       	mul	r22, r21
    4dae:	f0 0d       	add	r31, r0
    4db0:	99 27       	eor	r25, r25
    4db2:	72 9f       	mul	r23, r18
    4db4:	b0 0d       	add	r27, r0
    4db6:	e1 1d       	adc	r30, r1
    4db8:	f9 1f       	adc	r31, r25
    4dba:	63 9f       	mul	r22, r19
    4dbc:	b0 0d       	add	r27, r0
    4dbe:	e1 1d       	adc	r30, r1
    4dc0:	f9 1f       	adc	r31, r25
    4dc2:	bd 01       	movw	r22, r26
    4dc4:	cf 01       	movw	r24, r30
    4dc6:	11 24       	eor	r1, r1
    4dc8:	08 95       	ret

00004dca <__udivmodhi4>:
    4dca:	aa 1b       	sub	r26, r26
    4dcc:	bb 1b       	sub	r27, r27
    4dce:	51 e1       	ldi	r21, 0x11	; 17
    4dd0:	07 c0       	rjmp	.+14     	; 0x4de0 <__udivmodhi4_ep>

00004dd2 <__udivmodhi4_loop>:
    4dd2:	aa 1f       	adc	r26, r26
    4dd4:	bb 1f       	adc	r27, r27
    4dd6:	a6 17       	cp	r26, r22
    4dd8:	b7 07       	cpc	r27, r23
    4dda:	10 f0       	brcs	.+4      	; 0x4de0 <__udivmodhi4_ep>
    4ddc:	a6 1b       	sub	r26, r22
    4dde:	b7 0b       	sbc	r27, r23

00004de0 <__udivmodhi4_ep>:
    4de0:	88 1f       	adc	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	5a 95       	dec	r21
    4de6:	a9 f7       	brne	.-22     	; 0x4dd2 <__udivmodhi4_loop>
    4de8:	80 95       	com	r24
    4dea:	90 95       	com	r25
    4dec:	bc 01       	movw	r22, r24
    4dee:	cd 01       	movw	r24, r26
    4df0:	08 95       	ret

00004df2 <__udivmodsi4>:
    4df2:	a1 e2       	ldi	r26, 0x21	; 33
    4df4:	1a 2e       	mov	r1, r26
    4df6:	aa 1b       	sub	r26, r26
    4df8:	bb 1b       	sub	r27, r27
    4dfa:	fd 01       	movw	r30, r26
    4dfc:	0d c0       	rjmp	.+26     	; 0x4e18 <__udivmodsi4_ep>

00004dfe <__udivmodsi4_loop>:
    4dfe:	aa 1f       	adc	r26, r26
    4e00:	bb 1f       	adc	r27, r27
    4e02:	ee 1f       	adc	r30, r30
    4e04:	ff 1f       	adc	r31, r31
    4e06:	a2 17       	cp	r26, r18
    4e08:	b3 07       	cpc	r27, r19
    4e0a:	e4 07       	cpc	r30, r20
    4e0c:	f5 07       	cpc	r31, r21
    4e0e:	20 f0       	brcs	.+8      	; 0x4e18 <__udivmodsi4_ep>
    4e10:	a2 1b       	sub	r26, r18
    4e12:	b3 0b       	sbc	r27, r19
    4e14:	e4 0b       	sbc	r30, r20
    4e16:	f5 0b       	sbc	r31, r21

00004e18 <__udivmodsi4_ep>:
    4e18:	66 1f       	adc	r22, r22
    4e1a:	77 1f       	adc	r23, r23
    4e1c:	88 1f       	adc	r24, r24
    4e1e:	99 1f       	adc	r25, r25
    4e20:	1a 94       	dec	r1
    4e22:	69 f7       	brne	.-38     	; 0x4dfe <__udivmodsi4_loop>
    4e24:	60 95       	com	r22
    4e26:	70 95       	com	r23
    4e28:	80 95       	com	r24
    4e2a:	90 95       	com	r25
    4e2c:	9b 01       	movw	r18, r22
    4e2e:	ac 01       	movw	r20, r24
    4e30:	bd 01       	movw	r22, r26
    4e32:	cf 01       	movw	r24, r30
    4e34:	08 95       	ret

00004e36 <__prologue_saves__>:
    4e36:	2f 92       	push	r2
    4e38:	3f 92       	push	r3
    4e3a:	4f 92       	push	r4
    4e3c:	5f 92       	push	r5
    4e3e:	6f 92       	push	r6
    4e40:	7f 92       	push	r7
    4e42:	8f 92       	push	r8
    4e44:	9f 92       	push	r9
    4e46:	af 92       	push	r10
    4e48:	bf 92       	push	r11
    4e4a:	cf 92       	push	r12
    4e4c:	df 92       	push	r13
    4e4e:	ef 92       	push	r14
    4e50:	ff 92       	push	r15
    4e52:	0f 93       	push	r16
    4e54:	1f 93       	push	r17
    4e56:	cf 93       	push	r28
    4e58:	df 93       	push	r29
    4e5a:	cd b7       	in	r28, 0x3d	; 61
    4e5c:	de b7       	in	r29, 0x3e	; 62
    4e5e:	ca 1b       	sub	r28, r26
    4e60:	db 0b       	sbc	r29, r27
    4e62:	0f b6       	in	r0, 0x3f	; 63
    4e64:	f8 94       	cli
    4e66:	de bf       	out	0x3e, r29	; 62
    4e68:	0f be       	out	0x3f, r0	; 63
    4e6a:	cd bf       	out	0x3d, r28	; 61
    4e6c:	09 94       	ijmp

00004e6e <__epilogue_restores__>:
    4e6e:	2a 88       	ldd	r2, Y+18	; 0x12
    4e70:	39 88       	ldd	r3, Y+17	; 0x11
    4e72:	48 88       	ldd	r4, Y+16	; 0x10
    4e74:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e76:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e78:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e80:	b9 84       	ldd	r11, Y+9	; 0x09
    4e82:	c8 84       	ldd	r12, Y+8	; 0x08
    4e84:	df 80       	ldd	r13, Y+7	; 0x07
    4e86:	ee 80       	ldd	r14, Y+6	; 0x06
    4e88:	fd 80       	ldd	r15, Y+5	; 0x05
    4e8a:	0c 81       	ldd	r16, Y+4	; 0x04
    4e8c:	1b 81       	ldd	r17, Y+3	; 0x03
    4e8e:	aa 81       	ldd	r26, Y+2	; 0x02
    4e90:	b9 81       	ldd	r27, Y+1	; 0x01
    4e92:	ce 0f       	add	r28, r30
    4e94:	d1 1d       	adc	r29, r1
    4e96:	0f b6       	in	r0, 0x3f	; 63
    4e98:	f8 94       	cli
    4e9a:	de bf       	out	0x3e, r29	; 62
    4e9c:	0f be       	out	0x3f, r0	; 63
    4e9e:	cd bf       	out	0x3d, r28	; 61
    4ea0:	ed 01       	movw	r28, r26
    4ea2:	08 95       	ret

00004ea4 <_exit>:
    4ea4:	f8 94       	cli

00004ea6 <__stop_program>:
    4ea6:	ff cf       	rjmp	.-2      	; 0x4ea6 <__stop_program>
