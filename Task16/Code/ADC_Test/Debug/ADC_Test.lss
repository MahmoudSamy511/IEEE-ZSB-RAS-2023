
ADC_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000311c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000311c  000031b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800088  00800088  000031d8  2**0
                  ALLOC
  3 .stab         00002a3c  00000000  00000000  000031d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128a  00000000  00000000  00005c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000718d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000091d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b69a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__vector_1>
       8:	0c 94 16 12 	jmp	0x242c	; 0x242c <__vector_2>
       c:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 39       	cpi	r26, 0x93	; 147
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 06 	call	0xd68	; 0xd68 <main>
      8a:	0c 94 8c 18 	jmp	0x3118	; 0x3118 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 79 18 	jmp	0x30f2	; 0x30f2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 81 18 	jmp	0x3102	; 0x3102 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <clearUnusedDigits>:
#include"../5-LIB/TYPEDEF.h"

#include<util/delay.h>
#define F_CPU 16000000UL

void clearUnusedDigits(u16 value , u8 Row){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2a 97       	sbiw	r28, 0x0a	; 10
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	99 87       	std	Y+9, r25	; 0x09
     cb4:	88 87       	std	Y+8, r24	; 0x08
     cb6:	6a 87       	std	Y+10, r22	; 0x0a
	u8 start , end = 15, y=0;
     cb8:	8f e0       	ldi	r24, 0x0F	; 15
     cba:	8e 83       	std	Y+6, r24	; 0x06
     cbc:	1d 82       	std	Y+5, r1	; 0x05
	for(u32 i= 10 ;i<1000000;i *=10){
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	ab 83       	std	Y+3, r26	; 0x03
     ccc:	bc 83       	std	Y+4, r27	; 0x04
     cce:	36 c0       	rjmp	.+108    	; 0xd3c <clearUnusedDigits+0x9e>
		if(value < i){
     cd0:	88 85       	ldd	r24, Y+8	; 0x08
     cd2:	99 85       	ldd	r25, Y+9	; 0x09
     cd4:	9c 01       	movw	r18, r24
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	ab 81       	ldd	r26, Y+3	; 0x03
     ce0:	bc 81       	ldd	r27, Y+4	; 0x04
     ce2:	28 17       	cp	r18, r24
     ce4:	39 07       	cpc	r19, r25
     ce6:	4a 07       	cpc	r20, r26
     ce8:	5b 07       	cpc	r21, r27
     cea:	98 f4       	brcc	.+38     	; 0xd12 <clearUnusedDigits+0x74>
			for(start =10+y ; start<= end ; start++){
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	86 5f       	subi	r24, 0xF6	; 246
     cf0:	8f 83       	std	Y+7, r24	; 0x07
     cf2:	0a c0       	rjmp	.+20     	; 0xd08 <clearUnusedDigits+0x6a>
				LCD_enu_SetCursor(Row, start);
     cf4:	8a 85       	ldd	r24, Y+10	; 0x0a
     cf6:	6f 81       	ldd	r22, Y+7	; 0x07
     cf8:	0e 94 4d 0c 	call	0x189a	; 0x189a <LCD_enu_SetCursor>
				LCD_enu_SendChar(' ');
     cfc:	80 e2       	ldi	r24, 0x20	; 32
     cfe:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_enu_SendChar>

void clearUnusedDigits(u16 value , u8 Row){
	u8 start , end = 15, y=0;
	for(u32 i= 10 ;i<1000000;i *=10){
		if(value < i){
			for(start =10+y ; start<= end ; start++){
     d02:	8f 81       	ldd	r24, Y+7	; 0x07
     d04:	8f 5f       	subi	r24, 0xFF	; 255
     d06:	8f 83       	std	Y+7, r24	; 0x07
     d08:	9f 81       	ldd	r25, Y+7	; 0x07
     d0a:	8e 81       	ldd	r24, Y+6	; 0x06
     d0c:	89 17       	cp	r24, r25
     d0e:	90 f7       	brcc	.-28     	; 0xcf4 <clearUnusedDigits+0x56>
     d10:	22 c0       	rjmp	.+68     	; 0xd56 <clearUnusedDigits+0xb8>
				LCD_enu_SetCursor(Row, start);
				LCD_enu_SendChar(' ');
			}
			break;
		}
		y++;
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	8d 83       	std	Y+5, r24	; 0x05
#include<util/delay.h>
#define F_CPU 16000000UL

void clearUnusedDigits(u16 value , u8 Row){
	u8 start , end = 15, y=0;
	for(u32 i= 10 ;i<1000000;i *=10){
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	ab 81       	ldd	r26, Y+3	; 0x03
     d1e:	bc 81       	ldd	r27, Y+4	; 0x04
     d20:	2a e0       	ldi	r18, 0x0A	; 10
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 14 18 	call	0x3028	; 0x3028 <__mulsi3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	ab 83       	std	Y+3, r26	; 0x03
     d3a:	bc 83       	std	Y+4, r27	; 0x04
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	ab 81       	ldd	r26, Y+3	; 0x03
     d42:	bc 81       	ldd	r27, Y+4	; 0x04
     d44:	80 34       	cpi	r24, 0x40	; 64
     d46:	22 e4       	ldi	r18, 0x42	; 66
     d48:	92 07       	cpc	r25, r18
     d4a:	2f e0       	ldi	r18, 0x0F	; 15
     d4c:	a2 07       	cpc	r26, r18
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	b2 07       	cpc	r27, r18
     d52:	08 f4       	brcc	.+2      	; 0xd56 <clearUnusedDigits+0xb8>
     d54:	bd cf       	rjmp	.-134    	; 0xcd0 <clearUnusedDigits+0x32>
			}
			break;
		}
		y++;
	}
}
     d56:	2a 96       	adiw	r28, 0x0a	; 10
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <main>:
int main(){
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
     d70:	64 97       	sbiw	r28, 0x14	; 20
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_Init();
     d7c:	0e 94 81 0c 	call	0x1902	; 0x1902 <LCD_enu_Init>
	ADC_enu_Init();
     d80:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <ADC_enu_Init>
	LCD_enu_SendString("Hi, User :)");
     d84:	80 e6       	ldi	r24, 0x60	; 96
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SendString>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	aa e7       	ldi	r26, 0x7A	; 122
     d92:	b4 e4       	ldi	r27, 0x44	; 68
     d94:	8b 87       	std	Y+11, r24	; 0x0b
     d96:	9c 87       	std	Y+12, r25	; 0x0c
     d98:	ad 87       	std	Y+13, r26	; 0x0d
     d9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     da0:	8d 85       	ldd	r24, Y+13	; 0x0d
     da2:	9e 85       	ldd	r25, Y+14	; 0x0e
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a e7       	ldi	r20, 0x7A	; 122
     daa:	55 e4       	ldi	r21, 0x45	; 69
     dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8f 83       	std	Y+7, r24	; 0x07
     db6:	98 87       	std	Y+8, r25	; 0x08
     db8:	a9 87       	std	Y+9, r26	; 0x09
     dba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f4       	brge	.+10     	; 0xdde <main+0x76>
		__ticks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9e 83       	std	Y+6, r25	; 0x06
     dda:	8d 83       	std	Y+5, r24	; 0x05
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <main+0xf4>
	else if (__tmp > 65535)
     dde:	6f 81       	ldd	r22, Y+7	; 0x07
     de0:	78 85       	ldd	r23, Y+8	; 0x08
     de2:	89 85       	ldd	r24, Y+9	; 0x09
     de4:	9a 85       	ldd	r25, Y+10	; 0x0a
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     df2:	18 16       	cp	r1, r24
     df4:	4c f5       	brge	.+82     	; 0xe48 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df6:	6b 85       	ldd	r22, Y+11	; 0x0b
     df8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <main+0xd6>
     e20:	80 e9       	ldi	r24, 0x90	; 144
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	9c 83       	std	Y+4, r25	; 0x04
     e26:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <main+0xc4>
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	69 f7       	brne	.-38     	; 0xe20 <main+0xb8>
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e48:	6f 81       	ldd	r22, Y+7	; 0x07
     e4a:	78 85       	ldd	r23, Y+8	; 0x08
     e4c:	89 85       	ldd	r24, Y+9	; 0x09
     e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	9a 81       	ldd	r25, Y+2	; 0x02
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <main+0x100>
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_enu_Clear();
     e70:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_enu_Clear>
	LCD_enu_SendString("Volt(mv):");
     e74:	8c e6       	ldi	r24, 0x6C	; 108
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SendString>
	LCD_enu_SetCursor(1,0);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 4d 0c 	call	0x189a	; 0x189a <LCD_enu_SetCursor>
	LCD_enu_SendString("LDR(Ohm):");
     e84:	86 e7       	ldi	r24, 0x76	; 118
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SendString>
	while(1){
		static u16 digitalValue = 0;
		u16 voltage = 0;
     e8c:	1c 8a       	std	Y+20, r1	; 0x14
     e8e:	1b 8a       	std	Y+19, r1	; 0x13
		u32 Resistance = 0;
     e90:	1f 86       	std	Y+15, r1	; 0x0f
     e92:	18 8a       	std	Y+16, r1	; 0x10
     e94:	19 8a       	std	Y+17, r1	; 0x11
     e96:	1a 8a       	std	Y+18, r1	; 0x12
		ADC_enu_GetDigitalValueSynchNonBlocking(ADC_U8_CHANNEL0, &digitalValue);
     e98:	28 e8       	ldi	r18, 0x88	; 136
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	b9 01       	movw	r22, r18
     ea0:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <ADC_enu_GetDigitalValueSynchNonBlocking>
		voltage = (digitalValue * 5000UL)/1023;
     ea4:	80 91 88 00 	lds	r24, 0x0088
     ea8:	90 91 89 00 	lds	r25, 0x0089
     eac:	cc 01       	movw	r24, r24
     eae:	a0 e0       	ldi	r26, 0x00	; 0
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	28 e8       	ldi	r18, 0x88	; 136
     eb4:	33 e1       	ldi	r19, 0x13	; 19
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 14 18 	call	0x3028	; 0x3028 <__mulsi3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	2f ef       	ldi	r18, 0xFF	; 255
     ec8:	33 e0       	ldi	r19, 0x03	; 3
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	bc 01       	movw	r22, r24
     ed0:	cd 01       	movw	r24, r26
     ed2:	0e 94 33 18 	call	0x3066	; 0x3066 <__udivmodsi4>
     ed6:	da 01       	movw	r26, r20
     ed8:	c9 01       	movw	r24, r18
     eda:	9c 8b       	std	Y+20, r25	; 0x14
     edc:	8b 8b       	std	Y+19, r24	; 0x13
		Resistance =((10000*1023UL)/digitalValue) - 10000;
     ede:	80 91 88 00 	lds	r24, 0x0088
     ee2:	90 91 89 00 	lds	r25, 0x0089
     ee6:	9c 01       	movw	r18, r24
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	80 ef       	ldi	r24, 0xF0	; 240
     eee:	98 e1       	ldi	r25, 0x18	; 24
     ef0:	ac e9       	ldi	r26, 0x9C	; 156
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	0e 94 33 18 	call	0x3066	; 0x3066 <__udivmodsi4>
     efc:	da 01       	movw	r26, r20
     efe:	c9 01       	movw	r24, r18
     f00:	80 51       	subi	r24, 0x10	; 16
     f02:	97 42       	sbci	r25, 0x27	; 39
     f04:	a0 40       	sbci	r26, 0x00	; 0
     f06:	b0 40       	sbci	r27, 0x00	; 0
     f08:	8f 87       	std	Y+15, r24	; 0x0f
     f0a:	98 8b       	std	Y+16, r25	; 0x10
     f0c:	a9 8b       	std	Y+17, r26	; 0x11
     f0e:	ba 8b       	std	Y+18, r27	; 0x12
		clearUnusedDigits(voltage,0);
     f10:	8b 89       	ldd	r24, Y+19	; 0x13
     f12:	9c 89       	ldd	r25, Y+20	; 0x14
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	0e 94 4f 06 	call	0xc9e	; 0xc9e <clearUnusedDigits>
		clearUnusedDigits(Resistance,1);
     f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1c:	98 89       	ldd	r25, Y+16	; 0x10
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	0e 94 4f 06 	call	0xc9e	; 0xc9e <clearUnusedDigits>
		LCD_enu_SetCursor(0, 9);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	69 e0       	ldi	r22, 0x09	; 9
     f28:	0e 94 4d 0c 	call	0x189a	; 0x189a <LCD_enu_SetCursor>
		LCD_enu_SendNum(voltage);
     f2c:	8b 89       	ldd	r24, Y+19	; 0x13
     f2e:	9c 89       	ldd	r25, Y+20	; 0x14
     f30:	cc 01       	movw	r24, r24
     f32:	a0 e0       	ldi	r26, 0x00	; 0
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
     f3a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_enu_SendNum>
		LCD_enu_SetCursor(1, 9);
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	69 e0       	ldi	r22, 0x09	; 9
     f42:	0e 94 4d 0c 	call	0x189a	; 0x189a <LCD_enu_SetCursor>
		LCD_enu_SendNum(Resistance);
     f46:	8f 85       	ldd	r24, Y+15	; 0x0f
     f48:	98 89       	ldd	r25, Y+16	; 0x10
     f4a:	a9 89       	ldd	r26, Y+17	; 0x11
     f4c:	ba 89       	ldd	r27, Y+18	; 0x12
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_enu_SendNum>
     f56:	9a cf       	rjmp	.-204    	; 0xe8c <main+0x124>

00000f58 <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	e1 97       	sbiw	r28, 0x31	; 49
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
     f6e:	82 e0       	ldi	r24, 0x02	; 2
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
     f82:	89 a9       	ldd	r24, Y+49	; 0x31
     f84:	98 2f       	mov	r25, r24
     f86:	99 1f       	adc	r25, r25
     f88:	99 27       	eor	r25, r25
     f8a:	99 1f       	adc	r25, r25
     f8c:	82 e0       	ldi	r24, 0x02	; 2
     f8e:	67 e0       	ldi	r22, 0x07	; 7
     f90:	49 2f       	mov	r20, r25
     f92:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
     f96:	89 a9       	ldd	r24, Y+49	; 0x31
     f98:	82 95       	swap	r24
     f9a:	86 95       	lsr	r24
     f9c:	86 95       	lsr	r24
     f9e:	83 70       	andi	r24, 0x03	; 3
     fa0:	98 2f       	mov	r25, r24
     fa2:	91 70       	andi	r25, 0x01	; 1
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	66 e0       	ldi	r22, 0x06	; 6
     fa8:	49 2f       	mov	r20, r25
     faa:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
     fae:	89 a9       	ldd	r24, Y+49	; 0x31
     fb0:	82 95       	swap	r24
     fb2:	86 95       	lsr	r24
     fb4:	87 70       	andi	r24, 0x07	; 7
     fb6:	98 2f       	mov	r25, r24
     fb8:	91 70       	andi	r25, 0x01	; 1
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	65 e0       	ldi	r22, 0x05	; 5
     fbe:	49 2f       	mov	r20, r25
     fc0:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
     fc4:	89 a9       	ldd	r24, Y+49	; 0x31
     fc6:	82 95       	swap	r24
     fc8:	8f 70       	andi	r24, 0x0F	; 15
     fca:	98 2f       	mov	r25, r24
     fcc:	91 70       	andi	r25, 0x01	; 1
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	64 e0       	ldi	r22, 0x04	; 4
     fd2:	49 2f       	mov	r20, r25
     fd4:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	62 e0       	ldi	r22, 0x02	; 2
     fdc:	41 e0       	ldi	r20, 0x01	; 1
     fde:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a0 e8       	ldi	r26, 0x80	; 128
     fe8:	bf e3       	ldi	r27, 0x3F	; 63
     fea:	8d a7       	std	Y+45, r24	; 0x2d
     fec:	9e a7       	std	Y+46, r25	; 0x2e
     fee:	af a7       	std	Y+47, r26	; 0x2f
     ff0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ff2:	6d a5       	ldd	r22, Y+45	; 0x2d
     ff4:	7e a5       	ldd	r23, Y+46	; 0x2e
     ff6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff8:	98 a9       	ldd	r25, Y+48	; 0x30
     ffa:	2b ea       	ldi	r18, 0xAB	; 171
     ffc:	3a ea       	ldi	r19, 0xAA	; 170
     ffe:	4a ea       	ldi	r20, 0xAA	; 170
    1000:	50 e4       	ldi	r21, 0x40	; 64
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	89 a7       	std	Y+41, r24	; 0x29
    100c:	9a a7       	std	Y+42, r25	; 0x2a
    100e:	ab a7       	std	Y+43, r26	; 0x2b
    1010:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1012:	69 a5       	ldd	r22, Y+41	; 0x29
    1014:	7a a5       	ldd	r23, Y+42	; 0x2a
    1016:	8b a5       	ldd	r24, Y+43	; 0x2b
    1018:	9c a5       	ldd	r25, Y+44	; 0x2c
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	1c f4       	brge	.+6      	; 0x1030 <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	88 a7       	std	Y+40, r24	; 0x28
    102e:	91 c0       	rjmp	.+290    	; 0x1152 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1030:	69 a5       	ldd	r22, Y+41	; 0x29
    1032:	7a a5       	ldd	r23, Y+42	; 0x2a
    1034:	8b a5       	ldd	r24, Y+43	; 0x2b
    1036:	9c a5       	ldd	r25, Y+44	; 0x2c
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4f e7       	ldi	r20, 0x7F	; 127
    103e:	53 e4       	ldi	r21, 0x43	; 67
    1040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1044:	18 16       	cp	r1, r24
    1046:	0c f0       	brlt	.+2      	; 0x104a <LCD_enu_SendCmnd+0xf2>
    1048:	7b c0       	rjmp	.+246    	; 0x1140 <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    104a:	6d a5       	ldd	r22, Y+45	; 0x2d
    104c:	7e a5       	ldd	r23, Y+46	; 0x2e
    104e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1050:	98 a9       	ldd	r25, Y+48	; 0x30
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a e7       	ldi	r20, 0x7A	; 122
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8c a3       	std	Y+36, r24	; 0x24
    1064:	9d a3       	std	Y+37, r25	; 0x25
    1066:	ae a3       	std	Y+38, r26	; 0x26
    1068:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106a:	6c a1       	ldd	r22, Y+36	; 0x24
    106c:	7d a1       	ldd	r23, Y+37	; 0x25
    106e:	8e a1       	ldd	r24, Y+38	; 0x26
    1070:	9f a1       	ldd	r25, Y+39	; 0x27
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a e7       	ldi	r20, 0x7A	; 122
    1078:	55 e4       	ldi	r21, 0x45	; 69
    107a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	88 a3       	std	Y+32, r24	; 0x20
    1084:	99 a3       	std	Y+33, r25	; 0x21
    1086:	aa a3       	std	Y+34, r26	; 0x22
    1088:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    108a:	68 a1       	ldd	r22, Y+32	; 0x20
    108c:	79 a1       	ldd	r23, Y+33	; 0x21
    108e:	8a a1       	ldd	r24, Y+34	; 0x22
    1090:	9b a1       	ldd	r25, Y+35	; 0x23
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e8       	ldi	r20, 0x80	; 128
    1098:	5f e3       	ldi	r21, 0x3F	; 63
    109a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    109e:	88 23       	and	r24, r24
    10a0:	2c f4       	brge	.+10     	; 0x10ac <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	9f 8f       	std	Y+31, r25	; 0x1f
    10a8:	8e 8f       	std	Y+30, r24	; 0x1e
    10aa:	3f c0       	rjmp	.+126    	; 0x112a <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    10ac:	68 a1       	ldd	r22, Y+32	; 0x20
    10ae:	79 a1       	ldd	r23, Y+33	; 0x21
    10b0:	8a a1       	ldd	r24, Y+34	; 0x22
    10b2:	9b a1       	ldd	r25, Y+35	; 0x23
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	3f ef       	ldi	r19, 0xFF	; 255
    10b8:	4f e7       	ldi	r20, 0x7F	; 127
    10ba:	57 e4       	ldi	r21, 0x47	; 71
    10bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10c0:	18 16       	cp	r1, r24
    10c2:	4c f5       	brge	.+82     	; 0x1116 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c4:	6c a1       	ldd	r22, Y+36	; 0x24
    10c6:	7d a1       	ldd	r23, Y+37	; 0x25
    10c8:	8e a1       	ldd	r24, Y+38	; 0x26
    10ca:	9f a1       	ldd	r25, Y+39	; 0x27
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9f 8f       	std	Y+31, r25	; 0x1f
    10ea:	8e 8f       	std	Y+30, r24	; 0x1e
    10ec:	0f c0       	rjmp	.+30     	; 0x110c <LCD_enu_SendCmnd+0x1b4>
    10ee:	80 e9       	ldi	r24, 0x90	; 144
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	9d 8f       	std	Y+29, r25	; 0x1d
    10f4:	8c 8f       	std	Y+28, r24	; 0x1c
    10f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    10f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <LCD_enu_SendCmnd+0x1a2>
    10fe:	9d 8f       	std	Y+29, r25	; 0x1d
    1100:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1102:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1104:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	9f 8f       	std	Y+31, r25	; 0x1f
    110a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    110e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	69 f7       	brne	.-38     	; 0x10ee <LCD_enu_SendCmnd+0x196>
    1114:	24 c0       	rjmp	.+72     	; 0x115e <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1116:	68 a1       	ldd	r22, Y+32	; 0x20
    1118:	79 a1       	ldd	r23, Y+33	; 0x21
    111a:	8a a1       	ldd	r24, Y+34	; 0x22
    111c:	9b a1       	ldd	r25, Y+35	; 0x23
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9f 8f       	std	Y+31, r25	; 0x1f
    1128:	8e 8f       	std	Y+30, r24	; 0x1e
    112a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    112c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    112e:	9b 8f       	std	Y+27, r25	; 0x1b
    1130:	8a 8f       	std	Y+26, r24	; 0x1a
    1132:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1134:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <LCD_enu_SendCmnd+0x1de>
    113a:	9b 8f       	std	Y+27, r25	; 0x1b
    113c:	8a 8f       	std	Y+26, r24	; 0x1a
    113e:	0f c0       	rjmp	.+30     	; 0x115e <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1140:	69 a5       	ldd	r22, Y+41	; 0x29
    1142:	7a a5       	ldd	r23, Y+42	; 0x2a
    1144:	8b a5       	ldd	r24, Y+43	; 0x2b
    1146:	9c a5       	ldd	r25, Y+44	; 0x2c
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	88 a7       	std	Y+40, r24	; 0x28
    1152:	88 a5       	ldd	r24, Y+40	; 0x28
    1154:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1156:	89 8d       	ldd	r24, Y+25	; 0x19
    1158:	8a 95       	dec	r24
    115a:	f1 f7       	brne	.-4      	; 0x1158 <LCD_enu_SendCmnd+0x200>
    115c:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	62 e0       	ldi	r22, 0x02	; 2
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    1168:	89 a9       	ldd	r24, Y+49	; 0x31
    116a:	86 95       	lsr	r24
    116c:	86 95       	lsr	r24
    116e:	86 95       	lsr	r24
    1170:	98 2f       	mov	r25, r24
    1172:	91 70       	andi	r25, 0x01	; 1
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	67 e0       	ldi	r22, 0x07	; 7
    1178:	49 2f       	mov	r20, r25
    117a:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    117e:	89 a9       	ldd	r24, Y+49	; 0x31
    1180:	86 95       	lsr	r24
    1182:	86 95       	lsr	r24
    1184:	98 2f       	mov	r25, r24
    1186:	91 70       	andi	r25, 0x01	; 1
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	66 e0       	ldi	r22, 0x06	; 6
    118c:	49 2f       	mov	r20, r25
    118e:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    1192:	89 a9       	ldd	r24, Y+49	; 0x31
    1194:	86 95       	lsr	r24
    1196:	98 2f       	mov	r25, r24
    1198:	91 70       	andi	r25, 0x01	; 1
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	65 e0       	ldi	r22, 0x05	; 5
    119e:	49 2f       	mov	r20, r25
    11a0:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    11a4:	89 a9       	ldd	r24, Y+49	; 0x31
    11a6:	98 2f       	mov	r25, r24
    11a8:	91 70       	andi	r25, 0x01	; 1
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	64 e0       	ldi	r22, 0x04	; 4
    11ae:	49 2f       	mov	r20, r25
    11b0:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e8       	ldi	r26, 0x80	; 128
    11c4:	bf e3       	ldi	r27, 0x3F	; 63
    11c6:	8d 8b       	std	Y+21, r24	; 0x15
    11c8:	9e 8b       	std	Y+22, r25	; 0x16
    11ca:	af 8b       	std	Y+23, r26	; 0x17
    11cc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    11ce:	6d 89       	ldd	r22, Y+21	; 0x15
    11d0:	7e 89       	ldd	r23, Y+22	; 0x16
    11d2:	8f 89       	ldd	r24, Y+23	; 0x17
    11d4:	98 8d       	ldd	r25, Y+24	; 0x18
    11d6:	2b ea       	ldi	r18, 0xAB	; 171
    11d8:	3a ea       	ldi	r19, 0xAA	; 170
    11da:	4a ea       	ldi	r20, 0xAA	; 170
    11dc:	50 e4       	ldi	r21, 0x40	; 64
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	89 8b       	std	Y+17, r24	; 0x11
    11e8:	9a 8b       	std	Y+18, r25	; 0x12
    11ea:	ab 8b       	std	Y+19, r26	; 0x13
    11ec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    11ee:	69 89       	ldd	r22, Y+17	; 0x11
    11f0:	7a 89       	ldd	r23, Y+18	; 0x12
    11f2:	8b 89       	ldd	r24, Y+19	; 0x13
    11f4:	9c 89       	ldd	r25, Y+20	; 0x14
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1202:	88 23       	and	r24, r24
    1204:	1c f4       	brge	.+6      	; 0x120c <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	88 8b       	std	Y+16, r24	; 0x10
    120a:	91 c0       	rjmp	.+290    	; 0x132e <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    120c:	69 89       	ldd	r22, Y+17	; 0x11
    120e:	7a 89       	ldd	r23, Y+18	; 0x12
    1210:	8b 89       	ldd	r24, Y+19	; 0x13
    1212:	9c 89       	ldd	r25, Y+20	; 0x14
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1220:	18 16       	cp	r1, r24
    1222:	0c f0       	brlt	.+2      	; 0x1226 <LCD_enu_SendCmnd+0x2ce>
    1224:	7b c0       	rjmp	.+246    	; 0x131c <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1226:	6d 89       	ldd	r22, Y+21	; 0x15
    1228:	7e 89       	ldd	r23, Y+22	; 0x16
    122a:	8f 89       	ldd	r24, Y+23	; 0x17
    122c:	98 8d       	ldd	r25, Y+24	; 0x18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	4a e7       	ldi	r20, 0x7A	; 122
    1234:	54 e4       	ldi	r21, 0x44	; 68
    1236:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	8c 87       	std	Y+12, r24	; 0x0c
    1240:	9d 87       	std	Y+13, r25	; 0x0d
    1242:	ae 87       	std	Y+14, r26	; 0x0e
    1244:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	6c 85       	ldd	r22, Y+12	; 0x0c
    1248:	7d 85       	ldd	r23, Y+13	; 0x0d
    124a:	8e 85       	ldd	r24, Y+14	; 0x0e
    124c:	9f 85       	ldd	r25, Y+15	; 0x0f
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a e7       	ldi	r20, 0x7A	; 122
    1254:	55 e4       	ldi	r21, 0x45	; 69
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	88 87       	std	Y+8, r24	; 0x08
    1260:	99 87       	std	Y+9, r25	; 0x09
    1262:	aa 87       	std	Y+10, r26	; 0x0a
    1264:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1266:	68 85       	ldd	r22, Y+8	; 0x08
    1268:	79 85       	ldd	r23, Y+9	; 0x09
    126a:	8a 85       	ldd	r24, Y+10	; 0x0a
    126c:	9b 85       	ldd	r25, Y+11	; 0x0b
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9f 83       	std	Y+7, r25	; 0x07
    1284:	8e 83       	std	Y+6, r24	; 0x06
    1286:	3f c0       	rjmp	.+126    	; 0x1306 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1288:	68 85       	ldd	r22, Y+8	; 0x08
    128a:	79 85       	ldd	r23, Y+9	; 0x09
    128c:	8a 85       	ldd	r24, Y+10	; 0x0a
    128e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	4c f5       	brge	.+82     	; 0x12f2 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    12a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    12a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    12a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9f 83       	std	Y+7, r25	; 0x07
    12c6:	8e 83       	std	Y+6, r24	; 0x06
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <LCD_enu_SendCmnd+0x390>
    12ca:	80 e9       	ldi	r24, 0x90	; 144
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	9d 83       	std	Y+5, r25	; 0x05
    12d0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12d2:	8c 81       	ldd	r24, Y+4	; 0x04
    12d4:	9d 81       	ldd	r25, Y+5	; 0x05
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <LCD_enu_SendCmnd+0x37e>
    12da:	9d 83       	std	Y+5, r25	; 0x05
    12dc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9f 83       	std	Y+7, r25	; 0x07
    12e6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	9f 81       	ldd	r25, Y+7	; 0x07
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	69 f7       	brne	.-38     	; 0x12ca <LCD_enu_SendCmnd+0x372>
    12f0:	24 c0       	rjmp	.+72     	; 0x133a <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f2:	68 85       	ldd	r22, Y+8	; 0x08
    12f4:	79 85       	ldd	r23, Y+9	; 0x09
    12f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9f 83       	std	Y+7, r25	; 0x07
    1304:	8e 83       	std	Y+6, r24	; 0x06
    1306:	8e 81       	ldd	r24, Y+6	; 0x06
    1308:	9f 81       	ldd	r25, Y+7	; 0x07
    130a:	9b 83       	std	Y+3, r25	; 0x03
    130c:	8a 83       	std	Y+2, r24	; 0x02
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	9b 81       	ldd	r25, Y+3	; 0x03
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <LCD_enu_SendCmnd+0x3ba>
    1316:	9b 83       	std	Y+3, r25	; 0x03
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	0f c0       	rjmp	.+30     	; 0x133a <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    131c:	69 89       	ldd	r22, Y+17	; 0x11
    131e:	7a 89       	ldd	r23, Y+18	; 0x12
    1320:	8b 89       	ldd	r24, Y+19	; 0x13
    1322:	9c 89       	ldd	r25, Y+20	; 0x14
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	88 8b       	std	Y+16, r24	; 0x10
    132e:	88 89       	ldd	r24, Y+16	; 0x10
    1330:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	8a 95       	dec	r24
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_enu_SendCmnd+0x3dc>
    1338:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	62 e0       	ldi	r22, 0x02	; 2
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
         return STATE_OK;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1346:	e1 96       	adiw	r28, 0x31	; 49
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	e1 97       	sbiw	r28, 0x31	; 49
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    1382:	89 a9       	ldd	r24, Y+49	; 0x31
    1384:	98 2f       	mov	r25, r24
    1386:	99 1f       	adc	r25, r25
    1388:	99 27       	eor	r25, r25
    138a:	99 1f       	adc	r25, r25
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	67 e0       	ldi	r22, 0x07	; 7
    1390:	49 2f       	mov	r20, r25
    1392:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    1396:	89 a9       	ldd	r24, Y+49	; 0x31
    1398:	82 95       	swap	r24
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	83 70       	andi	r24, 0x03	; 3
    13a0:	98 2f       	mov	r25, r24
    13a2:	91 70       	andi	r25, 0x01	; 1
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	66 e0       	ldi	r22, 0x06	; 6
    13a8:	49 2f       	mov	r20, r25
    13aa:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    13ae:	89 a9       	ldd	r24, Y+49	; 0x31
    13b0:	82 95       	swap	r24
    13b2:	86 95       	lsr	r24
    13b4:	87 70       	andi	r24, 0x07	; 7
    13b6:	98 2f       	mov	r25, r24
    13b8:	91 70       	andi	r25, 0x01	; 1
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	65 e0       	ldi	r22, 0x05	; 5
    13be:	49 2f       	mov	r20, r25
    13c0:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    13c4:	89 a9       	ldd	r24, Y+49	; 0x31
    13c6:	82 95       	swap	r24
    13c8:	8f 70       	andi	r24, 0x0F	; 15
    13ca:	98 2f       	mov	r25, r24
    13cc:	91 70       	andi	r25, 0x01	; 1
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	64 e0       	ldi	r22, 0x04	; 4
    13d2:	49 2f       	mov	r20, r25
    13d4:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	62 e0       	ldi	r22, 0x02	; 2
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	a0 e8       	ldi	r26, 0x80	; 128
    13e8:	bf e3       	ldi	r27, 0x3F	; 63
    13ea:	8d a7       	std	Y+45, r24	; 0x2d
    13ec:	9e a7       	std	Y+46, r25	; 0x2e
    13ee:	af a7       	std	Y+47, r26	; 0x2f
    13f0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13f2:	6d a5       	ldd	r22, Y+45	; 0x2d
    13f4:	7e a5       	ldd	r23, Y+46	; 0x2e
    13f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f8:	98 a9       	ldd	r25, Y+48	; 0x30
    13fa:	2b ea       	ldi	r18, 0xAB	; 171
    13fc:	3a ea       	ldi	r19, 0xAA	; 170
    13fe:	4a ea       	ldi	r20, 0xAA	; 170
    1400:	50 e4       	ldi	r21, 0x40	; 64
    1402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1406:	dc 01       	movw	r26, r24
    1408:	cb 01       	movw	r24, r22
    140a:	89 a7       	std	Y+41, r24	; 0x29
    140c:	9a a7       	std	Y+42, r25	; 0x2a
    140e:	ab a7       	std	Y+43, r26	; 0x2b
    1410:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1412:	69 a5       	ldd	r22, Y+41	; 0x29
    1414:	7a a5       	ldd	r23, Y+42	; 0x2a
    1416:	8b a5       	ldd	r24, Y+43	; 0x2b
    1418:	9c a5       	ldd	r25, Y+44	; 0x2c
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e8       	ldi	r20, 0x80	; 128
    1420:	5f e3       	ldi	r21, 0x3F	; 63
    1422:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1426:	88 23       	and	r24, r24
    1428:	1c f4       	brge	.+6      	; 0x1430 <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	88 a7       	std	Y+40, r24	; 0x28
    142e:	91 c0       	rjmp	.+290    	; 0x1552 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    1430:	69 a5       	ldd	r22, Y+41	; 0x29
    1432:	7a a5       	ldd	r23, Y+42	; 0x2a
    1434:	8b a5       	ldd	r24, Y+43	; 0x2b
    1436:	9c a5       	ldd	r25, Y+44	; 0x2c
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	53 e4       	ldi	r21, 0x43	; 67
    1440:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	0c f0       	brlt	.+2      	; 0x144a <LCD_enu_SendChar+0xf2>
    1448:	7b c0       	rjmp	.+246    	; 0x1540 <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    144a:	6d a5       	ldd	r22, Y+45	; 0x2d
    144c:	7e a5       	ldd	r23, Y+46	; 0x2e
    144e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1450:	98 a9       	ldd	r25, Y+48	; 0x30
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	4a e7       	ldi	r20, 0x7A	; 122
    1458:	54 e4       	ldi	r21, 0x44	; 68
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8c a3       	std	Y+36, r24	; 0x24
    1464:	9d a3       	std	Y+37, r25	; 0x25
    1466:	ae a3       	std	Y+38, r26	; 0x26
    1468:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	6c a1       	ldd	r22, Y+36	; 0x24
    146c:	7d a1       	ldd	r23, Y+37	; 0x25
    146e:	8e a1       	ldd	r24, Y+38	; 0x26
    1470:	9f a1       	ldd	r25, Y+39	; 0x27
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a e7       	ldi	r20, 0x7A	; 122
    1478:	55 e4       	ldi	r21, 0x45	; 69
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	88 a3       	std	Y+32, r24	; 0x20
    1484:	99 a3       	std	Y+33, r25	; 0x21
    1486:	aa a3       	std	Y+34, r26	; 0x22
    1488:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    148a:	68 a1       	ldd	r22, Y+32	; 0x20
    148c:	79 a1       	ldd	r23, Y+33	; 0x21
    148e:	8a a1       	ldd	r24, Y+34	; 0x22
    1490:	9b a1       	ldd	r25, Y+35	; 0x23
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <LCD_enu_SendChar+0x154>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9f 8f       	std	Y+31, r25	; 0x1f
    14a8:	8e 8f       	std	Y+30, r24	; 0x1e
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    14ac:	68 a1       	ldd	r22, Y+32	; 0x20
    14ae:	79 a1       	ldd	r23, Y+33	; 0x21
    14b0:	8a a1       	ldd	r24, Y+34	; 0x22
    14b2:	9b a1       	ldd	r25, Y+35	; 0x23
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	6c a1       	ldd	r22, Y+36	; 0x24
    14c6:	7d a1       	ldd	r23, Y+37	; 0x25
    14c8:	8e a1       	ldd	r24, Y+38	; 0x26
    14ca:	9f a1       	ldd	r25, Y+39	; 0x27
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9f 8f       	std	Y+31, r25	; 0x1f
    14ea:	8e 8f       	std	Y+30, r24	; 0x1e
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <LCD_enu_SendChar+0x1b4>
    14ee:	80 e9       	ldi	r24, 0x90	; 144
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	9d 8f       	std	Y+29, r25	; 0x1d
    14f4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <LCD_enu_SendChar+0x1a2>
    14fe:	9d 8f       	std	Y+29, r25	; 0x1d
    1500:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1504:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9f 8f       	std	Y+31, r25	; 0x1f
    150a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    150e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <LCD_enu_SendChar+0x196>
    1514:	24 c0       	rjmp	.+72     	; 0x155e <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	68 a1       	ldd	r22, Y+32	; 0x20
    1518:	79 a1       	ldd	r23, Y+33	; 0x21
    151a:	8a a1       	ldd	r24, Y+34	; 0x22
    151c:	9b a1       	ldd	r25, Y+35	; 0x23
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9f 8f       	std	Y+31, r25	; 0x1f
    1528:	8e 8f       	std	Y+30, r24	; 0x1e
    152a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    152c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    152e:	9b 8f       	std	Y+27, r25	; 0x1b
    1530:	8a 8f       	std	Y+26, r24	; 0x1a
    1532:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1534:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <LCD_enu_SendChar+0x1de>
    153a:	9b 8f       	std	Y+27, r25	; 0x1b
    153c:	8a 8f       	std	Y+26, r24	; 0x1a
    153e:	0f c0       	rjmp	.+30     	; 0x155e <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1540:	69 a5       	ldd	r22, Y+41	; 0x29
    1542:	7a a5       	ldd	r23, Y+42	; 0x2a
    1544:	8b a5       	ldd	r24, Y+43	; 0x2b
    1546:	9c a5       	ldd	r25, Y+44	; 0x2c
    1548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	88 a7       	std	Y+40, r24	; 0x28
    1552:	88 a5       	ldd	r24, Y+40	; 0x28
    1554:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1556:	89 8d       	ldd	r24, Y+25	; 0x19
    1558:	8a 95       	dec	r24
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_enu_SendChar+0x200>
    155c:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	62 e0       	ldi	r22, 0x02	; 2
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    1568:	89 a9       	ldd	r24, Y+49	; 0x31
    156a:	86 95       	lsr	r24
    156c:	86 95       	lsr	r24
    156e:	86 95       	lsr	r24
    1570:	98 2f       	mov	r25, r24
    1572:	91 70       	andi	r25, 0x01	; 1
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	67 e0       	ldi	r22, 0x07	; 7
    1578:	49 2f       	mov	r20, r25
    157a:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    157e:	89 a9       	ldd	r24, Y+49	; 0x31
    1580:	86 95       	lsr	r24
    1582:	86 95       	lsr	r24
    1584:	98 2f       	mov	r25, r24
    1586:	91 70       	andi	r25, 0x01	; 1
    1588:	82 e0       	ldi	r24, 0x02	; 2
    158a:	66 e0       	ldi	r22, 0x06	; 6
    158c:	49 2f       	mov	r20, r25
    158e:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    1592:	89 a9       	ldd	r24, Y+49	; 0x31
    1594:	86 95       	lsr	r24
    1596:	98 2f       	mov	r25, r24
    1598:	91 70       	andi	r25, 0x01	; 1
    159a:	82 e0       	ldi	r24, 0x02	; 2
    159c:	65 e0       	ldi	r22, 0x05	; 5
    159e:	49 2f       	mov	r20, r25
    15a0:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    15a4:	89 a9       	ldd	r24, Y+49	; 0x31
    15a6:	98 2f       	mov	r25, r24
    15a8:	91 70       	andi	r25, 0x01	; 1
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	49 2f       	mov	r20, r25
    15b0:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	62 e0       	ldi	r22, 0x02	; 2
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e8       	ldi	r26, 0x80	; 128
    15c4:	bf e3       	ldi	r27, 0x3F	; 63
    15c6:	8d 8b       	std	Y+21, r24	; 0x15
    15c8:	9e 8b       	std	Y+22, r25	; 0x16
    15ca:	af 8b       	std	Y+23, r26	; 0x17
    15cc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15ce:	6d 89       	ldd	r22, Y+21	; 0x15
    15d0:	7e 89       	ldd	r23, Y+22	; 0x16
    15d2:	8f 89       	ldd	r24, Y+23	; 0x17
    15d4:	98 8d       	ldd	r25, Y+24	; 0x18
    15d6:	2b ea       	ldi	r18, 0xAB	; 171
    15d8:	3a ea       	ldi	r19, 0xAA	; 170
    15da:	4a ea       	ldi	r20, 0xAA	; 170
    15dc:	50 e4       	ldi	r21, 0x40	; 64
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	89 8b       	std	Y+17, r24	; 0x11
    15e8:	9a 8b       	std	Y+18, r25	; 0x12
    15ea:	ab 8b       	std	Y+19, r26	; 0x13
    15ec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15ee:	69 89       	ldd	r22, Y+17	; 0x11
    15f0:	7a 89       	ldd	r23, Y+18	; 0x12
    15f2:	8b 89       	ldd	r24, Y+19	; 0x13
    15f4:	9c 89       	ldd	r25, Y+20	; 0x14
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e8       	ldi	r20, 0x80	; 128
    15fc:	5f e3       	ldi	r21, 0x3F	; 63
    15fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1602:	88 23       	and	r24, r24
    1604:	1c f4       	brge	.+6      	; 0x160c <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	88 8b       	std	Y+16, r24	; 0x10
    160a:	91 c0       	rjmp	.+290    	; 0x172e <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    160c:	69 89       	ldd	r22, Y+17	; 0x11
    160e:	7a 89       	ldd	r23, Y+18	; 0x12
    1610:	8b 89       	ldd	r24, Y+19	; 0x13
    1612:	9c 89       	ldd	r25, Y+20	; 0x14
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	53 e4       	ldi	r21, 0x43	; 67
    161c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	0c f0       	brlt	.+2      	; 0x1626 <LCD_enu_SendChar+0x2ce>
    1624:	7b c0       	rjmp	.+246    	; 0x171c <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1626:	6d 89       	ldd	r22, Y+21	; 0x15
    1628:	7e 89       	ldd	r23, Y+22	; 0x16
    162a:	8f 89       	ldd	r24, Y+23	; 0x17
    162c:	98 8d       	ldd	r25, Y+24	; 0x18
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	4a e7       	ldi	r20, 0x7A	; 122
    1634:	54 e4       	ldi	r21, 0x44	; 68
    1636:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8c 87       	std	Y+12, r24	; 0x0c
    1640:	9d 87       	std	Y+13, r25	; 0x0d
    1642:	ae 87       	std	Y+14, r26	; 0x0e
    1644:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1646:	6c 85       	ldd	r22, Y+12	; 0x0c
    1648:	7d 85       	ldd	r23, Y+13	; 0x0d
    164a:	8e 85       	ldd	r24, Y+14	; 0x0e
    164c:	9f 85       	ldd	r25, Y+15	; 0x0f
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	55 e4       	ldi	r21, 0x45	; 69
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	88 87       	std	Y+8, r24	; 0x08
    1660:	99 87       	std	Y+9, r25	; 0x09
    1662:	aa 87       	std	Y+10, r26	; 0x0a
    1664:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1666:	68 85       	ldd	r22, Y+8	; 0x08
    1668:	79 85       	ldd	r23, Y+9	; 0x09
    166a:	8a 85       	ldd	r24, Y+10	; 0x0a
    166c:	9b 85       	ldd	r25, Y+11	; 0x0b
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9f 83       	std	Y+7, r25	; 0x07
    1684:	8e 83       	std	Y+6, r24	; 0x06
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    1688:	68 85       	ldd	r22, Y+8	; 0x08
    168a:	79 85       	ldd	r23, Y+9	; 0x09
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	4c f5       	brge	.+82     	; 0x16f2 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    16a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    16a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    16a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9f 83       	std	Y+7, r25	; 0x07
    16c6:	8e 83       	std	Y+6, r24	; 0x06
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <LCD_enu_SendChar+0x390>
    16ca:	80 e9       	ldi	r24, 0x90	; 144
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	9d 83       	std	Y+5, r25	; 0x05
    16d0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_enu_SendChar+0x37e>
    16da:	9d 83       	std	Y+5, r25	; 0x05
    16dc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8e 81       	ldd	r24, Y+6	; 0x06
    16e0:	9f 81       	ldd	r25, Y+7	; 0x07
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	9f 83       	std	Y+7, r25	; 0x07
    16e6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ea:	9f 81       	ldd	r25, Y+7	; 0x07
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <LCD_enu_SendChar+0x372>
    16f0:	24 c0       	rjmp	.+72     	; 0x173a <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	68 85       	ldd	r22, Y+8	; 0x08
    16f4:	79 85       	ldd	r23, Y+9	; 0x09
    16f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9f 83       	std	Y+7, r25	; 0x07
    1704:	8e 83       	std	Y+6, r24	; 0x06
    1706:	8e 81       	ldd	r24, Y+6	; 0x06
    1708:	9f 81       	ldd	r25, Y+7	; 0x07
    170a:	9b 83       	std	Y+3, r25	; 0x03
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_enu_SendChar+0x3ba>
    1716:	9b 83       	std	Y+3, r25	; 0x03
    1718:	8a 83       	std	Y+2, r24	; 0x02
    171a:	0f c0       	rjmp	.+30     	; 0x173a <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    171c:	69 89       	ldd	r22, Y+17	; 0x11
    171e:	7a 89       	ldd	r23, Y+18	; 0x12
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	88 8b       	std	Y+16, r24	; 0x10
    172e:	88 89       	ldd	r24, Y+16	; 0x10
    1730:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	8a 95       	dec	r24
    1736:	f1 f7       	brne	.-4      	; 0x1734 <LCD_enu_SendChar+0x3dc>
    1738:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	62 e0       	ldi	r22, 0x02	; 2
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	0e 94 cb 13 	call	0x2796	; 0x2796 <DIO_enu_SetPinValue>
    return STATE_OK;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1746:	e1 96       	adiw	r28, 0x31	; 49
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <LCD_enu_SendString+0x6>
    175e:	0f 92       	push	r0
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	9b 83       	std	Y+3, r25	; 0x03
    1766:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <LCD_enu_SendString+0x30>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	fc 01       	movw	r30, r24
    1778:	e2 0f       	add	r30, r18
    177a:	f3 1f       	adc	r31, r19
    177c:	80 81       	ld	r24, Z
    177e:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i=0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	8f 5f       	subi	r24, 0xFF	; 255
    1786:	89 83       	std	Y+1, r24	; 0x01
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	9b 81       	ldd	r25, Y+3	; 0x03
    1792:	fc 01       	movw	r30, r24
    1794:	e2 0f       	add	r30, r18
    1796:	f3 1f       	adc	r31, r19
    1798:	80 81       	ld	r24, Z
    179a:	88 23       	and	r24, r24
    179c:	39 f7       	brne	.-50     	; 0x176c <LCD_enu_SendString+0x14>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    179e:	81 e0       	ldi	r24, 0x01	; 1
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	60 97       	sbiw	r28, 0x10	; 16
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	6d 87       	std	Y+13, r22	; 0x0d
    17c6:	7e 87       	std	Y+14, r23	; 0x0e
    17c8:	8f 87       	std	Y+15, r24	; 0x0f
    17ca:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    17cc:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    17ce:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    17d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d4:	af 85       	ldd	r26, Y+15	; 0x0f
    17d6:	b8 89       	ldd	r27, Y+16	; 0x10
    17d8:	00 97       	sbiw	r24, 0x00	; 0
    17da:	a1 05       	cpc	r26, r1
    17dc:	b1 05       	cpc	r27, r1
    17de:	89 f5       	brne	.+98     	; 0x1842 <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    17e0:	80 e3       	ldi	r24, 0x30	; 48
    17e2:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_enu_SendChar>
    17e6:	4d c0       	rjmp	.+154    	; 0x1882 <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	08 2f       	mov	r16, r24
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	af 85       	ldd	r26, Y+15	; 0x0f
    17f4:	b8 89       	ldd	r27, Y+16	; 0x10
    17f6:	2a e0       	ldi	r18, 0x0A	; 10
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e0       	ldi	r20, 0x00	; 0
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 33 18 	call	0x3066	; 0x3066 <__udivmodsi4>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	28 2f       	mov	r18, r24
    180c:	ce 01       	movw	r24, r28
    180e:	03 96       	adiw	r24, 0x03	; 3
    1810:	fc 01       	movw	r30, r24
    1812:	e0 0f       	add	r30, r16
    1814:	f1 1f       	adc	r31, r17
    1816:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    1818:	8d 85       	ldd	r24, Y+13	; 0x0d
    181a:	9e 85       	ldd	r25, Y+14	; 0x0e
    181c:	af 85       	ldd	r26, Y+15	; 0x0f
    181e:	b8 89       	ldd	r27, Y+16	; 0x10
    1820:	2a e0       	ldi	r18, 0x0A	; 10
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	50 e0       	ldi	r21, 0x00	; 0
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	0e 94 33 18 	call	0x3066	; 0x3066 <__udivmodsi4>
    1830:	da 01       	movw	r26, r20
    1832:	c9 01       	movw	r24, r18
    1834:	8d 87       	std	Y+13, r24	; 0x0d
    1836:	9e 87       	std	Y+14, r25	; 0x0e
    1838:	af 87       	std	Y+15, r26	; 0x0f
    183a:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	af 85       	ldd	r26, Y+15	; 0x0f
    1848:	b8 89       	ldd	r27, Y+16	; 0x10
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	a1 05       	cpc	r26, r1
    184e:	b1 05       	cpc	r27, r1
    1850:	59 f6       	brne	.-106    	; 0x17e8 <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	81 50       	subi	r24, 0x01	; 1
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	11 c0       	rjmp	.+34     	; 0x187c <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	33 27       	eor	r19, r19
    1860:	27 fd       	sbrc	r18, 7
    1862:	30 95       	com	r19
    1864:	ce 01       	movw	r24, r28
    1866:	03 96       	adiw	r24, 0x03	; 3
    1868:	fc 01       	movw	r30, r24
    186a:	e2 0f       	add	r30, r18
    186c:	f3 1f       	adc	r31, r19
    186e:	80 81       	ld	r24, Z
    1870:	80 5d       	subi	r24, 0xD0	; 208
    1872:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	81 50       	subi	r24, 0x01	; 1
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	88 23       	and	r24, r24
    1880:	64 f7       	brge	.-40     	; 0x185a <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    1882:	81 e0       	ldi	r24, 0x01	; 1
}
    1884:	60 96       	adiw	r28, 0x10	; 16
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <LCD_enu_SetCursor+0x6>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <LCD_enu_SetCursor+0x8>
    18a2:	0f 92       	push	r0
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
    18aa:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 32       	cpi	r24, 0x28	; 40
    18b0:	f0 f4       	brcc	.+60     	; 0x18ee <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	3d 83       	std	Y+5, r19	; 0x05
    18ba:	2c 83       	std	Y+4, r18	; 0x04
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	9d 81       	ldd	r25, Y+5	; 0x05
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	31 f0       	breq	.+12     	; 0x18d0 <LCD_enu_SetCursor+0x36>
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	3d 81       	ldd	r19, Y+5	; 0x05
    18c8:	21 30       	cpi	r18, 0x01	; 1
    18ca:	31 05       	cpc	r19, r1
    18cc:	31 f0       	breq	.+12     	; 0x18da <LCD_enu_SetCursor+0x40>
    18ce:	0a c0       	rjmp	.+20     	; 0x18e4 <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	80 58       	subi	r24, 0x80	; 128
    18d4:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	80 54       	subi	r24, 0x40	; 64
    18de:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    18e4:	1b 82       	std	Y+3, r1	; 0x03
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    18e8:	31 e0       	ldi	r19, 0x01	; 1
    18ea:	3b 83       	std	Y+3, r19	; 0x03
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    18ee:	1b 82       	std	Y+3, r1	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	df 93       	push	r29
    1908:	cf 93       	push	r28
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	cc 54       	subi	r28, 0x4C	; 76
    1910:	d0 40       	sbci	r29, 0x00	; 0
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	41 e0       	ldi	r20, 0x01	; 1
    1922:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    1926:	82 e0       	ldi	r24, 0x02	; 2
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    1930:	82 e0       	ldi	r24, 0x02	; 2
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	67 e0       	ldi	r22, 0x07	; 7
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	66 e0       	ldi	r22, 0x06	; 6
    1948:	41 e0       	ldi	r20, 0x01	; 1
    194a:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	65 e0       	ldi	r22, 0x05	; 5
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	64 e0       	ldi	r22, 0x04	; 4
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_enu_SetPinDirection>
    1962:	fe 01       	movw	r30, r28
    1964:	e7 5b       	subi	r30, 0xB7	; 183
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	ac e0       	ldi	r26, 0x0C	; 12
    196e:	b2 e4       	ldi	r27, 0x42	; 66
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	8e 01       	movw	r16, r28
    197a:	0b 5b       	subi	r16, 0xBB	; 187
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e7 5b       	subi	r30, 0xB7	; 183
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a e7       	ldi	r20, 0x7A	; 122
    1992:	55 e4       	ldi	r21, 0x45	; 69
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a6:	fe 01       	movw	r30, r28
    19a8:	eb 5b       	subi	r30, 0xBB	; 187
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	44 f4       	brge	.+16     	; 0x19d4 <LCD_enu_Init+0xd2>
		__ticks = 1;
    19c4:	fe 01       	movw	r30, r28
    19c6:	ed 5b       	subi	r30, 0xBD	; 189
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	64 c0       	rjmp	.+200    	; 0x1a9c <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    19d4:	fe 01       	movw	r30, r28
    19d6:	eb 5b       	subi	r30, 0xBB	; 187
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	0c f0       	brlt	.+2      	; 0x19f4 <LCD_enu_Init+0xf2>
    19f2:	43 c0       	rjmp	.+134    	; 0x1a7a <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	fe 01       	movw	r30, r28
    19f6:	e7 5b       	subi	r30, 0xB7	; 183
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8e 01       	movw	r16, r28
    1a14:	0d 5b       	subi	r16, 0xBD	; 189
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	1f c0       	rjmp	.+62     	; 0x1a6a <LCD_enu_Init+0x168>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ef 5b       	subi	r30, 0xBF	; 191
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 e9       	ldi	r24, 0x90	; 144
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ef 5b       	subi	r30, 0xBF	; 191
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <LCD_enu_Init+0x142>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ef 5b       	subi	r30, 0xBF	; 191
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	de 01       	movw	r26, r28
    1a54:	ad 5b       	subi	r26, 0xBD	; 189
    1a56:	bf 4f       	sbci	r27, 0xFF	; 255
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ed 5b       	subi	r30, 0xBD	; 189
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	9c 93       	st	X, r25
    1a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ed 5b       	subi	r30, 0xBD	; 189
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	d1 f6       	brne	.-76     	; 0x1a2c <LCD_enu_Init+0x12a>
    1a78:	24 c0       	rjmp	.+72     	; 0x1ac2 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	0d 5b       	subi	r16, 0xBD	; 189
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	eb 5b       	subi	r30, 0xBB	; 187
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ed 5b       	subi	r30, 0xBD	; 189
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	91 81       	ldd	r25, Z+1	; 0x01
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ff 96       	adiw	r30, 0x3f	; 63
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ff 96       	adiw	r30, 0x3f	; 63
    1ab2:	80 81       	ld	r24, Z
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_enu_Init+0x1b4>
    1aba:	fe 01       	movw	r30, r28
    1abc:	ff 96       	adiw	r30, 0x3f	; 63
    1abe:	91 83       	std	Z+1, r25	; 0x01
    1ac0:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    1ac2:	83 e3       	ldi	r24, 0x33	; 51
    1ac4:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    1ac8:	82 e3       	ldi	r24, 0x32	; 50
    1aca:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    1ace:	88 e2       	ldi	r24, 0x28	; 40
    1ad0:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	a0 e2       	ldi	r26, 0x20	; 32
    1ada:	b2 e4       	ldi	r27, 0x42	; 66
    1adc:	8b af       	std	Y+59, r24	; 0x3b
    1ade:	9c af       	std	Y+60, r25	; 0x3c
    1ae0:	ad af       	std	Y+61, r26	; 0x3d
    1ae2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ae4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ae6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ae8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aec:	2b ea       	ldi	r18, 0xAB	; 171
    1aee:	3a ea       	ldi	r19, 0xAA	; 170
    1af0:	4a ea       	ldi	r20, 0xAA	; 170
    1af2:	50 e4       	ldi	r21, 0x40	; 64
    1af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8f ab       	std	Y+55, r24	; 0x37
    1afe:	98 af       	std	Y+56, r25	; 0x38
    1b00:	a9 af       	std	Y+57, r26	; 0x39
    1b02:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b04:	6f a9       	ldd	r22, Y+55	; 0x37
    1b06:	78 ad       	ldd	r23, Y+56	; 0x38
    1b08:	89 ad       	ldd	r24, Y+57	; 0x39
    1b0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	5f e3       	ldi	r21, 0x3F	; 63
    1b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	1c f4       	brge	.+6      	; 0x1b22 <LCD_enu_Init+0x220>
		__ticks = 1;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	8e ab       	std	Y+54, r24	; 0x36
    1b20:	91 c0       	rjmp	.+290    	; 0x1c44 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    1b22:	6f a9       	ldd	r22, Y+55	; 0x37
    1b24:	78 ad       	ldd	r23, Y+56	; 0x38
    1b26:	89 ad       	ldd	r24, Y+57	; 0x39
    1b28:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	4f e7       	ldi	r20, 0x7F	; 127
    1b30:	53 e4       	ldi	r21, 0x43	; 67
    1b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	0c f0       	brlt	.+2      	; 0x1b3c <LCD_enu_Init+0x23a>
    1b3a:	7b c0       	rjmp	.+246    	; 0x1c32 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    1b3c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b3e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8a ab       	std	Y+50, r24	; 0x32
    1b56:	9b ab       	std	Y+51, r25	; 0x33
    1b58:	ac ab       	std	Y+52, r26	; 0x34
    1b5a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5c:	6a a9       	ldd	r22, Y+50	; 0x32
    1b5e:	7b a9       	ldd	r23, Y+51	; 0x33
    1b60:	8c a9       	ldd	r24, Y+52	; 0x34
    1b62:	9d a9       	ldd	r25, Y+53	; 0x35
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	4a e7       	ldi	r20, 0x7A	; 122
    1b6a:	55 e4       	ldi	r21, 0x45	; 69
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8e a7       	std	Y+46, r24	; 0x2e
    1b76:	9f a7       	std	Y+47, r25	; 0x2f
    1b78:	a8 ab       	std	Y+48, r26	; 0x30
    1b7a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1b7c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b7e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b80:	88 a9       	ldd	r24, Y+48	; 0x30
    1b82:	99 a9       	ldd	r25, Y+49	; 0x31
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	2c f4       	brge	.+10     	; 0x1b9e <LCD_enu_Init+0x29c>
		__ticks = 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9d a7       	std	Y+45, r25	; 0x2d
    1b9a:	8c a7       	std	Y+44, r24	; 0x2c
    1b9c:	3f c0       	rjmp	.+126    	; 0x1c1c <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    1b9e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ba0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ba2:	88 a9       	ldd	r24, Y+48	; 0x30
    1ba4:	99 a9       	ldd	r25, Y+49	; 0x31
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	3f ef       	ldi	r19, 0xFF	; 255
    1baa:	4f e7       	ldi	r20, 0x7F	; 127
    1bac:	57 e4       	ldi	r21, 0x47	; 71
    1bae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb2:	18 16       	cp	r1, r24
    1bb4:	4c f5       	brge	.+82     	; 0x1c08 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb6:	6a a9       	ldd	r22, Y+50	; 0x32
    1bb8:	7b a9       	ldd	r23, Y+51	; 0x33
    1bba:	8c a9       	ldd	r24, Y+52	; 0x34
    1bbc:	9d a9       	ldd	r25, Y+53	; 0x35
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e2       	ldi	r20, 0x20	; 32
    1bc4:	51 e4       	ldi	r21, 0x41	; 65
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	cd 01       	movw	r24, r26
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	9d a7       	std	Y+45, r25	; 0x2d
    1bdc:	8c a7       	std	Y+44, r24	; 0x2c
    1bde:	0f c0       	rjmp	.+30     	; 0x1bfe <LCD_enu_Init+0x2fc>
    1be0:	80 e9       	ldi	r24, 0x90	; 144
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	9b a7       	std	Y+43, r25	; 0x2b
    1be6:	8a a7       	std	Y+42, r24	; 0x2a
    1be8:	8a a5       	ldd	r24, Y+42	; 0x2a
    1bea:	9b a5       	ldd	r25, Y+43	; 0x2b
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_enu_Init+0x2ea>
    1bf0:	9b a7       	std	Y+43, r25	; 0x2b
    1bf2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bf6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	9d a7       	std	Y+45, r25	; 0x2d
    1bfc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfe:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c00:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	69 f7       	brne	.-38     	; 0x1be0 <LCD_enu_Init+0x2de>
    1c06:	24 c0       	rjmp	.+72     	; 0x1c50 <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c08:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c0a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c0c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c0e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9d a7       	std	Y+45, r25	; 0x2d
    1c1a:	8c a7       	std	Y+44, r24	; 0x2c
    1c1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c1e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c20:	99 a7       	std	Y+41, r25	; 0x29
    1c22:	88 a7       	std	Y+40, r24	; 0x28
    1c24:	88 a5       	ldd	r24, Y+40	; 0x28
    1c26:	99 a5       	ldd	r25, Y+41	; 0x29
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	f1 f7       	brne	.-4      	; 0x1c28 <LCD_enu_Init+0x326>
    1c2c:	99 a7       	std	Y+41, r25	; 0x29
    1c2e:	88 a7       	std	Y+40, r24	; 0x28
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c32:	6f a9       	ldd	r22, Y+55	; 0x37
    1c34:	78 ad       	ldd	r23, Y+56	; 0x38
    1c36:	89 ad       	ldd	r24, Y+57	; 0x39
    1c38:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8e ab       	std	Y+54, r24	; 0x36
    1c44:	8e a9       	ldd	r24, Y+54	; 0x36
    1c46:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c48:	8f a1       	ldd	r24, Y+39	; 0x27
    1c4a:	8a 95       	dec	r24
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_enu_Init+0x348>
    1c4e:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_OFF);
    1c50:	8c e0       	ldi	r24, 0x0C	; 12
    1c52:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e2       	ldi	r26, 0x20	; 32
    1c5c:	b2 e4       	ldi	r27, 0x42	; 66
    1c5e:	8b a3       	std	Y+35, r24	; 0x23
    1c60:	9c a3       	std	Y+36, r25	; 0x24
    1c62:	ad a3       	std	Y+37, r26	; 0x25
    1c64:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c66:	6b a1       	ldd	r22, Y+35	; 0x23
    1c68:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6e:	2b ea       	ldi	r18, 0xAB	; 171
    1c70:	3a ea       	ldi	r19, 0xAA	; 170
    1c72:	4a ea       	ldi	r20, 0xAA	; 170
    1c74:	50 e4       	ldi	r21, 0x40	; 64
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c80:	98 a3       	std	Y+32, r25	; 0x20
    1c82:	a9 a3       	std	Y+33, r26	; 0x21
    1c84:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1c86:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c88:	78 a1       	ldd	r23, Y+32	; 0x20
    1c8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	1c f4       	brge	.+6      	; 0x1ca4 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca2:	91 c0       	rjmp	.+290    	; 0x1dc6 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    1ca4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ca6:	78 a1       	ldd	r23, Y+32	; 0x20
    1ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    1caa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	53 e4       	ldi	r21, 0x43	; 67
    1cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <LCD_enu_Init+0x3bc>
    1cbc:	7b c0       	rjmp	.+246    	; 0x1db4 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    1cbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4a e7       	ldi	r20, 0x7A	; 122
    1ccc:	54 e4       	ldi	r21, 0x44	; 68
    1cce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8a 8f       	std	Y+26, r24	; 0x1a
    1cd8:	9b 8f       	std	Y+27, r25	; 0x1b
    1cda:	ac 8f       	std	Y+28, r26	; 0x1c
    1cdc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cde:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ce0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ce2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ce4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a e7       	ldi	r20, 0x7A	; 122
    1cec:	55 e4       	ldi	r21, 0x45	; 69
    1cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	8e 8b       	std	Y+22, r24	; 0x16
    1cf8:	9f 8b       	std	Y+23, r25	; 0x17
    1cfa:	a8 8f       	std	Y+24, r26	; 0x18
    1cfc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1cfe:	6e 89       	ldd	r22, Y+22	; 0x16
    1d00:	7f 89       	ldd	r23, Y+23	; 0x17
    1d02:	88 8d       	ldd	r24, Y+24	; 0x18
    1d04:	99 8d       	ldd	r25, Y+25	; 0x19
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <LCD_enu_Init+0x41e>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9d 8b       	std	Y+21, r25	; 0x15
    1d1c:	8c 8b       	std	Y+20, r24	; 0x14
    1d1e:	3f c0       	rjmp	.+126    	; 0x1d9e <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    1d20:	6e 89       	ldd	r22, Y+22	; 0x16
    1d22:	7f 89       	ldd	r23, Y+23	; 0x17
    1d24:	88 8d       	ldd	r24, Y+24	; 0x18
    1d26:	99 8d       	ldd	r25, Y+25	; 0x19
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	3f ef       	ldi	r19, 0xFF	; 255
    1d2c:	4f e7       	ldi	r20, 0x7F	; 127
    1d2e:	57 e4       	ldi	r21, 0x47	; 71
    1d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d34:	18 16       	cp	r1, r24
    1d36:	4c f5       	brge	.+82     	; 0x1d8a <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d38:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d3a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	51 e4       	ldi	r21, 0x41	; 65
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	9d 8b       	std	Y+21, r25	; 0x15
    1d5e:	8c 8b       	std	Y+20, r24	; 0x14
    1d60:	0f c0       	rjmp	.+30     	; 0x1d80 <LCD_enu_Init+0x47e>
    1d62:	80 e9       	ldi	r24, 0x90	; 144
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	9b 8b       	std	Y+19, r25	; 0x13
    1d68:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1d6c:	9b 89       	ldd	r25, Y+19	; 0x13
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_enu_Init+0x46c>
    1d72:	9b 8b       	std	Y+19, r25	; 0x13
    1d74:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d76:	8c 89       	ldd	r24, Y+20	; 0x14
    1d78:	9d 89       	ldd	r25, Y+21	; 0x15
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	9d 8b       	std	Y+21, r25	; 0x15
    1d7e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d80:	8c 89       	ldd	r24, Y+20	; 0x14
    1d82:	9d 89       	ldd	r25, Y+21	; 0x15
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	69 f7       	brne	.-38     	; 0x1d62 <LCD_enu_Init+0x460>
    1d88:	24 c0       	rjmp	.+72     	; 0x1dd2 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d8a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d8c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d8e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d90:	99 8d       	ldd	r25, Y+25	; 0x19
    1d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	9d 8b       	std	Y+21, r25	; 0x15
    1d9c:	8c 8b       	std	Y+20, r24	; 0x14
    1d9e:	8c 89       	ldd	r24, Y+20	; 0x14
    1da0:	9d 89       	ldd	r25, Y+21	; 0x15
    1da2:	99 8b       	std	Y+17, r25	; 0x11
    1da4:	88 8b       	std	Y+16, r24	; 0x10
    1da6:	88 89       	ldd	r24, Y+16	; 0x10
    1da8:	99 89       	ldd	r25, Y+17	; 0x11
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <LCD_enu_Init+0x4a8>
    1dae:	99 8b       	std	Y+17, r25	; 0x11
    1db0:	88 8b       	std	Y+16, r24	; 0x10
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1db4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1db6:	78 a1       	ldd	r23, Y+32	; 0x20
    1db8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dba:	9a a1       	ldd	r25, Y+34	; 0x22
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8e 8f       	std	Y+30, r24	; 0x1e
    1dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dc8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dcc:	8a 95       	dec	r24
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_enu_Init+0x4ca>
    1dd0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e4       	ldi	r27, 0x40	; 64
    1de0:	8b 87       	std	Y+11, r24	; 0x0b
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	ad 87       	std	Y+13, r26	; 0x0d
    1de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	55 e4       	ldi	r21, 0x45	; 69
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8f 83       	std	Y+7, r24	; 0x07
    1e02:	98 87       	std	Y+8, r25	; 0x08
    1e04:	a9 87       	std	Y+9, r26	; 0x09
    1e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_enu_Init+0x528>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_enu_Init+0x588>
    1e6c:	80 e9       	ldi	r24, 0x90	; 144
    1e6e:	91 e0       	ldi	r25, 0x01	; 1
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_enu_Init+0x576>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_enu_Init+0x56a>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_enu_Init+0x5b2>
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    1ebc:	86 e0       	ldi	r24, 0x06	; 6
    1ebe:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    return STATE_OK;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1ec4:	c4 5b       	subi	r28, 0xB4	; 180
    1ec6:	df 4f       	sbci	r29, 0xFF	; 255
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	08 95       	ret

00001edc <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e0       	ldi	r26, 0x00	; 0
    1efc:	b0 e4       	ldi	r27, 0x40	; 64
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	ad 87       	std	Y+13, r26	; 0x0d
    1f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	55 e4       	ldi	r21, 0x45	; 69
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8f 83       	std	Y+7, r24	; 0x07
    1f20:	98 87       	std	Y+8, r25	; 0x08
    1f22:	a9 87       	std	Y+9, r26	; 0x09
    1f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <LCD_enu_Clear+0xcc>
    1f8a:	80 e9       	ldi	r24, 0x90	; 144
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_enu_Clear+0xba>
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <LCD_enu_Clear+0xae>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_enu_Clear+0xf6>
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
}
    1fdc:	2e 96       	adiw	r28, 0x0e	; 14
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	08 95       	ret

00001fee <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	00 d0       	rcall	.+0      	; 0x1ff4 <LCD_enu_CreateCustomChar+0x6>
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <LCD_enu_CreateCustomChar+0x8>
    1ff6:	0f 92       	push	r0
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	7c 83       	std	Y+4, r23	; 0x04
    2000:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	49 f1       	breq	.+82     	; 0x205c <LCD_enu_CreateCustomChar+0x6e>
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	88 30       	cpi	r24, 0x08	; 8
    200e:	30 f5       	brcc	.+76     	; 0x205c <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	08 96       	adiw	r24, 0x08	; 8
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0e 94 ac 07 	call	0xf58	; 0xf58 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2028:	19 82       	std	Y+1, r1	; 0x01
    202a:	0e c0       	rjmp	.+28     	; 0x2048 <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	fc 01       	movw	r30, r24
    2038:	e2 0f       	add	r30, r18
    203a:	f3 1f       	adc	r31, r19
    203c:	80 81       	ld	r24, Z
    203e:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	89 83       	std	Y+1, r24	; 0x01
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	88 30       	cpi	r24, 0x08	; 8
    204c:	78 f3       	brcs	.-34     	; 0x202c <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 4d 0c 	call	0x189a	; 0x189a <LCD_enu_SetCursor>
        return STATE_OK;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	8d 83       	std	Y+5, r24	; 0x05
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    207a:	af e5       	ldi	r26, 0x5F	; 95
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	ef e5       	ldi	r30, 0x5F	; 95
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	80 68       	ori	r24, 0x80	; 128
    2086:	8c 93       	st	X, r24
    return STATE_OK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    2098:	af e5       	ldi	r26, 0x5F	; 95
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	ef e5       	ldi	r30, 0x5F	; 95
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 77       	andi	r24, 0x7F	; 127
    20a4:	8c 93       	st	X, r24
    return STATE_OK;
    20a6:	81 e0       	ldi	r24, 0x01	; 1
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <EXTI_enu_EXTI_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_EXTI_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	2b 97       	sbiw	r28, 0x0b	; 11
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	08 f0       	brcs	.+2      	; 0x20d2 <EXTI_enu_EXTI_Enable+0x24>
    20d0:	07 c1       	rjmp	.+526    	; 0x22e0 <EXTI_enu_EXTI_Enable+0x232>
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	84 30       	cpi	r24, 0x04	; 4
    20d6:	08 f0       	brcs	.+2      	; 0x20da <EXTI_enu_EXTI_Enable+0x2c>
    20d8:	03 c1       	rjmp	.+518    	; 0x22e0 <EXTI_enu_EXTI_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	3b 87       	std	Y+11, r19	; 0x0b
    20e2:	2a 87       	std	Y+10, r18	; 0x0a
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <EXTI_enu_EXTI_Enable+0x42>
    20ee:	6d c0       	rjmp	.+218    	; 0x21ca <EXTI_enu_EXTI_Enable+0x11c>
    20f0:	2a 85       	ldd	r18, Y+10	; 0x0a
    20f2:	3b 85       	ldd	r19, Y+11	; 0x0b
    20f4:	22 30       	cpi	r18, 0x02	; 2
    20f6:	31 05       	cpc	r19, r1
    20f8:	09 f4       	brne	.+2      	; 0x20fc <EXTI_enu_EXTI_Enable+0x4e>
    20fa:	c9 c0       	rjmp	.+402    	; 0x228e <EXTI_enu_EXTI_Enable+0x1e0>
    20fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	09 f0       	breq	.+2      	; 0x2106 <EXTI_enu_EXTI_Enable+0x58>
    2104:	ee c0       	rjmp	.+476    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    2106:	ab e5       	ldi	r26, 0x5B	; 91
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	eb e5       	ldi	r30, 0x5B	; 91
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	80 64       	ori	r24, 0x40	; 64
    2112:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	39 87       	std	Y+9, r19	; 0x09
    211c:	28 87       	std	Y+8, r18	; 0x08
    211e:	88 85       	ldd	r24, Y+8	; 0x08
    2120:	99 85       	ldd	r25, Y+9	; 0x09
    2122:	81 30       	cpi	r24, 0x01	; 1
    2124:	91 05       	cpc	r25, r1
    2126:	21 f1       	breq	.+72     	; 0x2170 <EXTI_enu_EXTI_Enable+0xc2>
    2128:	28 85       	ldd	r18, Y+8	; 0x08
    212a:	39 85       	ldd	r19, Y+9	; 0x09
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	2c f4       	brge	.+10     	; 0x213c <EXTI_enu_EXTI_Enable+0x8e>
    2132:	88 85       	ldd	r24, Y+8	; 0x08
    2134:	99 85       	ldd	r25, Y+9	; 0x09
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	61 f0       	breq	.+24     	; 0x2152 <EXTI_enu_EXTI_Enable+0xa4>
    213a:	d3 c0       	rjmp	.+422    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
    213c:	28 85       	ldd	r18, Y+8	; 0x08
    213e:	39 85       	ldd	r19, Y+9	; 0x09
    2140:	22 30       	cpi	r18, 0x02	; 2
    2142:	31 05       	cpc	r19, r1
    2144:	21 f1       	breq	.+72     	; 0x218e <EXTI_enu_EXTI_Enable+0xe0>
    2146:	88 85       	ldd	r24, Y+8	; 0x08
    2148:	99 85       	ldd	r25, Y+9	; 0x09
    214a:	83 30       	cpi	r24, 0x03	; 3
    214c:	91 05       	cpc	r25, r1
    214e:	71 f1       	breq	.+92     	; 0x21ac <EXTI_enu_EXTI_Enable+0xfe>
    2150:	c8 c0       	rjmp	.+400    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2152:	a5 e5       	ldi	r26, 0x55	; 85
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e5 e5       	ldi	r30, 0x55	; 85
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	8e 7f       	andi	r24, 0xFE	; 254
    215e:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2160:	a5 e5       	ldi	r26, 0x55	; 85
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e5       	ldi	r30, 0x55	; 85
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	8d 7f       	andi	r24, 0xFD	; 253
    216c:	8c 93       	st	X, r24
    216e:	b9 c0       	rjmp	.+370    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2170:	a5 e5       	ldi	r26, 0x55	; 85
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e5 e5       	ldi	r30, 0x55	; 85
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    217e:	a5 e5       	ldi	r26, 0x55	; 85
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e5 e5       	ldi	r30, 0x55	; 85
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8d 7f       	andi	r24, 0xFD	; 253
    218a:	8c 93       	st	X, r24
    218c:	aa c0       	rjmp	.+340    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    218e:	a5 e5       	ldi	r26, 0x55	; 85
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e5 e5       	ldi	r30, 0x55	; 85
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8e 7f       	andi	r24, 0xFE	; 254
    219a:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    219c:	a5 e5       	ldi	r26, 0x55	; 85
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	e5 e5       	ldi	r30, 0x55	; 85
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	8c 93       	st	X, r24
    21aa:	9b c0       	rjmp	.+310    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    21ac:	a5 e5       	ldi	r26, 0x55	; 85
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e5 e5       	ldi	r30, 0x55	; 85
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	81 60       	ori	r24, 0x01	; 1
    21b8:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    21ba:	a5 e5       	ldi	r26, 0x55	; 85
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e5 e5       	ldi	r30, 0x55	; 85
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	8c 93       	st	X, r24
    21c8:	8c c0       	rjmp	.+280    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    21ca:	ab e5       	ldi	r26, 0x5B	; 91
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	eb e5       	ldi	r30, 0x5B	; 91
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 68       	ori	r24, 0x80	; 128
    21d6:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3f 83       	std	Y+7, r19	; 0x07
    21e0:	2e 83       	std	Y+6, r18	; 0x06
    21e2:	8e 81       	ldd	r24, Y+6	; 0x06
    21e4:	9f 81       	ldd	r25, Y+7	; 0x07
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	21 f1       	breq	.+72     	; 0x2234 <EXTI_enu_EXTI_Enable+0x186>
    21ec:	2e 81       	ldd	r18, Y+6	; 0x06
    21ee:	3f 81       	ldd	r19, Y+7	; 0x07
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <EXTI_enu_EXTI_Enable+0x152>
    21f6:	8e 81       	ldd	r24, Y+6	; 0x06
    21f8:	9f 81       	ldd	r25, Y+7	; 0x07
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	61 f0       	breq	.+24     	; 0x2216 <EXTI_enu_EXTI_Enable+0x168>
    21fe:	71 c0       	rjmp	.+226    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
    2200:	2e 81       	ldd	r18, Y+6	; 0x06
    2202:	3f 81       	ldd	r19, Y+7	; 0x07
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	21 f1       	breq	.+72     	; 0x2252 <EXTI_enu_EXTI_Enable+0x1a4>
    220a:	8e 81       	ldd	r24, Y+6	; 0x06
    220c:	9f 81       	ldd	r25, Y+7	; 0x07
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	71 f1       	breq	.+92     	; 0x2270 <EXTI_enu_EXTI_Enable+0x1c2>
    2214:	66 c0       	rjmp	.+204    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2216:	a5 e5       	ldi	r26, 0x55	; 85
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e5 e5       	ldi	r30, 0x55	; 85
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8b 7f       	andi	r24, 0xFB	; 251
    2222:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2224:	a5 e5       	ldi	r26, 0x55	; 85
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e5 e5       	ldi	r30, 0x55	; 85
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	87 7f       	andi	r24, 0xF7	; 247
    2230:	8c 93       	st	X, r24
    2232:	57 c0       	rjmp	.+174    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2234:	a5 e5       	ldi	r26, 0x55	; 85
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e5 e5       	ldi	r30, 0x55	; 85
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	84 60       	ori	r24, 0x04	; 4
    2240:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2242:	a5 e5       	ldi	r26, 0x55	; 85
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e5 e5       	ldi	r30, 0x55	; 85
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	87 7f       	andi	r24, 0xF7	; 247
    224e:	8c 93       	st	X, r24
    2250:	48 c0       	rjmp	.+144    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2252:	a5 e5       	ldi	r26, 0x55	; 85
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e5 e5       	ldi	r30, 0x55	; 85
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	8b 7f       	andi	r24, 0xFB	; 251
    225e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2260:	a5 e5       	ldi	r26, 0x55	; 85
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e5 e5       	ldi	r30, 0x55	; 85
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 60       	ori	r24, 0x08	; 8
    226c:	8c 93       	st	X, r24
    226e:	39 c0       	rjmp	.+114    	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2270:	a5 e5       	ldi	r26, 0x55	; 85
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e5 e5       	ldi	r30, 0x55	; 85
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	84 60       	ori	r24, 0x04	; 4
    227c:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    227e:	a5 e5       	ldi	r26, 0x55	; 85
    2280:	b0 e0       	ldi	r27, 0x00	; 0
    2282:	e5 e5       	ldi	r30, 0x55	; 85
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	88 60       	ori	r24, 0x08	; 8
    228a:	8c 93       	st	X, r24
    228c:	2a c0       	rjmp	.+84     	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    228e:	ab e5       	ldi	r26, 0x5B	; 91
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	eb e5       	ldi	r30, 0x5B	; 91
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	80 62       	ori	r24, 0x20	; 32
    229a:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	3d 83       	std	Y+5, r19	; 0x05
    22a4:	2c 83       	std	Y+4, r18	; 0x04
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	9d 81       	ldd	r25, Y+5	; 0x05
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	91 05       	cpc	r25, r1
    22ae:	31 f0       	breq	.+12     	; 0x22bc <EXTI_enu_EXTI_Enable+0x20e>
    22b0:	2c 81       	ldd	r18, Y+4	; 0x04
    22b2:	3d 81       	ldd	r19, Y+5	; 0x05
    22b4:	23 30       	cpi	r18, 0x03	; 3
    22b6:	31 05       	cpc	r19, r1
    22b8:	49 f0       	breq	.+18     	; 0x22cc <EXTI_enu_EXTI_Enable+0x21e>
    22ba:	10 c0       	rjmp	.+32     	; 0x22dc <EXTI_enu_EXTI_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    22bc:	a4 e5       	ldi	r26, 0x54	; 84
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e4 e5       	ldi	r30, 0x54	; 84
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	8f 7b       	andi	r24, 0xBF	; 191
    22c8:	8c 93       	st	X, r24
    22ca:	0b c0       	rjmp	.+22     	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    22cc:	a4 e5       	ldi	r26, 0x54	; 84
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e4 e5       	ldi	r30, 0x54	; 84
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	80 64       	ori	r24, 0x40	; 64
    22d8:	8c 93       	st	X, r24
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    22dc:	19 82       	std	Y+1, r1	; 0x01
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <EXTI_enu_EXTI_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    22e0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e4:	2b 96       	adiw	r28, 0x0b	; 11
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <EXTI_enu_EXTI_Disable>:

ES_t EXTI_enu_EXTI_Disable(u8 Copy_u8_EXTI_Index)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <EXTI_enu_EXTI_Disable+0x6>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <EXTI_enu_EXTI_Disable+0x8>
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	58 f5       	brcc	.+86     	; 0x2364 <EXTI_enu_EXTI_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	3c 83       	std	Y+4, r19	; 0x04
    2316:	2b 83       	std	Y+3, r18	; 0x03
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	9c 81       	ldd	r25, Y+4	; 0x04
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	91 05       	cpc	r25, r1
    2320:	89 f0       	breq	.+34     	; 0x2344 <EXTI_enu_EXTI_Disable+0x4e>
    2322:	2b 81       	ldd	r18, Y+3	; 0x03
    2324:	3c 81       	ldd	r19, Y+4	; 0x04
    2326:	22 30       	cpi	r18, 0x02	; 2
    2328:	31 05       	cpc	r19, r1
    232a:	a1 f0       	breq	.+40     	; 0x2354 <EXTI_enu_EXTI_Disable+0x5e>
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	c9 f4       	brne	.+50     	; 0x2366 <EXTI_enu_EXTI_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    2334:	ab e5       	ldi	r26, 0x5B	; 91
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	eb e5       	ldi	r30, 0x5B	; 91
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8f 7b       	andi	r24, 0xBF	; 191
    2340:	8c 93       	st	X, r24
    2342:	11 c0       	rjmp	.+34     	; 0x2366 <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    2344:	ab e5       	ldi	r26, 0x5B	; 91
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	eb e5       	ldi	r30, 0x5B	; 91
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	8f 77       	andi	r24, 0x7F	; 127
    2350:	8c 93       	st	X, r24
    2352:	09 c0       	rjmp	.+18     	; 0x2366 <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    2354:	ab e5       	ldi	r26, 0x5B	; 91
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	eb e5       	ldi	r30, 0x5B	; 91
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	8f 7d       	andi	r24, 0xDF	; 223
    2360:	8c 93       	st	X, r24
    2362:	01 c0       	rjmp	.+2      	; 0x2366 <EXTI_enu_EXTI_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2364:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
}
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <EXTI_enu_setCallBack>:

ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <EXTI_enu_setCallBack+0x6>
    237c:	00 d0       	rcall	.+0      	; 0x237e <EXTI_enu_setCallBack+0x8>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	9b 83       	std	Y+3, r25	; 0x03
    2384:	8a 83       	std	Y+2, r24	; 0x02
    2386:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	81 f0       	breq	.+32     	; 0x23b4 <EXTI_enu_setCallBack+0x3e>
    2394:	8c 81       	ldd	r24, Y+4	; 0x04
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	68 f4       	brcc	.+26     	; 0x23b4 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
    23a4:	fc 01       	movw	r30, r24
    23a6:	e6 57       	subi	r30, 0x76	; 118
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	9b 81       	ldd	r25, Y+3	; 0x03
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	80 83       	st	Z, r24
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    23b4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    23c6:	1f 92       	push	r1
    23c8:	0f 92       	push	r0
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	0f 92       	push	r0
    23ce:	11 24       	eor	r1, r1
    23d0:	2f 93       	push	r18
    23d2:	3f 93       	push	r19
    23d4:	4f 93       	push	r20
    23d6:	5f 93       	push	r21
    23d8:	6f 93       	push	r22
    23da:	7f 93       	push	r23
    23dc:	8f 93       	push	r24
    23de:	9f 93       	push	r25
    23e0:	af 93       	push	r26
    23e2:	bf 93       	push	r27
    23e4:	ef 93       	push	r30
    23e6:	ff 93       	push	r31
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    23f0:	80 91 8a 00 	lds	r24, 0x008A
    23f4:	90 91 8b 00 	lds	r25, 0x008B
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	29 f0       	breq	.+10     	; 0x2406 <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    23fc:	e0 91 8a 00 	lds	r30, 0x008A
    2400:	f0 91 8b 00 	lds	r31, 0x008B
    2404:	09 95       	icall
}
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	ff 91       	pop	r31
    240c:	ef 91       	pop	r30
    240e:	bf 91       	pop	r27
    2410:	af 91       	pop	r26
    2412:	9f 91       	pop	r25
    2414:	8f 91       	pop	r24
    2416:	7f 91       	pop	r23
    2418:	6f 91       	pop	r22
    241a:	5f 91       	pop	r21
    241c:	4f 91       	pop	r20
    241e:	3f 91       	pop	r19
    2420:	2f 91       	pop	r18
    2422:	0f 90       	pop	r0
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	0f 90       	pop	r0
    2428:	1f 90       	pop	r1
    242a:	18 95       	reti

0000242c <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    242c:	1f 92       	push	r1
    242e:	0f 92       	push	r0
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	0f 92       	push	r0
    2434:	11 24       	eor	r1, r1
    2436:	2f 93       	push	r18
    2438:	3f 93       	push	r19
    243a:	4f 93       	push	r20
    243c:	5f 93       	push	r21
    243e:	6f 93       	push	r22
    2440:	7f 93       	push	r23
    2442:	8f 93       	push	r24
    2444:	9f 93       	push	r25
    2446:	af 93       	push	r26
    2448:	bf 93       	push	r27
    244a:	ef 93       	push	r30
    244c:	ff 93       	push	r31
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    2456:	80 91 8c 00 	lds	r24, 0x008C
    245a:	90 91 8d 00 	lds	r25, 0x008D
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	29 f0       	breq	.+10     	; 0x246c <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    2462:	e0 91 8c 00 	lds	r30, 0x008C
    2466:	f0 91 8d 00 	lds	r31, 0x008D
    246a:	09 95       	icall
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	ff 91       	pop	r31
    2472:	ef 91       	pop	r30
    2474:	bf 91       	pop	r27
    2476:	af 91       	pop	r26
    2478:	9f 91       	pop	r25
    247a:	8f 91       	pop	r24
    247c:	7f 91       	pop	r23
    247e:	6f 91       	pop	r22
    2480:	5f 91       	pop	r21
    2482:	4f 91       	pop	r20
    2484:	3f 91       	pop	r19
    2486:	2f 91       	pop	r18
    2488:	0f 90       	pop	r0
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	0f 90       	pop	r0
    248e:	1f 90       	pop	r1
    2490:	18 95       	reti

00002492 <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    2492:	1f 92       	push	r1
    2494:	0f 92       	push	r0
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	0f 92       	push	r0
    249a:	11 24       	eor	r1, r1
    249c:	2f 93       	push	r18
    249e:	3f 93       	push	r19
    24a0:	4f 93       	push	r20
    24a2:	5f 93       	push	r21
    24a4:	6f 93       	push	r22
    24a6:	7f 93       	push	r23
    24a8:	8f 93       	push	r24
    24aa:	9f 93       	push	r25
    24ac:	af 93       	push	r26
    24ae:	bf 93       	push	r27
    24b0:	ef 93       	push	r30
    24b2:	ff 93       	push	r31
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    24bc:	80 91 8e 00 	lds	r24, 0x008E
    24c0:	90 91 8f 00 	lds	r25, 0x008F
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	29 f0       	breq	.+10     	; 0x24d2 <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    24c8:	e0 91 8e 00 	lds	r30, 0x008E
    24cc:	f0 91 8f 00 	lds	r31, 0x008F
    24d0:	09 95       	icall
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	ff 91       	pop	r31
    24d8:	ef 91       	pop	r30
    24da:	bf 91       	pop	r27
    24dc:	af 91       	pop	r26
    24de:	9f 91       	pop	r25
    24e0:	8f 91       	pop	r24
    24e2:	7f 91       	pop	r23
    24e4:	6f 91       	pop	r22
    24e6:	5f 91       	pop	r21
    24e8:	4f 91       	pop	r20
    24ea:	3f 91       	pop	r19
    24ec:	2f 91       	pop	r18
    24ee:	0f 90       	pop	r0
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	0f 90       	pop	r0
    24f4:	1f 90       	pop	r1
    24f6:	18 95       	reti

000024f8 <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    24f8:	df 93       	push	r29
    24fa:	cf 93       	push	r28
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    2500:	ea e3       	ldi	r30, 0x3A	; 58
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	8f e7       	ldi	r24, 0x7F	; 127
    2506:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    2508:	e7 e3       	ldi	r30, 0x37	; 55
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	8d ef       	ldi	r24, 0xFD	; 253
    250e:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    2510:	e4 e3       	ldi	r30, 0x34	; 52
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	83 e1       	ldi	r24, 0x13	; 19
    2516:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    2518:	e1 e3       	ldi	r30, 0x31	; 49
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    251e:	eb e3       	ldi	r30, 0x3B	; 59
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    2524:	e8 e3       	ldi	r30, 0x38	; 56
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	84 ef       	ldi	r24, 0xF4	; 244
    252a:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    252c:	e5 e3       	ldi	r30, 0x35	; 53
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    2532:	e2 e3       	ldi	r30, 0x32	; 50
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	8c e3       	ldi	r24, 0x3C	; 60
    2538:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    253a:	81 e0       	ldi	r24, 0x01	; 1
}
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	2e 97       	sbiw	r28, 0x0e	; 14
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	6b 83       	std	Y+3, r22	; 0x03
    255a:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	84 30       	cpi	r24, 0x04	; 4
    2564:	08 f0       	brcs	.+2      	; 0x2568 <DIO_enu_SetPinDirection+0x26>
    2566:	0c c1       	rjmp	.+536    	; 0x2780 <DIO_enu_SetPinDirection+0x23e>
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	88 30       	cpi	r24, 0x08	; 8
    256c:	08 f0       	brcs	.+2      	; 0x2570 <DIO_enu_SetPinDirection+0x2e>
    256e:	08 c1       	rjmp	.+528    	; 0x2780 <DIO_enu_SetPinDirection+0x23e>
    2570:	8c 81       	ldd	r24, Y+4	; 0x04
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	21 f0       	breq	.+8      	; 0x257e <DIO_enu_SetPinDirection+0x3c>
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	88 23       	and	r24, r24
    257a:	09 f0       	breq	.+2      	; 0x257e <DIO_enu_SetPinDirection+0x3c>
    257c:	01 c1       	rjmp	.+514    	; 0x2780 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	3e 87       	std	Y+14, r19	; 0x0e
    2586:	2d 87       	std	Y+13, r18	; 0x0d
    2588:	8d 85       	ldd	r24, Y+13	; 0x0d
    258a:	9e 85       	ldd	r25, Y+14	; 0x0e
    258c:	81 30       	cpi	r24, 0x01	; 1
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <DIO_enu_SetPinDirection+0x52>
    2592:	4f c0       	rjmp	.+158    	; 0x2632 <DIO_enu_SetPinDirection+0xf0>
    2594:	2d 85       	ldd	r18, Y+13	; 0x0d
    2596:	3e 85       	ldd	r19, Y+14	; 0x0e
    2598:	22 30       	cpi	r18, 0x02	; 2
    259a:	31 05       	cpc	r19, r1
    259c:	2c f4       	brge	.+10     	; 0x25a8 <DIO_enu_SetPinDirection+0x66>
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	71 f0       	breq	.+28     	; 0x25c2 <DIO_enu_SetPinDirection+0x80>
    25a6:	ed c0       	rjmp	.+474    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
    25a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    25aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <DIO_enu_SetPinDirection+0x72>
    25b2:	77 c0       	rjmp	.+238    	; 0x26a2 <DIO_enu_SetPinDirection+0x160>
    25b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b8:	83 30       	cpi	r24, 0x03	; 3
    25ba:	91 05       	cpc	r25, r1
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <DIO_enu_SetPinDirection+0x7e>
    25be:	a9 c0       	rjmp	.+338    	; 0x2712 <DIO_enu_SetPinDirection+0x1d0>
    25c0:	e0 c0       	rjmp	.+448    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	3c 87       	std	Y+12, r19	; 0x0c
    25ca:	2b 87       	std	Y+11, r18	; 0x0b
    25cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    25ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	d1 f0       	breq	.+52     	; 0x2608 <DIO_enu_SetPinDirection+0xc6>
    25d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    25d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    25d8:	21 30       	cpi	r18, 0x01	; 1
    25da:	31 05       	cpc	r19, r1
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <DIO_enu_SetPinDirection+0x9e>
    25de:	d1 c0       	rjmp	.+418    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    25e0:	aa e3       	ldi	r26, 0x3A	; 58
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	ea e3       	ldi	r30, 0x3A	; 58
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	48 2f       	mov	r20, r24
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	02 2e       	mov	r0, r18
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <DIO_enu_SetPinDirection+0xbc>
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	0a 94       	dec	r0
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <DIO_enu_SetPinDirection+0xb8>
    2602:	84 2b       	or	r24, r20
    2604:	8c 93       	st	X, r24
    2606:	bd c0       	rjmp	.+378    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    2608:	aa e3       	ldi	r26, 0x3A	; 58
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	ea e3       	ldi	r30, 0x3A	; 58
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	48 2f       	mov	r20, r24
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 2e       	mov	r0, r18
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <DIO_enu_SetPinDirection+0xe4>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	0a 94       	dec	r0
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <DIO_enu_SetPinDirection+0xe0>
    262a:	80 95       	com	r24
    262c:	84 23       	and	r24, r20
    262e:	8c 93       	st	X, r24
    2630:	a8 c0       	rjmp	.+336    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	3a 87       	std	Y+10, r19	; 0x0a
    263a:	29 87       	std	Y+9, r18	; 0x09
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	d1 f0       	breq	.+52     	; 0x2678 <DIO_enu_SetPinDirection+0x136>
    2644:	29 85       	ldd	r18, Y+9	; 0x09
    2646:	3a 85       	ldd	r19, Y+10	; 0x0a
    2648:	21 30       	cpi	r18, 0x01	; 1
    264a:	31 05       	cpc	r19, r1
    264c:	09 f0       	breq	.+2      	; 0x2650 <DIO_enu_SetPinDirection+0x10e>
    264e:	99 c0       	rjmp	.+306    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    2650:	a7 e3       	ldi	r26, 0x37	; 55
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e7 e3       	ldi	r30, 0x37	; 55
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	48 2f       	mov	r20, r24
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	02 2e       	mov	r0, r18
    2668:	02 c0       	rjmp	.+4      	; 0x266e <DIO_enu_SetPinDirection+0x12c>
    266a:	88 0f       	add	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	0a 94       	dec	r0
    2670:	e2 f7       	brpl	.-8      	; 0x266a <DIO_enu_SetPinDirection+0x128>
    2672:	84 2b       	or	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	85 c0       	rjmp	.+266    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    2678:	a7 e3       	ldi	r26, 0x37	; 55
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e7 e3       	ldi	r30, 0x37	; 55
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	48 2f       	mov	r20, r24
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	02 2e       	mov	r0, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <DIO_enu_SetPinDirection+0x154>
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	0a 94       	dec	r0
    2698:	e2 f7       	brpl	.-8      	; 0x2692 <DIO_enu_SetPinDirection+0x150>
    269a:	80 95       	com	r24
    269c:	84 23       	and	r24, r20
    269e:	8c 93       	st	X, r24
    26a0:	70 c0       	rjmp	.+224    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    26a2:	8c 81       	ldd	r24, Y+4	; 0x04
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	38 87       	std	Y+8, r19	; 0x08
    26aa:	2f 83       	std	Y+7, r18	; 0x07
    26ac:	8f 81       	ldd	r24, Y+7	; 0x07
    26ae:	98 85       	ldd	r25, Y+8	; 0x08
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	d1 f0       	breq	.+52     	; 0x26e8 <DIO_enu_SetPinDirection+0x1a6>
    26b4:	2f 81       	ldd	r18, Y+7	; 0x07
    26b6:	38 85       	ldd	r19, Y+8	; 0x08
    26b8:	21 30       	cpi	r18, 0x01	; 1
    26ba:	31 05       	cpc	r19, r1
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <DIO_enu_SetPinDirection+0x17e>
    26be:	61 c0       	rjmp	.+194    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    26c0:	a4 e3       	ldi	r26, 0x34	; 52
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e4 e3       	ldi	r30, 0x34	; 52
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	48 2f       	mov	r20, r24
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	28 2f       	mov	r18, r24
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	02 2e       	mov	r0, r18
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <DIO_enu_SetPinDirection+0x19c>
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	0a 94       	dec	r0
    26e0:	e2 f7       	brpl	.-8      	; 0x26da <DIO_enu_SetPinDirection+0x198>
    26e2:	84 2b       	or	r24, r20
    26e4:	8c 93       	st	X, r24
    26e6:	4d c0       	rjmp	.+154    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    26e8:	a4 e3       	ldi	r26, 0x34	; 52
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e4 e3       	ldi	r30, 0x34	; 52
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	48 2f       	mov	r20, r24
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	02 2e       	mov	r0, r18
    2700:	02 c0       	rjmp	.+4      	; 0x2706 <DIO_enu_SetPinDirection+0x1c4>
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	0a 94       	dec	r0
    2708:	e2 f7       	brpl	.-8      	; 0x2702 <DIO_enu_SetPinDirection+0x1c0>
    270a:	80 95       	com	r24
    270c:	84 23       	and	r24, r20
    270e:	8c 93       	st	X, r24
    2710:	38 c0       	rjmp	.+112    	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    2712:	8c 81       	ldd	r24, Y+4	; 0x04
    2714:	28 2f       	mov	r18, r24
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	3e 83       	std	Y+6, r19	; 0x06
    271a:	2d 83       	std	Y+5, r18	; 0x05
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	c9 f0       	breq	.+50     	; 0x2756 <DIO_enu_SetPinDirection+0x214>
    2724:	2d 81       	ldd	r18, Y+5	; 0x05
    2726:	3e 81       	ldd	r19, Y+6	; 0x06
    2728:	21 30       	cpi	r18, 0x01	; 1
    272a:	31 05       	cpc	r19, r1
    272c:	51 f5       	brne	.+84     	; 0x2782 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    272e:	a1 e3       	ldi	r26, 0x31	; 49
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e1 e3       	ldi	r30, 0x31	; 49
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	48 2f       	mov	r20, r24
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 2e       	mov	r0, r18
    2746:	02 c0       	rjmp	.+4      	; 0x274c <DIO_enu_SetPinDirection+0x20a>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	0a 94       	dec	r0
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <DIO_enu_SetPinDirection+0x206>
    2750:	84 2b       	or	r24, r20
    2752:	8c 93       	st	X, r24
    2754:	16 c0       	rjmp	.+44     	; 0x2782 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    2756:	a1 e3       	ldi	r26, 0x31	; 49
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e1 e3       	ldi	r30, 0x31	; 49
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	48 2f       	mov	r20, r24
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	28 2f       	mov	r18, r24
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 2e       	mov	r0, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <DIO_enu_SetPinDirection+0x232>
    2770:	88 0f       	add	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	0a 94       	dec	r0
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <DIO_enu_SetPinDirection+0x22e>
    2778:	80 95       	com	r24
    277a:	84 23       	and	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	01 c0       	rjmp	.+2      	; 0x2782 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2780:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
}
    2784:	2e 96       	adiw	r28, 0x0e	; 14
    2786:	0f b6       	in	r0, 0x3f	; 63
    2788:	f8 94       	cli
    278a:	de bf       	out	0x3e, r29	; 62
    278c:	0f be       	out	0x3f, r0	; 63
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	cf 91       	pop	r28
    2792:	df 91       	pop	r29
    2794:	08 95       	ret

00002796 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    2796:	df 93       	push	r29
    2798:	cf 93       	push	r28
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	2e 97       	sbiw	r28, 0x0e	; 14
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	8a 83       	std	Y+2, r24	; 0x02
    27ac:	6b 83       	std	Y+3, r22	; 0x03
    27ae:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	84 30       	cpi	r24, 0x04	; 4
    27b8:	08 f0       	brcs	.+2      	; 0x27bc <DIO_enu_SetPinValue+0x26>
    27ba:	0c c1       	rjmp	.+536    	; 0x29d4 <DIO_enu_SetPinValue+0x23e>
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	88 30       	cpi	r24, 0x08	; 8
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <DIO_enu_SetPinValue+0x2e>
    27c2:	08 c1       	rjmp	.+528    	; 0x29d4 <DIO_enu_SetPinValue+0x23e>
    27c4:	8c 81       	ldd	r24, Y+4	; 0x04
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	21 f0       	breq	.+8      	; 0x27d2 <DIO_enu_SetPinValue+0x3c>
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	88 23       	and	r24, r24
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <DIO_enu_SetPinValue+0x3c>
    27d0:	01 c1       	rjmp	.+514    	; 0x29d4 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	3e 87       	std	Y+14, r19	; 0x0e
    27da:	2d 87       	std	Y+13, r18	; 0x0d
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	91 05       	cpc	r25, r1
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <DIO_enu_SetPinValue+0x52>
    27e6:	4f c0       	rjmp	.+158    	; 0x2886 <DIO_enu_SetPinValue+0xf0>
    27e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    27ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    27ec:	22 30       	cpi	r18, 0x02	; 2
    27ee:	31 05       	cpc	r19, r1
    27f0:	2c f4       	brge	.+10     	; 0x27fc <DIO_enu_SetPinValue+0x66>
    27f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	71 f0       	breq	.+28     	; 0x2816 <DIO_enu_SetPinValue+0x80>
    27fa:	ed c0       	rjmp	.+474    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
    27fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    27fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2800:	22 30       	cpi	r18, 0x02	; 2
    2802:	31 05       	cpc	r19, r1
    2804:	09 f4       	brne	.+2      	; 0x2808 <DIO_enu_SetPinValue+0x72>
    2806:	77 c0       	rjmp	.+238    	; 0x28f6 <DIO_enu_SetPinValue+0x160>
    2808:	8d 85       	ldd	r24, Y+13	; 0x0d
    280a:	9e 85       	ldd	r25, Y+14	; 0x0e
    280c:	83 30       	cpi	r24, 0x03	; 3
    280e:	91 05       	cpc	r25, r1
    2810:	09 f4       	brne	.+2      	; 0x2814 <DIO_enu_SetPinValue+0x7e>
    2812:	a9 c0       	rjmp	.+338    	; 0x2966 <DIO_enu_SetPinValue+0x1d0>
    2814:	e0 c0       	rjmp	.+448    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	3c 87       	std	Y+12, r19	; 0x0c
    281e:	2b 87       	std	Y+11, r18	; 0x0b
    2820:	8b 85       	ldd	r24, Y+11	; 0x0b
    2822:	9c 85       	ldd	r25, Y+12	; 0x0c
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	d1 f0       	breq	.+52     	; 0x285c <DIO_enu_SetPinValue+0xc6>
    2828:	2b 85       	ldd	r18, Y+11	; 0x0b
    282a:	3c 85       	ldd	r19, Y+12	; 0x0c
    282c:	21 30       	cpi	r18, 0x01	; 1
    282e:	31 05       	cpc	r19, r1
    2830:	09 f0       	breq	.+2      	; 0x2834 <DIO_enu_SetPinValue+0x9e>
    2832:	d1 c0       	rjmp	.+418    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    2834:	ab e3       	ldi	r26, 0x3B	; 59
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	eb e3       	ldi	r30, 0x3B	; 59
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	48 2f       	mov	r20, r24
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	02 2e       	mov	r0, r18
    284c:	02 c0       	rjmp	.+4      	; 0x2852 <DIO_enu_SetPinValue+0xbc>
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	0a 94       	dec	r0
    2854:	e2 f7       	brpl	.-8      	; 0x284e <DIO_enu_SetPinValue+0xb8>
    2856:	84 2b       	or	r24, r20
    2858:	8c 93       	st	X, r24
    285a:	bd c0       	rjmp	.+378    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    285c:	ab e3       	ldi	r26, 0x3B	; 59
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	eb e3       	ldi	r30, 0x3B	; 59
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	48 2f       	mov	r20, r24
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	02 2e       	mov	r0, r18
    2874:	02 c0       	rjmp	.+4      	; 0x287a <DIO_enu_SetPinValue+0xe4>
    2876:	88 0f       	add	r24, r24
    2878:	99 1f       	adc	r25, r25
    287a:	0a 94       	dec	r0
    287c:	e2 f7       	brpl	.-8      	; 0x2876 <DIO_enu_SetPinValue+0xe0>
    287e:	80 95       	com	r24
    2880:	84 23       	and	r24, r20
    2882:	8c 93       	st	X, r24
    2884:	a8 c0       	rjmp	.+336    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    2886:	8c 81       	ldd	r24, Y+4	; 0x04
    2888:	28 2f       	mov	r18, r24
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	3a 87       	std	Y+10, r19	; 0x0a
    288e:	29 87       	std	Y+9, r18	; 0x09
    2890:	89 85       	ldd	r24, Y+9	; 0x09
    2892:	9a 85       	ldd	r25, Y+10	; 0x0a
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	d1 f0       	breq	.+52     	; 0x28cc <DIO_enu_SetPinValue+0x136>
    2898:	29 85       	ldd	r18, Y+9	; 0x09
    289a:	3a 85       	ldd	r19, Y+10	; 0x0a
    289c:	21 30       	cpi	r18, 0x01	; 1
    289e:	31 05       	cpc	r19, r1
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <DIO_enu_SetPinValue+0x10e>
    28a2:	99 c0       	rjmp	.+306    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    28a4:	a8 e3       	ldi	r26, 0x38	; 56
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e8 e3       	ldi	r30, 0x38	; 56
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	48 2f       	mov	r20, r24
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	02 2e       	mov	r0, r18
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <DIO_enu_SetPinValue+0x12c>
    28be:	88 0f       	add	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	0a 94       	dec	r0
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <DIO_enu_SetPinValue+0x128>
    28c6:	84 2b       	or	r24, r20
    28c8:	8c 93       	st	X, r24
    28ca:	85 c0       	rjmp	.+266    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    28cc:	a8 e3       	ldi	r26, 0x38	; 56
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	e8 e3       	ldi	r30, 0x38	; 56
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	48 2f       	mov	r20, r24
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	02 2e       	mov	r0, r18
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <DIO_enu_SetPinValue+0x154>
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	0a 94       	dec	r0
    28ec:	e2 f7       	brpl	.-8      	; 0x28e6 <DIO_enu_SetPinValue+0x150>
    28ee:	80 95       	com	r24
    28f0:	84 23       	and	r24, r20
    28f2:	8c 93       	st	X, r24
    28f4:	70 c0       	rjmp	.+224    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	38 87       	std	Y+8, r19	; 0x08
    28fe:	2f 83       	std	Y+7, r18	; 0x07
    2900:	8f 81       	ldd	r24, Y+7	; 0x07
    2902:	98 85       	ldd	r25, Y+8	; 0x08
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	d1 f0       	breq	.+52     	; 0x293c <DIO_enu_SetPinValue+0x1a6>
    2908:	2f 81       	ldd	r18, Y+7	; 0x07
    290a:	38 85       	ldd	r19, Y+8	; 0x08
    290c:	21 30       	cpi	r18, 0x01	; 1
    290e:	31 05       	cpc	r19, r1
    2910:	09 f0       	breq	.+2      	; 0x2914 <DIO_enu_SetPinValue+0x17e>
    2912:	61 c0       	rjmp	.+194    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    2914:	a5 e3       	ldi	r26, 0x35	; 53
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e5 e3       	ldi	r30, 0x35	; 53
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	48 2f       	mov	r20, r24
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	02 2e       	mov	r0, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <DIO_enu_SetPinValue+0x19c>
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <DIO_enu_SetPinValue+0x198>
    2936:	84 2b       	or	r24, r20
    2938:	8c 93       	st	X, r24
    293a:	4d c0       	rjmp	.+154    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    293c:	a5 e3       	ldi	r26, 0x35	; 53
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e5 e3       	ldi	r30, 0x35	; 53
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	48 2f       	mov	r20, r24
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	02 2e       	mov	r0, r18
    2954:	02 c0       	rjmp	.+4      	; 0x295a <DIO_enu_SetPinValue+0x1c4>
    2956:	88 0f       	add	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	0a 94       	dec	r0
    295c:	e2 f7       	brpl	.-8      	; 0x2956 <DIO_enu_SetPinValue+0x1c0>
    295e:	80 95       	com	r24
    2960:	84 23       	and	r24, r20
    2962:	8c 93       	st	X, r24
    2964:	38 c0       	rjmp	.+112    	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    2966:	8c 81       	ldd	r24, Y+4	; 0x04
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3e 83       	std	Y+6, r19	; 0x06
    296e:	2d 83       	std	Y+5, r18	; 0x05
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	c9 f0       	breq	.+50     	; 0x29aa <DIO_enu_SetPinValue+0x214>
    2978:	2d 81       	ldd	r18, Y+5	; 0x05
    297a:	3e 81       	ldd	r19, Y+6	; 0x06
    297c:	21 30       	cpi	r18, 0x01	; 1
    297e:	31 05       	cpc	r19, r1
    2980:	51 f5       	brne	.+84     	; 0x29d6 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    2982:	a2 e3       	ldi	r26, 0x32	; 50
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e2 e3       	ldi	r30, 0x32	; 50
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	48 2f       	mov	r20, r24
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	02 2e       	mov	r0, r18
    299a:	02 c0       	rjmp	.+4      	; 0x29a0 <DIO_enu_SetPinValue+0x20a>
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	0a 94       	dec	r0
    29a2:	e2 f7       	brpl	.-8      	; 0x299c <DIO_enu_SetPinValue+0x206>
    29a4:	84 2b       	or	r24, r20
    29a6:	8c 93       	st	X, r24
    29a8:	16 c0       	rjmp	.+44     	; 0x29d6 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    29aa:	a2 e3       	ldi	r26, 0x32	; 50
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e2 e3       	ldi	r30, 0x32	; 50
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	48 2f       	mov	r20, r24
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	02 2e       	mov	r0, r18
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <DIO_enu_SetPinValue+0x232>
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	0a 94       	dec	r0
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <DIO_enu_SetPinValue+0x22e>
    29cc:	80 95       	com	r24
    29ce:	84 23       	and	r24, r20
    29d0:	8c 93       	st	X, r24
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    29d4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    29d8:	2e 96       	adiw	r28, 0x0e	; 14
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	27 97       	sbiw	r28, 0x07	; 7
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	6b 83       	std	Y+3, r22	; 0x03
    2a02:	5d 83       	std	Y+5, r21	; 0x05
    2a04:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	84 30       	cpi	r24, 0x04	; 4
    2a0e:	08 f0       	brcs	.+2      	; 0x2a12 <DIO_enu_GetPinValue+0x28>
    2a10:	7a c0       	rjmp	.+244    	; 0x2b06 <DIO_enu_GetPinValue+0x11c>
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	88 30       	cpi	r24, 0x08	; 8
    2a16:	08 f0       	brcs	.+2      	; 0x2a1a <DIO_enu_GetPinValue+0x30>
    2a18:	76 c0       	rjmp	.+236    	; 0x2b06 <DIO_enu_GetPinValue+0x11c>
    2a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a1e:	00 97       	sbiw	r24, 0x00	; 0
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <DIO_enu_GetPinValue+0x3a>
    2a22:	71 c0       	rjmp	.+226    	; 0x2b06 <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	28 2f       	mov	r18, r24
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	3f 83       	std	Y+7, r19	; 0x07
    2a2c:	2e 83       	std	Y+6, r18	; 0x06
    2a2e:	4e 81       	ldd	r20, Y+6	; 0x06
    2a30:	5f 81       	ldd	r21, Y+7	; 0x07
    2a32:	41 30       	cpi	r20, 0x01	; 1
    2a34:	51 05       	cpc	r21, r1
    2a36:	59 f1       	breq	.+86     	; 0x2a8e <DIO_enu_GetPinValue+0xa4>
    2a38:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3c:	82 30       	cpi	r24, 0x02	; 2
    2a3e:	91 05       	cpc	r25, r1
    2a40:	34 f4       	brge	.+12     	; 0x2a4e <DIO_enu_GetPinValue+0x64>
    2a42:	2e 81       	ldd	r18, Y+6	; 0x06
    2a44:	3f 81       	ldd	r19, Y+7	; 0x07
    2a46:	21 15       	cp	r18, r1
    2a48:	31 05       	cpc	r19, r1
    2a4a:	69 f0       	breq	.+26     	; 0x2a66 <DIO_enu_GetPinValue+0x7c>
    2a4c:	5d c0       	rjmp	.+186    	; 0x2b08 <DIO_enu_GetPinValue+0x11e>
    2a4e:	4e 81       	ldd	r20, Y+6	; 0x06
    2a50:	5f 81       	ldd	r21, Y+7	; 0x07
    2a52:	42 30       	cpi	r20, 0x02	; 2
    2a54:	51 05       	cpc	r21, r1
    2a56:	79 f1       	breq	.+94     	; 0x2ab6 <DIO_enu_GetPinValue+0xcc>
    2a58:	8e 81       	ldd	r24, Y+6	; 0x06
    2a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a5c:	83 30       	cpi	r24, 0x03	; 3
    2a5e:	91 05       	cpc	r25, r1
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <DIO_enu_GetPinValue+0x7a>
    2a62:	3d c0       	rjmp	.+122    	; 0x2ade <DIO_enu_GetPinValue+0xf4>
    2a64:	51 c0       	rjmp	.+162    	; 0x2b08 <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    2a66:	e9 e3       	ldi	r30, 0x39	; 57
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a9 01       	movw	r20, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <DIO_enu_GetPinValue+0x94>
    2a7a:	55 95       	asr	r21
    2a7c:	47 95       	ror	r20
    2a7e:	8a 95       	dec	r24
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <DIO_enu_GetPinValue+0x90>
    2a82:	ca 01       	movw	r24, r20
    2a84:	81 70       	andi	r24, 0x01	; 1
    2a86:	ec 81       	ldd	r30, Y+4	; 0x04
    2a88:	fd 81       	ldd	r31, Y+5	; 0x05
    2a8a:	80 83       	st	Z, r24
    2a8c:	3d c0       	rjmp	.+122    	; 0x2b08 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    2a8e:	e6 e3       	ldi	r30, 0x36	; 54
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 81       	ld	r24, Z
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	88 2f       	mov	r24, r24
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a9 01       	movw	r20, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <DIO_enu_GetPinValue+0xbc>
    2aa2:	55 95       	asr	r21
    2aa4:	47 95       	ror	r20
    2aa6:	8a 95       	dec	r24
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <DIO_enu_GetPinValue+0xb8>
    2aaa:	ca 01       	movw	r24, r20
    2aac:	81 70       	andi	r24, 0x01	; 1
    2aae:	ec 81       	ldd	r30, Y+4	; 0x04
    2ab0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ab2:	80 83       	st	Z, r24
    2ab4:	29 c0       	rjmp	.+82     	; 0x2b08 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    2ab6:	e3 e3       	ldi	r30, 0x33	; 51
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	28 2f       	mov	r18, r24
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	a9 01       	movw	r20, r18
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <DIO_enu_GetPinValue+0xe4>
    2aca:	55 95       	asr	r21
    2acc:	47 95       	ror	r20
    2ace:	8a 95       	dec	r24
    2ad0:	e2 f7       	brpl	.-8      	; 0x2aca <DIO_enu_GetPinValue+0xe0>
    2ad2:	ca 01       	movw	r24, r20
    2ad4:	81 70       	andi	r24, 0x01	; 1
    2ad6:	ec 81       	ldd	r30, Y+4	; 0x04
    2ad8:	fd 81       	ldd	r31, Y+5	; 0x05
    2ada:	80 83       	st	Z, r24
    2adc:	15 c0       	rjmp	.+42     	; 0x2b08 <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    2ade:	e0 e3       	ldi	r30, 0x30	; 48
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	28 2f       	mov	r18, r24
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	88 2f       	mov	r24, r24
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a9 01       	movw	r20, r18
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <DIO_enu_GetPinValue+0x10c>
    2af2:	55 95       	asr	r21
    2af4:	47 95       	ror	r20
    2af6:	8a 95       	dec	r24
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <DIO_enu_GetPinValue+0x108>
    2afa:	ca 01       	movw	r24, r20
    2afc:	81 70       	andi	r24, 0x01	; 1
    2afe:	ec 81       	ldd	r30, Y+4	; 0x04
    2b00:	fd 81       	ldd	r31, Y+5	; 0x05
    2b02:	80 83       	st	Z, r24
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    2b06:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b0a:	27 96       	adiw	r28, 0x07	; 7
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	cf 91       	pop	r28
    2b18:	df 91       	pop	r29
    2b1a:	08 95       	ret

00002b1c <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    2b1c:	df 93       	push	r29
    2b1e:	cf 93       	push	r28
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	2d 97       	sbiw	r28, 0x0d	; 13
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	8a 83       	std	Y+2, r24	; 0x02
    2b32:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	08 f0       	brcs	.+2      	; 0x2b40 <DIO_enu_SetPortDirection+0x24>
    2b3e:	84 c0       	rjmp	.+264    	; 0x2c48 <DIO_enu_SetPortDirection+0x12c>
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	21 f0       	breq	.+8      	; 0x2b4e <DIO_enu_SetPortDirection+0x32>
    2b46:	8b 81       	ldd	r24, Y+3	; 0x03
    2b48:	88 23       	and	r24, r24
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <DIO_enu_SetPortDirection+0x32>
    2b4c:	7d c0       	rjmp	.+250    	; 0x2c48 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	3d 87       	std	Y+13, r19	; 0x0d
    2b56:	2c 87       	std	Y+12, r18	; 0x0c
    2b58:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	91 05       	cpc	r25, r1
    2b60:	71 f1       	breq	.+92     	; 0x2bbe <DIO_enu_SetPortDirection+0xa2>
    2b62:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b64:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b66:	22 30       	cpi	r18, 0x02	; 2
    2b68:	31 05       	cpc	r19, r1
    2b6a:	2c f4       	brge	.+10     	; 0x2b76 <DIO_enu_SetPortDirection+0x5a>
    2b6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b70:	00 97       	sbiw	r24, 0x00	; 0
    2b72:	69 f0       	breq	.+26     	; 0x2b8e <DIO_enu_SetPortDirection+0x72>
    2b74:	6a c0       	rjmp	.+212    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
    2b76:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b78:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b7a:	22 30       	cpi	r18, 0x02	; 2
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	b1 f1       	breq	.+108    	; 0x2bec <DIO_enu_SetPortDirection+0xd0>
    2b80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b82:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b84:	83 30       	cpi	r24, 0x03	; 3
    2b86:	91 05       	cpc	r25, r1
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <DIO_enu_SetPortDirection+0x70>
    2b8a:	47 c0       	rjmp	.+142    	; 0x2c1a <DIO_enu_SetPortDirection+0xfe>
    2b8c:	5e c0       	rjmp	.+188    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	3b 87       	std	Y+11, r19	; 0x0b
    2b96:	2a 87       	std	Y+10, r18	; 0x0a
    2b98:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	59 f0       	breq	.+22     	; 0x2bb6 <DIO_enu_SetPortDirection+0x9a>
    2ba0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ba2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ba4:	21 30       	cpi	r18, 0x01	; 1
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	09 f0       	breq	.+2      	; 0x2bac <DIO_enu_SetPortDirection+0x90>
    2baa:	4f c0       	rjmp	.+158    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    2bac:	ea e3       	ldi	r30, 0x3A	; 58
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	80 83       	st	Z, r24
    2bb4:	4a c0       	rjmp	.+148    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    2bb6:	ea e3       	ldi	r30, 0x3A	; 58
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	10 82       	st	Z, r1
    2bbc:	46 c0       	rjmp	.+140    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	39 87       	std	Y+9, r19	; 0x09
    2bc6:	28 87       	std	Y+8, r18	; 0x08
    2bc8:	88 85       	ldd	r24, Y+8	; 0x08
    2bca:	99 85       	ldd	r25, Y+9	; 0x09
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	51 f0       	breq	.+20     	; 0x2be4 <DIO_enu_SetPortDirection+0xc8>
    2bd0:	28 85       	ldd	r18, Y+8	; 0x08
    2bd2:	39 85       	ldd	r19, Y+9	; 0x09
    2bd4:	21 30       	cpi	r18, 0x01	; 1
    2bd6:	31 05       	cpc	r19, r1
    2bd8:	c1 f5       	brne	.+112    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    2bda:	e7 e3       	ldi	r30, 0x37	; 55
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	8f ef       	ldi	r24, 0xFF	; 255
    2be0:	80 83       	st	Z, r24
    2be2:	33 c0       	rjmp	.+102    	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    2be4:	e7 e3       	ldi	r30, 0x37	; 55
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	10 82       	st	Z, r1
    2bea:	2f c0       	rjmp	.+94     	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	3f 83       	std	Y+7, r19	; 0x07
    2bf4:	2e 83       	std	Y+6, r18	; 0x06
    2bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	51 f0       	breq	.+20     	; 0x2c12 <DIO_enu_SetPortDirection+0xf6>
    2bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    2c00:	3f 81       	ldd	r19, Y+7	; 0x07
    2c02:	21 30       	cpi	r18, 0x01	; 1
    2c04:	31 05       	cpc	r19, r1
    2c06:	09 f5       	brne	.+66     	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    2c08:	e4 e3       	ldi	r30, 0x34	; 52
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	80 83       	st	Z, r24
    2c10:	1c c0       	rjmp	.+56     	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    2c12:	e4 e3       	ldi	r30, 0x34	; 52
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	10 82       	st	Z, r1
    2c18:	18 c0       	rjmp	.+48     	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	3d 83       	std	Y+5, r19	; 0x05
    2c22:	2c 83       	std	Y+4, r18	; 0x04
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	9d 81       	ldd	r25, Y+5	; 0x05
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	51 f0       	breq	.+20     	; 0x2c40 <DIO_enu_SetPortDirection+0x124>
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c30:	21 30       	cpi	r18, 0x01	; 1
    2c32:	31 05       	cpc	r19, r1
    2c34:	51 f4       	brne	.+20     	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    2c36:	e1 e3       	ldi	r30, 0x31	; 49
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	8f ef       	ldi	r24, 0xFF	; 255
    2c3c:	80 83       	st	Z, r24
    2c3e:	05 c0       	rjmp	.+10     	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    2c40:	e1 e3       	ldi	r30, 0x31	; 49
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	10 82       	st	Z, r1
    2c46:	01 c0       	rjmp	.+2      	; 0x2c4a <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    2c48:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c4c:	2d 96       	adiw	r28, 0x0d	; 13
    2c4e:	0f b6       	in	r0, 0x3f	; 63
    2c50:	f8 94       	cli
    2c52:	de bf       	out	0x3e, r29	; 62
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	cd bf       	out	0x3d, r28	; 61
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <DIO_enu_SetPortValue+0x6>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <DIO_enu_SetPortValue+0x8>
    2c66:	0f 92       	push	r0
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
    2c6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	84 30       	cpi	r24, 0x04	; 4
    2c78:	98 f5       	brcc	.+102    	; 0x2ce0 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	3d 83       	std	Y+5, r19	; 0x05
    2c82:	2c 83       	std	Y+4, r18	; 0x04
    2c84:	8c 81       	ldd	r24, Y+4	; 0x04
    2c86:	9d 81       	ldd	r25, Y+5	; 0x05
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	d1 f0       	breq	.+52     	; 0x2cc2 <DIO_enu_SetPortValue+0x64>
    2c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c90:	3d 81       	ldd	r19, Y+5	; 0x05
    2c92:	22 30       	cpi	r18, 0x02	; 2
    2c94:	31 05       	cpc	r19, r1
    2c96:	2c f4       	brge	.+10     	; 0x2ca2 <DIO_enu_SetPortValue+0x44>
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9c:	00 97       	sbiw	r24, 0x00	; 0
    2c9e:	61 f0       	breq	.+24     	; 0x2cb8 <DIO_enu_SetPortValue+0x5a>
    2ca0:	20 c0       	rjmp	.+64     	; 0x2ce2 <DIO_enu_SetPortValue+0x84>
    2ca2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca6:	22 30       	cpi	r18, 0x02	; 2
    2ca8:	31 05       	cpc	r19, r1
    2caa:	81 f0       	breq	.+32     	; 0x2ccc <DIO_enu_SetPortValue+0x6e>
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb0:	83 30       	cpi	r24, 0x03	; 3
    2cb2:	91 05       	cpc	r25, r1
    2cb4:	81 f0       	breq	.+32     	; 0x2cd6 <DIO_enu_SetPortValue+0x78>
    2cb6:	15 c0       	rjmp	.+42     	; 0x2ce2 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    2cb8:	eb e3       	ldi	r30, 0x3B	; 59
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	80 83       	st	Z, r24
    2cc0:	10 c0       	rjmp	.+32     	; 0x2ce2 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    2cc2:	e8 e3       	ldi	r30, 0x38	; 56
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	80 83       	st	Z, r24
    2cca:	0b c0       	rjmp	.+22     	; 0x2ce2 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    2ccc:	e5 e3       	ldi	r30, 0x35	; 53
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	80 83       	st	Z, r24
    2cd4:	06 c0       	rjmp	.+12     	; 0x2ce2 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    2cd6:	e2 e3       	ldi	r30, 0x32	; 50
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	80 83       	st	Z, r24
    2cde:	01 c0       	rjmp	.+2      	; 0x2ce2 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    2ce0:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    2cf4:	df 93       	push	r29
    2cf6:	cf 93       	push	r28
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <DIO_enu_GetPortValue+0x6>
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <DIO_enu_GetPortValue+0x8>
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <DIO_enu_GetPortValue+0xa>
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	8a 83       	std	Y+2, r24	; 0x02
    2d04:	7c 83       	std	Y+4, r23	; 0x04
    2d06:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	84 30       	cpi	r24, 0x04	; 4
    2d10:	08 f0       	brcs	.+2      	; 0x2d14 <DIO_enu_GetPortValue+0x20>
    2d12:	3f c0       	rjmp	.+126    	; 0x2d92 <DIO_enu_GetPortValue+0x9e>
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	d9 f1       	breq	.+118    	; 0x2d92 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	3e 83       	std	Y+6, r19	; 0x06
    2d24:	2d 83       	std	Y+5, r18	; 0x05
    2d26:	8d 81       	ldd	r24, Y+5	; 0x05
    2d28:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	e1 f0       	breq	.+56     	; 0x2d68 <DIO_enu_GetPortValue+0x74>
    2d30:	2d 81       	ldd	r18, Y+5	; 0x05
    2d32:	3e 81       	ldd	r19, Y+6	; 0x06
    2d34:	22 30       	cpi	r18, 0x02	; 2
    2d36:	31 05       	cpc	r19, r1
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <DIO_enu_GetPortValue+0x50>
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	61 f0       	breq	.+24     	; 0x2d5a <DIO_enu_GetPortValue+0x66>
    2d42:	28 c0       	rjmp	.+80     	; 0x2d94 <DIO_enu_GetPortValue+0xa0>
    2d44:	2d 81       	ldd	r18, Y+5	; 0x05
    2d46:	3e 81       	ldd	r19, Y+6	; 0x06
    2d48:	22 30       	cpi	r18, 0x02	; 2
    2d4a:	31 05       	cpc	r19, r1
    2d4c:	a1 f0       	breq	.+40     	; 0x2d76 <DIO_enu_GetPortValue+0x82>
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	83 30       	cpi	r24, 0x03	; 3
    2d54:	91 05       	cpc	r25, r1
    2d56:	b1 f0       	breq	.+44     	; 0x2d84 <DIO_enu_GetPortValue+0x90>
    2d58:	1d c0       	rjmp	.+58     	; 0x2d94 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    2d5a:	e9 e3       	ldi	r30, 0x39	; 57
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	80 81       	ld	r24, Z
    2d60:	eb 81       	ldd	r30, Y+3	; 0x03
    2d62:	fc 81       	ldd	r31, Y+4	; 0x04
    2d64:	80 83       	st	Z, r24
    2d66:	16 c0       	rjmp	.+44     	; 0x2d94 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    2d68:	e6 e3       	ldi	r30, 0x36	; 54
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	80 81       	ld	r24, Z
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	80 83       	st	Z, r24
    2d74:	0f c0       	rjmp	.+30     	; 0x2d94 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    2d76:	e3 e3       	ldi	r30, 0x33	; 51
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d80:	80 83       	st	Z, r24
    2d82:	08 c0       	rjmp	.+16     	; 0x2d94 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    2d84:	e0 e3       	ldi	r30, 0x30	; 48
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8e:	80 83       	st	Z, r24
    2d90:	01 c0       	rjmp	.+2      	; 0x2d94 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    2d92:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d96:	26 96       	adiw	r28, 0x06	; 6
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <ADC_enu_Init>:
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;

ES_t ADC_enu_Init(void){
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
      4- Select CLK/128
      5- Enable ADC  
      */
    /*************Voltage Referance************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    2db0:	a7 e2       	ldi	r26, 0x27	; 39
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	e7 e2       	ldi	r30, 0x27	; 39
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	8f 77       	andi	r24, 0x7F	; 127
    2dbc:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    2dbe:	a7 e2       	ldi	r26, 0x27	; 39
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e7 e2       	ldi	r30, 0x27	; 39
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	80 64       	ori	r24, 0x40	; 64
    2dca:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
   /*************Presentation************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    2dcc:	a7 e2       	ldi	r26, 0x27	; 39
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e7 e2       	ldi	r30, 0x27	; 39
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	8f 7d       	andi	r24, 0xDF	; 223
    2dd8:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
    /*************Conversion Mode************/
    #if ADC_CONVERSION_MODE == START_CONVERSION
    CLR_BIT(ADCSRA_REG,ADATE);
    2dda:	a6 e2       	ldi	r26, 0x26	; 38
    2ddc:	b0 e0       	ldi	r27, 0x00	; 0
    2dde:	e6 e2       	ldi	r30, 0x26	; 38
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	80 81       	ld	r24, Z
    2de4:	8f 7d       	andi	r24, 0xDF	; 223
    2de6:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
    /*************Division Factor************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    2de8:	a6 e2       	ldi	r26, 0x26	; 38
    2dea:	b0 e0       	ldi	r27, 0x00	; 0
    2dec:	e6 e2       	ldi	r30, 0x26	; 38
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	87 60       	ori	r24, 0x07	; 7
    2df4:	8c 93       	st	X, r24
    /************* Enable ADC ************/
    SET_BIT(ADCSRA_REG,ADEN);
    2df6:	a6 e2       	ldi	r26, 0x26	; 38
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e6 e2       	ldi	r30, 0x26	; 38
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	80 68       	ori	r24, 0x80	; 128
    2e02:	8c 93       	st	X, r24
    return STATE_OK;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
}
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <ADC_enu_GetDigitalValueSynchNonBlocking>:

ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	28 97       	sbiw	r28, 0x08	; 8
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	8e 83       	std	Y+6, r24	; 0x06
    2e22:	78 87       	std	Y+8, r23	; 0x08
    2e24:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    2e2a:	19 82       	std	Y+1, r1	; 0x01
    2e2c:	1a 82       	std	Y+2, r1	; 0x02
    2e2e:	1b 82       	std	Y+3, r1	; 0x03
    2e30:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    2e32:	8e 81       	ldd	r24, Y+6	; 0x06
    2e34:	80 32       	cpi	r24, 0x20	; 32
    2e36:	08 f0       	brcs	.+2      	; 0x2e3a <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    2e38:	65 c0       	rjmp	.+202    	; 0x2f04 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    2e3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3c:	98 85       	ldd	r25, Y+8	; 0x08
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    2e42:	60 c0       	rjmp	.+192    	; 0x2f04 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    2e44:	80 91 92 00 	lds	r24, 0x0092
    2e48:	88 23       	and	r24, r24
    2e4a:	09 f0       	breq	.+2      	; 0x2e4e <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    2e4c:	5b c0       	rjmp	.+182    	; 0x2f04 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	80 93 92 00 	sts	0x0092, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    2e54:	a7 e2       	ldi	r26, 0x27	; 39
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e7 e2       	ldi	r30, 0x27	; 39
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	80 7e       	andi	r24, 0xE0	; 224
    2e60:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    2e62:	a7 e2       	ldi	r26, 0x27	; 39
    2e64:	b0 e0       	ldi	r27, 0x00	; 0
    2e66:	e7 e2       	ldi	r30, 0x27	; 39
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	90 81       	ld	r25, Z
    2e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6e:	89 2b       	or	r24, r25
    2e70:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    2e72:	a6 e2       	ldi	r26, 0x26	; 38
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e6 e2       	ldi	r30, 0x26	; 38
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	80 64       	ori	r24, 0x40	; 64
    2e7e:	8c 93       	st	X, r24
    2e80:	0b c0       	rjmp	.+22     	; 0x2e98 <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	ab 81       	ldd	r26, Y+3	; 0x03
    2e88:	bc 81       	ldd	r27, Y+4	; 0x04
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	b1 1d       	adc	r27, r1
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	9a 83       	std	Y+2, r25	; 0x02
    2e94:	ab 83       	std	Y+3, r26	; 0x03
    2e96:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    2e98:	e6 e2       	ldi	r30, 0x26	; 38
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	82 95       	swap	r24
    2ea0:	8f 70       	andi	r24, 0x0F	; 15
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	81 70       	andi	r24, 0x01	; 1
    2ea8:	90 70       	andi	r25, 0x00	; 0
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	61 f4       	brne	.+24     	; 0x2ec6 <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb2:	ab 81       	ldd	r26, Y+3	; 0x03
    2eb4:	bc 81       	ldd	r27, Y+4	; 0x04
    2eb6:	80 35       	cpi	r24, 0x50	; 80
    2eb8:	23 ec       	ldi	r18, 0xC3	; 195
    2eba:	92 07       	cpc	r25, r18
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	a2 07       	cpc	r26, r18
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	b2 07       	cpc	r27, r18
    2ec4:	f0 f2       	brcs	.-68     	; 0x2e82 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    2ec6:	e6 e2       	ldi	r30, 0x26	; 38
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	82 95       	swap	r24
    2ece:	8f 70       	andi	r24, 0x0F	; 15
    2ed0:	88 2f       	mov	r24, r24
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	81 70       	andi	r24, 0x01	; 1
    2ed6:	90 70       	andi	r25, 0x00	; 0
    2ed8:	88 23       	and	r24, r24
    2eda:	91 f0       	breq	.+36     	; 0x2f00 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    2edc:	10 92 92 00 	sts	0x0092, r1
            SET_BIT(ADCSRA_REG,ADIF);
    2ee0:	a6 e2       	ldi	r26, 0x26	; 38
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e6 e2       	ldi	r30, 0x26	; 38
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 61       	ori	r24, 0x10	; 16
    2eec:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    2eee:	e4 e2       	ldi	r30, 0x24	; 36
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ef8:	f8 85       	ldd	r31, Y+8	; 0x08
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
    2efe:	03 c0       	rjmp	.+6      	; 0x2f06 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    2f00:	1d 82       	std	Y+5, r1	; 0x05
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2f04:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    2f06:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2f08:	28 96       	adiw	r28, 0x08	; 8
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <ADC_enu_GetDigitalValueASynch+0x6>
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <ADC_enu_GetDigitalValueASynch+0x8>
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	8a 83       	std	Y+2, r24	; 0x02
    2f28:	7c 83       	std	Y+4, r23	; 0x04
    2f2a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	80 32       	cpi	r24, 0x20	; 32
    2f34:	78 f5       	brcc	.+94     	; 0x2f94 <ADC_enu_GetDigitalValueASynch+0x7a>
    2f36:	8b 81       	ldd	r24, Y+3	; 0x03
    2f38:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	59 f1       	breq	.+86     	; 0x2f94 <ADC_enu_GetDigitalValueASynch+0x7a>
    2f3e:	80 91 92 00 	lds	r24, 0x0092
    2f42:	88 23       	and	r24, r24
    2f44:	39 f5       	brne	.+78     	; 0x2f94 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	80 93 92 00 	sts	0x0092, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f50:	90 93 91 00 	sts	0x0091, r25
    2f54:	80 93 90 00 	sts	0x0090, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    2f58:	a6 e2       	ldi	r26, 0x26	; 38
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	e6 e2       	ldi	r30, 0x26	; 38
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	80 81       	ld	r24, Z
    2f62:	88 60       	ori	r24, 0x08	; 8
    2f64:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    2f66:	a7 e2       	ldi	r26, 0x27	; 39
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e7 e2       	ldi	r30, 0x27	; 39
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	80 7e       	andi	r24, 0xE0	; 224
    2f72:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    2f74:	a7 e2       	ldi	r26, 0x27	; 39
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e7 e2       	ldi	r30, 0x27	; 39
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	90 81       	ld	r25, Z
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	89 2b       	or	r24, r25
    2f82:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    2f84:	a6 e2       	ldi	r26, 0x26	; 38
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e6 e2       	ldi	r30, 0x26	; 38
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	80 64       	ori	r24, 0x40	; 64
    2f90:	8c 93       	st	X, r24
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    2f94:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_errorState;
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <__vector_16>:
/***************ISR Function OF ADC*************/
void __vector_16(void){
    2fa6:	1f 92       	push	r1
    2fa8:	0f 92       	push	r0
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	0f 92       	push	r0
    2fae:	11 24       	eor	r1, r1
    2fb0:	2f 93       	push	r18
    2fb2:	3f 93       	push	r19
    2fb4:	4f 93       	push	r20
    2fb6:	5f 93       	push	r21
    2fb8:	6f 93       	push	r22
    2fba:	7f 93       	push	r23
    2fbc:	8f 93       	push	r24
    2fbe:	9f 93       	push	r25
    2fc0:	af 93       	push	r26
    2fc2:	bf 93       	push	r27
    2fc4:	ef 93       	push	r30
    2fc6:	ff 93       	push	r31
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	cd b7       	in	r28, 0x3d	; 61
    2fce:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    2fd0:	80 91 90 00 	lds	r24, 0x0090
    2fd4:	90 91 91 00 	lds	r25, 0x0091
    2fd8:	00 97       	sbiw	r24, 0x00	; 0
    2fda:	99 f0       	breq	.+38     	; 0x3002 <__vector_16+0x5c>
        //Clear ADC Flag & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    2fdc:	a6 e2       	ldi	r26, 0x26	; 38
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e6 e2       	ldi	r30, 0x26	; 38
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	87 7f       	andi	r24, 0xF7	; 247
    2fe8:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    2fea:	10 92 92 00 	sts	0x0092, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    2fee:	20 91 90 00 	lds	r18, 0x0090
    2ff2:	30 91 91 00 	lds	r19, 0x0091
    2ff6:	e4 e2       	ldi	r30, 0x24	; 36
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	91 81       	ldd	r25, Z+1	; 0x01
    2ffe:	f9 01       	movw	r30, r18
    3000:	09 95       	icall
    }
   

    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	ff 91       	pop	r31
    3008:	ef 91       	pop	r30
    300a:	bf 91       	pop	r27
    300c:	af 91       	pop	r26
    300e:	9f 91       	pop	r25
    3010:	8f 91       	pop	r24
    3012:	7f 91       	pop	r23
    3014:	6f 91       	pop	r22
    3016:	5f 91       	pop	r21
    3018:	4f 91       	pop	r20
    301a:	3f 91       	pop	r19
    301c:	2f 91       	pop	r18
    301e:	0f 90       	pop	r0
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	0f 90       	pop	r0
    3024:	1f 90       	pop	r1
    3026:	18 95       	reti

00003028 <__mulsi3>:
    3028:	62 9f       	mul	r22, r18
    302a:	d0 01       	movw	r26, r0
    302c:	73 9f       	mul	r23, r19
    302e:	f0 01       	movw	r30, r0
    3030:	82 9f       	mul	r24, r18
    3032:	e0 0d       	add	r30, r0
    3034:	f1 1d       	adc	r31, r1
    3036:	64 9f       	mul	r22, r20
    3038:	e0 0d       	add	r30, r0
    303a:	f1 1d       	adc	r31, r1
    303c:	92 9f       	mul	r25, r18
    303e:	f0 0d       	add	r31, r0
    3040:	83 9f       	mul	r24, r19
    3042:	f0 0d       	add	r31, r0
    3044:	74 9f       	mul	r23, r20
    3046:	f0 0d       	add	r31, r0
    3048:	65 9f       	mul	r22, r21
    304a:	f0 0d       	add	r31, r0
    304c:	99 27       	eor	r25, r25
    304e:	72 9f       	mul	r23, r18
    3050:	b0 0d       	add	r27, r0
    3052:	e1 1d       	adc	r30, r1
    3054:	f9 1f       	adc	r31, r25
    3056:	63 9f       	mul	r22, r19
    3058:	b0 0d       	add	r27, r0
    305a:	e1 1d       	adc	r30, r1
    305c:	f9 1f       	adc	r31, r25
    305e:	bd 01       	movw	r22, r26
    3060:	cf 01       	movw	r24, r30
    3062:	11 24       	eor	r1, r1
    3064:	08 95       	ret

00003066 <__udivmodsi4>:
    3066:	a1 e2       	ldi	r26, 0x21	; 33
    3068:	1a 2e       	mov	r1, r26
    306a:	aa 1b       	sub	r26, r26
    306c:	bb 1b       	sub	r27, r27
    306e:	fd 01       	movw	r30, r26
    3070:	0d c0       	rjmp	.+26     	; 0x308c <__udivmodsi4_ep>

00003072 <__udivmodsi4_loop>:
    3072:	aa 1f       	adc	r26, r26
    3074:	bb 1f       	adc	r27, r27
    3076:	ee 1f       	adc	r30, r30
    3078:	ff 1f       	adc	r31, r31
    307a:	a2 17       	cp	r26, r18
    307c:	b3 07       	cpc	r27, r19
    307e:	e4 07       	cpc	r30, r20
    3080:	f5 07       	cpc	r31, r21
    3082:	20 f0       	brcs	.+8      	; 0x308c <__udivmodsi4_ep>
    3084:	a2 1b       	sub	r26, r18
    3086:	b3 0b       	sbc	r27, r19
    3088:	e4 0b       	sbc	r30, r20
    308a:	f5 0b       	sbc	r31, r21

0000308c <__udivmodsi4_ep>:
    308c:	66 1f       	adc	r22, r22
    308e:	77 1f       	adc	r23, r23
    3090:	88 1f       	adc	r24, r24
    3092:	99 1f       	adc	r25, r25
    3094:	1a 94       	dec	r1
    3096:	69 f7       	brne	.-38     	; 0x3072 <__udivmodsi4_loop>
    3098:	60 95       	com	r22
    309a:	70 95       	com	r23
    309c:	80 95       	com	r24
    309e:	90 95       	com	r25
    30a0:	9b 01       	movw	r18, r22
    30a2:	ac 01       	movw	r20, r24
    30a4:	bd 01       	movw	r22, r26
    30a6:	cf 01       	movw	r24, r30
    30a8:	08 95       	ret

000030aa <__prologue_saves__>:
    30aa:	2f 92       	push	r2
    30ac:	3f 92       	push	r3
    30ae:	4f 92       	push	r4
    30b0:	5f 92       	push	r5
    30b2:	6f 92       	push	r6
    30b4:	7f 92       	push	r7
    30b6:	8f 92       	push	r8
    30b8:	9f 92       	push	r9
    30ba:	af 92       	push	r10
    30bc:	bf 92       	push	r11
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	ca 1b       	sub	r28, r26
    30d4:	db 0b       	sbc	r29, r27
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	09 94       	ijmp

000030e2 <__epilogue_restores__>:
    30e2:	2a 88       	ldd	r2, Y+18	; 0x12
    30e4:	39 88       	ldd	r3, Y+17	; 0x11
    30e6:	48 88       	ldd	r4, Y+16	; 0x10
    30e8:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ea:	6e 84       	ldd	r6, Y+14	; 0x0e
    30ec:	7d 84       	ldd	r7, Y+13	; 0x0d
    30ee:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30f4:	b9 84       	ldd	r11, Y+9	; 0x09
    30f6:	c8 84       	ldd	r12, Y+8	; 0x08
    30f8:	df 80       	ldd	r13, Y+7	; 0x07
    30fa:	ee 80       	ldd	r14, Y+6	; 0x06
    30fc:	fd 80       	ldd	r15, Y+5	; 0x05
    30fe:	0c 81       	ldd	r16, Y+4	; 0x04
    3100:	1b 81       	ldd	r17, Y+3	; 0x03
    3102:	aa 81       	ldd	r26, Y+2	; 0x02
    3104:	b9 81       	ldd	r27, Y+1	; 0x01
    3106:	ce 0f       	add	r28, r30
    3108:	d1 1d       	adc	r29, r1
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	ed 01       	movw	r28, r26
    3116:	08 95       	ret

00003118 <_exit>:
    3118:	f8 94       	cli

0000311a <__stop_program>:
    311a:	ff cf       	rjmp	.-2      	; 0x311a <__stop_program>
