
Modified_DashBoard_UsingTimers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00004b38  00004bcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800156  00800156  00004cc2  2**0
                  ALLOC
  3 .stab         00005688  00000000  00000000  00004cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fb4  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000c300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000c460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000c5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000e634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000f735  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000106b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00010afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011388  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__vector_1>
       8:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__vector_2>
       c:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 34 1c 	jmp	0x3868	; 0x3868 <__vector_7>
      20:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__vector_8>
      24:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__vector_9>
      28:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__vector_10>
      2c:	0c 94 00 1d 	jmp	0x3a00	; 0x3a00 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cd 24 	jmp	0x499a	; 0x499a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <main>
      8a:	0c 94 9a 25 	jmp	0x4b34	; 0x4b34 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e1       	ldi	r26, 0x1E	; 30
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e1       	ldi	r24, 0x1E	; 30
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6b 25 	jmp	0x4ad6	; 0x4ad6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e1       	ldi	r22, 0x1E	; 30
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 87 25 	jmp	0x4b0e	; 0x4b0e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8f 25 	jmp	0x4b1e	; 0x4b1e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <displayOptionsPage>:
#include"../2-HAL/Servo_Motor/Servo_Interface.h"
#define delay				1000 //ms
/* ********************Set your own password************* */
#define PasswordLength      5
#define Password          "51120"
void displayOptionsPage(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     ca6:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
	LCD_enu_SendString("1-DC    3-Servo");
     caa:	80 e6       	ldi	r24, 0x60	; 96
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Stepper 4-Exit");
     cba:	80 e7       	ldi	r24, 0x70	; 112
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
}
     cc2:	cf 91       	pop	r28
     cc4:	df 91       	pop	r29
     cc6:	08 95       	ret

00000cc8 <takeUserOption>:
void takeUserOption(u8 *option){
     cc8:	df 93       	push	r29
     cca:	cf 93       	push	r28
     ccc:	00 d0       	rcall	.+0      	; 0xcce <takeUserOption+0x6>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Keypad_enu_getKey(option);
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Keypad_enu_getKey>
		if(*option == '1' || *option == '2' || *option == '3' || *option == '4')break;
     cde:	e9 81       	ldd	r30, Y+1	; 0x01
     ce0:	fa 81       	ldd	r31, Y+2	; 0x02
     ce2:	80 81       	ld	r24, Z
     ce4:	81 33       	cpi	r24, 0x31	; 49
     ce6:	79 f0       	breq	.+30     	; 0xd06 <takeUserOption+0x3e>
     ce8:	e9 81       	ldd	r30, Y+1	; 0x01
     cea:	fa 81       	ldd	r31, Y+2	; 0x02
     cec:	80 81       	ld	r24, Z
     cee:	82 33       	cpi	r24, 0x32	; 50
     cf0:	51 f0       	breq	.+20     	; 0xd06 <takeUserOption+0x3e>
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	80 81       	ld	r24, Z
     cf8:	83 33       	cpi	r24, 0x33	; 51
     cfa:	29 f0       	breq	.+10     	; 0xd06 <takeUserOption+0x3e>
     cfc:	e9 81       	ldd	r30, Y+1	; 0x01
     cfe:	fa 81       	ldd	r31, Y+2	; 0x02
     d00:	80 81       	ld	r24, Z
     d02:	84 33       	cpi	r24, 0x34	; 52
     d04:	41 f7       	brne	.-48     	; 0xcd6 <takeUserOption+0xe>
	}
}
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <displayRotationOptions>:
void displayRotationOptions(){
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     d18:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
	LCD_enu_SendString("1-Rotate CW ");
     d1c:	81 e8       	ldi	r24, 0x81	; 129
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Rotate CCW");
     d2c:	8e e8       	ldi	r24, 0x8E	; 142
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <returnAngle>:
u16 returnAngle(u8 * array){
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <returnAngle+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <returnAngle+0x8>
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	9d 83       	std	Y+5, r25	; 0x05
     d4a:	8c 83       	std	Y+4, r24	; 0x04
	u16 k = 0;
     d4c:	1b 82       	std	Y+3, r1	; 0x03
     d4e:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i = 0 ; i<3 ; i++){
     d50:	19 82       	std	Y+1, r1	; 0x01
     d52:	2b c0       	rjmp	.+86     	; 0xdaa <returnAngle+0x70>
		// ignore non entered digits
		if(array[i] == 'a') break;
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	8c 81       	ldd	r24, Y+4	; 0x04
     d5c:	9d 81       	ldd	r25, Y+5	; 0x05
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 0f       	add	r30, r18
     d62:	f3 1f       	adc	r31, r19
     d64:	80 81       	ld	r24, Z
     d66:	81 36       	cpi	r24, 0x61	; 97
     d68:	19 f1       	breq	.+70     	; 0xdb0 <returnAngle+0x76>
		k = k*10 + (array[i] - '0');
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	9c 01       	movw	r18, r24
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	c9 01       	movw	r24, r18
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	a9 01       	movw	r20, r18
     d80:	48 0f       	add	r20, r24
     d82:	59 1f       	adc	r21, r25
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	fc 01       	movw	r30, r24
     d90:	e2 0f       	add	r30, r18
     d92:	f3 1f       	adc	r31, r19
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	84 0f       	add	r24, r20
     d9c:	95 1f       	adc	r25, r21
     d9e:	c0 97       	sbiw	r24, 0x30	; 48
     da0:	9b 83       	std	Y+3, r25	; 0x03
     da2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_enu_SetCursor(1, 0);
	LCD_enu_SendString("2-Rotate CCW");
}
u16 returnAngle(u8 * array){
	u16 k = 0;
	for(u8 i = 0 ; i<3 ; i++){
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	8f 5f       	subi	r24, 0xFF	; 255
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	83 30       	cpi	r24, 0x03	; 3
     dae:	90 f2       	brcs	.-92     	; 0xd54 <returnAngle+0x1a>
		// ignore non entered digits
		if(array[i] == 'a') break;
		k = k*10 + (array[i] - '0');
	}
	return k;
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	9b 81       	ldd	r25, Y+3	; 0x03
}
     db4:	0f 90       	pop	r0
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <main>:
int main(void){
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	a0 97       	sbiw	r28, 0x20	; 32
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
	Keypad_enu_Init();
     dd8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <Keypad_enu_Init>
	LCD_enu_Init();
     ddc:	0e 94 d7 11 	call	0x23ae	; 0x23ae <LCD_enu_Init>
	DC_Motor_enu_Init(1, 1);
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <DC_Motor_enu_Init>
	STEP_Motor_enu_Init();
     de8:	0e 94 c4 09 	call	0x1388	; 0x1388 <STEP_Motor_enu_Init>
	Servo_enu_Init();
     dec:	0e 94 a0 0c 	call	0x1940	; 0x1940 <Servo_enu_Init>
	Timers_enu_Init(TIMER0, NORMAL_MODE, CLK_8);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	42 e0       	ldi	r20, 0x02	; 2
     df6:	0e 94 02 18 	call	0x3004	; 0x3004 <Timers_enu_Init>
	u8 savedPass[] = Password , pass[PasswordLength], Index=0, checkCounter = 0,homeFlag = 0,inputFlag = 0;
     dfa:	ce 01       	movw	r24, r28
     dfc:	09 96       	adiw	r24, 0x09	; 9
     dfe:	9d 8f       	std	Y+29, r25	; 0x1d
     e00:	8c 8f       	std	Y+28, r24	; 0x1c
     e02:	e8 e1       	ldi	r30, 0x18	; 24
     e04:	f1 e0       	ldi	r31, 0x01	; 1
     e06:	ff 8f       	std	Y+31, r31	; 0x1f
     e08:	ee 8f       	std	Y+30, r30	; 0x1e
     e0a:	f6 e0       	ldi	r31, 0x06	; 6
     e0c:	f8 a3       	std	Y+32, r31	; 0x20
     e0e:	ee 8d       	ldd	r30, Y+30	; 0x1e
     e10:	ff 8d       	ldd	r31, Y+31	; 0x1f
     e12:	00 80       	ld	r0, Z
     e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e16:	9f 8d       	ldd	r25, Y+31	; 0x1f
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	9f 8f       	std	Y+31, r25	; 0x1f
     e1c:	8e 8f       	std	Y+30, r24	; 0x1e
     e1e:	ec 8d       	ldd	r30, Y+28	; 0x1c
     e20:	fd 8d       	ldd	r31, Y+29	; 0x1d
     e22:	00 82       	st	Z, r0
     e24:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e26:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	9d 8f       	std	Y+29, r25	; 0x1d
     e2c:	8c 8f       	std	Y+28, r24	; 0x1c
     e2e:	98 a1       	ldd	r25, Y+32	; 0x20
     e30:	91 50       	subi	r25, 0x01	; 1
     e32:	98 a3       	std	Y+32, r25	; 0x20
     e34:	e8 a1       	ldd	r30, Y+32	; 0x20
     e36:	ee 23       	and	r30, r30
     e38:	51 f7       	brne	.-44     	; 0xe0e <main+0x4a>
     e3a:	18 86       	std	Y+8, r1	; 0x08
     e3c:	1f 82       	std	Y+7, r1	; 0x07
     e3e:	1e 82       	std	Y+6, r1	; 0x06
     e40:	1d 82       	std	Y+5, r1	; 0x05
	LCD_enu_SendString("Hello, User :)");
     e42:	8b e9       	ldi	r24, 0x9B	; 155
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
	Timers_enu_delay_ms(delay);
     e4a:	68 ee       	ldi	r22, 0xE8	; 232
     e4c:	73 e0       	ldi	r23, 0x03	; 3
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
	LCD_enu_Clear();
     e56:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     e5a:	8a ea       	ldi	r24, 0xAA	; 170
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
	while(1){
		/************************************ Taking Password Section*************************************/
		u8 key=0,order = 0;
     e6a:	1c 8a       	std	Y+20, r1	; 0x14
     e6c:	1d 8a       	std	Y+21, r1	; 0x15
		Keypad_enu_getKey(&key);
     e6e:	ce 01       	movw	r24, r28
     e70:	44 96       	adiw	r24, 0x14	; 20
     e72:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Keypad_enu_getKey>
		if(key != KEYPAD_U8_NO_KEY_PRESSED){
     e76:	8c 89       	ldd	r24, Y+20	; 0x14
     e78:	8f 3f       	cpi	r24, 0xFF	; 255
     e7a:	99 f0       	breq	.+38     	; 0xea2 <main+0xde>
			LCD_enu_SendChar('*');
     e7c:	8a e2       	ldi	r24, 0x2A	; 42
     e7e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>
			pass[Index] = key;
     e82:	88 85       	ldd	r24, Y+8	; 0x08
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4c 89       	ldd	r20, Y+20	; 0x14
     e8a:	ce 01       	movw	r24, r28
     e8c:	0f 96       	adiw	r24, 0x0f	; 15
     e8e:	fc 01       	movw	r30, r24
     e90:	e2 0f       	add	r30, r18
     e92:	f3 1f       	adc	r31, r19
     e94:	40 83       	st	Z, r20
			Index++;
     e96:	88 85       	ldd	r24, Y+8	; 0x08
     e98:	8f 5f       	subi	r24, 0xFF	; 255
     e9a:	88 87       	std	Y+8, r24	; 0x08
			checkCounter++;
     e9c:	8f 81       	ldd	r24, Y+7	; 0x07
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	8f 83       	std	Y+7, r24	; 0x07
		}
		if(checkCounter == PasswordLength){
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	85 30       	cpi	r24, 0x05	; 5
     ea6:	09 f7       	brne	.-62     	; 0xe6a <main+0xa6>
			for(int j =0 ;j<PasswordLength ; j++){
     ea8:	1c 82       	std	Y+4, r1	; 0x04
     eaa:	1b 82       	std	Y+3, r1	; 0x03
     eac:	1a c0       	rjmp	.+52     	; 0xee2 <main+0x11e>
				if(pass[j] != savedPass[j]){
     eae:	2b 81       	ldd	r18, Y+3	; 0x03
     eb0:	3c 81       	ldd	r19, Y+4	; 0x04
     eb2:	ce 01       	movw	r24, r28
     eb4:	0f 96       	adiw	r24, 0x0f	; 15
     eb6:	fc 01       	movw	r30, r24
     eb8:	e2 0f       	add	r30, r18
     eba:	f3 1f       	adc	r31, r19
     ebc:	40 81       	ld	r20, Z
     ebe:	2b 81       	ldd	r18, Y+3	; 0x03
     ec0:	3c 81       	ldd	r19, Y+4	; 0x04
     ec2:	ce 01       	movw	r24, r28
     ec4:	09 96       	adiw	r24, 0x09	; 9
     ec6:	fc 01       	movw	r30, r24
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	80 81       	ld	r24, Z
     ece:	48 17       	cp	r20, r24
     ed0:	19 f0       	breq	.+6      	; 0xed8 <main+0x114>
					inputFlag = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	8d 83       	std	Y+5, r24	; 0x05
     ed6:	0a c0       	rjmp	.+20     	; 0xeec <main+0x128>
			pass[Index] = key;
			Index++;
			checkCounter++;
		}
		if(checkCounter == PasswordLength){
			for(int j =0 ;j<PasswordLength ; j++){
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	9c 83       	std	Y+4, r25	; 0x04
     ee0:	8b 83       	std	Y+3, r24	; 0x03
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	9c 81       	ldd	r25, Y+4	; 0x04
     ee6:	85 30       	cpi	r24, 0x05	; 5
     ee8:	91 05       	cpc	r25, r1
     eea:	0c f3       	brlt	.-62     	; 0xeae <main+0xea>
				if(pass[j] != savedPass[j]){
					inputFlag = 1;
					break;
				}
			}
			if (inputFlag){
     eec:	8d 81       	ldd	r24, Y+5	; 0x05
     eee:	88 23       	and	r24, r24
     ef0:	11 f1       	breq	.+68     	; 0xf36 <main+0x172>
				Index =0;
     ef2:	18 86       	std	Y+8, r1	; 0x08
				checkCounter =0;
     ef4:	1f 82       	std	Y+7, r1	; 0x07
				inputFlag = 0;
     ef6:	1d 82       	std	Y+5, r1	; 0x05
				LCD_enu_Clear();
     ef8:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
				LCD_enu_SendString("Wrong Password");
     efc:	8a eb       	ldi	r24, 0xBA	; 186
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
				LCD_enu_SendString("Try Again!");
     f0c:	89 ec       	ldi	r24, 0xC9	; 201
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
				Timers_enu_delay_ms(delay);
     f14:	68 ee       	ldi	r22, 0xE8	; 232
     f16:	73 e0       	ldi	r23, 0x03	; 3
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
				LCD_enu_Clear();
     f20:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
				LCD_enu_SendString("Enter Password:");
     f24:	8a ea       	ldi	r24, 0xAA	; 170
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
     f34:	9a cf       	rjmp	.-204    	; 0xe6a <main+0xa6>
			}else{
				//To display this message only once
				if(!homeFlag){
     f36:	8e 81       	ldd	r24, Y+6	; 0x06
     f38:	88 23       	and	r24, r24
     f3a:	b1 f4       	brne	.+44     	; 0xf68 <main+0x1a4>
					LCD_enu_Clear();
     f3c:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
					LCD_enu_SendString("Welcome :)");
     f40:	84 ed       	ldi	r24, 0xD4	; 212
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
					LCD_enu_SendString("Choose Motor ..");
     f50:	8f ed       	ldi	r24, 0xDF	; 223
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
					homeFlag = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	8e 83       	std	Y+6, r24	; 0x06
					Timers_enu_delay_ms(delay);
     f5c:	68 ee       	ldi	r22, 0xE8	; 232
     f5e:	73 e0       	ldi	r23, 0x03	; 3
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
				}
				displayOptionsPage();
     f68:	0e 94 4f 06 	call	0xc9e	; 0xc9e <displayOptionsPage>
				takeUserOption(&order);
     f6c:	ce 01       	movw	r24, r28
     f6e:	45 96       	adiw	r24, 0x15	; 21
     f70:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
		/************************************DC Motor Section*************************************/
				if(order == '1'){
     f74:	8d 89       	ldd	r24, Y+21	; 0x15
     f76:	81 33       	cpi	r24, 0x31	; 49
     f78:	f9 f4       	brne	.+62     	; 0xfb8 <main+0x1f4>
					displayRotationOptions();
     f7a:	0e 94 88 06 	call	0xd10	; 0xd10 <displayRotationOptions>
					takeUserOption(&order);
     f7e:	ce 01       	movw	r24, r28
     f80:	45 96       	adiw	r24, 0x15	; 21
     f82:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
					// Rotate DC Motors CW
					if(order == '1'){
     f86:	8d 89       	ldd	r24, Y+21	; 0x15
     f88:	81 33       	cpi	r24, 0x31	; 49
     f8a:	49 f4       	brne	.+18     	; 0xf9e <main+0x1da>
						DC_Motor_enu_Rotate(MOTOR1, CW);
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	0e 94 24 17 	call	0x2e48	; 0x2e48 <DC_Motor_enu_Rotate>
						DC_Motor_enu_Rotate(MOTOR2, CW);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	0e 94 24 17 	call	0x2e48	; 0x2e48 <DC_Motor_enu_Rotate>
     f9c:	66 cf       	rjmp	.-308    	; 0xe6a <main+0xa6>
					}
					// Rotate DC Motors CCW
					else if (order == '2'){
     f9e:	8d 89       	ldd	r24, Y+21	; 0x15
     fa0:	82 33       	cpi	r24, 0x32	; 50
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <main+0x1e2>
     fa4:	62 cf       	rjmp	.-316    	; 0xe6a <main+0xa6>
						DC_Motor_enu_Rotate(MOTOR1, CCW);
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	0e 94 24 17 	call	0x2e48	; 0x2e48 <DC_Motor_enu_Rotate>
						DC_Motor_enu_Rotate(MOTOR2, CCW);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 24 17 	call	0x2e48	; 0x2e48 <DC_Motor_enu_Rotate>
     fb6:	59 cf       	rjmp	.-334    	; 0xe6a <main+0xa6>
					}
		/****************************** Stepper Motor Section **************************************/
				}else if(order == '2'){
     fb8:	8d 89       	ldd	r24, Y+21	; 0x15
     fba:	82 33       	cpi	r24, 0x32	; 50
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <main+0x1fc>
     fbe:	68 c0       	rjmp	.+208    	; 0x1090 <main+0x2cc>
					// Take Stepper Motor Angle
					LCD_enu_Clear();
     fc0:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
					LCD_enu_SendString("Enter Angle:");
     fc4:	8f ee       	ldi	r24, 0xEF	; 239
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
					u8 stepperMotorAngle[3],angleCounter = 0 ;
     fcc:	1a 82       	std	Y+2, r1	; 0x02
     fce:	30 c0       	rjmp	.+96     	; 0x1030 <main+0x26c>
					// Display and Storing Angle
					while(angleCounter!=3){
						Keypad_enu_getKey(&key);
     fd0:	ce 01       	movw	r24, r28
     fd2:	44 96       	adiw	r24, 0x14	; 20
     fd4:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Keypad_enu_getKey>
						if(key != KEYPAD_U8_NO_KEY_PRESSED && key != '='){
     fd8:	8c 89       	ldd	r24, Y+20	; 0x14
     fda:	8f 3f       	cpi	r24, 0xFF	; 255
     fdc:	d1 f0       	breq	.+52     	; 0x1012 <main+0x24e>
     fde:	8c 89       	ldd	r24, Y+20	; 0x14
     fe0:	8d 33       	cpi	r24, 0x3D	; 61
     fe2:	b9 f0       	breq	.+46     	; 0x1012 <main+0x24e>
							LCD_enu_SendChar(key);
     fe4:	8c 89       	ldd	r24, Y+20	; 0x14
     fe6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>

							stepperMotorAngle[angleCounter] = key;
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4c 89       	ldd	r20, Y+20	; 0x14
     ff2:	ce 01       	movw	r24, r28
     ff4:	46 96       	adiw	r24, 0x16	; 22
     ff6:	fc 01       	movw	r30, r24
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	40 83       	st	Z, r20
							angleCounter++;
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	8a 83       	std	Y+2, r24	; 0x02
							Timers_enu_delay_ms(200);
    1004:	68 ec       	ldi	r22, 0xC8	; 200
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <main+0x26c>
						}else if(key == '=') {
    1012:	8c 89       	ldd	r24, Y+20	; 0x14
    1014:	8d 33       	cpi	r24, 0x3D	; 61
    1016:	61 f4       	brne	.+24     	; 0x1030 <main+0x26c>
							// if user entered angle of one or two digits
							if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	19 f4       	brne	.+6      	; 0x1024 <main+0x260>
    101e:	81 e6       	ldi	r24, 0x61	; 97
    1020:	8f 8b       	std	Y+23, r24	; 0x17
    1022:	09 c0       	rjmp	.+18     	; 0x1036 <main+0x272>
							if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	19 f4       	brne	.+6      	; 0x1030 <main+0x26c>
    102a:	81 e6       	ldi	r24, 0x61	; 97
    102c:	88 8f       	std	Y+24, r24	; 0x18
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <main+0x272>
					// Take Stepper Motor Angle
					LCD_enu_Clear();
					LCD_enu_SendString("Enter Angle:");
					u8 stepperMotorAngle[3],angleCounter = 0 ;
					// Display and Storing Angle
					while(angleCounter!=3){
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	69 f6       	brne	.-102    	; 0xfd0 <main+0x20c>
							// if user entered angle of one or two digits
							if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
							if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
						}
					}
					displayRotationOptions();
    1036:	0e 94 88 06 	call	0xd10	; 0xd10 <displayRotationOptions>
					takeUserOption(&order);
    103a:	ce 01       	movw	r24, r28
    103c:	45 96       	adiw	r24, 0x15	; 21
    103e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <takeUserOption>
					// Rotate Stepper Motor CW With Entered Angle
					if(order == '1'){
    1042:	8d 89       	ldd	r24, Y+21	; 0x15
    1044:	81 33       	cpi	r24, 0x31	; 49
    1046:	81 f4       	brne	.+32     	; 0x1068 <main+0x2a4>
						STEP_Motor_enu_Rotate(CW, returnAngle(stepperMotorAngle) );
    1048:	ce 01       	movw	r24, r28
    104a:	46 96       	adiw	r24, 0x16	; 22
    104c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <returnAngle>
    1050:	9c 01       	movw	r18, r24
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	b9 01       	movw	r22, r18
    1056:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <STEP_Motor_enu_Rotate>
						Timers_enu_delay_ms(delay);
    105a:	68 ee       	ldi	r22, 0xE8	; 232
    105c:	73 e0       	ldi	r23, 0x03	; 3
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
    1066:	01 cf       	rjmp	.-510    	; 0xe6a <main+0xa6>
					}
					// Rotate Stepper Motor CCW With Entered Angle
					else if (order == '2'){
    1068:	8d 89       	ldd	r24, Y+21	; 0x15
    106a:	82 33       	cpi	r24, 0x32	; 50
    106c:	09 f0       	breq	.+2      	; 0x1070 <main+0x2ac>
    106e:	fd ce       	rjmp	.-518    	; 0xe6a <main+0xa6>
						STEP_Motor_enu_Rotate(CCW, returnAngle(stepperMotorAngle) );
    1070:	ce 01       	movw	r24, r28
    1072:	46 96       	adiw	r24, 0x16	; 22
    1074:	0e 94 9d 06 	call	0xd3a	; 0xd3a <returnAngle>
    1078:	9c 01       	movw	r18, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	b9 01       	movw	r22, r18
    107e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <STEP_Motor_enu_Rotate>
						Timers_enu_delay_ms(delay);
    1082:	68 ee       	ldi	r22, 0xE8	; 232
    1084:	73 e0       	ldi	r23, 0x03	; 3
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
    108e:	ed ce       	rjmp	.-550    	; 0xe6a <main+0xa6>
					}
		/****************************** Servo Motor Section **************************************/
				}else if(order == '3'){
    1090:	8d 89       	ldd	r24, Y+21	; 0x15
    1092:	83 33       	cpi	r24, 0x33	; 51
    1094:	09 f0       	breq	.+2      	; 0x1098 <main+0x2d4>
    1096:	42 c0       	rjmp	.+132    	; 0x111c <main+0x358>
					LCD_enu_Clear();
    1098:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
					LCD_enu_SendString("Enter Angle:");
    109c:	8f ee       	ldi	r24, 0xEF	; 239
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
					u8 servoMotorAngle[3],angleCounter = 0 ;
    10a4:	19 82       	std	Y+1, r1	; 0x01
    10a6:	30 c0       	rjmp	.+96     	; 0x1108 <main+0x344>
					// Display and Storing Angle
					while(angleCounter!=3){
						Keypad_enu_getKey(&key);
    10a8:	ce 01       	movw	r24, r28
    10aa:	44 96       	adiw	r24, 0x14	; 20
    10ac:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <Keypad_enu_getKey>
						if(key != KEYPAD_U8_NO_KEY_PRESSED && key != '='){
    10b0:	8c 89       	ldd	r24, Y+20	; 0x14
    10b2:	8f 3f       	cpi	r24, 0xFF	; 255
    10b4:	d1 f0       	breq	.+52     	; 0x10ea <main+0x326>
    10b6:	8c 89       	ldd	r24, Y+20	; 0x14
    10b8:	8d 33       	cpi	r24, 0x3D	; 61
    10ba:	b9 f0       	breq	.+46     	; 0x10ea <main+0x326>
							LCD_enu_SendChar(key);
    10bc:	8c 89       	ldd	r24, Y+20	; 0x14
    10be:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>
							servoMotorAngle[angleCounter] = key;
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	4c 89       	ldd	r20, Y+20	; 0x14
    10ca:	ce 01       	movw	r24, r28
    10cc:	49 96       	adiw	r24, 0x19	; 25
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	40 83       	st	Z, r20
							angleCounter++;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	89 83       	std	Y+1, r24	; 0x01
							Timers_enu_delay_ms(200);
    10dc:	68 ec       	ldi	r22, 0xC8	; 200
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <main+0x344>
						}else if(key == '=') {
    10ea:	8c 89       	ldd	r24, Y+20	; 0x14
    10ec:	8d 33       	cpi	r24, 0x3D	; 61
    10ee:	61 f4       	brne	.+24     	; 0x1108 <main+0x344>
							// if user entered angle of one or two digits
							if(angleCounter==1) {servoMotorAngle[1]  = 'a';break;}
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	19 f4       	brne	.+6      	; 0x10fc <main+0x338>
    10f6:	81 e6       	ldi	r24, 0x61	; 97
    10f8:	8a 8f       	std	Y+26, r24	; 0x1a
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <main+0x34a>
							if(angleCounter==2) {servoMotorAngle[2]  = 'a';break;}
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	82 30       	cpi	r24, 0x02	; 2
    1100:	19 f4       	brne	.+6      	; 0x1108 <main+0x344>
    1102:	81 e6       	ldi	r24, 0x61	; 97
    1104:	8b 8f       	std	Y+27, r24	; 0x1b
    1106:	03 c0       	rjmp	.+6      	; 0x110e <main+0x34a>
				}else if(order == '3'){
					LCD_enu_Clear();
					LCD_enu_SendString("Enter Angle:");
					u8 servoMotorAngle[3],angleCounter = 0 ;
					// Display and Storing Angle
					while(angleCounter!=3){
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	69 f6       	brne	.-102    	; 0x10a8 <main+0x2e4>
							// if user entered angle of one or two digits
							if(angleCounter==1) {servoMotorAngle[1]  = 'a';break;}
							if(angleCounter==2) {servoMotorAngle[2]  = 'a';break;}
						}
					}
					Servo_enu_SetAngle(returnAngle(servoMotorAngle));
    110e:	ce 01       	movw	r24, r28
    1110:	49 96       	adiw	r24, 0x19	; 25
    1112:	0e 94 9d 06 	call	0xd3a	; 0xd3a <returnAngle>
    1116:	0e 94 b7 0c 	call	0x196e	; 0x196e <Servo_enu_SetAngle>
    111a:	a7 ce       	rjmp	.-690    	; 0xe6a <main+0xa6>
		/********************************************* Exit Section *****************************************/
				}else if (order == '4'){
    111c:	8d 89       	ldd	r24, Y+21	; 0x15
    111e:	84 33       	cpi	r24, 0x34	; 52
    1120:	09 f0       	breq	.+2      	; 0x1124 <main+0x360>
    1122:	a3 ce       	rjmp	.-698    	; 0xe6a <main+0xa6>
					LCD_enu_Clear();
    1124:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
					LCD_enu_SendString("Exiting .. ");
    1128:	8c ef       	ldi	r24, 0xFC	; 252
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
					LCD_enu_SendString("Stopping Motors");
    1138:	88 e0       	ldi	r24, 0x08	; 8
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 02 11 	call	0x2204	; 0x2204 <LCD_enu_SendString>
					Timers_enu_delay_ms(delay);
    1140:	68 ee       	ldi	r22, 0xE8	; 232
    1142:	73 e0       	ldi	r23, 0x03	; 3
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 af 1a 	call	0x355e	; 0x355e <Timers_enu_delay_ms>
					LCD_enu_Clear();
    114c:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_enu_Clear>
					/*Stop All Motors*/
					DC_Motor_enu_Stop(MOTOR1);
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <DC_Motor_enu_Stop>
					DC_Motor_enu_Stop(MOTOR2);
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <DC_Motor_enu_Stop>
					STEP_Motor_enu_Stop();
    115c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <STEP_Motor_enu_Stop>
				}
			}
		}

	}
	return 0;
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
}
    1164:	a0 96       	adiw	r28, 0x20	; 32
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <SW_enu_Init>:
#include "Switch_Config.h"
#include "Switch_Private.h"


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <SW_enu_Init+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <SW_enu_Init+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	53 c0       	rjmp	.+166    	; 0x1230 <SW_enu_Init+0xba>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	28 0f       	add	r18, r24
    1198:	39 1f       	adc	r19, r25
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	fc 01       	movw	r30, r24
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	40 81       	ld	r20, Z
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	28 0f       	add	r18, r24
    11b4:	39 1f       	adc	r19, r25
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	fc 01       	movw	r30, r24
    11bc:	e2 0f       	add	r30, r18
    11be:	f3 1f       	adc	r31, r19
    11c0:	91 81       	ldd	r25, Z+1	; 0x01
    11c2:	84 2f       	mov	r24, r20
    11c4:	69 2f       	mov	r22, r25
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	c9 01       	movw	r24, r18
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	28 0f       	add	r18, r24
    11da:	39 1f       	adc	r19, r25
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	fc 01       	movw	r30, r24
    11e2:	e2 0f       	add	r30, r18
    11e4:	f3 1f       	adc	r31, r19
    11e6:	50 81       	ld	r21, Z
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	c9 01       	movw	r24, r18
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	28 0f       	add	r18, r24
    11f6:	39 1f       	adc	r19, r25
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	fc 01       	movw	r30, r24
    11fe:	e2 0f       	add	r30, r18
    1200:	f3 1f       	adc	r31, r19
    1202:	41 81       	ldd	r20, Z+1	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	c9 01       	movw	r24, r18
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	28 0f       	add	r18, r24
    1212:	39 1f       	adc	r19, r25
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	fc 01       	movw	r30, r24
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	92 81       	ldd	r25, Z+2	; 0x02
    1220:	85 2f       	mov	r24, r21
    1222:	64 2f       	mov	r22, r20
    1224:	49 2f       	mov	r20, r25
    1226:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>


ES_t SW_enu_Init(SW_t * Copy_Au8_Switchs)
{

    for(u8 i = 0 ; i < NUM_OF_SWITCHS;i++ ){
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	08 f4       	brcc	.+2      	; 0x1238 <SW_enu_Init+0xc2>
    1236:	a9 cf       	rjmp	.-174    	; 0x118a <SW_enu_Init+0x14>
    DIO_enu_SetPinDirection(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, DIO_U8_INPUT);
    DIO_enu_SetPinValue(Copy_Au8_Switchs[i].SW_Port, Copy_Au8_Switchs[i].SW_Pin, Copy_Au8_Switchs[i].SW_Initial_State);
    }

}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <SW_enu_getValue>:

ES_t SW_enu_getValue(u8 * Copy_u8_Value,SW_t * Copy_Au8_Switchs)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	63 97       	sbiw	r28, 0x13	; 19
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    125e:	7a 8b       	std	Y+18, r23	; 0x12
    1260:	69 8b       	std	Y+17, r22	; 0x11

    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    1262:	e9 89       	ldd	r30, Y+17	; 0x11
    1264:	fa 89       	ldd	r31, Y+18	; 0x12
    1266:	80 81       	ld	r24, Z
    1268:	e9 89       	ldd	r30, Y+17	; 0x11
    126a:	fa 89       	ldd	r31, Y+18	; 0x12
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1270:	38 89       	ldd	r19, Y+16	; 0x10
    1272:	69 2f       	mov	r22, r25
    1274:	a9 01       	movw	r20, r18
    1276:	0e 94 ef 21 	call	0x43de	; 0x43de <DIO_enu_GetPinValue>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a8 ec       	ldi	r26, 0xC8	; 200
    1280:	b1 e4       	ldi	r27, 0x41	; 65
    1282:	8b 87       	std	Y+11, r24	; 0x0b
    1284:	9c 87       	std	Y+12, r25	; 0x0c
    1286:	ad 87       	std	Y+13, r26	; 0x0d
    1288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	6b 85       	ldd	r22, Y+11	; 0x0b
    128c:	7c 85       	ldd	r23, Y+12	; 0x0c
    128e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1290:	9e 85       	ldd	r25, Y+14	; 0x0e
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	55 e4       	ldi	r21, 0x45	; 69
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8f 83       	std	Y+7, r24	; 0x07
    12a4:	98 87       	std	Y+8, r25	; 0x08
    12a6:	a9 87       	std	Y+9, r26	; 0x09
    12a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12aa:	6f 81       	ldd	r22, Y+7	; 0x07
    12ac:	78 85       	ldd	r23, Y+8	; 0x08
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <SW_enu_getValue+0x86>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <SW_enu_getValue+0x104>
	else if (__tmp > 65535)
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <SW_enu_getValue+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	0f c0       	rjmp	.+30     	; 0x132c <SW_enu_getValue+0xe6>
    130e:	80 e9       	ldi	r24, 0x90	; 144
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	9c 83       	std	Y+4, r25	; 0x04
    1314:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <SW_enu_getValue+0xd4>
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <SW_enu_getValue+0xc8>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <SW_enu_getValue+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <SW_enu_getValue+0x110>
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(25);
    DIO_enu_GetPinValue(Copy_Au8_Switchs->SW_Port, Copy_Au8_Switchs->SW_Pin,Copy_u8_Value);
    135e:	e9 89       	ldd	r30, Y+17	; 0x11
    1360:	fa 89       	ldd	r31, Y+18	; 0x12
    1362:	80 81       	ld	r24, Z
    1364:	e9 89       	ldd	r30, Y+17	; 0x11
    1366:	fa 89       	ldd	r31, Y+18	; 0x12
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	2f 85       	ldd	r18, Y+15	; 0x0f
    136c:	38 89       	ldd	r19, Y+16	; 0x10
    136e:	69 2f       	mov	r22, r25
    1370:	a9 01       	movw	r20, r18
    1372:	0e 94 ef 21 	call	0x43de	; 0x43de <DIO_enu_GetPinValue>
    
}
    1376:	63 96       	adiw	r28, 0x13	; 19
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	de bf       	out	0x3e, r29	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	cd bf       	out	0x3d, r28	; 61
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	41 e0       	ldi	r20, 0x01	; 1
    1396:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	41 e0       	ldi	r20, 0x01	; 1
    13a0:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	62 e0       	ldi	r22, 0x02	; 2
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	63 e0       	ldi	r22, 0x03	; 3
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	63 e0       	ldi	r22, 0x03	; 3
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>

    return STATE_OK;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	a5 97       	sbiw	r28, 0x25	; 37
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	de bf       	out	0x3e, r29	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	cd bf       	out	0x3d, r28	; 61
    13fc:	8b a3       	std	Y+35, r24	; 0x23
    13fe:	7d a3       	std	Y+37, r23	; 0x25
    1400:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1406:	8b a1       	ldd	r24, Y+35	; 0x23
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	21 f0       	breq	.+8      	; 0x1414 <STEP_Motor_enu_Rotate+0x2c>
    140c:	8b a1       	ldd	r24, Y+35	; 0x23
    140e:	88 23       	and	r24, r24
    1410:	09 f0       	breq	.+2      	; 0x1414 <STEP_Motor_enu_Rotate+0x2c>
    1412:	a5 c1       	rjmp	.+842    	; 0x175e <STEP_Motor_enu_Rotate+0x376>
    1414:	8c a1       	ldd	r24, Y+36	; 0x24
    1416:	9d a1       	ldd	r25, Y+37	; 0x25
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	89 36       	cpi	r24, 0x69	; 105
    141c:	92 07       	cpc	r25, r18
    141e:	08 f0       	brcs	.+2      	; 0x1422 <STEP_Motor_enu_Rotate+0x3a>
    1420:	9e c1       	rjmp	.+828    	; 0x175e <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    1422:	8f e0       	ldi	r24, 0x0F	; 15
    1424:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1426:	8c a1       	ldd	r24, Y+36	; 0x24
    1428:	9d a1       	ldd	r25, Y+37	; 0x25
    142a:	2a e5       	ldi	r18, 0x5A	; 90
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	b9 01       	movw	r22, r18
    1430:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <__udivmodhi4>
    1434:	cb 01       	movw	r24, r22
    1436:	98 a3       	std	Y+32, r25	; 0x20
    1438:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    143a:	8b a1       	ldd	r24, Y+35	; 0x23
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	09 f0       	breq	.+2      	; 0x1442 <STEP_Motor_enu_Rotate+0x5a>
    1440:	c5 c0       	rjmp	.+394    	; 0x15cc <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1442:	1e 8e       	std	Y+30, r1	; 0x1e
    1444:	b9 c0       	rjmp	.+370    	; 0x15b8 <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1446:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	9c 01       	movw	r18, r24
    144e:	23 70       	andi	r18, 0x03	; 3
    1450:	30 70       	andi	r19, 0x00	; 0
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <STEP_Motor_enu_Rotate+0x76>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <STEP_Motor_enu_Rotate+0x72>
    1462:	98 2f       	mov	r25, r24
    1464:	89 a1       	ldd	r24, Y+33	; 0x21
    1466:	89 23       	and	r24, r25
    1468:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    146a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	83 70       	andi	r24, 0x03	; 3
    1472:	90 70       	andi	r25, 0x00	; 0
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	91 05       	cpc	r25, r1
    1478:	11 f4       	brne	.+4      	; 0x147e <STEP_Motor_enu_Rotate+0x96>
    147a:	89 e0       	ldi	r24, 0x09	; 9
    147c:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    147e:	89 a1       	ldd	r24, Y+33	; 0x21
    1480:	98 2f       	mov	r25, r24
    1482:	91 70       	andi	r25, 0x01	; 1
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	63 e0       	ldi	r22, 0x03	; 3
    1488:	49 2f       	mov	r20, r25
    148a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    148e:	89 a1       	ldd	r24, Y+33	; 0x21
    1490:	86 95       	lsr	r24
    1492:	98 2f       	mov	r25, r24
    1494:	91 70       	andi	r25, 0x01	; 1
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	49 2f       	mov	r20, r25
    149c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    14a0:	89 a1       	ldd	r24, Y+33	; 0x21
    14a2:	86 95       	lsr	r24
    14a4:	86 95       	lsr	r24
    14a6:	98 2f       	mov	r25, r24
    14a8:	91 70       	andi	r25, 0x01	; 1
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	49 2f       	mov	r20, r25
    14b0:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    14b4:	89 a1       	ldd	r24, Y+33	; 0x21
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	98 2f       	mov	r25, r24
    14be:	91 70       	andi	r25, 0x01	; 1
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	49 2f       	mov	r20, r25
    14c6:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	aa ef       	ldi	r26, 0xFA	; 250
    14d0:	b2 e4       	ldi	r27, 0x42	; 66
    14d2:	89 8f       	std	Y+25, r24	; 0x19
    14d4:	9a 8f       	std	Y+26, r25	; 0x1a
    14d6:	ab 8f       	std	Y+27, r26	; 0x1b
    14d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14da:	69 8d       	ldd	r22, Y+25	; 0x19
    14dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	4a e7       	ldi	r20, 0x7A	; 122
    14e8:	55 e4       	ldi	r21, 0x45	; 69
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	8d 8b       	std	Y+21, r24	; 0x15
    14f4:	9e 8b       	std	Y+22, r25	; 0x16
    14f6:	af 8b       	std	Y+23, r26	; 0x17
    14f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14fa:	6d 89       	ldd	r22, Y+21	; 0x15
    14fc:	7e 89       	ldd	r23, Y+22	; 0x16
    14fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1500:	98 8d       	ldd	r25, Y+24	; 0x18
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	5f e3       	ldi	r21, 0x3F	; 63
    150a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    150e:	88 23       	and	r24, r24
    1510:	2c f4       	brge	.+10     	; 0x151c <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	9c 8b       	std	Y+20, r25	; 0x14
    1518:	8b 8b       	std	Y+19, r24	; 0x13
    151a:	3f c0       	rjmp	.+126    	; 0x159a <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	3f ef       	ldi	r19, 0xFF	; 255
    1528:	4f e7       	ldi	r20, 0x7F	; 127
    152a:	57 e4       	ldi	r21, 0x47	; 71
    152c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1530:	18 16       	cp	r1, r24
    1532:	4c f5       	brge	.+82     	; 0x1586 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1534:	69 8d       	ldd	r22, Y+25	; 0x19
    1536:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1538:	8b 8d       	ldd	r24, Y+27	; 0x1b
    153a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	9c 8b       	std	Y+20, r25	; 0x14
    155a:	8b 8b       	std	Y+19, r24	; 0x13
    155c:	0f c0       	rjmp	.+30     	; 0x157c <STEP_Motor_enu_Rotate+0x194>
    155e:	80 e9       	ldi	r24, 0x90	; 144
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	9a 8b       	std	Y+18, r25	; 0x12
    1564:	89 8b       	std	Y+17, r24	; 0x11
    1566:	89 89       	ldd	r24, Y+17	; 0x11
    1568:	9a 89       	ldd	r25, Y+18	; 0x12
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <STEP_Motor_enu_Rotate+0x182>
    156e:	9a 8b       	std	Y+18, r25	; 0x12
    1570:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	9c 8b       	std	Y+20, r25	; 0x14
    157a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157c:	8b 89       	ldd	r24, Y+19	; 0x13
    157e:	9c 89       	ldd	r25, Y+20	; 0x14
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	69 f7       	brne	.-38     	; 0x155e <STEP_Motor_enu_Rotate+0x176>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	7e 89       	ldd	r23, Y+22	; 0x16
    158a:	8f 89       	ldd	r24, Y+23	; 0x17
    158c:	98 8d       	ldd	r25, Y+24	; 0x18
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	8b 89       	ldd	r24, Y+19	; 0x13
    159c:	9c 89       	ldd	r25, Y+20	; 0x14
    159e:	98 8b       	std	Y+16, r25	; 0x10
    15a0:	8f 87       	std	Y+15, r24	; 0x0f
    15a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a4:	98 89       	ldd	r25, Y+16	; 0x10
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <STEP_Motor_enu_Rotate+0x1be>
    15aa:	98 8b       	std	Y+16, r25	; 0x10
    15ac:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    15ae:	8f e0       	ldi	r24, 0x0F	; 15
    15b0:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    15b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b4:	8f 5f       	subi	r24, 0xFF	; 255
    15b6:	8e 8f       	std	Y+30, r24	; 0x1e
    15b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15c0:	98 a1       	ldd	r25, Y+32	; 0x20
    15c2:	28 17       	cp	r18, r24
    15c4:	39 07       	cpc	r19, r25
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <STEP_Motor_enu_Rotate+0x1e2>
    15c8:	3e cf       	rjmp	.-388    	; 0x1446 <STEP_Motor_enu_Rotate+0x5e>
    15ca:	ca c0       	rjmp	.+404    	; 0x1760 <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    15cc:	8b a1       	ldd	r24, Y+35	; 0x23
    15ce:	88 23       	and	r24, r24
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <STEP_Motor_enu_Rotate+0x1ec>
    15d2:	c6 c0       	rjmp	.+396    	; 0x1760 <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    15d4:	1d 8e       	std	Y+29, r1	; 0x1d
    15d6:	b9 c0       	rjmp	.+370    	; 0x174a <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    15d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	9c 01       	movw	r18, r24
    15e0:	23 70       	andi	r18, 0x03	; 3
    15e2:	30 70       	andi	r19, 0x00	; 0
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <STEP_Motor_enu_Rotate+0x208>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <STEP_Motor_enu_Rotate+0x204>
    15f4:	98 2f       	mov	r25, r24
    15f6:	89 a1       	ldd	r24, Y+33	; 0x21
    15f8:	89 23       	and	r24, r25
    15fa:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    15fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	83 70       	andi	r24, 0x03	; 3
    1604:	90 70       	andi	r25, 0x00	; 0
    1606:	83 30       	cpi	r24, 0x03	; 3
    1608:	91 05       	cpc	r25, r1
    160a:	11 f4       	brne	.+4      	; 0x1610 <STEP_Motor_enu_Rotate+0x228>
    160c:	89 e0       	ldi	r24, 0x09	; 9
    160e:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    1610:	89 a1       	ldd	r24, Y+33	; 0x21
    1612:	98 2f       	mov	r25, r24
    1614:	91 70       	andi	r25, 0x01	; 1
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	49 2f       	mov	r20, r25
    161c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    1620:	89 a1       	ldd	r24, Y+33	; 0x21
    1622:	86 95       	lsr	r24
    1624:	98 2f       	mov	r25, r24
    1626:	91 70       	andi	r25, 0x01	; 1
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	61 e0       	ldi	r22, 0x01	; 1
    162c:	49 2f       	mov	r20, r25
    162e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    1632:	89 a1       	ldd	r24, Y+33	; 0x21
    1634:	86 95       	lsr	r24
    1636:	86 95       	lsr	r24
    1638:	98 2f       	mov	r25, r24
    163a:	91 70       	andi	r25, 0x01	; 1
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	49 2f       	mov	r20, r25
    1642:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    1646:	89 a1       	ldd	r24, Y+33	; 0x21
    1648:	86 95       	lsr	r24
    164a:	86 95       	lsr	r24
    164c:	86 95       	lsr	r24
    164e:	98 2f       	mov	r25, r24
    1650:	91 70       	andi	r25, 0x01	; 1
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	63 e0       	ldi	r22, 0x03	; 3
    1656:	49 2f       	mov	r20, r25
    1658:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	aa ef       	ldi	r26, 0xFA	; 250
    1662:	b2 e4       	ldi	r27, 0x42	; 66
    1664:	8b 87       	std	Y+11, r24	; 0x0b
    1666:	9c 87       	std	Y+12, r25	; 0x0c
    1668:	ad 87       	std	Y+13, r26	; 0x0d
    166a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	6b 85       	ldd	r22, Y+11	; 0x0b
    166e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1670:	8d 85       	ldd	r24, Y+13	; 0x0d
    1672:	9e 85       	ldd	r25, Y+14	; 0x0e
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	4a e7       	ldi	r20, 0x7A	; 122
    167a:	55 e4       	ldi	r21, 0x45	; 69
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	8f 83       	std	Y+7, r24	; 0x07
    1686:	98 87       	std	Y+8, r25	; 0x08
    1688:	a9 87       	std	Y+9, r26	; 0x09
    168a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	2c f4       	brge	.+10     	; 0x16ae <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	4c f5       	brge	.+82     	; 0x1718 <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    16cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e2       	ldi	r20, 0x20	; 32
    16d4:	51 e4       	ldi	r21, 0x41	; 65
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <STEP_Motor_enu_Rotate+0x326>
    16f0:	80 e9       	ldi	r24, 0x90	; 144
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	8b 83       	std	Y+3, r24	; 0x03
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <STEP_Motor_enu_Rotate+0x314>
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f7       	brne	.-38     	; 0x16f0 <STEP_Motor_enu_Rotate+0x308>
    1716:	14 c0       	rjmp	.+40     	; 0x1740 <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <STEP_Motor_enu_Rotate+0x350>
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    1740:	8f e0       	ldi	r24, 0x0F	; 15
    1742:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1744:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	8d 8f       	std	Y+29, r24	; 0x1d
    174a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1752:	98 a1       	ldd	r25, Y+32	; 0x20
    1754:	28 17       	cp	r18, r24
    1756:	39 07       	cpc	r19, r25
    1758:	08 f4       	brcc	.+2      	; 0x175c <STEP_Motor_enu_Rotate+0x374>
    175a:	3e cf       	rjmp	.-388    	; 0x15d8 <STEP_Motor_enu_Rotate+0x1f0>
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    175e:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    1760:	8a a1       	ldd	r24, Y+34	; 0x22
}
    1762:	a5 96       	adiw	r28, 0x25	; 37
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	2e 97       	sbiw	r28, 0x0e	; 14
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	63 e0       	ldi	r22, 0x03	; 3
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	aa ef       	ldi	r26, 0xFA	; 250
    17b6:	b2 e4       	ldi	r27, 0x42	; 66
    17b8:	8b 87       	std	Y+11, r24	; 0x0b
    17ba:	9c 87       	std	Y+12, r25	; 0x0c
    17bc:	ad 87       	std	Y+13, r26	; 0x0d
    17be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	4a e7       	ldi	r20, 0x7A	; 122
    17ce:	55 e4       	ldi	r21, 0x45	; 69
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8f 83       	std	Y+7, r24	; 0x07
    17da:	98 87       	std	Y+8, r25	; 0x08
    17dc:	a9 87       	std	Y+9, r26	; 0x09
    17de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f4:	88 23       	and	r24, r24
    17f6:	2c f4       	brge	.+10     	; 0x1802 <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
    1800:	3f c0       	rjmp	.+126    	; 0x1880 <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1802:	6f 81       	ldd	r22, Y+7	; 0x07
    1804:	78 85       	ldd	r23, Y+8	; 0x08
    1806:	89 85       	ldd	r24, Y+9	; 0x09
    1808:	9a 85       	ldd	r25, Y+10	; 0x0a
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	3f ef       	ldi	r19, 0xFF	; 255
    180e:	4f e7       	ldi	r20, 0x7F	; 127
    1810:	57 e4       	ldi	r21, 0x47	; 71
    1812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1816:	18 16       	cp	r1, r24
    1818:	4c f5       	brge	.+82     	; 0x186c <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181a:	6b 85       	ldd	r22, Y+11	; 0x0b
    181c:	7c 85       	ldd	r23, Y+12	; 0x0c
    181e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1820:	9e 85       	ldd	r25, Y+14	; 0x0e
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e2       	ldi	r20, 0x20	; 32
    1828:	51 e4       	ldi	r21, 0x41	; 65
    182a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	bc 01       	movw	r22, r24
    1834:	cd 01       	movw	r24, r26
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	0f c0       	rjmp	.+30     	; 0x1862 <STEP_Motor_enu_Stop+0xee>
    1844:	80 e9       	ldi	r24, 0x90	; 144
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <STEP_Motor_enu_Stop+0xdc>
    1854:	9c 83       	std	Y+4, r25	; 0x04
    1856:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1858:	8d 81       	ldd	r24, Y+5	; 0x05
    185a:	9e 81       	ldd	r25, Y+6	; 0x06
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	69 f7       	brne	.-38     	; 0x1844 <STEP_Motor_enu_Stop+0xd0>
    186a:	14 c0       	rjmp	.+40     	; 0x1894 <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	9a 81       	ldd	r25, Y+2	; 0x02
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <STEP_Motor_enu_Stop+0x118>
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    1894:	81 e0       	ldi	r24, 0x01	; 1
}
    1896:	2e 96       	adiw	r28, 0x0e	; 14
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	cf 91       	pop	r28
    18a4:	df 91       	pop	r29
    18a6:	08 95       	ret

000018a8 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <sevenSeg_enu_displayNum+0x6>
    18ae:	0f 92       	push	r0
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	8b 83       	std	Y+3, r24	; 0x03
    DIO_enu_SetPinDirection(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_OUTPUT);
    18b6:	82 e0       	ldi	r24, 0x02	; 2
    18b8:	66 e0       	ldi	r22, 0x06	; 6
    18ba:	41 e0       	ldi	r20, 0x01	; 1
    18bc:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	0e 94 88 22 	call	0x4510	; 0x4510 <DIO_enu_SetPortDirection>
    u8 Local_u8_errorState = STATE_OK;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	8a 30       	cpi	r24, 0x0A	; 10
    18d0:	78 f5       	brcc	.+94     	; 0x1930 <sevenSeg_enu_displayNum+0x88>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	66 e0       	ldi	r22, 0x06	; 6
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	24 c0       	rjmp	.+72     	; 0x1928 <sevenSeg_enu_displayNum+0x80>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	fc 01       	movw	r30, r24
    18e8:	ea 5c       	subi	r30, 0xCA	; 202
    18ea:	fe 4f       	sbci	r31, 0xFE	; 254
    18ec:	40 81       	ld	r20, Z
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	88 2f       	mov	r24, r24
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	fc 01       	movw	r30, r24
    18f6:	e4 5d       	subi	r30, 0xD4	; 212
    18f8:	fe 4f       	sbci	r31, 0xFE	; 254
    18fa:	80 81       	ld	r24, Z
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	b9 01       	movw	r22, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <sevenSeg_enu_displayNum+0x66>
    190a:	75 95       	asr	r23
    190c:	67 95       	ror	r22
    190e:	8a 95       	dec	r24
    1910:	e2 f7       	brpl	.-8      	; 0x190a <sevenSeg_enu_displayNum+0x62>
    1912:	cb 01       	movw	r24, r22
    1914:	98 2f       	mov	r25, r24
    1916:	91 70       	andi	r25, 0x01	; 1
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	64 2f       	mov	r22, r20
    191c:	49 2f       	mov	r20, r25
    191e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(~SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }
        #elif SEVEN_SEGMENT_TYPE == FARES_KIT
        DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_E_PORT, SEVEN_SEGMENT_U8_E_PIN, DIO_U8_HIGH);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	87 30       	cpi	r24, 0x07	; 7
    192c:	c8 f2       	brcs	.-78     	; 0x18e0 <sevenSeg_enu_displayNum+0x38>
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <sevenSeg_enu_displayNum+0x8a>
        
        #endif


    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1930:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <Servo_enu_Init>:
#include"../../1-MCAL/Timers/Timer_Interface.h"

#include"Servo_Config.h"
#include"Servo_Private.h"

ES_t Servo_enu_Init(void){
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(DIO_U8_PORTD,DIO_U8_PIN5,DIO_U8_OUTPUT);
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	65 e0       	ldi	r22, 0x05	; 5
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    Timers_enu_Init(TIMER1,FAST_PWM_NON_INVERTING,CLK_8);
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	64 e0       	ldi	r22, 0x04	; 4
    1958:	42 e0       	ldi	r20, 0x02	; 2
    195a:	0e 94 02 18 	call	0x3004	; 0x3004 <Timers_enu_Init>
    Timers_enu_Timer1_setTopValue(SERVO_COMPLETE_CYCLE_TICKS-1);
    195e:	8f e3       	ldi	r24, 0x3F	; 63
    1960:	9c e9       	ldi	r25, 0x9C	; 156
    1962:	0e 94 9b 1b 	call	0x3736	; 0x3736 <Timers_enu_Timer1_setTopValue>
}
    1966:	0f 90       	pop	r0
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <Servo_enu_SetAngle>:
ES_t Servo_enu_SetAngle(u8 Copy_u8_Angle){
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	00 d0       	rcall	.+0      	; 0x1974 <Servo_enu_SetAngle+0x6>
    1974:	00 d0       	rcall	.+0      	; 0x1976 <Servo_enu_SetAngle+0x8>
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	8c 83       	std	Y+4, r24	; 0x04
    ES_t Local_u8_errorState = STATE_OK;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8b 83       	std	Y+3, r24	; 0x03
    if(Copy_u8_Angle<=SERVO_MAX_ANGLE){
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	85 3b       	cpi	r24, 0xB5	; 181
    1984:	58 f5       	brcc	.+86     	; 0x19dc <Servo_enu_SetAngle+0x6e>
        u16 Servo_u16_OCR1A_Value = ((SERVO_MIN_TIME+(Copy_u8_Angle*SERVO_MIN_TIME)/SERVO_MAX_ANGLE)*2)-1;
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	a0 e0       	ldi	r26, 0x00	; 0
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	28 ee       	ldi	r18, 0xE8	; 232
    1992:	33 e0       	ldi	r19, 0x03	; 3
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__mulsi3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	24 eb       	ldi	r18, 0xB4	; 180
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__udivmodsi4>
    19b4:	da 01       	movw	r26, r20
    19b6:	c9 01       	movw	r24, r18
    19b8:	88 51       	subi	r24, 0x18	; 24
    19ba:	9c 4f       	sbci	r25, 0xFC	; 252
    19bc:	af 4f       	sbci	r26, 0xFF	; 255
    19be:	bf 4f       	sbci	r27, 0xFF	; 255
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	aa 1f       	adc	r26, r26
    19c6:	bb 1f       	adc	r27, r27
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	9a 83       	std	Y+2, r25	; 0x02
    19cc:	89 83       	std	Y+1, r24	; 0x01
        Timers_enu_Timer1SetCompareValue(COMPARE_UNIT_A,Servo_u16_OCR1A_Value);
    19ce:	29 81       	ldd	r18, Y+1	; 0x01
    19d0:	3a 81       	ldd	r19, Y+2	; 0x02
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	b9 01       	movw	r22, r18
    19d6:	0e 94 af 1b 	call	0x375e	; 0x375e <Timers_enu_Timer1SetCompareValue>
    19da:	01 c0       	rjmp	.+2      	; 0x19de <Servo_enu_SetAngle+0x70>
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    19dc:	1b 82       	std	Y+3, r1	; 0x03
    }
    return Local_u8_errorState;
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <Servo_enu_Stop>:
ES_t Servo_enu_Stop(void){
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    Timers_enu_Stop(TIMER1);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <Timers_enu_Stop>
    return STATE_OK;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	e1 97       	sbiw	r28, 0x31	; 49
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	de bf       	out	0x3e, r29	; 62
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	cd bf       	out	0x3d, r28	; 61
    1a18:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	61 e0       	ldi	r22, 0x01	; 1
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
    1a2e:	89 a9       	ldd	r24, Y+49	; 0x31
    1a30:	98 2f       	mov	r25, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	99 27       	eor	r25, r25
    1a36:	99 1f       	adc	r25, r25
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	66 e0       	ldi	r22, 0x06	; 6
    1a3c:	49 2f       	mov	r20, r25
    1a3e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
    1a42:	89 a9       	ldd	r24, Y+49	; 0x31
    1a44:	82 95       	swap	r24
    1a46:	86 95       	lsr	r24
    1a48:	86 95       	lsr	r24
    1a4a:	83 70       	andi	r24, 0x03	; 3
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	91 70       	andi	r25, 0x01	; 1
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	65 e0       	ldi	r22, 0x05	; 5
    1a54:	49 2f       	mov	r20, r25
    1a56:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
    1a5a:	89 a9       	ldd	r24, Y+49	; 0x31
    1a5c:	82 95       	swap	r24
    1a5e:	86 95       	lsr	r24
    1a60:	87 70       	andi	r24, 0x07	; 7
    1a62:	98 2f       	mov	r25, r24
    1a64:	91 70       	andi	r25, 0x01	; 1
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	64 e0       	ldi	r22, 0x04	; 4
    1a6a:	49 2f       	mov	r20, r25
    1a6c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
    1a70:	89 a9       	ldd	r24, Y+49	; 0x31
    1a72:	82 95       	swap	r24
    1a74:	8f 70       	andi	r24, 0x0F	; 15
    1a76:	98 2f       	mov	r25, r24
    1a78:	91 70       	andi	r25, 0x01	; 1
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	63 e0       	ldi	r22, 0x03	; 3
    1a7e:	49 2f       	mov	r20, r25
    1a80:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	62 e0       	ldi	r22, 0x02	; 2
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e8       	ldi	r26, 0x80	; 128
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	8d a7       	std	Y+45, r24	; 0x2d
    1a98:	9e a7       	std	Y+46, r25	; 0x2e
    1a9a:	af a7       	std	Y+47, r26	; 0x2f
    1a9c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1aa0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1aa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1aa6:	2b ea       	ldi	r18, 0xAB	; 171
    1aa8:	3a ea       	ldi	r19, 0xAA	; 170
    1aaa:	4a ea       	ldi	r20, 0xAA	; 170
    1aac:	50 e4       	ldi	r21, 0x40	; 64
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	89 a7       	std	Y+41, r24	; 0x29
    1ab8:	9a a7       	std	Y+42, r25	; 0x2a
    1aba:	ab a7       	std	Y+43, r26	; 0x2b
    1abc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1abe:	69 a5       	ldd	r22, Y+41	; 0x29
    1ac0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ac2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ac4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	1c f4       	brge	.+6      	; 0x1adc <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	88 a7       	std	Y+40, r24	; 0x28
    1ada:	91 c0       	rjmp	.+290    	; 0x1bfe <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1adc:	69 a5       	ldd	r22, Y+41	; 0x29
    1ade:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ae0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ae2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4f e7       	ldi	r20, 0x7F	; 127
    1aea:	53 e4       	ldi	r21, 0x43	; 67
    1aec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af0:	18 16       	cp	r1, r24
    1af2:	0c f0       	brlt	.+2      	; 0x1af6 <LCD_enu_SendCmnd+0xf2>
    1af4:	7b c0       	rjmp	.+246    	; 0x1bec <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1af6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1af8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1afa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1afc:	98 a9       	ldd	r25, Y+48	; 0x30
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	4a e7       	ldi	r20, 0x7A	; 122
    1b04:	54 e4       	ldi	r21, 0x44	; 68
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8c a3       	std	Y+36, r24	; 0x24
    1b10:	9d a3       	std	Y+37, r25	; 0x25
    1b12:	ae a3       	std	Y+38, r26	; 0x26
    1b14:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6c a1       	ldd	r22, Y+36	; 0x24
    1b18:	7d a1       	ldd	r23, Y+37	; 0x25
    1b1a:	8e a1       	ldd	r24, Y+38	; 0x26
    1b1c:	9f a1       	ldd	r25, Y+39	; 0x27
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a e7       	ldi	r20, 0x7A	; 122
    1b24:	55 e4       	ldi	r21, 0x45	; 69
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	88 a3       	std	Y+32, r24	; 0x20
    1b30:	99 a3       	std	Y+33, r25	; 0x21
    1b32:	aa a3       	std	Y+34, r26	; 0x22
    1b34:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b36:	68 a1       	ldd	r22, Y+32	; 0x20
    1b38:	79 a1       	ldd	r23, Y+33	; 0x21
    1b3a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b3c:	9b a1       	ldd	r25, Y+35	; 0x23
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9f 8f       	std	Y+31, r25	; 0x1f
    1b54:	8e 8f       	std	Y+30, r24	; 0x1e
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1b58:	68 a1       	ldd	r22, Y+32	; 0x20
    1b5a:	79 a1       	ldd	r23, Y+33	; 0x21
    1b5c:	8a a1       	ldd	r24, Y+34	; 0x22
    1b5e:	9b a1       	ldd	r25, Y+35	; 0x23
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6c a1       	ldd	r22, Y+36	; 0x24
    1b72:	7d a1       	ldd	r23, Y+37	; 0x25
    1b74:	8e a1       	ldd	r24, Y+38	; 0x26
    1b76:	9f a1       	ldd	r25, Y+39	; 0x27
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9f 8f       	std	Y+31, r25	; 0x1f
    1b96:	8e 8f       	std	Y+30, r24	; 0x1e
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <LCD_enu_SendCmnd+0x1b4>
    1b9a:	80 e9       	ldi	r24, 0x90	; 144
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	9d 8f       	std	Y+29, r25	; 0x1d
    1ba0:	8c 8f       	std	Y+28, r24	; 0x1c
    1ba2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ba4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_enu_SendCmnd+0x1a2>
    1baa:	9d 8f       	std	Y+29, r25	; 0x1d
    1bac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	9f 8f       	std	Y+31, r25	; 0x1f
    1bb6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <LCD_enu_SendCmnd+0x196>
    1bc0:	24 c0       	rjmp	.+72     	; 0x1c0a <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	68 a1       	ldd	r22, Y+32	; 0x20
    1bc4:	79 a1       	ldd	r23, Y+33	; 0x21
    1bc6:	8a a1       	ldd	r24, Y+34	; 0x22
    1bc8:	9b a1       	ldd	r25, Y+35	; 0x23
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9f 8f       	std	Y+31, r25	; 0x1f
    1bd4:	8e 8f       	std	Y+30, r24	; 0x1e
    1bd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bda:	9b 8f       	std	Y+27, r25	; 0x1b
    1bdc:	8a 8f       	std	Y+26, r24	; 0x1a
    1bde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1be0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <LCD_enu_SendCmnd+0x1de>
    1be6:	9b 8f       	std	Y+27, r25	; 0x1b
    1be8:	8a 8f       	std	Y+26, r24	; 0x1a
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bec:	69 a5       	ldd	r22, Y+41	; 0x29
    1bee:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	88 a7       	std	Y+40, r24	; 0x28
    1bfe:	88 a5       	ldd	r24, Y+40	; 0x28
    1c00:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c02:	89 8d       	ldd	r24, Y+25	; 0x19
    1c04:	8a 95       	dec	r24
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_enu_SendCmnd+0x200>
    1c08:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    1c14:	89 a9       	ldd	r24, Y+49	; 0x31
    1c16:	86 95       	lsr	r24
    1c18:	86 95       	lsr	r24
    1c1a:	86 95       	lsr	r24
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	91 70       	andi	r25, 0x01	; 1
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	66 e0       	ldi	r22, 0x06	; 6
    1c24:	49 2f       	mov	r20, r25
    1c26:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    1c2a:	89 a9       	ldd	r24, Y+49	; 0x31
    1c2c:	86 95       	lsr	r24
    1c2e:	86 95       	lsr	r24
    1c30:	98 2f       	mov	r25, r24
    1c32:	91 70       	andi	r25, 0x01	; 1
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	65 e0       	ldi	r22, 0x05	; 5
    1c38:	49 2f       	mov	r20, r25
    1c3a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    1c3e:	89 a9       	ldd	r24, Y+49	; 0x31
    1c40:	86 95       	lsr	r24
    1c42:	98 2f       	mov	r25, r24
    1c44:	91 70       	andi	r25, 0x01	; 1
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	64 e0       	ldi	r22, 0x04	; 4
    1c4a:	49 2f       	mov	r20, r25
    1c4c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    1c50:	89 a9       	ldd	r24, Y+49	; 0x31
    1c52:	98 2f       	mov	r25, r24
    1c54:	91 70       	andi	r25, 0x01	; 1
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	63 e0       	ldi	r22, 0x03	; 3
    1c5a:	49 2f       	mov	r20, r25
    1c5c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e8       	ldi	r26, 0x80	; 128
    1c70:	bf e3       	ldi	r27, 0x3F	; 63
    1c72:	8d 8b       	std	Y+21, r24	; 0x15
    1c74:	9e 8b       	std	Y+22, r25	; 0x16
    1c76:	af 8b       	std	Y+23, r26	; 0x17
    1c78:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c80:	98 8d       	ldd	r25, Y+24	; 0x18
    1c82:	2b ea       	ldi	r18, 0xAB	; 171
    1c84:	3a ea       	ldi	r19, 0xAA	; 170
    1c86:	4a ea       	ldi	r20, 0xAA	; 170
    1c88:	50 e4       	ldi	r21, 0x40	; 64
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	89 8b       	std	Y+17, r24	; 0x11
    1c94:	9a 8b       	std	Y+18, r25	; 0x12
    1c96:	ab 8b       	std	Y+19, r26	; 0x13
    1c98:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c9a:	69 89       	ldd	r22, Y+17	; 0x11
    1c9c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cae:	88 23       	and	r24, r24
    1cb0:	1c f4       	brge	.+6      	; 0x1cb8 <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	88 8b       	std	Y+16, r24	; 0x10
    1cb6:	91 c0       	rjmp	.+290    	; 0x1dda <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    1cb8:	69 89       	ldd	r22, Y+17	; 0x11
    1cba:	7a 89       	ldd	r23, Y+18	; 0x12
    1cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	53 e4       	ldi	r21, 0x43	; 67
    1cc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	0c f0       	brlt	.+2      	; 0x1cd2 <LCD_enu_SendCmnd+0x2ce>
    1cd0:	7b c0       	rjmp	.+246    	; 0x1dc8 <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    1cd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8c 87       	std	Y+12, r24	; 0x0c
    1cec:	9d 87       	std	Y+13, r25	; 0x0d
    1cee:	ae 87       	std	Y+14, r26	; 0x0e
    1cf0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cf4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a e7       	ldi	r20, 0x7A	; 122
    1d00:	55 e4       	ldi	r21, 0x45	; 69
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	88 87       	std	Y+8, r24	; 0x08
    1d0c:	99 87       	std	Y+9, r25	; 0x09
    1d0e:	aa 87       	std	Y+10, r26	; 0x0a
    1d10:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d12:	68 85       	ldd	r22, Y+8	; 0x08
    1d14:	79 85       	ldd	r23, Y+9	; 0x09
    1d16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9f 83       	std	Y+7, r25	; 0x07
    1d30:	8e 83       	std	Y+6, r24	; 0x06
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1d34:	68 85       	ldd	r22, Y+8	; 0x08
    1d36:	79 85       	ldd	r23, Y+9	; 0x09
    1d38:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d50:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d52:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9f 83       	std	Y+7, r25	; 0x07
    1d72:	8e 83       	std	Y+6, r24	; 0x06
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <LCD_enu_SendCmnd+0x390>
    1d76:	80 e9       	ldi	r24, 0x90	; 144
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	9d 83       	std	Y+5, r25	; 0x05
    1d7c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	9d 81       	ldd	r25, Y+5	; 0x05
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_enu_SendCmnd+0x37e>
    1d86:	9d 83       	std	Y+5, r25	; 0x05
    1d88:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	9f 83       	std	Y+7, r25	; 0x07
    1d92:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8e 81       	ldd	r24, Y+6	; 0x06
    1d96:	9f 81       	ldd	r25, Y+7	; 0x07
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <LCD_enu_SendCmnd+0x372>
    1d9c:	24 c0       	rjmp	.+72     	; 0x1de6 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	68 85       	ldd	r22, Y+8	; 0x08
    1da0:	79 85       	ldd	r23, Y+9	; 0x09
    1da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9f 83       	std	Y+7, r25	; 0x07
    1db0:	8e 83       	std	Y+6, r24	; 0x06
    1db2:	8e 81       	ldd	r24, Y+6	; 0x06
    1db4:	9f 81       	ldd	r25, Y+7	; 0x07
    1db6:	9b 83       	std	Y+3, r25	; 0x03
    1db8:	8a 83       	std	Y+2, r24	; 0x02
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_enu_SendCmnd+0x3ba>
    1dc2:	9b 83       	std	Y+3, r25	; 0x03
    1dc4:	8a 83       	std	Y+2, r24	; 0x02
    1dc6:	0f c0       	rjmp	.+30     	; 0x1de6 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc8:	69 89       	ldd	r22, Y+17	; 0x11
    1dca:	7a 89       	ldd	r23, Y+18	; 0x12
    1dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dce:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	88 8b       	std	Y+16, r24	; 0x10
    1dda:	88 89       	ldd	r24, Y+16	; 0x10
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	8a 95       	dec	r24
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <LCD_enu_SendCmnd+0x3dc>
    1de4:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	62 e0       	ldi	r22, 0x02	; 2
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
         return STATE_OK;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1df2:	e1 96       	adiw	r28, 0x31	; 49
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	e1 97       	sbiw	r28, 0x31	; 49
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    1e2e:	89 a9       	ldd	r24, Y+49	; 0x31
    1e30:	98 2f       	mov	r25, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	99 27       	eor	r25, r25
    1e36:	99 1f       	adc	r25, r25
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	66 e0       	ldi	r22, 0x06	; 6
    1e3c:	49 2f       	mov	r20, r25
    1e3e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    1e42:	89 a9       	ldd	r24, Y+49	; 0x31
    1e44:	82 95       	swap	r24
    1e46:	86 95       	lsr	r24
    1e48:	86 95       	lsr	r24
    1e4a:	83 70       	andi	r24, 0x03	; 3
    1e4c:	98 2f       	mov	r25, r24
    1e4e:	91 70       	andi	r25, 0x01	; 1
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	65 e0       	ldi	r22, 0x05	; 5
    1e54:	49 2f       	mov	r20, r25
    1e56:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    1e5a:	89 a9       	ldd	r24, Y+49	; 0x31
    1e5c:	82 95       	swap	r24
    1e5e:	86 95       	lsr	r24
    1e60:	87 70       	andi	r24, 0x07	; 7
    1e62:	98 2f       	mov	r25, r24
    1e64:	91 70       	andi	r25, 0x01	; 1
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	64 e0       	ldi	r22, 0x04	; 4
    1e6a:	49 2f       	mov	r20, r25
    1e6c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    1e70:	89 a9       	ldd	r24, Y+49	; 0x31
    1e72:	82 95       	swap	r24
    1e74:	8f 70       	andi	r24, 0x0F	; 15
    1e76:	98 2f       	mov	r25, r24
    1e78:	91 70       	andi	r25, 0x01	; 1
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	63 e0       	ldi	r22, 0x03	; 3
    1e7e:	49 2f       	mov	r20, r25
    1e80:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	62 e0       	ldi	r22, 0x02	; 2
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	a0 e8       	ldi	r26, 0x80	; 128
    1e94:	bf e3       	ldi	r27, 0x3F	; 63
    1e96:	8d a7       	std	Y+45, r24	; 0x2d
    1e98:	9e a7       	std	Y+46, r25	; 0x2e
    1e9a:	af a7       	std	Y+47, r26	; 0x2f
    1e9c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ea0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea6:	2b ea       	ldi	r18, 0xAB	; 171
    1ea8:	3a ea       	ldi	r19, 0xAA	; 170
    1eaa:	4a ea       	ldi	r20, 0xAA	; 170
    1eac:	50 e4       	ldi	r21, 0x40	; 64
    1eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	89 a7       	std	Y+41, r24	; 0x29
    1eb8:	9a a7       	std	Y+42, r25	; 0x2a
    1eba:	ab a7       	std	Y+43, r26	; 0x2b
    1ebc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ebe:	69 a5       	ldd	r22, Y+41	; 0x29
    1ec0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ec2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5f e3       	ldi	r21, 0x3F	; 63
    1ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed2:	88 23       	and	r24, r24
    1ed4:	1c f4       	brge	.+6      	; 0x1edc <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	88 a7       	std	Y+40, r24	; 0x28
    1eda:	91 c0       	rjmp	.+290    	; 0x1ffe <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    1edc:	69 a5       	ldd	r22, Y+41	; 0x29
    1ede:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ee0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	53 e4       	ldi	r21, 0x43	; 67
    1eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	0c f0       	brlt	.+2      	; 0x1ef6 <LCD_enu_SendChar+0xf2>
    1ef4:	7b c0       	rjmp	.+246    	; 0x1fec <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1ef6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ef8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1efa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efc:	98 a9       	ldd	r25, Y+48	; 0x30
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a e7       	ldi	r20, 0x7A	; 122
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8c a3       	std	Y+36, r24	; 0x24
    1f10:	9d a3       	std	Y+37, r25	; 0x25
    1f12:	ae a3       	std	Y+38, r26	; 0x26
    1f14:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f16:	6c a1       	ldd	r22, Y+36	; 0x24
    1f18:	7d a1       	ldd	r23, Y+37	; 0x25
    1f1a:	8e a1       	ldd	r24, Y+38	; 0x26
    1f1c:	9f a1       	ldd	r25, Y+39	; 0x27
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	55 e4       	ldi	r21, 0x45	; 69
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	88 a3       	std	Y+32, r24	; 0x20
    1f30:	99 a3       	std	Y+33, r25	; 0x21
    1f32:	aa a3       	std	Y+34, r26	; 0x22
    1f34:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f36:	68 a1       	ldd	r22, Y+32	; 0x20
    1f38:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f3c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	2c f4       	brge	.+10     	; 0x1f58 <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9f 8f       	std	Y+31, r25	; 0x1f
    1f54:	8e 8f       	std	Y+30, r24	; 0x1e
    1f56:	3f c0       	rjmp	.+126    	; 0x1fd6 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    1f58:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f5c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f5e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	3f ef       	ldi	r19, 0xFF	; 255
    1f64:	4f e7       	ldi	r20, 0x7F	; 127
    1f66:	57 e4       	ldi	r21, 0x47	; 71
    1f68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	4c f5       	brge	.+82     	; 0x1fc2 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f70:	6c a1       	ldd	r22, Y+36	; 0x24
    1f72:	7d a1       	ldd	r23, Y+37	; 0x25
    1f74:	8e a1       	ldd	r24, Y+38	; 0x26
    1f76:	9f a1       	ldd	r25, Y+39	; 0x27
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e2       	ldi	r20, 0x20	; 32
    1f7e:	51 e4       	ldi	r21, 0x41	; 65
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	bc 01       	movw	r22, r24
    1f8a:	cd 01       	movw	r24, r26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9f 8f       	std	Y+31, r25	; 0x1f
    1f96:	8e 8f       	std	Y+30, r24	; 0x1e
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <LCD_enu_SendChar+0x1b4>
    1f9a:	80 e9       	ldi	r24, 0x90	; 144
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fa4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <LCD_enu_SendChar+0x1a2>
    1faa:	9d 8f       	std	Y+29, r25	; 0x1d
    1fac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	69 f7       	brne	.-38     	; 0x1f9a <LCD_enu_SendChar+0x196>
    1fc0:	24 c0       	rjmp	.+72     	; 0x200a <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc4:	79 a1       	ldd	r23, Y+33	; 0x21
    1fc6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc8:	9b a1       	ldd	r25, Y+35	; 0x23
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd4:	8e 8f       	std	Y+30, r24	; 0x1e
    1fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fda:	9b 8f       	std	Y+27, r25	; 0x1b
    1fdc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fde:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <LCD_enu_SendChar+0x1de>
    1fe6:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe8:	8a 8f       	std	Y+26, r24	; 0x1a
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fec:	69 a5       	ldd	r22, Y+41	; 0x29
    1fee:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	88 a7       	std	Y+40, r24	; 0x28
    1ffe:	88 a5       	ldd	r24, Y+40	; 0x28
    2000:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2002:	89 8d       	ldd	r24, Y+25	; 0x19
    2004:	8a 95       	dec	r24
    2006:	f1 f7       	brne	.-4      	; 0x2004 <LCD_enu_SendChar+0x200>
    2008:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	62 e0       	ldi	r22, 0x02	; 2
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    2014:	89 a9       	ldd	r24, Y+49	; 0x31
    2016:	86 95       	lsr	r24
    2018:	86 95       	lsr	r24
    201a:	86 95       	lsr	r24
    201c:	98 2f       	mov	r25, r24
    201e:	91 70       	andi	r25, 0x01	; 1
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	66 e0       	ldi	r22, 0x06	; 6
    2024:	49 2f       	mov	r20, r25
    2026:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    202a:	89 a9       	ldd	r24, Y+49	; 0x31
    202c:	86 95       	lsr	r24
    202e:	86 95       	lsr	r24
    2030:	98 2f       	mov	r25, r24
    2032:	91 70       	andi	r25, 0x01	; 1
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	65 e0       	ldi	r22, 0x05	; 5
    2038:	49 2f       	mov	r20, r25
    203a:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    203e:	89 a9       	ldd	r24, Y+49	; 0x31
    2040:	86 95       	lsr	r24
    2042:	98 2f       	mov	r25, r24
    2044:	91 70       	andi	r25, 0x01	; 1
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	64 e0       	ldi	r22, 0x04	; 4
    204a:	49 2f       	mov	r20, r25
    204c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    2050:	89 a9       	ldd	r24, Y+49	; 0x31
    2052:	98 2f       	mov	r25, r24
    2054:	91 70       	andi	r25, 0x01	; 1
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	63 e0       	ldi	r22, 0x03	; 3
    205a:	49 2f       	mov	r20, r25
    205c:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	62 e0       	ldi	r22, 0x02	; 2
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	8d 8b       	std	Y+21, r24	; 0x15
    2074:	9e 8b       	std	Y+22, r25	; 0x16
    2076:	af 8b       	std	Y+23, r26	; 0x17
    2078:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    207a:	6d 89       	ldd	r22, Y+21	; 0x15
    207c:	7e 89       	ldd	r23, Y+22	; 0x16
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	2b ea       	ldi	r18, 0xAB	; 171
    2084:	3a ea       	ldi	r19, 0xAA	; 170
    2086:	4a ea       	ldi	r20, 0xAA	; 170
    2088:	50 e4       	ldi	r21, 0x40	; 64
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	89 8b       	std	Y+17, r24	; 0x11
    2094:	9a 8b       	std	Y+18, r25	; 0x12
    2096:	ab 8b       	std	Y+19, r26	; 0x13
    2098:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    209a:	69 89       	ldd	r22, Y+17	; 0x11
    209c:	7a 89       	ldd	r23, Y+18	; 0x12
    209e:	8b 89       	ldd	r24, Y+19	; 0x13
    20a0:	9c 89       	ldd	r25, Y+20	; 0x14
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	1c f4       	brge	.+6      	; 0x20b8 <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	88 8b       	std	Y+16, r24	; 0x10
    20b6:	91 c0       	rjmp	.+290    	; 0x21da <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    20b8:	69 89       	ldd	r22, Y+17	; 0x11
    20ba:	7a 89       	ldd	r23, Y+18	; 0x12
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	53 e4       	ldi	r21, 0x43	; 67
    20c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20cc:	18 16       	cp	r1, r24
    20ce:	0c f0       	brlt	.+2      	; 0x20d2 <LCD_enu_SendChar+0x2ce>
    20d0:	7b c0       	rjmp	.+246    	; 0x21c8 <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a e7       	ldi	r20, 0x7A	; 122
    20e0:	54 e4       	ldi	r21, 0x44	; 68
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	8c 87       	std	Y+12, r24	; 0x0c
    20ec:	9d 87       	std	Y+13, r25	; 0x0d
    20ee:	ae 87       	std	Y+14, r26	; 0x0e
    20f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    20f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    20f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	4a e7       	ldi	r20, 0x7A	; 122
    2100:	55 e4       	ldi	r21, 0x45	; 69
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	88 87       	std	Y+8, r24	; 0x08
    210c:	99 87       	std	Y+9, r25	; 0x09
    210e:	aa 87       	std	Y+10, r26	; 0x0a
    2110:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2112:	68 85       	ldd	r22, Y+8	; 0x08
    2114:	79 85       	ldd	r23, Y+9	; 0x09
    2116:	8a 85       	ldd	r24, Y+10	; 0x0a
    2118:	9b 85       	ldd	r25, Y+11	; 0x0b
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2126:	88 23       	and	r24, r24
    2128:	2c f4       	brge	.+10     	; 0x2134 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9f 83       	std	Y+7, r25	; 0x07
    2130:	8e 83       	std	Y+6, r24	; 0x06
    2132:	3f c0       	rjmp	.+126    	; 0x21b2 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    2134:	68 85       	ldd	r22, Y+8	; 0x08
    2136:	79 85       	ldd	r23, Y+9	; 0x09
    2138:	8a 85       	ldd	r24, Y+10	; 0x0a
    213a:	9b 85       	ldd	r25, Y+11	; 0x0b
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	3f ef       	ldi	r19, 0xFF	; 255
    2140:	4f e7       	ldi	r20, 0x7F	; 127
    2142:	57 e4       	ldi	r21, 0x47	; 71
    2144:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2148:	18 16       	cp	r1, r24
    214a:	4c f5       	brge	.+82     	; 0x219e <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214c:	6c 85       	ldd	r22, Y+12	; 0x0c
    214e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2150:	8e 85       	ldd	r24, Y+14	; 0x0e
    2152:	9f 85       	ldd	r25, Y+15	; 0x0f
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	40 e2       	ldi	r20, 0x20	; 32
    215a:	51 e4       	ldi	r21, 0x41	; 65
    215c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9f 83       	std	Y+7, r25	; 0x07
    2172:	8e 83       	std	Y+6, r24	; 0x06
    2174:	0f c0       	rjmp	.+30     	; 0x2194 <LCD_enu_SendChar+0x390>
    2176:	80 e9       	ldi	r24, 0x90	; 144
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	9d 83       	std	Y+5, r25	; 0x05
    217c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    217e:	8c 81       	ldd	r24, Y+4	; 0x04
    2180:	9d 81       	ldd	r25, Y+5	; 0x05
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <LCD_enu_SendChar+0x37e>
    2186:	9d 83       	std	Y+5, r25	; 0x05
    2188:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
    218c:	9f 81       	ldd	r25, Y+7	; 0x07
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	8e 81       	ldd	r24, Y+6	; 0x06
    2196:	9f 81       	ldd	r25, Y+7	; 0x07
    2198:	00 97       	sbiw	r24, 0x00	; 0
    219a:	69 f7       	brne	.-38     	; 0x2176 <LCD_enu_SendChar+0x372>
    219c:	24 c0       	rjmp	.+72     	; 0x21e6 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219e:	68 85       	ldd	r22, Y+8	; 0x08
    21a0:	79 85       	ldd	r23, Y+9	; 0x09
    21a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9f 83       	std	Y+7, r25	; 0x07
    21b0:	8e 83       	std	Y+6, r24	; 0x06
    21b2:	8e 81       	ldd	r24, Y+6	; 0x06
    21b4:	9f 81       	ldd	r25, Y+7	; 0x07
    21b6:	9b 83       	std	Y+3, r25	; 0x03
    21b8:	8a 83       	std	Y+2, r24	; 0x02
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	9b 81       	ldd	r25, Y+3	; 0x03
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_enu_SendChar+0x3ba>
    21c2:	9b 83       	std	Y+3, r25	; 0x03
    21c4:	8a 83       	std	Y+2, r24	; 0x02
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21c8:	69 89       	ldd	r22, Y+17	; 0x11
    21ca:	7a 89       	ldd	r23, Y+18	; 0x12
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	88 8b       	std	Y+16, r24	; 0x10
    21da:	88 89       	ldd	r24, Y+16	; 0x10
    21dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	8a 95       	dec	r24
    21e2:	f1 f7       	brne	.-4      	; 0x21e0 <LCD_enu_SendChar+0x3dc>
    21e4:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	62 e0       	ldi	r22, 0x02	; 2
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    return STATE_OK;
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    21f2:	e1 96       	adiw	r28, 0x31	; 49
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <LCD_enu_SendString+0x6>
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	9b 83       	std	Y+3, r25	; 0x03
    2212:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    2214:	19 82       	std	Y+1, r1	; 0x01
    2216:	0e c0       	rjmp	.+28     	; 0x2234 <LCD_enu_SendString+0x30>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	fc 01       	movw	r30, r24
    2224:	e2 0f       	add	r30, r18
    2226:	f3 1f       	adc	r31, r19
    2228:	80 81       	ld	r24, Z
    222a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	8f 5f       	subi	r24, 0xFF	; 255
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	fc 01       	movw	r30, r24
    2240:	e2 0f       	add	r30, r18
    2242:	f3 1f       	adc	r31, r19
    2244:	80 81       	ld	r24, Z
    2246:	88 23       	and	r24, r24
    2248:	39 f7       	brne	.-50     	; 0x2218 <LCD_enu_SendString+0x14>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    224a:	81 e0       	ldi	r24, 0x01	; 1
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	60 97       	sbiw	r28, 0x10	; 16
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	6d 87       	std	Y+13, r22	; 0x0d
    2272:	7e 87       	std	Y+14, r23	; 0x0e
    2274:	8f 87       	std	Y+15, r24	; 0x0f
    2276:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    2278:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    227a:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    227c:	8d 85       	ldd	r24, Y+13	; 0x0d
    227e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2280:	af 85       	ldd	r26, Y+15	; 0x0f
    2282:	b8 89       	ldd	r27, Y+16	; 0x10
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	a1 05       	cpc	r26, r1
    2288:	b1 05       	cpc	r27, r1
    228a:	89 f5       	brne	.+98     	; 0x22ee <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    228c:	80 e3       	ldi	r24, 0x30	; 48
    228e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>
    2292:	4d c0       	rjmp	.+154    	; 0x232e <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	08 2f       	mov	r16, r24
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	8d 85       	ldd	r24, Y+13	; 0x0d
    229c:	9e 85       	ldd	r25, Y+14	; 0x0e
    229e:	af 85       	ldd	r26, Y+15	; 0x0f
    22a0:	b8 89       	ldd	r27, Y+16	; 0x10
    22a2:	2a e0       	ldi	r18, 0x0A	; 10
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__udivmodsi4>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	28 2f       	mov	r18, r24
    22b8:	ce 01       	movw	r24, r28
    22ba:	03 96       	adiw	r24, 0x03	; 3
    22bc:	fc 01       	movw	r30, r24
    22be:	e0 0f       	add	r30, r16
    22c0:	f1 1f       	adc	r31, r17
    22c2:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	af 85       	ldd	r26, Y+15	; 0x0f
    22ca:	b8 89       	ldd	r27, Y+16	; 0x10
    22cc:	2a e0       	ldi	r18, 0x0A	; 10
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__udivmodsi4>
    22dc:	da 01       	movw	r26, r20
    22de:	c9 01       	movw	r24, r18
    22e0:	8d 87       	std	Y+13, r24	; 0x0d
    22e2:	9e 87       	std	Y+14, r25	; 0x0e
    22e4:	af 87       	std	Y+15, r26	; 0x0f
    22e6:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    22ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f2:	af 85       	ldd	r26, Y+15	; 0x0f
    22f4:	b8 89       	ldd	r27, Y+16	; 0x10
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	a1 05       	cpc	r26, r1
    22fa:	b1 05       	cpc	r27, r1
    22fc:	59 f6       	brne	.-106    	; 0x2294 <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	81 50       	subi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	11 c0       	rjmp	.+34     	; 0x2328 <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	28 2f       	mov	r18, r24
    230a:	33 27       	eor	r19, r19
    230c:	27 fd       	sbrc	r18, 7
    230e:	30 95       	com	r19
    2310:	ce 01       	movw	r24, r28
    2312:	03 96       	adiw	r24, 0x03	; 3
    2314:	fc 01       	movw	r30, r24
    2316:	e2 0f       	add	r30, r18
    2318:	f3 1f       	adc	r31, r19
    231a:	80 81       	ld	r24, Z
    231c:	80 5d       	subi	r24, 0xD0	; 208
    231e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	88 23       	and	r24, r24
    232c:	64 f7       	brge	.-40     	; 0x2306 <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    232e:	81 e0       	ldi	r24, 0x01	; 1
}
    2330:	60 96       	adiw	r28, 0x10	; 16
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	1f 91       	pop	r17
    2342:	0f 91       	pop	r16
    2344:	08 95       	ret

00002346 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	00 d0       	rcall	.+0      	; 0x234c <LCD_enu_SetCursor+0x6>
    234c:	00 d0       	rcall	.+0      	; 0x234e <LCD_enu_SetCursor+0x8>
    234e:	0f 92       	push	r0
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	88 32       	cpi	r24, 0x28	; 40
    235c:	f0 f4       	brcc	.+60     	; 0x239a <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	3d 83       	std	Y+5, r19	; 0x05
    2366:	2c 83       	std	Y+4, r18	; 0x04
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	00 97       	sbiw	r24, 0x00	; 0
    236e:	31 f0       	breq	.+12     	; 0x237c <LCD_enu_SetCursor+0x36>
    2370:	2c 81       	ldd	r18, Y+4	; 0x04
    2372:	3d 81       	ldd	r19, Y+5	; 0x05
    2374:	21 30       	cpi	r18, 0x01	; 1
    2376:	31 05       	cpc	r19, r1
    2378:	31 f0       	breq	.+12     	; 0x2386 <LCD_enu_SetCursor+0x40>
    237a:	0a c0       	rjmp	.+20     	; 0x2390 <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	80 58       	subi	r24, 0x80	; 128
    2380:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	80 54       	subi	r24, 0x40	; 64
    238a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    2390:	1b 82       	std	Y+3, r1	; 0x03
    2392:	04 c0       	rjmp	.+8      	; 0x239c <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    2394:	31 e0       	ldi	r19, 0x01	; 1
    2396:	3b 83       	std	Y+3, r19	; 0x03
    2398:	01 c0       	rjmp	.+2      	; 0x239c <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    239a:	1b 82       	std	Y+3, r1	; 0x03
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	cc 54       	subi	r28, 0x4C	; 76
    23bc:	d0 40       	sbci	r29, 0x00	; 0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	f8 94       	cli
    23c2:	de bf       	out	0x3e, r29	; 62
    23c4:	0f be       	out	0x3f, r0	; 63
    23c6:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	62 e0       	ldi	r22, 0x02	; 2
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	66 e0       	ldi	r22, 0x06	; 6
    23ea:	41 e0       	ldi	r20, 0x01	; 1
    23ec:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	65 e0       	ldi	r22, 0x05	; 5
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	64 e0       	ldi	r22, 0x04	; 4
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	63 e0       	ldi	r22, 0x03	; 3
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    240e:	fe 01       	movw	r30, r28
    2410:	e7 5b       	subi	r30, 0xB7	; 183
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	ac e0       	ldi	r26, 0x0C	; 12
    241a:	b2 e4       	ldi	r27, 0x42	; 66
    241c:	80 83       	st	Z, r24
    241e:	91 83       	std	Z+1, r25	; 0x01
    2420:	a2 83       	std	Z+2, r26	; 0x02
    2422:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	8e 01       	movw	r16, r28
    2426:	0b 5b       	subi	r16, 0xBB	; 187
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
    242a:	fe 01       	movw	r30, r28
    242c:	e7 5b       	subi	r30, 0xB7	; 183
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a e7       	ldi	r20, 0x7A	; 122
    243e:	55 e4       	ldi	r21, 0x45	; 69
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	f8 01       	movw	r30, r16
    244a:	80 83       	st	Z, r24
    244c:	91 83       	std	Z+1, r25	; 0x01
    244e:	a2 83       	std	Z+2, r26	; 0x02
    2450:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2452:	fe 01       	movw	r30, r28
    2454:	eb 5b       	subi	r30, 0xBB	; 187
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	60 81       	ld	r22, Z
    245a:	71 81       	ldd	r23, Z+1	; 0x01
    245c:	82 81       	ldd	r24, Z+2	; 0x02
    245e:	93 81       	ldd	r25, Z+3	; 0x03
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	44 f4       	brge	.+16     	; 0x2480 <LCD_enu_Init+0xd2>
		__ticks = 1;
    2470:	fe 01       	movw	r30, r28
    2472:	ed 5b       	subi	r30, 0xBD	; 189
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	64 c0       	rjmp	.+200    	; 0x2548 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    2480:	fe 01       	movw	r30, r28
    2482:	eb 5b       	subi	r30, 0xBB	; 187
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	3f ef       	ldi	r19, 0xFF	; 255
    2492:	4f e7       	ldi	r20, 0x7F	; 127
    2494:	57 e4       	ldi	r21, 0x47	; 71
    2496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249a:	18 16       	cp	r1, r24
    249c:	0c f0       	brlt	.+2      	; 0x24a0 <LCD_enu_Init+0xf2>
    249e:	43 c0       	rjmp	.+134    	; 0x2526 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	fe 01       	movw	r30, r28
    24a2:	e7 5b       	subi	r30, 0xB7	; 183
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e2       	ldi	r20, 0x20	; 32
    24b4:	51 e4       	ldi	r21, 0x41	; 65
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8e 01       	movw	r16, r28
    24c0:	0d 5b       	subi	r16, 0xBD	; 189
    24c2:	1f 4f       	sbci	r17, 0xFF	; 255
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    24d6:	1f c0       	rjmp	.+62     	; 0x2516 <LCD_enu_Init+0x168>
    24d8:	fe 01       	movw	r30, r28
    24da:	ef 5b       	subi	r30, 0xBF	; 191
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	80 e9       	ldi	r24, 0x90	; 144
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 5b       	subi	r30, 0xBF	; 191
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 81       	ld	r24, Z
    24ee:	91 81       	ldd	r25, Z+1	; 0x01
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_enu_Init+0x142>
    24f4:	fe 01       	movw	r30, r28
    24f6:	ef 5b       	subi	r30, 0xBF	; 191
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	de 01       	movw	r26, r28
    2500:	ad 5b       	subi	r26, 0xBD	; 189
    2502:	bf 4f       	sbci	r27, 0xFF	; 255
    2504:	fe 01       	movw	r30, r28
    2506:	ed 5b       	subi	r30, 0xBD	; 189
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	11 96       	adiw	r26, 0x01	; 1
    2512:	9c 93       	st	X, r25
    2514:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	fe 01       	movw	r30, r28
    2518:	ed 5b       	subi	r30, 0xBD	; 189
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	d1 f6       	brne	.-76     	; 0x24d8 <LCD_enu_Init+0x12a>
    2524:	24 c0       	rjmp	.+72     	; 0x256e <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2526:	8e 01       	movw	r16, r28
    2528:	0d 5b       	subi	r16, 0xBD	; 189
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	fe 01       	movw	r30, r28
    252e:	eb 5b       	subi	r30, 0xBB	; 187
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	f8 01       	movw	r30, r16
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	80 83       	st	Z, r24
    2548:	fe 01       	movw	r30, r28
    254a:	ed 5b       	subi	r30, 0xBD	; 189
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 81       	ld	r24, Z
    2550:	91 81       	ldd	r25, Z+1	; 0x01
    2552:	fe 01       	movw	r30, r28
    2554:	ff 96       	adiw	r30, 0x3f	; 63
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	fe 01       	movw	r30, r28
    255c:	ff 96       	adiw	r30, 0x3f	; 63
    255e:	80 81       	ld	r24, Z
    2560:	91 81       	ldd	r25, Z+1	; 0x01
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <LCD_enu_Init+0x1b4>
    2566:	fe 01       	movw	r30, r28
    2568:	ff 96       	adiw	r30, 0x3f	; 63
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    256e:	83 e3       	ldi	r24, 0x33	; 51
    2570:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    2574:	82 e3       	ldi	r24, 0x32	; 50
    2576:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    257a:	88 e2       	ldi	r24, 0x28	; 40
    257c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 e2       	ldi	r26, 0x20	; 32
    2586:	b2 e4       	ldi	r27, 0x42	; 66
    2588:	8b af       	std	Y+59, r24	; 0x3b
    258a:	9c af       	std	Y+60, r25	; 0x3c
    258c:	ad af       	std	Y+61, r26	; 0x3d
    258e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2590:	6b ad       	ldd	r22, Y+59	; 0x3b
    2592:	7c ad       	ldd	r23, Y+60	; 0x3c
    2594:	8d ad       	ldd	r24, Y+61	; 0x3d
    2596:	9e ad       	ldd	r25, Y+62	; 0x3e
    2598:	2b ea       	ldi	r18, 0xAB	; 171
    259a:	3a ea       	ldi	r19, 0xAA	; 170
    259c:	4a ea       	ldi	r20, 0xAA	; 170
    259e:	50 e4       	ldi	r21, 0x40	; 64
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8f ab       	std	Y+55, r24	; 0x37
    25aa:	98 af       	std	Y+56, r25	; 0x38
    25ac:	a9 af       	std	Y+57, r26	; 0x39
    25ae:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    25b0:	6f a9       	ldd	r22, Y+55	; 0x37
    25b2:	78 ad       	ldd	r23, Y+56	; 0x38
    25b4:	89 ad       	ldd	r24, Y+57	; 0x39
    25b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	1c f4       	brge	.+6      	; 0x25ce <LCD_enu_Init+0x220>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	8e ab       	std	Y+54, r24	; 0x36
    25cc:	91 c0       	rjmp	.+290    	; 0x26f0 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    25ce:	6f a9       	ldd	r22, Y+55	; 0x37
    25d0:	78 ad       	ldd	r23, Y+56	; 0x38
    25d2:	89 ad       	ldd	r24, Y+57	; 0x39
    25d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4f e7       	ldi	r20, 0x7F	; 127
    25dc:	53 e4       	ldi	r21, 0x43	; 67
    25de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e2:	18 16       	cp	r1, r24
    25e4:	0c f0       	brlt	.+2      	; 0x25e8 <LCD_enu_Init+0x23a>
    25e6:	7b c0       	rjmp	.+246    	; 0x26de <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    25e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    25ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    25ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    25ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a e7       	ldi	r20, 0x7A	; 122
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	8a ab       	std	Y+50, r24	; 0x32
    2602:	9b ab       	std	Y+51, r25	; 0x33
    2604:	ac ab       	std	Y+52, r26	; 0x34
    2606:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6a a9       	ldd	r22, Y+50	; 0x32
    260a:	7b a9       	ldd	r23, Y+51	; 0x33
    260c:	8c a9       	ldd	r24, Y+52	; 0x34
    260e:	9d a9       	ldd	r25, Y+53	; 0x35
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a e7       	ldi	r20, 0x7A	; 122
    2616:	55 e4       	ldi	r21, 0x45	; 69
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8e a7       	std	Y+46, r24	; 0x2e
    2622:	9f a7       	std	Y+47, r25	; 0x2f
    2624:	a8 ab       	std	Y+48, r26	; 0x30
    2626:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2628:	6e a5       	ldd	r22, Y+46	; 0x2e
    262a:	7f a5       	ldd	r23, Y+47	; 0x2f
    262c:	88 a9       	ldd	r24, Y+48	; 0x30
    262e:	99 a9       	ldd	r25, Y+49	; 0x31
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <LCD_enu_Init+0x29c>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9d a7       	std	Y+45, r25	; 0x2d
    2646:	8c a7       	std	Y+44, r24	; 0x2c
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    264a:	6e a5       	ldd	r22, Y+46	; 0x2e
    264c:	7f a5       	ldd	r23, Y+47	; 0x2f
    264e:	88 a9       	ldd	r24, Y+48	; 0x30
    2650:	99 a9       	ldd	r25, Y+49	; 0x31
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6a a9       	ldd	r22, Y+50	; 0x32
    2664:	7b a9       	ldd	r23, Y+51	; 0x33
    2666:	8c a9       	ldd	r24, Y+52	; 0x34
    2668:	9d a9       	ldd	r25, Y+53	; 0x35
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9d a7       	std	Y+45, r25	; 0x2d
    2688:	8c a7       	std	Y+44, r24	; 0x2c
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <LCD_enu_Init+0x2fc>
    268c:	80 e9       	ldi	r24, 0x90	; 144
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	9b a7       	std	Y+43, r25	; 0x2b
    2692:	8a a7       	std	Y+42, r24	; 0x2a
    2694:	8a a5       	ldd	r24, Y+42	; 0x2a
    2696:	9b a5       	ldd	r25, Y+43	; 0x2b
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_enu_Init+0x2ea>
    269c:	9b a7       	std	Y+43, r25	; 0x2b
    269e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    26a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9d a7       	std	Y+45, r25	; 0x2d
    26a8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    26ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <LCD_enu_Init+0x2de>
    26b2:	24 c0       	rjmp	.+72     	; 0x26fc <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    26b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    26b8:	88 a9       	ldd	r24, Y+48	; 0x30
    26ba:	99 a9       	ldd	r25, Y+49	; 0x31
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9d a7       	std	Y+45, r25	; 0x2d
    26c6:	8c a7       	std	Y+44, r24	; 0x2c
    26c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    26ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    26cc:	99 a7       	std	Y+41, r25	; 0x29
    26ce:	88 a7       	std	Y+40, r24	; 0x28
    26d0:	88 a5       	ldd	r24, Y+40	; 0x28
    26d2:	99 a5       	ldd	r25, Y+41	; 0x29
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <LCD_enu_Init+0x326>
    26d8:	99 a7       	std	Y+41, r25	; 0x29
    26da:	88 a7       	std	Y+40, r24	; 0x28
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26de:	6f a9       	ldd	r22, Y+55	; 0x37
    26e0:	78 ad       	ldd	r23, Y+56	; 0x38
    26e2:	89 ad       	ldd	r24, Y+57	; 0x39
    26e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8e ab       	std	Y+54, r24	; 0x36
    26f0:	8e a9       	ldd	r24, Y+54	; 0x36
    26f2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26f4:	8f a1       	ldd	r24, Y+39	; 0x27
    26f6:	8a 95       	dec	r24
    26f8:	f1 f7       	brne	.-4      	; 0x26f6 <LCD_enu_Init+0x348>
    26fa:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    26fc:	8f e0       	ldi	r24, 0x0F	; 15
    26fe:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a0 e2       	ldi	r26, 0x20	; 32
    2708:	b2 e4       	ldi	r27, 0x42	; 66
    270a:	8b a3       	std	Y+35, r24	; 0x23
    270c:	9c a3       	std	Y+36, r25	; 0x24
    270e:	ad a3       	std	Y+37, r26	; 0x25
    2710:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	2b ea       	ldi	r18, 0xAB	; 171
    271c:	3a ea       	ldi	r19, 0xAA	; 170
    271e:	4a ea       	ldi	r20, 0xAA	; 170
    2720:	50 e4       	ldi	r21, 0x40	; 64
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8f 8f       	std	Y+31, r24	; 0x1f
    272c:	98 a3       	std	Y+32, r25	; 0x20
    272e:	a9 a3       	std	Y+33, r26	; 0x21
    2730:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2732:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2734:	78 a1       	ldd	r23, Y+32	; 0x20
    2736:	89 a1       	ldd	r24, Y+33	; 0x21
    2738:	9a a1       	ldd	r25, Y+34	; 0x22
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	1c f4       	brge	.+6      	; 0x2750 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	8e 8f       	std	Y+30, r24	; 0x1e
    274e:	91 c0       	rjmp	.+290    	; 0x2872 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2750:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2752:	78 a1       	ldd	r23, Y+32	; 0x20
    2754:	89 a1       	ldd	r24, Y+33	; 0x21
    2756:	9a a1       	ldd	r25, Y+34	; 0x22
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4f e7       	ldi	r20, 0x7F	; 127
    275e:	53 e4       	ldi	r21, 0x43	; 67
    2760:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2764:	18 16       	cp	r1, r24
    2766:	0c f0       	brlt	.+2      	; 0x276a <LCD_enu_Init+0x3bc>
    2768:	7b c0       	rjmp	.+246    	; 0x2860 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    276a:	6b a1       	ldd	r22, Y+35	; 0x23
    276c:	7c a1       	ldd	r23, Y+36	; 0x24
    276e:	8d a1       	ldd	r24, Y+37	; 0x25
    2770:	9e a1       	ldd	r25, Y+38	; 0x26
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	4a e7       	ldi	r20, 0x7A	; 122
    2778:	54 e4       	ldi	r21, 0x44	; 68
    277a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	8a 8f       	std	Y+26, r24	; 0x1a
    2784:	9b 8f       	std	Y+27, r25	; 0x1b
    2786:	ac 8f       	std	Y+28, r26	; 0x1c
    2788:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    278c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    278e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2790:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a e7       	ldi	r20, 0x7A	; 122
    2798:	55 e4       	ldi	r21, 0x45	; 69
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8e 8b       	std	Y+22, r24	; 0x16
    27a4:	9f 8b       	std	Y+23, r25	; 0x17
    27a6:	a8 8f       	std	Y+24, r26	; 0x18
    27a8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    27aa:	6e 89       	ldd	r22, Y+22	; 0x16
    27ac:	7f 89       	ldd	r23, Y+23	; 0x17
    27ae:	88 8d       	ldd	r24, Y+24	; 0x18
    27b0:	99 8d       	ldd	r25, Y+25	; 0x19
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_enu_Init+0x41e>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9d 8b       	std	Y+21, r25	; 0x15
    27c8:	8c 8b       	std	Y+20, r24	; 0x14
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    27cc:	6e 89       	ldd	r22, Y+22	; 0x16
    27ce:	7f 89       	ldd	r23, Y+23	; 0x17
    27d0:	88 8d       	ldd	r24, Y+24	; 0x18
    27d2:	99 8d       	ldd	r25, Y+25	; 0x19
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27e6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    27e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9d 8b       	std	Y+21, r25	; 0x15
    280a:	8c 8b       	std	Y+20, r24	; 0x14
    280c:	0f c0       	rjmp	.+30     	; 0x282c <LCD_enu_Init+0x47e>
    280e:	80 e9       	ldi	r24, 0x90	; 144
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	9b 8b       	std	Y+19, r25	; 0x13
    2814:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2816:	8a 89       	ldd	r24, Y+18	; 0x12
    2818:	9b 89       	ldd	r25, Y+19	; 0x13
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_enu_Init+0x46c>
    281e:	9b 8b       	std	Y+19, r25	; 0x13
    2820:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8c 89       	ldd	r24, Y+20	; 0x14
    2824:	9d 89       	ldd	r25, Y+21	; 0x15
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9d 8b       	std	Y+21, r25	; 0x15
    282a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8c 89       	ldd	r24, Y+20	; 0x14
    282e:	9d 89       	ldd	r25, Y+21	; 0x15
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <LCD_enu_Init+0x460>
    2834:	24 c0       	rjmp	.+72     	; 0x287e <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	6e 89       	ldd	r22, Y+22	; 0x16
    2838:	7f 89       	ldd	r23, Y+23	; 0x17
    283a:	88 8d       	ldd	r24, Y+24	; 0x18
    283c:	99 8d       	ldd	r25, Y+25	; 0x19
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9d 8b       	std	Y+21, r25	; 0x15
    2848:	8c 8b       	std	Y+20, r24	; 0x14
    284a:	8c 89       	ldd	r24, Y+20	; 0x14
    284c:	9d 89       	ldd	r25, Y+21	; 0x15
    284e:	99 8b       	std	Y+17, r25	; 0x11
    2850:	88 8b       	std	Y+16, r24	; 0x10
    2852:	88 89       	ldd	r24, Y+16	; 0x10
    2854:	99 89       	ldd	r25, Y+17	; 0x11
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_enu_Init+0x4a8>
    285a:	99 8b       	std	Y+17, r25	; 0x11
    285c:	88 8b       	std	Y+16, r24	; 0x10
    285e:	0f c0       	rjmp	.+30     	; 0x287e <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2860:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2862:	78 a1       	ldd	r23, Y+32	; 0x20
    2864:	89 a1       	ldd	r24, Y+33	; 0x21
    2866:	9a a1       	ldd	r25, Y+34	; 0x22
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8e 8f       	std	Y+30, r24	; 0x1e
    2872:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2874:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2876:	8f 85       	ldd	r24, Y+15	; 0x0f
    2878:	8a 95       	dec	r24
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_enu_Init+0x4ca>
    287c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e4       	ldi	r27, 0x40	; 64
    288c:	8b 87       	std	Y+11, r24	; 0x0b
    288e:	9c 87       	std	Y+12, r25	; 0x0c
    2890:	ad 87       	std	Y+13, r26	; 0x0d
    2892:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6b 85       	ldd	r22, Y+11	; 0x0b
    2896:	7c 85       	ldd	r23, Y+12	; 0x0c
    2898:	8d 85       	ldd	r24, Y+13	; 0x0d
    289a:	9e 85       	ldd	r25, Y+14	; 0x0e
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a e7       	ldi	r20, 0x7A	; 122
    28a2:	55 e4       	ldi	r21, 0x45	; 69
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	8f 83       	std	Y+7, r24	; 0x07
    28ae:	98 87       	std	Y+8, r25	; 0x08
    28b0:	a9 87       	std	Y+9, r26	; 0x09
    28b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <LCD_enu_Init+0x528>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    28d6:	6f 81       	ldd	r22, Y+7	; 0x07
    28d8:	78 85       	ldd	r23, Y+8	; 0x08
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9e 83       	std	Y+6, r25	; 0x06
    2914:	8d 83       	std	Y+5, r24	; 0x05
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <LCD_enu_Init+0x588>
    2918:	80 e9       	ldi	r24, 0x90	; 144
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	9c 81       	ldd	r25, Y+4	; 0x04
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <LCD_enu_Init+0x576>
    2928:	9c 83       	std	Y+4, r25	; 0x04
    292a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	9e 81       	ldd	r25, Y+6	; 0x06
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9e 83       	std	Y+6, r25	; 0x06
    2934:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	8d 81       	ldd	r24, Y+5	; 0x05
    2938:	9e 81       	ldd	r25, Y+6	; 0x06
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <LCD_enu_Init+0x56a>
    293e:	14 c0       	rjmp	.+40     	; 0x2968 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	6f 81       	ldd	r22, Y+7	; 0x07
    2942:	78 85       	ldd	r23, Y+8	; 0x08
    2944:	89 85       	ldd	r24, Y+9	; 0x09
    2946:	9a 85       	ldd	r25, Y+10	; 0x0a
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9e 83       	std	Y+6, r25	; 0x06
    2952:	8d 83       	std	Y+5, r24	; 0x05
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	9e 81       	ldd	r25, Y+6	; 0x06
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <LCD_enu_Init+0x5b2>
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2968:	86 e0       	ldi	r24, 0x06	; 6
    296a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    return STATE_OK;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    2970:	c4 5b       	subi	r28, 0xB4	; 180
    2972:	df 4f       	sbci	r29, 0xFF	; 255
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	2e 97       	sbiw	r28, 0x0e	; 14
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a0 e0       	ldi	r26, 0x00	; 0
    29a8:	b0 e4       	ldi	r27, 0x40	; 64
    29aa:	8b 87       	std	Y+11, r24	; 0x0b
    29ac:	9c 87       	std	Y+12, r25	; 0x0c
    29ae:	ad 87       	std	Y+13, r26	; 0x0d
    29b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a e7       	ldi	r20, 0x7A	; 122
    29c0:	55 e4       	ldi	r21, 0x45	; 69
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8f 83       	std	Y+7, r24	; 0x07
    29cc:	98 87       	std	Y+8, r25	; 0x08
    29ce:	a9 87       	std	Y+9, r26	; 0x09
    29d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	78 85       	ldd	r23, Y+8	; 0x08
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9e 83       	std	Y+6, r25	; 0x06
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <LCD_enu_Clear+0xcc>
    2a36:	80 e9       	ldi	r24, 0x90	; 144
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_enu_Clear+0xba>
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <LCD_enu_Clear+0xae>
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <LCD_enu_Clear+0xf6>
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
}
    2a88:	2e 96       	adiw	r28, 0x0e	; 14
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	08 95       	ret

00002a9a <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <LCD_enu_CreateCustomChar+0x6>
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <LCD_enu_CreateCustomChar+0x8>
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	8a 83       	std	Y+2, r24	; 0x02
    2aaa:	7c 83       	std	Y+4, r23	; 0x04
    2aac:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	49 f1       	breq	.+82     	; 0x2b08 <LCD_enu_CreateCustomChar+0x6e>
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	88 30       	cpi	r24, 0x08	; 8
    2aba:	30 f5       	brcc	.+76     	; 0x2b08 <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	08 96       	adiw	r24, 0x08	; 8
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	88 0f       	add	r24, r24
    2aca:	99 1f       	adc	r25, r25
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2ad4:	19 82       	std	Y+1, r1	; 0x01
    2ad6:	0e c0       	rjmp	.+28     	; 0x2af4 <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	e2 0f       	add	r30, r18
    2ae6:	f3 1f       	adc	r31, r19
    2ae8:	80 81       	ld	r24, Z
    2aea:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	88 30       	cpi	r24, 0x08	; 8
    2af8:	78 f3       	brcs	.-34     	; 0x2ad8 <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	60 e0       	ldi	r22, 0x00	; 0
    2afe:	0e 94 a3 11 	call	0x2346	; 0x2346 <LCD_enu_SetCursor>
        return STATE_OK;
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	8d 83       	std	Y+5, r24	; 0x05
    2b0c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	cf 91       	pop	r28
    2b1a:	df 91       	pop	r29
    2b1c:	08 95       	ret

00002b1e <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2b1e:	df 93       	push	r29
    2b20:	cf 93       	push	r28
    2b22:	0f 92       	push	r0
    2b24:	cd b7       	in	r28, 0x3d	; 61
    2b26:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2b28:	19 82       	std	Y+1, r1	; 0x01
    2b2a:	33 c0       	rjmp	.+102    	; 0x2b92 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	88 2f       	mov	r24, r24
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	fc 01       	movw	r30, r24
    2b34:	e3 5b       	subi	r30, 0xB3	; 179
    2b36:	fe 4f       	sbci	r31, 0xFE	; 254
    2b38:	90 81       	ld	r25, Z
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	69 2f       	mov	r22, r25
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	e3 5b       	subi	r30, 0xB3	; 179
    2b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b50:	90 81       	ld	r25, Z
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	69 2f       	mov	r22, r25
    2b56:	41 e0       	ldi	r20, 0x01	; 1
    2b58:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2b5c:	89 81       	ldd	r24, Y+1	; 0x01
    2b5e:	88 2f       	mov	r24, r24
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	fc 01       	movw	r30, r24
    2b64:	ef 5a       	subi	r30, 0xAF	; 175
    2b66:	fe 4f       	sbci	r31, 0xFE	; 254
    2b68:	90 81       	ld	r25, Z
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	69 2f       	mov	r22, r25
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	88 2f       	mov	r24, r24
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	fc 01       	movw	r30, r24
    2b7c:	ef 5a       	subi	r30, 0xAF	; 175
    2b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b80:	90 81       	ld	r25, Z
    2b82:	83 e0       	ldi	r24, 0x03	; 3
    2b84:	69 2f       	mov	r22, r25
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	84 30       	cpi	r24, 0x04	; 4
    2b96:	50 f2       	brcs	.-108    	; 0x2b2c <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
}
    2b9a:	0f 90       	pop	r0
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	65 97       	sbiw	r28, 0x15	; 21
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	f8 94       	cli
    2bb0:	de bf       	out	0x3e, r29	; 62
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	cd bf       	out	0x3d, r28	; 61
    2bb6:	9d 8b       	std	Y+21, r25	; 0x15
    2bb8:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	8a 8b       	std	Y+18, r24	; 0x12
    2bbe:	1b 8a       	std	Y+19, r1	; 0x13
    2bc0:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    2bc2:	8c 89       	ldd	r24, Y+20	; 0x14
    2bc4:	9d 89       	ldd	r25, Y+21	; 0x15
    2bc6:	00 97       	sbiw	r24, 0x00	; 0
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <Keypad_enu_getKey+0x2a>
    2bca:	f0 c0       	rjmp	.+480    	; 0x2dac <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    2bcc:	ec 89       	ldd	r30, Y+20	; 0x14
    2bce:	fd 89       	ldd	r31, Y+21	; 0x15
    2bd0:	8f ef       	ldi	r24, 0xFF	; 255
    2bd2:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2bd4:	19 8a       	std	Y+17, r1	; 0x11
    2bd6:	e5 c0       	rjmp	.+458    	; 0x2da2 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    2bd8:	89 89       	ldd	r24, Y+17	; 0x11
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	fc 01       	movw	r30, r24
    2be0:	e3 5b       	subi	r30, 0xB3	; 179
    2be2:	fe 4f       	sbci	r31, 0xFE	; 254
    2be4:	90 81       	ld	r25, Z
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	69 2f       	mov	r22, r25
    2bea:	40 e0       	ldi	r20, 0x00	; 0
    2bec:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2bf0:	18 8a       	std	Y+16, r1	; 0x10
    2bf2:	c1 c0       	rjmp	.+386    	; 0x2d76 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2bf4:	88 89       	ldd	r24, Y+16	; 0x10
    2bf6:	88 2f       	mov	r24, r24
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	ef 5a       	subi	r30, 0xAF	; 175
    2bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    2c00:	90 81       	ld	r25, Z
    2c02:	9e 01       	movw	r18, r28
    2c04:	2d 5e       	subi	r18, 0xED	; 237
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	69 2f       	mov	r22, r25
    2c0c:	a9 01       	movw	r20, r18
    2c0e:	0e 94 ef 21 	call	0x43de	; 0x43de <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	88 23       	and	r24, r24
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <Keypad_enu_getKey+0x78>
    2c18:	ab c0       	rjmp	.+342    	; 0x2d70 <Keypad_enu_getKey+0x1ce>
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	a0 ea       	ldi	r26, 0xA0	; 160
    2c20:	b1 e4       	ldi	r27, 0x41	; 65
    2c22:	8b 87       	std	Y+11, r24	; 0x0b
    2c24:	9c 87       	std	Y+12, r25	; 0x0c
    2c26:	ad 87       	std	Y+13, r26	; 0x0d
    2c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	55 e4       	ldi	r21, 0x45	; 69
    2c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8f 83       	std	Y+7, r24	; 0x07
    2c44:	98 87       	std	Y+8, r25	; 0x08
    2c46:	a9 87       	std	Y+9, r26	; 0x09
    2c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	40 e8       	ldi	r20, 0x80	; 128
    2c58:	5f e3       	ldi	r21, 0x3F	; 63
    2c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c5e:	88 23       	and	r24, r24
    2c60:	2c f4       	brge	.+10     	; 0x2c6c <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9e 83       	std	Y+6, r25	; 0x06
    2c68:	8d 83       	std	Y+5, r24	; 0x05
    2c6a:	3f c0       	rjmp	.+126    	; 0x2cea <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c6e:	78 85       	ldd	r23, Y+8	; 0x08
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	3f ef       	ldi	r19, 0xFF	; 255
    2c78:	4f e7       	ldi	r20, 0x7F	; 127
    2c7a:	57 e4       	ldi	r21, 0x47	; 71
    2c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c80:	18 16       	cp	r1, r24
    2c82:	4c f5       	brge	.+82     	; 0x2cd6 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e2       	ldi	r20, 0x20	; 32
    2c92:	51 e4       	ldi	r21, 0x41	; 65
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	bc 01       	movw	r22, r24
    2c9e:	cd 01       	movw	r24, r26
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	0f c0       	rjmp	.+30     	; 0x2ccc <Keypad_enu_getKey+0x12a>
    2cae:	80 e9       	ldi	r24, 0x90	; 144
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	9c 83       	std	Y+4, r25	; 0x04
    2cb4:	8b 83       	std	Y+3, r24	; 0x03
    2cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	f1 f7       	brne	.-4      	; 0x2cba <Keypad_enu_getKey+0x118>
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	69 f7       	brne	.-38     	; 0x2cae <Keypad_enu_getKey+0x10c>
    2cd4:	14 c0       	rjmp	.+40     	; 0x2cfe <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd8:	78 85       	ldd	r23, Y+8	; 0x08
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	8d 81       	ldd	r24, Y+5	; 0x05
    2cec:	9e 81       	ldd	r25, Y+6	; 0x06
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	f1 f7       	brne	.-4      	; 0x2cf6 <Keypad_enu_getKey+0x154>
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2cfe:	88 89       	ldd	r24, Y+16	; 0x10
    2d00:	88 2f       	mov	r24, r24
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	fc 01       	movw	r30, r24
    2d06:	ef 5a       	subi	r30, 0xAF	; 175
    2d08:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0a:	90 81       	ld	r25, Z
    2d0c:	9e 01       	movw	r18, r28
    2d0e:	2d 5e       	subi	r18, 0xED	; 237
    2d10:	3f 4f       	sbci	r19, 0xFF	; 255
    2d12:	83 e0       	ldi	r24, 0x03	; 3
    2d14:	69 2f       	mov	r22, r25
    2d16:	a9 01       	movw	r20, r18
    2d18:	0e 94 ef 21 	call	0x43de	; 0x43de <DIO_enu_GetPinValue>
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2d1e:	88 89       	ldd	r24, Y+16	; 0x10
    2d20:	88 2f       	mov	r24, r24
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	fc 01       	movw	r30, r24
    2d26:	ef 5a       	subi	r30, 0xAF	; 175
    2d28:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2a:	90 81       	ld	r25, Z
    2d2c:	9e 01       	movw	r18, r28
    2d2e:	2d 5e       	subi	r18, 0xED	; 237
    2d30:	3f 4f       	sbci	r19, 0xFF	; 255
    2d32:	83 e0       	ldi	r24, 0x03	; 3
    2d34:	69 2f       	mov	r22, r25
    2d36:	a9 01       	movw	r20, r18
    2d38:	0e 94 ef 21 	call	0x43de	; 0x43de <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    2d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3e:	88 23       	and	r24, r24
    2d40:	71 f3       	breq	.-36     	; 0x2d1e <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2d42:	89 89       	ldd	r24, Y+17	; 0x11
    2d44:	48 2f       	mov	r20, r24
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	88 89       	ldd	r24, Y+16	; 0x10
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	ca 01       	movw	r24, r20
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	82 0f       	add	r24, r18
    2d5a:	93 1f       	adc	r25, r19
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e3 5c       	subi	r30, 0xC3	; 195
    2d60:	fe 4f       	sbci	r31, 0xFE	; 254
    2d62:	80 81       	ld	r24, Z
    2d64:	ec 89       	ldd	r30, Y+20	; 0x14
    2d66:	fd 89       	ldd	r31, Y+21	; 0x15
    2d68:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	8f 87       	std	Y+15, r24	; 0x0f
    2d6e:	07 c0       	rjmp	.+14     	; 0x2d7e <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2d70:	88 89       	ldd	r24, Y+16	; 0x10
    2d72:	8f 5f       	subi	r24, 0xFF	; 255
    2d74:	88 8b       	std	Y+16, r24	; 0x10
    2d76:	88 89       	ldd	r24, Y+16	; 0x10
    2d78:	84 30       	cpi	r24, 0x04	; 4
    2d7a:	08 f4       	brcc	.+2      	; 0x2d7e <Keypad_enu_getKey+0x1dc>
    2d7c:	3b cf       	rjmp	.-394    	; 0x2bf4 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2d7e:	89 89       	ldd	r24, Y+17	; 0x11
    2d80:	88 2f       	mov	r24, r24
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	fc 01       	movw	r30, r24
    2d86:	e3 5b       	subi	r30, 0xB3	; 179
    2d88:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8a:	90 81       	ld	r25, Z
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	69 2f       	mov	r22, r25
    2d90:	41 e0       	ldi	r20, 0x01	; 1
    2d92:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    2d96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d98:	88 23       	and	r24, r24
    2d9a:	49 f4       	brne	.+18     	; 0x2dae <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2d9c:	89 89       	ldd	r24, Y+17	; 0x11
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	89 8b       	std	Y+17, r24	; 0x11
    2da2:	89 89       	ldd	r24, Y+17	; 0x11
    2da4:	84 30       	cpi	r24, 0x04	; 4
    2da6:	08 f4       	brcc	.+2      	; 0x2daa <Keypad_enu_getKey+0x208>
    2da8:	17 cf       	rjmp	.-466    	; 0x2bd8 <Keypad_enu_getKey+0x36>
    2daa:	01 c0       	rjmp	.+2      	; 0x2dae <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2dac:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    2dae:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2db0:	65 96       	adiw	r28, 0x15	; 21
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	cf 91       	pop	r28
    2dbe:	df 91       	pop	r29
    2dc0:	08 95       	ret

00002dc2 <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <DC_Motor_enu_Init+0x6>
    2dc8:	0f 92       	push	r0
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	8a 83       	std	Y+2, r24	; 0x02
    2dd0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	81 30       	cpi	r24, 0x01	; 1
    2dda:	19 f0       	breq	.+6      	; 0x2de2 <DC_Motor_enu_Init+0x20>
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	88 23       	and	r24, r24
    2de0:	59 f5       	brne	.+86     	; 0x2e38 <DC_Motor_enu_Init+0x76>
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	81 30       	cpi	r24, 0x01	; 1
    2de6:	19 f0       	breq	.+6      	; 0x2dee <DC_Motor_enu_Init+0x2c>
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	88 23       	and	r24, r24
    2dec:	29 f5       	brne	.+74     	; 0x2e38 <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    2dee:	8a 81       	ldd	r24, Y+2	; 0x02
    2df0:	81 30       	cpi	r24, 0x01	; 1
    2df2:	79 f4       	brne	.+30     	; 0x2e12 <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	64 e0       	ldi	r22, 0x04	; 4
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
    2e0e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	89 f4       	brne	.+34     	; 0x2e3a <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	65 e0       	ldi	r22, 0x05	; 5
    2e1c:	41 e0       	ldi	r20, 0x01	; 1
    2e1e:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    2e22:	82 e0       	ldi	r24, 0x02	; 2
    2e24:	62 e0       	ldi	r22, 0x02	; 2
    2e26:	41 e0       	ldi	r20, 0x01	; 1
    2e28:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	63 e0       	ldi	r22, 0x03	; 3
    2e30:	41 e0       	ldi	r20, 0x01	; 1
    2e32:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <DIO_enu_SetPinDirection>
    2e36:	01 c0       	rjmp	.+2      	; 0x2e3a <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2e38:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	cd b7       	in	r28, 0x3d	; 61
    2e4e:	de b7       	in	r29, 0x3e	; 62
    2e50:	29 97       	sbiw	r28, 0x09	; 9
    2e52:	0f b6       	in	r0, 0x3f	; 63
    2e54:	f8 94       	cli
    2e56:	de bf       	out	0x3e, r29	; 62
    2e58:	0f be       	out	0x3f, r0	; 63
    2e5a:	cd bf       	out	0x3d, r28	; 61
    2e5c:	8a 83       	std	Y+2, r24	; 0x02
    2e5e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	39 87       	std	Y+9, r19	; 0x09
    2e6c:	28 87       	std	Y+8, r18	; 0x08
    2e6e:	88 85       	ldd	r24, Y+8	; 0x08
    2e70:	99 85       	ldd	r25, Y+9	; 0x09
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	31 f0       	breq	.+12     	; 0x2e82 <DC_Motor_enu_Rotate+0x3a>
    2e76:	28 85       	ldd	r18, Y+8	; 0x08
    2e78:	39 85       	ldd	r19, Y+9	; 0x09
    2e7a:	21 30       	cpi	r18, 0x01	; 1
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	89 f1       	breq	.+98     	; 0x2ee2 <DC_Motor_enu_Rotate+0x9a>
    2e80:	60 c0       	rjmp	.+192    	; 0x2f42 <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    2e82:	8b 81       	ldd	r24, Y+3	; 0x03
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	3f 83       	std	Y+7, r19	; 0x07
    2e8a:	2e 83       	std	Y+6, r18	; 0x06
    2e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	a9 f0       	breq	.+42     	; 0x2ebe <DC_Motor_enu_Rotate+0x76>
    2e94:	2e 81       	ldd	r18, Y+6	; 0x06
    2e96:	3f 81       	ldd	r19, Y+7	; 0x07
    2e98:	21 30       	cpi	r18, 0x01	; 1
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	01 f5       	brne	.+64     	; 0x2ede <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	64 e0       	ldi	r22, 0x04	; 4
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    2ea8:	82 e0       	ldi	r24, 0x02	; 2
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	41 e0       	ldi	r20, 0x01	; 1
    2eae:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	61 e0       	ldi	r22, 0x01	; 1
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    2ebc:	43 c0       	rjmp	.+134    	; 0x2f44 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	64 e0       	ldi	r22, 0x04	; 4
    2ec2:	41 e0       	ldi	r20, 0x01	; 1
    2ec4:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	40 e0       	ldi	r20, 0x00	; 0
    2ece:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    2ed2:	82 e0       	ldi	r24, 0x02	; 2
    2ed4:	61 e0       	ldi	r22, 0x01	; 1
    2ed6:	41 e0       	ldi	r20, 0x01	; 1
    2ed8:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    2edc:	33 c0       	rjmp	.+102    	; 0x2f44 <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    2ede:	19 82       	std	Y+1, r1	; 0x01
    2ee0:	31 c0       	rjmp	.+98     	; 0x2f44 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    2ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	3d 83       	std	Y+5, r19	; 0x05
    2eea:	2c 83       	std	Y+4, r18	; 0x04
    2eec:	8c 81       	ldd	r24, Y+4	; 0x04
    2eee:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef0:	00 97       	sbiw	r24, 0x00	; 0
    2ef2:	a9 f0       	breq	.+42     	; 0x2f1e <DC_Motor_enu_Rotate+0xd6>
    2ef4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef8:	21 30       	cpi	r18, 0x01	; 1
    2efa:	31 05       	cpc	r19, r1
    2efc:	01 f5       	brne	.+64     	; 0x2f3e <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    2efe:	82 e0       	ldi	r24, 0x02	; 2
    2f00:	65 e0       	ldi	r22, 0x05	; 5
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    2f08:	82 e0       	ldi	r24, 0x02	; 2
    2f0a:	62 e0       	ldi	r22, 0x02	; 2
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	63 e0       	ldi	r22, 0x03	; 3
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    2f1c:	13 c0       	rjmp	.+38     	; 0x2f44 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    2f1e:	82 e0       	ldi	r24, 0x02	; 2
    2f20:	65 e0       	ldi	r22, 0x05	; 5
    2f22:	41 e0       	ldi	r20, 0x01	; 1
    2f24:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    2f28:	82 e0       	ldi	r24, 0x02	; 2
    2f2a:	62 e0       	ldi	r22, 0x02	; 2
    2f2c:	40 e0       	ldi	r20, 0x00	; 0
    2f2e:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	63 e0       	ldi	r22, 0x03	; 3
    2f36:	41 e0       	ldi	r20, 0x01	; 1
    2f38:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    2f3e:	19 82       	std	Y+1, r1	; 0x01
    2f40:	01 c0       	rjmp	.+2      	; 0x2f44 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    2f42:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f46:	29 96       	adiw	r28, 0x09	; 9
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <DC_Motor_enu_Stop+0x6>
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	88 23       	and	r24, r24
    2f6c:	31 f4       	brne	.+12     	; 0x2f7a <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    2f6e:	82 e0       	ldi	r24, 0x02	; 2
    2f70:	64 e0       	ldi	r22, 0x04	; 4
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    2f78:	0a c0       	rjmp	.+20     	; 0x2f8e <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	31 f4       	brne	.+12     	; 0x2f8c <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    2f80:	82 e0       	ldi	r24, 0x02	; 2
    2f82:	65 e0       	ldi	r22, 0x05	; 5
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	0e 94 c5 20 	call	0x418a	; 0x418a <DIO_enu_SetPinValue>
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2f8c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <WDT_enu_Enable>:
#include"../../5-LIB/BIT_MATH.h"
#include"WDT_Config.h"
#include"WDT_Private.h"


ES_t WDT_enu_Enable(u8 Copy_u8_Time){
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <WDT_enu_Enable+0x6>
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_enu_errorState = STATE_OK;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Time<8){
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	88 30       	cpi	r24, 0x08	; 8
    2fae:	80 f4       	brcc	.+32     	; 0x2fd0 <WDT_enu_Enable+0x36>
        /*Enable With Input Time*/
        WDT_WDTCR_REG |= Copy_u8_Time;
    2fb0:	a1 e4       	ldi	r26, 0x41	; 65
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e1 e4       	ldi	r30, 0x41	; 65
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	90 81       	ld	r25, Z
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	89 2b       	or	r24, r25
    2fbe:	8c 93       	st	X, r24
        SET_BIT(WDT_WDTCR_REG,WDE);
    2fc0:	a1 e4       	ldi	r26, 0x41	; 65
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e1 e4       	ldi	r30, 0x41	; 65
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	88 60       	ori	r24, 0x08	; 8
    2fcc:	8c 93       	st	X, r24
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <WDT_enu_Enable+0x38>
    }else{
        Local_enu_errorState = STATE_NOT_OK;
    2fd0:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_enu_errorState;
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <WDT_enu_Disable>:
ES_t WDT_enu_Disable(void){
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	0f 92       	push	r0
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    /*Disable Sequance*/
    WDT_WDTCR_REG |= ((1<<WDTOE) | (1<<WDE));
    2fe8:	a1 e4       	ldi	r26, 0x41	; 65
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	e1 e4       	ldi	r30, 0x41	; 65
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	88 61       	ori	r24, 0x18	; 24
    2ff4:	8c 93       	st	X, r24
    WDT_WDTCR_REG = 0x00;
    2ff6:	e1 e4       	ldi	r30, 0x41	; 65
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	10 82       	st	Z, r1
    2ffc:	0f 90       	pop	r0
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <Timers_enu_Init>:
#include"Timer_Config.h"
static u8 Timer0_u8_Prescaler , Timer1_u8_Prescaler;
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[3])(void)= {NULL};
ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	2a 97       	sbiw	r28, 0x0a	; 10
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	8a 83       	std	Y+2, r24	; 0x02
    301a:	6b 83       	std	Y+3, r22	; 0x03
    301c:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<2)&& (Copy_u8_Mode < 7)&&(Copy_u8_Prescaler<8)){
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	08 f0       	brcs	.+2      	; 0x302a <Timers_enu_Init+0x26>
    3028:	e4 c1       	rjmp	.+968    	; 0x33f2 <Timers_enu_Init+0x3ee>
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	87 30       	cpi	r24, 0x07	; 7
    302e:	08 f0       	brcs	.+2      	; 0x3032 <Timers_enu_Init+0x2e>
    3030:	e0 c1       	rjmp	.+960    	; 0x33f2 <Timers_enu_Init+0x3ee>
    3032:	8c 81       	ldd	r24, Y+4	; 0x04
    3034:	88 30       	cpi	r24, 0x08	; 8
    3036:	08 f0       	brcs	.+2      	; 0x303a <Timers_enu_Init+0x36>
    3038:	dc c1       	rjmp	.+952    	; 0x33f2 <Timers_enu_Init+0x3ee>
    switch (Copy_u8_TimerNo)
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	3a 87       	std	Y+10, r19	; 0x0a
    3042:	29 87       	std	Y+9, r18	; 0x09
    3044:	89 85       	ldd	r24, Y+9	; 0x09
    3046:	9a 85       	ldd	r25, Y+10	; 0x0a
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	39 f0       	breq	.+14     	; 0x305a <Timers_enu_Init+0x56>
    304c:	29 85       	ldd	r18, Y+9	; 0x09
    304e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3050:	21 30       	cpi	r18, 0x01	; 1
    3052:	31 05       	cpc	r19, r1
    3054:	09 f4       	brne	.+2      	; 0x3058 <Timers_enu_Init+0x54>
    3056:	d9 c0       	rjmp	.+434    	; 0x320a <Timers_enu_Init+0x206>
    3058:	cd c1       	rjmp	.+922    	; 0x33f4 <Timers_enu_Init+0x3f0>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	38 87       	std	Y+8, r19	; 0x08
    3062:	2f 83       	std	Y+7, r18	; 0x07
    3064:	8f 81       	ldd	r24, Y+7	; 0x07
    3066:	98 85       	ldd	r25, Y+8	; 0x08
    3068:	83 30       	cpi	r24, 0x03	; 3
    306a:	91 05       	cpc	r25, r1
    306c:	09 f4       	brne	.+2      	; 0x3070 <Timers_enu_Init+0x6c>
    306e:	4e c0       	rjmp	.+156    	; 0x310c <Timers_enu_Init+0x108>
    3070:	2f 81       	ldd	r18, Y+7	; 0x07
    3072:	38 85       	ldd	r19, Y+8	; 0x08
    3074:	24 30       	cpi	r18, 0x04	; 4
    3076:	31 05       	cpc	r19, r1
    3078:	54 f4       	brge	.+20     	; 0x308e <Timers_enu_Init+0x8a>
    307a:	8f 81       	ldd	r24, Y+7	; 0x07
    307c:	98 85       	ldd	r25, Y+8	; 0x08
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	c9 f0       	breq	.+50     	; 0x30b4 <Timers_enu_Init+0xb0>
    3082:	2f 81       	ldd	r18, Y+7	; 0x07
    3084:	38 85       	ldd	r19, Y+8	; 0x08
    3086:	21 30       	cpi	r18, 0x01	; 1
    3088:	31 05       	cpc	r19, r1
    308a:	51 f1       	breq	.+84     	; 0x30e0 <Timers_enu_Init+0xdc>
    308c:	b2 c0       	rjmp	.+356    	; 0x31f2 <Timers_enu_Init+0x1ee>
    308e:	8f 81       	ldd	r24, Y+7	; 0x07
    3090:	98 85       	ldd	r25, Y+8	; 0x08
    3092:	85 30       	cpi	r24, 0x05	; 5
    3094:	91 05       	cpc	r25, r1
    3096:	09 f4       	brne	.+2      	; 0x309a <Timers_enu_Init+0x96>
    3098:	73 c0       	rjmp	.+230    	; 0x3180 <Timers_enu_Init+0x17c>
    309a:	2f 81       	ldd	r18, Y+7	; 0x07
    309c:	38 85       	ldd	r19, Y+8	; 0x08
    309e:	25 30       	cpi	r18, 0x05	; 5
    30a0:	31 05       	cpc	r19, r1
    30a2:	0c f4       	brge	.+2      	; 0x30a6 <Timers_enu_Init+0xa2>
    30a4:	50 c0       	rjmp	.+160    	; 0x3146 <Timers_enu_Init+0x142>
    30a6:	8f 81       	ldd	r24, Y+7	; 0x07
    30a8:	98 85       	ldd	r25, Y+8	; 0x08
    30aa:	86 30       	cpi	r24, 0x06	; 6
    30ac:	91 05       	cpc	r25, r1
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <Timers_enu_Init+0xae>
    30b0:	84 c0       	rjmp	.+264    	; 0x31ba <Timers_enu_Init+0x1b6>
    30b2:	9f c0       	rjmp	.+318    	; 0x31f2 <Timers_enu_Init+0x1ee>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    30b4:	a3 e5       	ldi	r26, 0x53	; 83
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e3 e5       	ldi	r30, 0x53	; 83
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8f 7b       	andi	r24, 0xBF	; 191
    30c0:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    30c2:	a3 e5       	ldi	r26, 0x53	; 83
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e3 e5       	ldi	r30, 0x53	; 83
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	87 7f       	andi	r24, 0xF7	; 247
    30ce:	8c 93       	st	X, r24
            // Enable OverFlow Interrupt
            SET_BIT(TIMER_TIMSK_REG, TOIE0);
    30d0:	a9 e5       	ldi	r26, 0x59	; 89
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e9 e5       	ldi	r30, 0x59	; 89
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	81 60       	ori	r24, 0x01	; 1
    30dc:	8c 93       	st	X, r24
    30de:	89 c0       	rjmp	.+274    	; 0x31f2 <Timers_enu_Init+0x1ee>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    30e0:	a3 e5       	ldi	r26, 0x53	; 83
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e3 e5       	ldi	r30, 0x53	; 83
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	80 81       	ld	r24, Z
    30ea:	8f 7b       	andi	r24, 0xBF	; 191
    30ec:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    30ee:	a3 e5       	ldi	r26, 0x53	; 83
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e3 e5       	ldi	r30, 0x53	; 83
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	88 60       	ori	r24, 0x08	; 8
    30fa:	8c 93       	st	X, r24
            // Enable CTC Interrupt
            SET_BIT(TIMER_TIMSK_REG, OCIE0);
    30fc:	a9 e5       	ldi	r26, 0x59	; 89
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e9 e5       	ldi	r30, 0x59	; 89
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	82 60       	ori	r24, 0x02	; 2
    3108:	8c 93       	st	X, r24
    310a:	73 c0       	rjmp	.+230    	; 0x31f2 <Timers_enu_Init+0x1ee>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    310c:	a3 e5       	ldi	r26, 0x53	; 83
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	e3 e5       	ldi	r30, 0x53	; 83
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	80 64       	ori	r24, 0x40	; 64
    3118:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    311a:	a3 e5       	ldi	r26, 0x53	; 83
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e3 e5       	ldi	r30, 0x53	; 83
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	88 60       	ori	r24, 0x08	; 8
    3126:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3128:	a3 e5       	ldi	r26, 0x53	; 83
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e3 e5       	ldi	r30, 0x53	; 83
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	80 62       	ori	r24, 0x20	; 32
    3134:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    3136:	a3 e5       	ldi	r26, 0x53	; 83
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e3 e5       	ldi	r30, 0x53	; 83
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	80 61       	ori	r24, 0x10	; 16
    3142:	8c 93       	st	X, r24
    3144:	56 c0       	rjmp	.+172    	; 0x31f2 <Timers_enu_Init+0x1ee>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3146:	a3 e5       	ldi	r26, 0x53	; 83
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e3 e5       	ldi	r30, 0x53	; 83
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	80 64       	ori	r24, 0x40	; 64
    3152:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    3154:	a3 e5       	ldi	r26, 0x53	; 83
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e3 e5       	ldi	r30, 0x53	; 83
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	80 81       	ld	r24, Z
    315e:	88 60       	ori	r24, 0x08	; 8
    3160:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    3162:	a3 e5       	ldi	r26, 0x53	; 83
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e3 e5       	ldi	r30, 0x53	; 83
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	80 81       	ld	r24, Z
    316c:	80 62       	ori	r24, 0x20	; 32
    316e:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    3170:	a3 e5       	ldi	r26, 0x53	; 83
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e3 e5       	ldi	r30, 0x53	; 83
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	8f 7e       	andi	r24, 0xEF	; 239
    317c:	8c 93       	st	X, r24
    317e:	39 c0       	rjmp	.+114    	; 0x31f2 <Timers_enu_Init+0x1ee>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    3180:	a3 e5       	ldi	r26, 0x53	; 83
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	e3 e5       	ldi	r30, 0x53	; 83
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	80 64       	ori	r24, 0x40	; 64
    318c:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    318e:	a3 e5       	ldi	r26, 0x53	; 83
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	e3 e5       	ldi	r30, 0x53	; 83
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	87 7f       	andi	r24, 0xF7	; 247
    319a:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    319c:	a3 e5       	ldi	r26, 0x53	; 83
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	e3 e5       	ldi	r30, 0x53	; 83
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	80 62       	ori	r24, 0x20	; 32
    31a8:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    31aa:	a3 e5       	ldi	r26, 0x53	; 83
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	e3 e5       	ldi	r30, 0x53	; 83
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	80 61       	ori	r24, 0x10	; 16
    31b6:	8c 93       	st	X, r24
    31b8:	1c c0       	rjmp	.+56     	; 0x31f2 <Timers_enu_Init+0x1ee>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    31ba:	a3 e5       	ldi	r26, 0x53	; 83
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	e3 e5       	ldi	r30, 0x53	; 83
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	80 64       	ori	r24, 0x40	; 64
    31c6:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    31c8:	a3 e5       	ldi	r26, 0x53	; 83
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e3 e5       	ldi	r30, 0x53	; 83
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	87 7f       	andi	r24, 0xF7	; 247
    31d4:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    31d6:	a3 e5       	ldi	r26, 0x53	; 83
    31d8:	b0 e0       	ldi	r27, 0x00	; 0
    31da:	e3 e5       	ldi	r30, 0x53	; 83
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	80 62       	ori	r24, 0x20	; 32
    31e2:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    31e4:	a3 e5       	ldi	r26, 0x53	; 83
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e3 e5       	ldi	r30, 0x53	; 83
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	80 81       	ld	r24, Z
    31ee:	8f 7e       	andi	r24, 0xEF	; 239
    31f0:	8c 93       	st	X, r24
        break;
        }
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    31f2:	a3 e5       	ldi	r26, 0x53	; 83
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e3 e5       	ldi	r30, 0x53	; 83
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	90 81       	ld	r25, Z
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	89 2b       	or	r24, r25
    3200:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    3202:	8c 81       	ldd	r24, Y+4	; 0x04
    3204:	80 93 60 01 	sts	0x0160, r24
    3208:	f5 c0       	rjmp	.+490    	; 0x33f4 <Timers_enu_Init+0x3f0>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	28 2f       	mov	r18, r24
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	3e 83       	std	Y+6, r19	; 0x06
    3212:	2d 83       	std	Y+5, r18	; 0x05
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	91 05       	cpc	r25, r1
    321c:	09 f4       	brne	.+2      	; 0x3220 <Timers_enu_Init+0x21c>
    321e:	64 c0       	rjmp	.+200    	; 0x32e8 <Timers_enu_Init+0x2e4>
    3220:	2d 81       	ldd	r18, Y+5	; 0x05
    3222:	3e 81       	ldd	r19, Y+6	; 0x06
    3224:	23 30       	cpi	r18, 0x03	; 3
    3226:	31 05       	cpc	r19, r1
    3228:	54 f4       	brge	.+20     	; 0x323e <Timers_enu_Init+0x23a>
    322a:	8d 81       	ldd	r24, Y+5	; 0x05
    322c:	9e 81       	ldd	r25, Y+6	; 0x06
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	99 f0       	breq	.+38     	; 0x3258 <Timers_enu_Init+0x254>
    3232:	2d 81       	ldd	r18, Y+5	; 0x05
    3234:	3e 81       	ldd	r19, Y+6	; 0x06
    3236:	21 30       	cpi	r18, 0x01	; 1
    3238:	31 05       	cpc	r19, r1
    323a:	91 f1       	breq	.+100    	; 0x32a0 <Timers_enu_Init+0x29c>
    323c:	ce c0       	rjmp	.+412    	; 0x33da <Timers_enu_Init+0x3d6>
    323e:	8d 81       	ldd	r24, Y+5	; 0x05
    3240:	9e 81       	ldd	r25, Y+6	; 0x06
    3242:	84 30       	cpi	r24, 0x04	; 4
    3244:	91 05       	cpc	r25, r1
    3246:	09 f4       	brne	.+2      	; 0x324a <Timers_enu_Init+0x246>
    3248:	73 c0       	rjmp	.+230    	; 0x3330 <Timers_enu_Init+0x32c>
    324a:	2d 81       	ldd	r18, Y+5	; 0x05
    324c:	3e 81       	ldd	r19, Y+6	; 0x06
    324e:	26 30       	cpi	r18, 0x06	; 6
    3250:	31 05       	cpc	r19, r1
    3252:	09 f4       	brne	.+2      	; 0x3256 <Timers_enu_Init+0x252>
    3254:	98 c0       	rjmp	.+304    	; 0x3386 <Timers_enu_Init+0x382>
    3256:	c1 c0       	rjmp	.+386    	; 0x33da <Timers_enu_Init+0x3d6>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3258:	af e4       	ldi	r26, 0x4F	; 79
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	ef e4       	ldi	r30, 0x4F	; 79
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	8e 7f       	andi	r24, 0xFE	; 254
    3264:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    3266:	af e4       	ldi	r26, 0x4F	; 79
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	ef e4       	ldi	r30, 0x4F	; 79
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	8d 7f       	andi	r24, 0xFD	; 253
    3272:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3274:	ae e4       	ldi	r26, 0x4E	; 78
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ee e4       	ldi	r30, 0x4E	; 78
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	87 7f       	andi	r24, 0xF7	; 247
    3280:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3282:	ae e4       	ldi	r26, 0x4E	; 78
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	ee e4       	ldi	r30, 0x4E	; 78
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	8f 7e       	andi	r24, 0xEF	; 239
    328e:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, TOIE1);
    3290:	a9 e5       	ldi	r26, 0x59	; 89
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e9 e5       	ldi	r30, 0x59	; 89
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	84 60       	ori	r24, 0x04	; 4
    329c:	8c 93       	st	X, r24
    329e:	9d c0       	rjmp	.+314    	; 0x33da <Timers_enu_Init+0x3d6>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    32a0:	af e4       	ldi	r26, 0x4F	; 79
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	ef e4       	ldi	r30, 0x4F	; 79
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	8e 7f       	andi	r24, 0xFE	; 254
    32ac:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    32ae:	af e4       	ldi	r26, 0x4F	; 79
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	ef e4       	ldi	r30, 0x4F	; 79
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	8d 7f       	andi	r24, 0xFD	; 253
    32ba:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    32bc:	ae e4       	ldi	r26, 0x4E	; 78
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	ee e4       	ldi	r30, 0x4E	; 78
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	88 60       	ori	r24, 0x08	; 8
    32c8:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    32ca:	ae e4       	ldi	r26, 0x4E	; 78
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	ee e4       	ldi	r30, 0x4E	; 78
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	8f 7e       	andi	r24, 0xEF	; 239
    32d6:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, OCIE1A);
    32d8:	a9 e5       	ldi	r26, 0x59	; 89
    32da:	b0 e0       	ldi	r27, 0x00	; 0
    32dc:	e9 e5       	ldi	r30, 0x59	; 89
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	80 81       	ld	r24, Z
    32e2:	80 61       	ori	r24, 0x10	; 16
    32e4:	8c 93       	st	X, r24
    32e6:	79 c0       	rjmp	.+242    	; 0x33da <Timers_enu_Init+0x3d6>
        break;
        case CTC_MODE_B:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    32e8:	af e4       	ldi	r26, 0x4F	; 79
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	ef e4       	ldi	r30, 0x4F	; 79
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8e 7f       	andi	r24, 0xFE	; 254
    32f4:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    32f6:	af e4       	ldi	r26, 0x4F	; 79
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	ef e4       	ldi	r30, 0x4F	; 79
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	80 81       	ld	r24, Z
    3300:	8d 7f       	andi	r24, 0xFD	; 253
    3302:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    3304:	ae e4       	ldi	r26, 0x4E	; 78
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	ee e4       	ldi	r30, 0x4E	; 78
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	87 7f       	andi	r24, 0xF7	; 247
    3310:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    3312:	ae e4       	ldi	r26, 0x4E	; 78
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	ee e4       	ldi	r30, 0x4E	; 78
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	8f 7e       	andi	r24, 0xEF	; 239
    331e:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, OCIE1B);
    3320:	a9 e5       	ldi	r26, 0x59	; 89
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e9 e5       	ldi	r30, 0x59	; 89
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	88 60       	ori	r24, 0x08	; 8
    332c:	8c 93       	st	X, r24
    332e:	55 c0       	rjmp	.+170    	; 0x33da <Timers_enu_Init+0x3d6>
        break;
        case FAST_PWM_NON_INVERTING:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    3330:	af e4       	ldi	r26, 0x4F	; 79
    3332:	b0 e0       	ldi	r27, 0x00	; 0
    3334:	ef e4       	ldi	r30, 0x4F	; 79
    3336:	f0 e0       	ldi	r31, 0x00	; 0
    3338:	80 81       	ld	r24, Z
    333a:	8e 7f       	andi	r24, 0xFE	; 254
    333c:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    333e:	af e4       	ldi	r26, 0x4F	; 79
    3340:	b0 e0       	ldi	r27, 0x00	; 0
    3342:	ef e4       	ldi	r30, 0x4F	; 79
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	80 81       	ld	r24, Z
    3348:	82 60       	ori	r24, 0x02	; 2
    334a:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    334c:	ae e4       	ldi	r26, 0x4E	; 78
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	ee e4       	ldi	r30, 0x4E	; 78
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	88 60       	ori	r24, 0x08	; 8
    3358:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    335a:	ae e4       	ldi	r26, 0x4E	; 78
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	ee e4       	ldi	r30, 0x4E	; 78
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	80 81       	ld	r24, Z
    3364:	80 61       	ori	r24, 0x10	; 16
    3366:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    3368:	af e4       	ldi	r26, 0x4F	; 79
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	ef e4       	ldi	r30, 0x4F	; 79
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	80 68       	ori	r24, 0x80	; 128
    3374:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    3376:	af e4       	ldi	r26, 0x4F	; 79
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	ef e4       	ldi	r30, 0x4F	; 79
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	8f 7b       	andi	r24, 0xBF	; 191
    3382:	8c 93       	st	X, r24
    3384:	2a c0       	rjmp	.+84     	; 0x33da <Timers_enu_Init+0x3d6>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    3386:	af e4       	ldi	r26, 0x4F	; 79
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	ef e4       	ldi	r30, 0x4F	; 79
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	81 60       	ori	r24, 0x01	; 1
    3392:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    3394:	af e4       	ldi	r26, 0x4F	; 79
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	ef e4       	ldi	r30, 0x4F	; 79
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	82 60       	ori	r24, 0x02	; 2
    33a0:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    33a2:	ae e4       	ldi	r26, 0x4E	; 78
    33a4:	b0 e0       	ldi	r27, 0x00	; 0
    33a6:	ee e4       	ldi	r30, 0x4E	; 78
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	87 7f       	andi	r24, 0xF7	; 247
    33ae:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    33b0:	ae e4       	ldi	r26, 0x4E	; 78
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	ee e4       	ldi	r30, 0x4E	; 78
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	80 61       	ori	r24, 0x10	; 16
    33bc:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    33be:	af e4       	ldi	r26, 0x4F	; 79
    33c0:	b0 e0       	ldi	r27, 0x00	; 0
    33c2:	ef e4       	ldi	r30, 0x4F	; 79
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	80 81       	ld	r24, Z
    33c8:	80 68       	ori	r24, 0x80	; 128
    33ca:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    33cc:	af e4       	ldi	r26, 0x4F	; 79
    33ce:	b0 e0       	ldi	r27, 0x00	; 0
    33d0:	ef e4       	ldi	r30, 0x4F	; 79
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	80 81       	ld	r24, Z
    33d6:	8f 7b       	andi	r24, 0xBF	; 191
    33d8:	8c 93       	st	X, r24
        break;
        }
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    33da:	ae e4       	ldi	r26, 0x4E	; 78
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	ee e4       	ldi	r30, 0x4E	; 78
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	90 81       	ld	r25, Z
    33e4:	8c 81       	ldd	r24, Y+4	; 0x04
    33e6:	89 2b       	or	r24, r25
    33e8:	8c 93       	st	X, r24
    Timer1_u8_Prescaler = Copy_u8_Prescaler;
    33ea:	8c 81       	ldd	r24, Y+4	; 0x04
    33ec:	80 93 61 01 	sts	0x0161, r24
    33f0:	01 c0       	rjmp	.+2      	; 0x33f4 <Timers_enu_Init+0x3f0>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    33f2:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    33f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33f6:	2a 96       	adiw	r28, 0x0a	; 10
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	cf 91       	pop	r28
    3404:	df 91       	pop	r29
    3406:	08 95       	ret

00003408 <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	29 97       	sbiw	r28, 0x09	; 9
    3412:	0f b6       	in	r0, 0x3f	; 63
    3414:	f8 94       	cli
    3416:	de bf       	out	0x3e, r29	; 62
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	cd bf       	out	0x3d, r28	; 61
    341c:	8a 83       	std	Y+2, r24	; 0x02
    341e:	7c 83       	std	Y+4, r23	; 0x04
    3420:	6b 83       	std	Y+3, r22	; 0x03
    3422:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo<2)&(Copy_pf != NULL) && (Copy_u8_Mode<7)){
    3428:	19 86       	std	Y+9, r1	; 0x09
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	82 30       	cpi	r24, 0x02	; 2
    342e:	10 f4       	brcc	.+4      	; 0x3434 <Timers_enu_SetCallBack+0x2c>
    3430:	21 e0       	ldi	r18, 0x01	; 1
    3432:	29 87       	std	Y+9, r18	; 0x09
    3434:	18 86       	std	Y+8, r1	; 0x08
    3436:	8b 81       	ldd	r24, Y+3	; 0x03
    3438:	9c 81       	ldd	r25, Y+4	; 0x04
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	11 f0       	breq	.+4      	; 0x3442 <Timers_enu_SetCallBack+0x3a>
    343e:	31 e0       	ldi	r19, 0x01	; 1
    3440:	38 87       	std	Y+8, r19	; 0x08
    3442:	89 85       	ldd	r24, Y+9	; 0x09
    3444:	98 85       	ldd	r25, Y+8	; 0x08
    3446:	89 23       	and	r24, r25
    3448:	91 e0       	ldi	r25, 0x01	; 1
    344a:	89 27       	eor	r24, r25
    344c:	88 23       	and	r24, r24
    344e:	61 f5       	brne	.+88     	; 0x34a8 <Timers_enu_SetCallBack+0xa0>
    3450:	8d 81       	ldd	r24, Y+5	; 0x05
    3452:	87 30       	cpi	r24, 0x07	; 7
    3454:	48 f5       	brcc	.+82     	; 0x34a8 <Timers_enu_SetCallBack+0xa0>
        switch (Copy_u8_TimerNo)
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	3f 83       	std	Y+7, r19	; 0x07
    345e:	2e 83       	std	Y+6, r18	; 0x06
    3460:	8e 81       	ldd	r24, Y+6	; 0x06
    3462:	9f 81       	ldd	r25, Y+7	; 0x07
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	31 f0       	breq	.+12     	; 0x3474 <Timers_enu_SetCallBack+0x6c>
    3468:	2e 81       	ldd	r18, Y+6	; 0x06
    346a:	3f 81       	ldd	r19, Y+7	; 0x07
    346c:	21 30       	cpi	r18, 0x01	; 1
    346e:	31 05       	cpc	r19, r1
    3470:	71 f0       	breq	.+28     	; 0x348e <Timers_enu_SetCallBack+0x86>
    3472:	1b c0       	rjmp	.+54     	; 0x34aa <Timers_enu_SetCallBack+0xa2>
        {
        case TIMER0:
            Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	88 2f       	mov	r24, r24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	fc 01       	movw	r30, r24
    3480:	ea 5a       	subi	r30, 0xAA	; 170
    3482:	fe 4f       	sbci	r31, 0xFE	; 254
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	9c 81       	ldd	r25, Y+4	; 0x04
    3488:	91 83       	std	Z+1, r25	; 0x01
    348a:	80 83       	st	Z, r24
    348c:	0e c0       	rjmp	.+28     	; 0x34aa <Timers_enu_SetCallBack+0xa2>
        break;
        case TIMER1:
            Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    348e:	8d 81       	ldd	r24, Y+5	; 0x05
    3490:	88 2f       	mov	r24, r24
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	fc 01       	movw	r30, r24
    349a:	e6 5a       	subi	r30, 0xA6	; 166
    349c:	fe 4f       	sbci	r31, 0xFE	; 254
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	9c 81       	ldd	r25, Y+4	; 0x04
    34a2:	91 83       	std	Z+1, r25	; 0x01
    34a4:	80 83       	st	Z, r24
    34a6:	01 c0       	rjmp	.+2      	; 0x34aa <Timers_enu_SetCallBack+0xa2>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    34a8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    34ac:	29 96       	adiw	r28, 0x09	; 9
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <Timers_enu_SetCLKSource+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <Timers_enu_SetCLKSource+0x8>
    34c6:	0f 92       	push	r0
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
    34cc:	8a 83       	std	Y+2, r24	; 0x02
    34ce:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 2)){
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	88 30       	cpi	r24, 0x08	; 8
    34d8:	c0 f5       	brcc	.+112    	; 0x354a <Timers_enu_SetCLKSource+0x8c>
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	82 30       	cpi	r24, 0x02	; 2
    34de:	a8 f5       	brcc	.+106    	; 0x354a <Timers_enu_SetCLKSource+0x8c>
        switch (Copy_u8_TimerNo)
    34e0:	8a 81       	ldd	r24, Y+2	; 0x02
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	3d 83       	std	Y+5, r19	; 0x05
    34e8:	2c 83       	std	Y+4, r18	; 0x04
    34ea:	8c 81       	ldd	r24, Y+4	; 0x04
    34ec:	9d 81       	ldd	r25, Y+5	; 0x05
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	31 f0       	breq	.+12     	; 0x34fe <Timers_enu_SetCLKSource+0x40>
    34f2:	2c 81       	ldd	r18, Y+4	; 0x04
    34f4:	3d 81       	ldd	r19, Y+5	; 0x05
    34f6:	21 30       	cpi	r18, 0x01	; 1
    34f8:	31 05       	cpc	r19, r1
    34fa:	a1 f0       	breq	.+40     	; 0x3524 <Timers_enu_SetCLKSource+0x66>
    34fc:	27 c0       	rjmp	.+78     	; 0x354c <Timers_enu_SetCLKSource+0x8e>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    34fe:	a3 e5       	ldi	r26, 0x53	; 83
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	e3 e5       	ldi	r30, 0x53	; 83
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	88 7f       	andi	r24, 0xF8	; 248
    350a:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    350c:	a3 e5       	ldi	r26, 0x53	; 83
    350e:	b0 e0       	ldi	r27, 0x00	; 0
    3510:	e3 e5       	ldi	r30, 0x53	; 83
    3512:	f0 e0       	ldi	r31, 0x00	; 0
    3514:	90 81       	ld	r25, Z
    3516:	8b 81       	ldd	r24, Y+3	; 0x03
    3518:	89 2b       	or	r24, r25
    351a:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    351c:	8b 81       	ldd	r24, Y+3	; 0x03
    351e:	80 93 60 01 	sts	0x0160, r24
    3522:	14 c0       	rjmp	.+40     	; 0x354c <Timers_enu_SetCLKSource+0x8e>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3524:	ae e4       	ldi	r26, 0x4E	; 78
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	ee e4       	ldi	r30, 0x4E	; 78
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	88 7f       	andi	r24, 0xF8	; 248
    3530:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    3532:	ae e4       	ldi	r26, 0x4E	; 78
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	ee e4       	ldi	r30, 0x4E	; 78
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	90 81       	ld	r25, Z
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	89 2b       	or	r24, r25
    3540:	8c 93       	st	X, r24
            Timer1_u8_Prescaler = Copy_u8_CLK_Source;
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	80 93 61 01 	sts	0x0161, r24
    3548:	01 c0       	rjmp	.+2      	; 0x354c <Timers_enu_SetCLKSource+0x8e>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    354a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    354c:	89 81       	ldd	r24, Y+1	; 0x01
}
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)
{
    355e:	ef 92       	push	r14
    3560:	ff 92       	push	r15
    3562:	0f 93       	push	r16
    3564:	1f 93       	push	r17
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	2d 97       	sbiw	r28, 0x0d	; 13
    3570:	0f b6       	in	r0, 0x3f	; 63
    3572:	f8 94       	cli
    3574:	de bf       	out	0x3e, r29	; 62
    3576:	0f be       	out	0x3f, r0	; 63
    3578:	cd bf       	out	0x3d, r28	; 61
    357a:	69 87       	std	Y+9, r22	; 0x09
    357c:	7a 87       	std	Y+10, r23	; 0x0a
    357e:	8b 87       	std	Y+11, r24	; 0x0b
    3580:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    3582:	a3 e5       	ldi	r26, 0x53	; 83
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e3 e5       	ldi	r30, 0x53	; 83
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	90 81       	ld	r25, Z
    358c:	80 91 60 01 	lds	r24, 0x0160
    3590:	89 2b       	or	r24, r25
    3592:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = 256 * 8 / F_CPU;
    3594:	80 e8       	ldi	r24, 0x80	; 128
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	98 87       	std	Y+8, r25	; 0x08
    359a:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000) / local_u16_OVF_Time;
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a0:	ab 85       	ldd	r26, Y+11	; 0x0b
    35a2:	bc 85       	ldd	r27, Y+12	; 0x0c
    35a4:	28 ee       	ldi	r18, 0xE8	; 232
    35a6:	33 e0       	ldi	r19, 0x03	; 3
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__mulsi3>
    35b4:	7b 01       	movw	r14, r22
    35b6:	8c 01       	movw	r16, r24
    35b8:	8f 81       	ldd	r24, Y+7	; 0x07
    35ba:	98 85       	ldd	r25, Y+8	; 0x08
    35bc:	9c 01       	movw	r18, r24
    35be:	40 e0       	ldi	r20, 0x00	; 0
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	c8 01       	movw	r24, r16
    35c4:	b7 01       	movw	r22, r14
    35c6:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__udivmodsi4>
    35ca:	da 01       	movw	r26, r20
    35cc:	c9 01       	movw	r24, r18
    35ce:	9e 83       	std	Y+6, r25	; 0x06
    35d0:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    35d2:	89 85       	ldd	r24, Y+9	; 0x09
    35d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d6:	ab 85       	ldd	r26, Y+11	; 0x0b
    35d8:	bc 85       	ldd	r27, Y+12	; 0x0c
    35da:	28 ee       	ldi	r18, 0xE8	; 232
    35dc:	33 e0       	ldi	r19, 0x03	; 3
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	bc 01       	movw	r22, r24
    35e4:	cd 01       	movw	r24, r26
    35e6:	0e 94 0e 25 	call	0x4a1c	; 0x4a1c <__mulsi3>
    35ea:	7b 01       	movw	r14, r22
    35ec:	8c 01       	movw	r16, r24
    35ee:	8f 81       	ldd	r24, Y+7	; 0x07
    35f0:	98 85       	ldd	r25, Y+8	; 0x08
    35f2:	9c 01       	movw	r18, r24
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	c8 01       	movw	r24, r16
    35fa:	b7 01       	movw	r22, r14
    35fc:	0e 94 41 25 	call	0x4a82	; 0x4a82 <__udivmodsi4>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	88 0f       	add	r24, r24
    3606:	99 1f       	adc	r25, r25
    3608:	aa 1f       	adc	r26, r26
    360a:	bb 1f       	adc	r27, r27
    360c:	88 0f       	add	r24, r24
    360e:	99 1f       	adc	r25, r25
    3610:	aa 1f       	adc	r26, r26
    3612:	bb 1f       	adc	r27, r27
    3614:	88 0f       	add	r24, r24
    3616:	99 1f       	adc	r25, r25
    3618:	aa 1f       	adc	r26, r26
    361a:	bb 1f       	adc	r27, r27
    361c:	88 0f       	add	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	aa 1f       	adc	r26, r26
    3622:	bb 1f       	adc	r27, r27
    3624:	68 94       	set
    3626:	12 f8       	bld	r1, 2
    3628:	b6 95       	lsr	r27
    362a:	a7 95       	ror	r26
    362c:	97 95       	ror	r25
    362e:	87 95       	ror	r24
    3630:	16 94       	lsr	r1
    3632:	d1 f7       	brne	.-12     	; 0x3628 <Timers_enu_delay_ms+0xca>
    3634:	9c 83       	std	Y+4, r25	; 0x04
    3636:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    3638:	e2 e5       	ldi	r30, 0x52	; 82
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	81 95       	neg	r24
    3640:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    3642:	1a 82       	std	Y+2, r1	; 0x02
    3644:	19 82       	std	Y+1, r1	; 0x01
    3646:	15 c0       	rjmp	.+42     	; 0x3672 <Timers_enu_delay_ms+0x114>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    3648:	a8 e5       	ldi	r26, 0x58	; 88
    364a:	b0 e0       	ldi	r27, 0x00	; 0
    364c:	e8 e5       	ldi	r30, 0x58	; 88
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	80 81       	ld	r24, Z
    3652:	81 60       	ori	r24, 0x01	; 1
    3654:	8c 93       	st	X, r24
        local_u16_counter++;
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	9a 81       	ldd	r25, Y+2	; 0x02
    365a:	01 96       	adiw	r24, 0x01	; 1
    365c:	9a 83       	std	Y+2, r25	; 0x02
    365e:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    3660:	e8 e5       	ldi	r30, 0x58	; 88
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	80 81       	ld	r24, Z
    3666:	88 2f       	mov	r24, r24
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	81 70       	andi	r24, 0x01	; 1
    366c:	90 70       	andi	r25, 0x00	; 0
    366e:	88 23       	and	r24, r24
    3670:	59 f7       	brne	.-42     	; 0x3648 <Timers_enu_delay_ms+0xea>
    u16 local_u16_OVF_Time = 256 * 8 / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    3672:	8d 81       	ldd	r24, Y+5	; 0x05
    3674:	9e 81       	ldd	r25, Y+6	; 0x06
    3676:	9c 01       	movw	r18, r24
    3678:	2f 5f       	subi	r18, 0xFF	; 255
    367a:	3f 4f       	sbci	r19, 0xFF	; 255
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	9a 81       	ldd	r25, Y+2	; 0x02
    3680:	28 17       	cp	r18, r24
    3682:	39 07       	cpc	r19, r25
    3684:	69 f7       	brne	.-38     	; 0x3660 <Timers_enu_delay_ms+0x102>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3686:	a3 e5       	ldi	r26, 0x53	; 83
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	e3 e5       	ldi	r30, 0x53	; 83
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	80 81       	ld	r24, Z
    3690:	88 7f       	andi	r24, 0xF8	; 248
    3692:	8c 93       	st	X, r24
}
    3694:	2d 96       	adiw	r28, 0x0d	; 13
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	1f 91       	pop	r17
    36a6:	0f 91       	pop	r16
    36a8:	ff 90       	pop	r15
    36aa:	ef 90       	pop	r14
    36ac:	08 95       	ret

000036ae <Timers_enu_SetPreloadValue>:
ES_t Timers_enu_SetPreloadValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    36ae:	df 93       	push	r29
    36b0:	cf 93       	push	r28
    36b2:	00 d0       	rcall	.+0      	; 0x36b4 <Timers_enu_SetPreloadValue+0x6>
    36b4:	00 d0       	rcall	.+0      	; 0x36b6 <Timers_enu_SetPreloadValue+0x8>
    36b6:	00 d0       	rcall	.+0      	; 0x36b8 <Timers_enu_SetPreloadValue+0xa>
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	8a 83       	std	Y+2, r24	; 0x02
    36be:	7c 83       	std	Y+4, r23	; 0x04
    36c0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	83 30       	cpi	r24, 0x03	; 3
    36ca:	d8 f4       	brcc	.+54     	; 0x3702 <Timers_enu_SetPreloadValue+0x54>
        switch (Copy_u8_TimerNo)
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	28 2f       	mov	r18, r24
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	3e 83       	std	Y+6, r19	; 0x06
    36d4:	2d 83       	std	Y+5, r18	; 0x05
    36d6:	8d 81       	ldd	r24, Y+5	; 0x05
    36d8:	9e 81       	ldd	r25, Y+6	; 0x06
    36da:	00 97       	sbiw	r24, 0x00	; 0
    36dc:	31 f0       	breq	.+12     	; 0x36ea <Timers_enu_SetPreloadValue+0x3c>
    36de:	2d 81       	ldd	r18, Y+5	; 0x05
    36e0:	3e 81       	ldd	r19, Y+6	; 0x06
    36e2:	21 30       	cpi	r18, 0x01	; 1
    36e4:	31 05       	cpc	r19, r1
    36e6:	31 f0       	breq	.+12     	; 0x36f4 <Timers_enu_SetPreloadValue+0x46>
    36e8:	0d c0       	rjmp	.+26     	; 0x3704 <Timers_enu_SetPreloadValue+0x56>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    36ea:	e2 e5       	ldi	r30, 0x52	; 82
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	80 83       	st	Z, r24
    36f2:	08 c0       	rjmp	.+16     	; 0x3704 <Timers_enu_SetPreloadValue+0x56>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    36f4:	ec e4       	ldi	r30, 0x4C	; 76
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	8b 81       	ldd	r24, Y+3	; 0x03
    36fa:	9c 81       	ldd	r25, Y+4	; 0x04
    36fc:	91 83       	std	Z+1, r25	; 0x01
    36fe:	80 83       	st	Z, r24
    3700:	01 c0       	rjmp	.+2      	; 0x3704 <Timers_enu_SetPreloadValue+0x56>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3702:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3704:	89 81       	ldd	r24, Y+1	; 0x01
}
    3706:	26 96       	adiw	r28, 0x06	; 6
    3708:	0f b6       	in	r0, 0x3f	; 63
    370a:	f8 94       	cli
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	0f be       	out	0x3f, r0	; 63
    3710:	cd bf       	out	0x3d, r28	; 61
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <Timers_enu_Timer0SetCompareValue>:
ES_t Timers_enu_Timer0SetCompareValue(u8 Copy_u8_Value){
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	0f 92       	push	r0
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OCR0_REG = Copy_u8_Value;
    3724:	ec e5       	ldi	r30, 0x5C	; 92
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	80 83       	st	Z, r24
    return STATE_OK;
    372c:	81 e0       	ldi	r24, 0x01	; 1
}
    372e:	0f 90       	pop	r0
    3730:	cf 91       	pop	r28
    3732:	df 91       	pop	r29
    3734:	08 95       	ret

00003736 <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    3736:	df 93       	push	r29
    3738:	cf 93       	push	r28
    373a:	00 d0       	rcall	.+0      	; 0x373c <Timers_enu_Timer1_setTopValue+0x6>
    373c:	0f 92       	push	r0
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	9a 83       	std	Y+2, r25	; 0x02
    3744:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    3746:	e6 e4       	ldi	r30, 0x46	; 70
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	9a 81       	ldd	r25, Y+2	; 0x02
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
}
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	00 d0       	rcall	.+0      	; 0x3764 <Timers_enu_Timer1SetCompareValue+0x6>
    3764:	00 d0       	rcall	.+0      	; 0x3766 <Timers_enu_Timer1SetCompareValue+0x8>
    3766:	00 d0       	rcall	.+0      	; 0x3768 <Timers_enu_Timer1SetCompareValue+0xa>
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
    376c:	8a 83       	std	Y+2, r24	; 0x02
    376e:	7c 83       	std	Y+4, r23	; 0x04
    3770:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	82 30       	cpi	r24, 0x02	; 2
    377a:	e8 f4       	brcc	.+58     	; 0x37b6 <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    377c:	8a 81       	ldd	r24, Y+2	; 0x02
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	3e 83       	std	Y+6, r19	; 0x06
    3784:	2d 83       	std	Y+5, r18	; 0x05
    3786:	8d 81       	ldd	r24, Y+5	; 0x05
    3788:	9e 81       	ldd	r25, Y+6	; 0x06
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	31 f0       	breq	.+12     	; 0x379a <Timers_enu_Timer1SetCompareValue+0x3c>
    378e:	2d 81       	ldd	r18, Y+5	; 0x05
    3790:	3e 81       	ldd	r19, Y+6	; 0x06
    3792:	21 30       	cpi	r18, 0x01	; 1
    3794:	31 05       	cpc	r19, r1
    3796:	41 f0       	breq	.+16     	; 0x37a8 <Timers_enu_Timer1SetCompareValue+0x4a>
    3798:	0f c0       	rjmp	.+30     	; 0x37b8 <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    379a:	ea e4       	ldi	r30, 0x4A	; 74
    379c:	f0 e0       	ldi	r31, 0x00	; 0
    379e:	8b 81       	ldd	r24, Y+3	; 0x03
    37a0:	9c 81       	ldd	r25, Y+4	; 0x04
    37a2:	91 83       	std	Z+1, r25	; 0x01
    37a4:	80 83       	st	Z, r24
    37a6:	08 c0       	rjmp	.+16     	; 0x37b8 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    37a8:	e8 e4       	ldi	r30, 0x48	; 72
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	8b 81       	ldd	r24, Y+3	; 0x03
    37ae:	9c 81       	ldd	r25, Y+4	; 0x04
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
    37b4:	01 c0       	rjmp	.+2      	; 0x37b8 <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    37b6:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ba:	26 96       	adiw	r28, 0x06	; 6
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	cf 91       	pop	r28
    37c8:	df 91       	pop	r29
    37ca:	08 95       	ret

000037cc <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    37cc:	df 93       	push	r29
    37ce:	cf 93       	push	r28
    37d0:	00 d0       	rcall	.+0      	; 0x37d2 <Timers_enu_Stop+0x6>
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <Timers_enu_Stop+0x8>
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<2){
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	82 30       	cpi	r24, 0x02	; 2
    37e2:	c8 f5       	brcc	.+114    	; 0x3856 <Timers_enu_Stop+0x8a>
        switch (Copy_u8_TimerNo)
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	3c 83       	std	Y+4, r19	; 0x04
    37ec:	2b 83       	std	Y+3, r18	; 0x03
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	9c 81       	ldd	r25, Y+4	; 0x04
    37f2:	00 97       	sbiw	r24, 0x00	; 0
    37f4:	31 f0       	breq	.+12     	; 0x3802 <Timers_enu_Stop+0x36>
    37f6:	eb 81       	ldd	r30, Y+3	; 0x03
    37f8:	fc 81       	ldd	r31, Y+4	; 0x04
    37fa:	e1 30       	cpi	r30, 0x01	; 1
    37fc:	f1 05       	cpc	r31, r1
    37fe:	81 f0       	breq	.+32     	; 0x3820 <Timers_enu_Stop+0x54>
    3800:	2b c0       	rjmp	.+86     	; 0x3858 <Timers_enu_Stop+0x8c>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    3802:	a3 e5       	ldi	r26, 0x53	; 83
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e3 e5       	ldi	r30, 0x53	; 83
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	88 7f       	andi	r24, 0xF8	; 248
    380e:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    3810:	a2 e5       	ldi	r26, 0x52	; 82
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	ec e5       	ldi	r30, 0x5C	; 92
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	10 82       	st	Z, r1
    381a:	80 81       	ld	r24, Z
    381c:	8c 93       	st	X, r24
    381e:	1c c0       	rjmp	.+56     	; 0x3858 <Timers_enu_Stop+0x8c>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    3820:	ae e4       	ldi	r26, 0x4E	; 78
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	ee e4       	ldi	r30, 0x4E	; 78
    3826:	f0 e0       	ldi	r31, 0x00	; 0
    3828:	80 81       	ld	r24, Z
    382a:	88 7f       	andi	r24, 0xF8	; 248
    382c:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    382e:	2c e4       	ldi	r18, 0x4C	; 76
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	aa e4       	ldi	r26, 0x4A	; 74
    3834:	b0 e0       	ldi	r27, 0x00	; 0
    3836:	e8 e4       	ldi	r30, 0x48	; 72
    3838:	f0 e0       	ldi	r31, 0x00	; 0
    383a:	11 82       	std	Z+1, r1	; 0x01
    383c:	10 82       	st	Z, r1
    383e:	80 81       	ld	r24, Z
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	11 96       	adiw	r26, 0x01	; 1
    3844:	9c 93       	st	X, r25
    3846:	8e 93       	st	-X, r24
    3848:	8d 91       	ld	r24, X+
    384a:	9c 91       	ld	r25, X
    384c:	11 97       	sbiw	r26, 0x01	; 1
    384e:	f9 01       	movw	r30, r18
    3850:	91 83       	std	Z+1, r25	; 0x01
    3852:	80 83       	st	Z, r24
    3854:	01 c0       	rjmp	.+2      	; 0x3858 <Timers_enu_Stop+0x8c>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    3856:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3858:	89 81       	ldd	r24, Y+1	; 0x01
}
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <__vector_7>:

/*****ISR(Timer1) CTC Mode A*****/
void __vector_7(void){
    3868:	1f 92       	push	r1
    386a:	0f 92       	push	r0
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	0f 92       	push	r0
    3870:	11 24       	eor	r1, r1
    3872:	2f 93       	push	r18
    3874:	3f 93       	push	r19
    3876:	4f 93       	push	r20
    3878:	5f 93       	push	r21
    387a:	6f 93       	push	r22
    387c:	7f 93       	push	r23
    387e:	8f 93       	push	r24
    3880:	9f 93       	push	r25
    3882:	af 93       	push	r26
    3884:	bf 93       	push	r27
    3886:	ef 93       	push	r30
    3888:	ff 93       	push	r31
    388a:	df 93       	push	r29
    388c:	cf 93       	push	r28
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    3892:	80 91 5c 01 	lds	r24, 0x015C
    3896:	90 91 5d 01 	lds	r25, 0x015D
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	29 f0       	breq	.+10     	; 0x38a8 <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    389e:	e0 91 5c 01 	lds	r30, 0x015C
    38a2:	f0 91 5d 01 	lds	r31, 0x015D
    38a6:	09 95       	icall
}
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	ff 91       	pop	r31
    38ae:	ef 91       	pop	r30
    38b0:	bf 91       	pop	r27
    38b2:	af 91       	pop	r26
    38b4:	9f 91       	pop	r25
    38b6:	8f 91       	pop	r24
    38b8:	7f 91       	pop	r23
    38ba:	6f 91       	pop	r22
    38bc:	5f 91       	pop	r21
    38be:	4f 91       	pop	r20
    38c0:	3f 91       	pop	r19
    38c2:	2f 91       	pop	r18
    38c4:	0f 90       	pop	r0
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	0f 90       	pop	r0
    38ca:	1f 90       	pop	r1
    38cc:	18 95       	reti

000038ce <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
void __vector_8(void){
    38ce:	1f 92       	push	r1
    38d0:	0f 92       	push	r0
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	0f 92       	push	r0
    38d6:	11 24       	eor	r1, r1
    38d8:	2f 93       	push	r18
    38da:	3f 93       	push	r19
    38dc:	4f 93       	push	r20
    38de:	5f 93       	push	r21
    38e0:	6f 93       	push	r22
    38e2:	7f 93       	push	r23
    38e4:	8f 93       	push	r24
    38e6:	9f 93       	push	r25
    38e8:	af 93       	push	r26
    38ea:	bf 93       	push	r27
    38ec:	ef 93       	push	r30
    38ee:	ff 93       	push	r31
    38f0:	df 93       	push	r29
    38f2:	cf 93       	push	r28
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    38f8:	80 91 5e 01 	lds	r24, 0x015E
    38fc:	90 91 5f 01 	lds	r25, 0x015F
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	29 f0       	breq	.+10     	; 0x390e <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    3904:	e0 91 5e 01 	lds	r30, 0x015E
    3908:	f0 91 5f 01 	lds	r31, 0x015F
    390c:	09 95       	icall
}
    390e:	cf 91       	pop	r28
    3910:	df 91       	pop	r29
    3912:	ff 91       	pop	r31
    3914:	ef 91       	pop	r30
    3916:	bf 91       	pop	r27
    3918:	af 91       	pop	r26
    391a:	9f 91       	pop	r25
    391c:	8f 91       	pop	r24
    391e:	7f 91       	pop	r23
    3920:	6f 91       	pop	r22
    3922:	5f 91       	pop	r21
    3924:	4f 91       	pop	r20
    3926:	3f 91       	pop	r19
    3928:	2f 91       	pop	r18
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	0f 90       	pop	r0
    3930:	1f 90       	pop	r1
    3932:	18 95       	reti

00003934 <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
void __vector_9(void){
    3934:	1f 92       	push	r1
    3936:	0f 92       	push	r0
    3938:	0f b6       	in	r0, 0x3f	; 63
    393a:	0f 92       	push	r0
    393c:	11 24       	eor	r1, r1
    393e:	2f 93       	push	r18
    3940:	3f 93       	push	r19
    3942:	4f 93       	push	r20
    3944:	5f 93       	push	r21
    3946:	6f 93       	push	r22
    3948:	7f 93       	push	r23
    394a:	8f 93       	push	r24
    394c:	9f 93       	push	r25
    394e:	af 93       	push	r26
    3950:	bf 93       	push	r27
    3952:	ef 93       	push	r30
    3954:	ff 93       	push	r31
    3956:	df 93       	push	r29
    3958:	cf 93       	push	r28
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    395e:	80 91 5a 01 	lds	r24, 0x015A
    3962:	90 91 5b 01 	lds	r25, 0x015B
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	29 f0       	breq	.+10     	; 0x3974 <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    396a:	e0 91 5a 01 	lds	r30, 0x015A
    396e:	f0 91 5b 01 	lds	r31, 0x015B
    3972:	09 95       	icall
}
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	ff 91       	pop	r31
    397a:	ef 91       	pop	r30
    397c:	bf 91       	pop	r27
    397e:	af 91       	pop	r26
    3980:	9f 91       	pop	r25
    3982:	8f 91       	pop	r24
    3984:	7f 91       	pop	r23
    3986:	6f 91       	pop	r22
    3988:	5f 91       	pop	r21
    398a:	4f 91       	pop	r20
    398c:	3f 91       	pop	r19
    398e:	2f 91       	pop	r18
    3990:	0f 90       	pop	r0
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	0f 90       	pop	r0
    3996:	1f 90       	pop	r1
    3998:	18 95       	reti

0000399a <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
void __vector_10(void){
    399a:	1f 92       	push	r1
    399c:	0f 92       	push	r0
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	0f 92       	push	r0
    39a2:	11 24       	eor	r1, r1
    39a4:	2f 93       	push	r18
    39a6:	3f 93       	push	r19
    39a8:	4f 93       	push	r20
    39aa:	5f 93       	push	r21
    39ac:	6f 93       	push	r22
    39ae:	7f 93       	push	r23
    39b0:	8f 93       	push	r24
    39b2:	9f 93       	push	r25
    39b4:	af 93       	push	r26
    39b6:	bf 93       	push	r27
    39b8:	ef 93       	push	r30
    39ba:	ff 93       	push	r31
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    39c4:	80 91 58 01 	lds	r24, 0x0158
    39c8:	90 91 59 01 	lds	r25, 0x0159
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	29 f0       	breq	.+10     	; 0x39da <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    39d0:	e0 91 58 01 	lds	r30, 0x0158
    39d4:	f0 91 59 01 	lds	r31, 0x0159
    39d8:	09 95       	icall
}
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	ff 91       	pop	r31
    39e0:	ef 91       	pop	r30
    39e2:	bf 91       	pop	r27
    39e4:	af 91       	pop	r26
    39e6:	9f 91       	pop	r25
    39e8:	8f 91       	pop	r24
    39ea:	7f 91       	pop	r23
    39ec:	6f 91       	pop	r22
    39ee:	5f 91       	pop	r21
    39f0:	4f 91       	pop	r20
    39f2:	3f 91       	pop	r19
    39f4:	2f 91       	pop	r18
    39f6:	0f 90       	pop	r0
    39f8:	0f be       	out	0x3f, r0	; 63
    39fa:	0f 90       	pop	r0
    39fc:	1f 90       	pop	r1
    39fe:	18 95       	reti

00003a00 <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
void __vector_11(void){
    3a00:	1f 92       	push	r1
    3a02:	0f 92       	push	r0
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	0f 92       	push	r0
    3a08:	11 24       	eor	r1, r1
    3a0a:	2f 93       	push	r18
    3a0c:	3f 93       	push	r19
    3a0e:	4f 93       	push	r20
    3a10:	5f 93       	push	r21
    3a12:	6f 93       	push	r22
    3a14:	7f 93       	push	r23
    3a16:	8f 93       	push	r24
    3a18:	9f 93       	push	r25
    3a1a:	af 93       	push	r26
    3a1c:	bf 93       	push	r27
    3a1e:	ef 93       	push	r30
    3a20:	ff 93       	push	r31
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    3a2a:	80 91 56 01 	lds	r24, 0x0156
    3a2e:	90 91 57 01 	lds	r25, 0x0157
    3a32:	00 97       	sbiw	r24, 0x00	; 0
    3a34:	29 f0       	breq	.+10     	; 0x3a40 <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    3a36:	e0 91 56 01 	lds	r30, 0x0156
    3a3a:	f0 91 57 01 	lds	r31, 0x0157
    3a3e:	09 95       	icall
}
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	ff 91       	pop	r31
    3a46:	ef 91       	pop	r30
    3a48:	bf 91       	pop	r27
    3a4a:	af 91       	pop	r26
    3a4c:	9f 91       	pop	r25
    3a4e:	8f 91       	pop	r24
    3a50:	7f 91       	pop	r23
    3a52:	6f 91       	pop	r22
    3a54:	5f 91       	pop	r21
    3a56:	4f 91       	pop	r20
    3a58:	3f 91       	pop	r19
    3a5a:	2f 91       	pop	r18
    3a5c:	0f 90       	pop	r0
    3a5e:	0f be       	out	0x3f, r0	; 63
    3a60:	0f 90       	pop	r0
    3a62:	1f 90       	pop	r1
    3a64:	18 95       	reti

00003a66 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    3a6e:	af e5       	ldi	r26, 0x5F	; 95
    3a70:	b0 e0       	ldi	r27, 0x00	; 0
    3a72:	ef e5       	ldi	r30, 0x5F	; 95
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	80 81       	ld	r24, Z
    3a78:	80 68       	ori	r24, 0x80	; 128
    3a7a:	8c 93       	st	X, r24
    return STATE_OK;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
}
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	cd b7       	in	r28, 0x3d	; 61
    3a8a:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    3a8c:	af e5       	ldi	r26, 0x5F	; 95
    3a8e:	b0 e0       	ldi	r27, 0x00	; 0
    3a90:	ef e5       	ldi	r30, 0x5F	; 95
    3a92:	f0 e0       	ldi	r31, 0x00	; 0
    3a94:	80 81       	ld	r24, Z
    3a96:	8f 77       	andi	r24, 0x7F	; 127
    3a98:	8c 93       	st	X, r24
    return STATE_OK;
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
}
    3a9c:	cf 91       	pop	r28
    3a9e:	df 91       	pop	r29
    3aa0:	08 95       	ret

00003aa2 <EXTI_enu_EXTI_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_EXTI_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    3aa2:	df 93       	push	r29
    3aa4:	cf 93       	push	r28
    3aa6:	cd b7       	in	r28, 0x3d	; 61
    3aa8:	de b7       	in	r29, 0x3e	; 62
    3aaa:	2b 97       	sbiw	r28, 0x0b	; 11
    3aac:	0f b6       	in	r0, 0x3f	; 63
    3aae:	f8 94       	cli
    3ab0:	de bf       	out	0x3e, r29	; 62
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	cd bf       	out	0x3d, r28	; 61
    3ab6:	8a 83       	std	Y+2, r24	; 0x02
    3ab8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    3abe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac0:	83 30       	cpi	r24, 0x03	; 3
    3ac2:	08 f0       	brcs	.+2      	; 0x3ac6 <EXTI_enu_EXTI_Enable+0x24>
    3ac4:	07 c1       	rjmp	.+526    	; 0x3cd4 <EXTI_enu_EXTI_Enable+0x232>
    3ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac8:	84 30       	cpi	r24, 0x04	; 4
    3aca:	08 f0       	brcs	.+2      	; 0x3ace <EXTI_enu_EXTI_Enable+0x2c>
    3acc:	03 c1       	rjmp	.+518    	; 0x3cd4 <EXTI_enu_EXTI_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    3ace:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	3b 87       	std	Y+11, r19	; 0x0b
    3ad6:	2a 87       	std	Y+10, r18	; 0x0a
    3ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    3adc:	81 30       	cpi	r24, 0x01	; 1
    3ade:	91 05       	cpc	r25, r1
    3ae0:	09 f4       	brne	.+2      	; 0x3ae4 <EXTI_enu_EXTI_Enable+0x42>
    3ae2:	6d c0       	rjmp	.+218    	; 0x3bbe <EXTI_enu_EXTI_Enable+0x11c>
    3ae4:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ae6:	3b 85       	ldd	r19, Y+11	; 0x0b
    3ae8:	22 30       	cpi	r18, 0x02	; 2
    3aea:	31 05       	cpc	r19, r1
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <EXTI_enu_EXTI_Enable+0x4e>
    3aee:	c9 c0       	rjmp	.+402    	; 0x3c82 <EXTI_enu_EXTI_Enable+0x1e0>
    3af0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3af2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	09 f0       	breq	.+2      	; 0x3afa <EXTI_enu_EXTI_Enable+0x58>
    3af8:	ee c0       	rjmp	.+476    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    3afa:	ab e5       	ldi	r26, 0x5B	; 91
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	eb e5       	ldi	r30, 0x5B	; 91
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	80 81       	ld	r24, Z
    3b04:	80 64       	ori	r24, 0x40	; 64
    3b06:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3b08:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	39 87       	std	Y+9, r19	; 0x09
    3b10:	28 87       	std	Y+8, r18	; 0x08
    3b12:	88 85       	ldd	r24, Y+8	; 0x08
    3b14:	99 85       	ldd	r25, Y+9	; 0x09
    3b16:	81 30       	cpi	r24, 0x01	; 1
    3b18:	91 05       	cpc	r25, r1
    3b1a:	21 f1       	breq	.+72     	; 0x3b64 <EXTI_enu_EXTI_Enable+0xc2>
    3b1c:	28 85       	ldd	r18, Y+8	; 0x08
    3b1e:	39 85       	ldd	r19, Y+9	; 0x09
    3b20:	22 30       	cpi	r18, 0x02	; 2
    3b22:	31 05       	cpc	r19, r1
    3b24:	2c f4       	brge	.+10     	; 0x3b30 <EXTI_enu_EXTI_Enable+0x8e>
    3b26:	88 85       	ldd	r24, Y+8	; 0x08
    3b28:	99 85       	ldd	r25, Y+9	; 0x09
    3b2a:	00 97       	sbiw	r24, 0x00	; 0
    3b2c:	61 f0       	breq	.+24     	; 0x3b46 <EXTI_enu_EXTI_Enable+0xa4>
    3b2e:	d3 c0       	rjmp	.+422    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
    3b30:	28 85       	ldd	r18, Y+8	; 0x08
    3b32:	39 85       	ldd	r19, Y+9	; 0x09
    3b34:	22 30       	cpi	r18, 0x02	; 2
    3b36:	31 05       	cpc	r19, r1
    3b38:	21 f1       	breq	.+72     	; 0x3b82 <EXTI_enu_EXTI_Enable+0xe0>
    3b3a:	88 85       	ldd	r24, Y+8	; 0x08
    3b3c:	99 85       	ldd	r25, Y+9	; 0x09
    3b3e:	83 30       	cpi	r24, 0x03	; 3
    3b40:	91 05       	cpc	r25, r1
    3b42:	71 f1       	breq	.+92     	; 0x3ba0 <EXTI_enu_EXTI_Enable+0xfe>
    3b44:	c8 c0       	rjmp	.+400    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3b46:	a5 e5       	ldi	r26, 0x55	; 85
    3b48:	b0 e0       	ldi	r27, 0x00	; 0
    3b4a:	e5 e5       	ldi	r30, 0x55	; 85
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	8e 7f       	andi	r24, 0xFE	; 254
    3b52:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3b54:	a5 e5       	ldi	r26, 0x55	; 85
    3b56:	b0 e0       	ldi	r27, 0x00	; 0
    3b58:	e5 e5       	ldi	r30, 0x55	; 85
    3b5a:	f0 e0       	ldi	r31, 0x00	; 0
    3b5c:	80 81       	ld	r24, Z
    3b5e:	8d 7f       	andi	r24, 0xFD	; 253
    3b60:	8c 93       	st	X, r24
    3b62:	b9 c0       	rjmp	.+370    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3b64:	a5 e5       	ldi	r26, 0x55	; 85
    3b66:	b0 e0       	ldi	r27, 0x00	; 0
    3b68:	e5 e5       	ldi	r30, 0x55	; 85
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	80 81       	ld	r24, Z
    3b6e:	81 60       	ori	r24, 0x01	; 1
    3b70:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3b72:	a5 e5       	ldi	r26, 0x55	; 85
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	e5 e5       	ldi	r30, 0x55	; 85
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	80 81       	ld	r24, Z
    3b7c:	8d 7f       	andi	r24, 0xFD	; 253
    3b7e:	8c 93       	st	X, r24
    3b80:	aa c0       	rjmp	.+340    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3b82:	a5 e5       	ldi	r26, 0x55	; 85
    3b84:	b0 e0       	ldi	r27, 0x00	; 0
    3b86:	e5 e5       	ldi	r30, 0x55	; 85
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	80 81       	ld	r24, Z
    3b8c:	8e 7f       	andi	r24, 0xFE	; 254
    3b8e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3b90:	a5 e5       	ldi	r26, 0x55	; 85
    3b92:	b0 e0       	ldi	r27, 0x00	; 0
    3b94:	e5 e5       	ldi	r30, 0x55	; 85
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	80 81       	ld	r24, Z
    3b9a:	82 60       	ori	r24, 0x02	; 2
    3b9c:	8c 93       	st	X, r24
    3b9e:	9b c0       	rjmp	.+310    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    3ba0:	a5 e5       	ldi	r26, 0x55	; 85
    3ba2:	b0 e0       	ldi	r27, 0x00	; 0
    3ba4:	e5 e5       	ldi	r30, 0x55	; 85
    3ba6:	f0 e0       	ldi	r31, 0x00	; 0
    3ba8:	80 81       	ld	r24, Z
    3baa:	81 60       	ori	r24, 0x01	; 1
    3bac:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    3bae:	a5 e5       	ldi	r26, 0x55	; 85
    3bb0:	b0 e0       	ldi	r27, 0x00	; 0
    3bb2:	e5 e5       	ldi	r30, 0x55	; 85
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	80 81       	ld	r24, Z
    3bb8:	82 60       	ori	r24, 0x02	; 2
    3bba:	8c 93       	st	X, r24
    3bbc:	8c c0       	rjmp	.+280    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    3bbe:	ab e5       	ldi	r26, 0x5B	; 91
    3bc0:	b0 e0       	ldi	r27, 0x00	; 0
    3bc2:	eb e5       	ldi	r30, 0x5B	; 91
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	80 81       	ld	r24, Z
    3bc8:	80 68       	ori	r24, 0x80	; 128
    3bca:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	3f 83       	std	Y+7, r19	; 0x07
    3bd4:	2e 83       	std	Y+6, r18	; 0x06
    3bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3bda:	81 30       	cpi	r24, 0x01	; 1
    3bdc:	91 05       	cpc	r25, r1
    3bde:	21 f1       	breq	.+72     	; 0x3c28 <EXTI_enu_EXTI_Enable+0x186>
    3be0:	2e 81       	ldd	r18, Y+6	; 0x06
    3be2:	3f 81       	ldd	r19, Y+7	; 0x07
    3be4:	22 30       	cpi	r18, 0x02	; 2
    3be6:	31 05       	cpc	r19, r1
    3be8:	2c f4       	brge	.+10     	; 0x3bf4 <EXTI_enu_EXTI_Enable+0x152>
    3bea:	8e 81       	ldd	r24, Y+6	; 0x06
    3bec:	9f 81       	ldd	r25, Y+7	; 0x07
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	61 f0       	breq	.+24     	; 0x3c0a <EXTI_enu_EXTI_Enable+0x168>
    3bf2:	71 c0       	rjmp	.+226    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
    3bf4:	2e 81       	ldd	r18, Y+6	; 0x06
    3bf6:	3f 81       	ldd	r19, Y+7	; 0x07
    3bf8:	22 30       	cpi	r18, 0x02	; 2
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	21 f1       	breq	.+72     	; 0x3c46 <EXTI_enu_EXTI_Enable+0x1a4>
    3bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    3c00:	9f 81       	ldd	r25, Y+7	; 0x07
    3c02:	83 30       	cpi	r24, 0x03	; 3
    3c04:	91 05       	cpc	r25, r1
    3c06:	71 f1       	breq	.+92     	; 0x3c64 <EXTI_enu_EXTI_Enable+0x1c2>
    3c08:	66 c0       	rjmp	.+204    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c0a:	a5 e5       	ldi	r26, 0x55	; 85
    3c0c:	b0 e0       	ldi	r27, 0x00	; 0
    3c0e:	e5 e5       	ldi	r30, 0x55	; 85
    3c10:	f0 e0       	ldi	r31, 0x00	; 0
    3c12:	80 81       	ld	r24, Z
    3c14:	8b 7f       	andi	r24, 0xFB	; 251
    3c16:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c18:	a5 e5       	ldi	r26, 0x55	; 85
    3c1a:	b0 e0       	ldi	r27, 0x00	; 0
    3c1c:	e5 e5       	ldi	r30, 0x55	; 85
    3c1e:	f0 e0       	ldi	r31, 0x00	; 0
    3c20:	80 81       	ld	r24, Z
    3c22:	87 7f       	andi	r24, 0xF7	; 247
    3c24:	8c 93       	st	X, r24
    3c26:	57 c0       	rjmp	.+174    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c28:	a5 e5       	ldi	r26, 0x55	; 85
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	e5 e5       	ldi	r30, 0x55	; 85
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	84 60       	ori	r24, 0x04	; 4
    3c34:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c36:	a5 e5       	ldi	r26, 0x55	; 85
    3c38:	b0 e0       	ldi	r27, 0x00	; 0
    3c3a:	e5 e5       	ldi	r30, 0x55	; 85
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	87 7f       	andi	r24, 0xF7	; 247
    3c42:	8c 93       	st	X, r24
    3c44:	48 c0       	rjmp	.+144    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c46:	a5 e5       	ldi	r26, 0x55	; 85
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	e5 e5       	ldi	r30, 0x55	; 85
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	80 81       	ld	r24, Z
    3c50:	8b 7f       	andi	r24, 0xFB	; 251
    3c52:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c54:	a5 e5       	ldi	r26, 0x55	; 85
    3c56:	b0 e0       	ldi	r27, 0x00	; 0
    3c58:	e5 e5       	ldi	r30, 0x55	; 85
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	88 60       	ori	r24, 0x08	; 8
    3c60:	8c 93       	st	X, r24
    3c62:	39 c0       	rjmp	.+114    	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3c64:	a5 e5       	ldi	r26, 0x55	; 85
    3c66:	b0 e0       	ldi	r27, 0x00	; 0
    3c68:	e5 e5       	ldi	r30, 0x55	; 85
    3c6a:	f0 e0       	ldi	r31, 0x00	; 0
    3c6c:	80 81       	ld	r24, Z
    3c6e:	84 60       	ori	r24, 0x04	; 4
    3c70:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3c72:	a5 e5       	ldi	r26, 0x55	; 85
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	e5 e5       	ldi	r30, 0x55	; 85
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	88 60       	ori	r24, 0x08	; 8
    3c7e:	8c 93       	st	X, r24
    3c80:	2a c0       	rjmp	.+84     	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    3c82:	ab e5       	ldi	r26, 0x5B	; 91
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	eb e5       	ldi	r30, 0x5B	; 91
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	80 62       	ori	r24, 0x20	; 32
    3c8e:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    3c90:	8b 81       	ldd	r24, Y+3	; 0x03
    3c92:	28 2f       	mov	r18, r24
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	3d 83       	std	Y+5, r19	; 0x05
    3c98:	2c 83       	std	Y+4, r18	; 0x04
    3c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9e:	82 30       	cpi	r24, 0x02	; 2
    3ca0:	91 05       	cpc	r25, r1
    3ca2:	31 f0       	breq	.+12     	; 0x3cb0 <EXTI_enu_EXTI_Enable+0x20e>
    3ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    3ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    3ca8:	23 30       	cpi	r18, 0x03	; 3
    3caa:	31 05       	cpc	r19, r1
    3cac:	49 f0       	breq	.+18     	; 0x3cc0 <EXTI_enu_EXTI_Enable+0x21e>
    3cae:	10 c0       	rjmp	.+32     	; 0x3cd0 <EXTI_enu_EXTI_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3cb0:	a4 e5       	ldi	r26, 0x54	; 84
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	e4 e5       	ldi	r30, 0x54	; 84
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	80 81       	ld	r24, Z
    3cba:	8f 7b       	andi	r24, 0xBF	; 191
    3cbc:	8c 93       	st	X, r24
    3cbe:	0b c0       	rjmp	.+22     	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3cc0:	a4 e5       	ldi	r26, 0x54	; 84
    3cc2:	b0 e0       	ldi	r27, 0x00	; 0
    3cc4:	e4 e5       	ldi	r30, 0x54	; 84
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	80 81       	ld	r24, Z
    3cca:	80 64       	ori	r24, 0x40	; 64
    3ccc:	8c 93       	st	X, r24
    3cce:	03 c0       	rjmp	.+6      	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    3cd0:	19 82       	std	Y+1, r1	; 0x01
    3cd2:	01 c0       	rjmp	.+2      	; 0x3cd6 <EXTI_enu_EXTI_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3cd4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3cd8:	2b 96       	adiw	r28, 0x0b	; 11
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	de bf       	out	0x3e, r29	; 62
    3ce0:	0f be       	out	0x3f, r0	; 63
    3ce2:	cd bf       	out	0x3d, r28	; 61
    3ce4:	cf 91       	pop	r28
    3ce6:	df 91       	pop	r29
    3ce8:	08 95       	ret

00003cea <EXTI_enu_EXTI_Disable>:

ES_t EXTI_enu_EXTI_Disable(u8 Copy_u8_EXTI_Index)
{
    3cea:	df 93       	push	r29
    3cec:	cf 93       	push	r28
    3cee:	00 d0       	rcall	.+0      	; 0x3cf0 <EXTI_enu_EXTI_Disable+0x6>
    3cf0:	00 d0       	rcall	.+0      	; 0x3cf2 <EXTI_enu_EXTI_Disable+0x8>
    3cf2:	cd b7       	in	r28, 0x3d	; 61
    3cf4:	de b7       	in	r29, 0x3e	; 62
    3cf6:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	83 30       	cpi	r24, 0x03	; 3
    3d00:	58 f5       	brcc	.+86     	; 0x3d58 <EXTI_enu_EXTI_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    3d02:	8a 81       	ldd	r24, Y+2	; 0x02
    3d04:	28 2f       	mov	r18, r24
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	3c 83       	std	Y+4, r19	; 0x04
    3d0a:	2b 83       	std	Y+3, r18	; 0x03
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d10:	81 30       	cpi	r24, 0x01	; 1
    3d12:	91 05       	cpc	r25, r1
    3d14:	89 f0       	breq	.+34     	; 0x3d38 <EXTI_enu_EXTI_Disable+0x4e>
    3d16:	2b 81       	ldd	r18, Y+3	; 0x03
    3d18:	3c 81       	ldd	r19, Y+4	; 0x04
    3d1a:	22 30       	cpi	r18, 0x02	; 2
    3d1c:	31 05       	cpc	r19, r1
    3d1e:	a1 f0       	breq	.+40     	; 0x3d48 <EXTI_enu_EXTI_Disable+0x5e>
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	9c 81       	ldd	r25, Y+4	; 0x04
    3d24:	00 97       	sbiw	r24, 0x00	; 0
    3d26:	c9 f4       	brne	.+50     	; 0x3d5a <EXTI_enu_EXTI_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    3d28:	ab e5       	ldi	r26, 0x5B	; 91
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	eb e5       	ldi	r30, 0x5B	; 91
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 81       	ld	r24, Z
    3d32:	8f 7b       	andi	r24, 0xBF	; 191
    3d34:	8c 93       	st	X, r24
    3d36:	11 c0       	rjmp	.+34     	; 0x3d5a <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    3d38:	ab e5       	ldi	r26, 0x5B	; 91
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	eb e5       	ldi	r30, 0x5B	; 91
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	8f 77       	andi	r24, 0x7F	; 127
    3d44:	8c 93       	st	X, r24
    3d46:	09 c0       	rjmp	.+18     	; 0x3d5a <EXTI_enu_EXTI_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    3d48:	ab e5       	ldi	r26, 0x5B	; 91
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	eb e5       	ldi	r30, 0x5B	; 91
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	8f 7d       	andi	r24, 0xDF	; 223
    3d54:	8c 93       	st	X, r24
    3d56:	01 c0       	rjmp	.+2      	; 0x3d5a <EXTI_enu_EXTI_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3d58:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <EXTI_enu_setCallBack>:

ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <EXTI_enu_setCallBack+0x6>
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <EXTI_enu_setCallBack+0x8>
    3d72:	cd b7       	in	r28, 0x3d	; 61
    3d74:	de b7       	in	r29, 0x3e	; 62
    3d76:	9b 83       	std	Y+3, r25	; 0x03
    3d78:	8a 83       	std	Y+2, r24	; 0x02
    3d7a:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	9b 81       	ldd	r25, Y+3	; 0x03
    3d84:	00 97       	sbiw	r24, 0x00	; 0
    3d86:	81 f0       	breq	.+32     	; 0x3da8 <EXTI_enu_setCallBack+0x3e>
    3d88:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8a:	83 30       	cpi	r24, 0x03	; 3
    3d8c:	68 f4       	brcc	.+26     	; 0x3da8 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    3d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d90:	88 2f       	mov	r24, r24
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	88 0f       	add	r24, r24
    3d96:	99 1f       	adc	r25, r25
    3d98:	fc 01       	movw	r30, r24
    3d9a:	ee 59       	subi	r30, 0x9E	; 158
    3d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3da0:	9b 81       	ldd	r25, Y+3	; 0x03
    3da2:	91 83       	std	Z+1, r25	; 0x01
    3da4:	80 83       	st	Z, r24
    3da6:	01 c0       	rjmp	.+2      	; 0x3daa <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3da8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dac:	0f 90       	pop	r0
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	cf 91       	pop	r28
    3db6:	df 91       	pop	r29
    3db8:	08 95       	ret

00003dba <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    3dba:	1f 92       	push	r1
    3dbc:	0f 92       	push	r0
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	0f 92       	push	r0
    3dc2:	11 24       	eor	r1, r1
    3dc4:	2f 93       	push	r18
    3dc6:	3f 93       	push	r19
    3dc8:	4f 93       	push	r20
    3dca:	5f 93       	push	r21
    3dcc:	6f 93       	push	r22
    3dce:	7f 93       	push	r23
    3dd0:	8f 93       	push	r24
    3dd2:	9f 93       	push	r25
    3dd4:	af 93       	push	r26
    3dd6:	bf 93       	push	r27
    3dd8:	ef 93       	push	r30
    3dda:	ff 93       	push	r31
    3ddc:	df 93       	push	r29
    3dde:	cf 93       	push	r28
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    3de4:	80 91 62 01 	lds	r24, 0x0162
    3de8:	90 91 63 01 	lds	r25, 0x0163
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	29 f0       	breq	.+10     	; 0x3dfa <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    3df0:	e0 91 62 01 	lds	r30, 0x0162
    3df4:	f0 91 63 01 	lds	r31, 0x0163
    3df8:	09 95       	icall
}
    3dfa:	cf 91       	pop	r28
    3dfc:	df 91       	pop	r29
    3dfe:	ff 91       	pop	r31
    3e00:	ef 91       	pop	r30
    3e02:	bf 91       	pop	r27
    3e04:	af 91       	pop	r26
    3e06:	9f 91       	pop	r25
    3e08:	8f 91       	pop	r24
    3e0a:	7f 91       	pop	r23
    3e0c:	6f 91       	pop	r22
    3e0e:	5f 91       	pop	r21
    3e10:	4f 91       	pop	r20
    3e12:	3f 91       	pop	r19
    3e14:	2f 91       	pop	r18
    3e16:	0f 90       	pop	r0
    3e18:	0f be       	out	0x3f, r0	; 63
    3e1a:	0f 90       	pop	r0
    3e1c:	1f 90       	pop	r1
    3e1e:	18 95       	reti

00003e20 <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    3e20:	1f 92       	push	r1
    3e22:	0f 92       	push	r0
    3e24:	0f b6       	in	r0, 0x3f	; 63
    3e26:	0f 92       	push	r0
    3e28:	11 24       	eor	r1, r1
    3e2a:	2f 93       	push	r18
    3e2c:	3f 93       	push	r19
    3e2e:	4f 93       	push	r20
    3e30:	5f 93       	push	r21
    3e32:	6f 93       	push	r22
    3e34:	7f 93       	push	r23
    3e36:	8f 93       	push	r24
    3e38:	9f 93       	push	r25
    3e3a:	af 93       	push	r26
    3e3c:	bf 93       	push	r27
    3e3e:	ef 93       	push	r30
    3e40:	ff 93       	push	r31
    3e42:	df 93       	push	r29
    3e44:	cf 93       	push	r28
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    3e4a:	80 91 64 01 	lds	r24, 0x0164
    3e4e:	90 91 65 01 	lds	r25, 0x0165
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	29 f0       	breq	.+10     	; 0x3e60 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    3e56:	e0 91 64 01 	lds	r30, 0x0164
    3e5a:	f0 91 65 01 	lds	r31, 0x0165
    3e5e:	09 95       	icall
}
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	ff 91       	pop	r31
    3e66:	ef 91       	pop	r30
    3e68:	bf 91       	pop	r27
    3e6a:	af 91       	pop	r26
    3e6c:	9f 91       	pop	r25
    3e6e:	8f 91       	pop	r24
    3e70:	7f 91       	pop	r23
    3e72:	6f 91       	pop	r22
    3e74:	5f 91       	pop	r21
    3e76:	4f 91       	pop	r20
    3e78:	3f 91       	pop	r19
    3e7a:	2f 91       	pop	r18
    3e7c:	0f 90       	pop	r0
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	0f 90       	pop	r0
    3e82:	1f 90       	pop	r1
    3e84:	18 95       	reti

00003e86 <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    3e86:	1f 92       	push	r1
    3e88:	0f 92       	push	r0
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	0f 92       	push	r0
    3e8e:	11 24       	eor	r1, r1
    3e90:	2f 93       	push	r18
    3e92:	3f 93       	push	r19
    3e94:	4f 93       	push	r20
    3e96:	5f 93       	push	r21
    3e98:	6f 93       	push	r22
    3e9a:	7f 93       	push	r23
    3e9c:	8f 93       	push	r24
    3e9e:	9f 93       	push	r25
    3ea0:	af 93       	push	r26
    3ea2:	bf 93       	push	r27
    3ea4:	ef 93       	push	r30
    3ea6:	ff 93       	push	r31
    3ea8:	df 93       	push	r29
    3eaa:	cf 93       	push	r28
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    3eb0:	80 91 66 01 	lds	r24, 0x0166
    3eb4:	90 91 67 01 	lds	r25, 0x0167
    3eb8:	00 97       	sbiw	r24, 0x00	; 0
    3eba:	29 f0       	breq	.+10     	; 0x3ec6 <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    3ebc:	e0 91 66 01 	lds	r30, 0x0166
    3ec0:	f0 91 67 01 	lds	r31, 0x0167
    3ec4:	09 95       	icall
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	ff 91       	pop	r31
    3ecc:	ef 91       	pop	r30
    3ece:	bf 91       	pop	r27
    3ed0:	af 91       	pop	r26
    3ed2:	9f 91       	pop	r25
    3ed4:	8f 91       	pop	r24
    3ed6:	7f 91       	pop	r23
    3ed8:	6f 91       	pop	r22
    3eda:	5f 91       	pop	r21
    3edc:	4f 91       	pop	r20
    3ede:	3f 91       	pop	r19
    3ee0:	2f 91       	pop	r18
    3ee2:	0f 90       	pop	r0
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	0f 90       	pop	r0
    3ee8:	1f 90       	pop	r1
    3eea:	18 95       	reti

00003eec <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    3eec:	df 93       	push	r29
    3eee:	cf 93       	push	r28
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    3ef4:	ea e3       	ldi	r30, 0x3A	; 58
    3ef6:	f0 e0       	ldi	r31, 0x00	; 0
    3ef8:	8f e7       	ldi	r24, 0x7F	; 127
    3efa:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    3efc:	e7 e3       	ldi	r30, 0x37	; 55
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	8d ef       	ldi	r24, 0xFD	; 253
    3f02:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    3f04:	e4 e3       	ldi	r30, 0x34	; 52
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	83 e1       	ldi	r24, 0x13	; 19
    3f0a:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    3f0c:	e1 e3       	ldi	r30, 0x31	; 49
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    3f12:	eb e3       	ldi	r30, 0x3B	; 59
    3f14:	f0 e0       	ldi	r31, 0x00	; 0
    3f16:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    3f18:	e8 e3       	ldi	r30, 0x38	; 56
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	84 ef       	ldi	r24, 0xF4	; 244
    3f1e:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    3f20:	e5 e3       	ldi	r30, 0x35	; 53
    3f22:	f0 e0       	ldi	r31, 0x00	; 0
    3f24:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    3f26:	e2 e3       	ldi	r30, 0x32	; 50
    3f28:	f0 e0       	ldi	r31, 0x00	; 0
    3f2a:	8c e3       	ldi	r24, 0x3C	; 60
    3f2c:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    3f2e:	81 e0       	ldi	r24, 0x01	; 1
}
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	08 95       	ret

00003f36 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    3f36:	df 93       	push	r29
    3f38:	cf 93       	push	r28
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	2e 97       	sbiw	r28, 0x0e	; 14
    3f40:	0f b6       	in	r0, 0x3f	; 63
    3f42:	f8 94       	cli
    3f44:	de bf       	out	0x3e, r29	; 62
    3f46:	0f be       	out	0x3f, r0	; 63
    3f48:	cd bf       	out	0x3d, r28	; 61
    3f4a:	8a 83       	std	Y+2, r24	; 0x02
    3f4c:	6b 83       	std	Y+3, r22	; 0x03
    3f4e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    3f54:	8a 81       	ldd	r24, Y+2	; 0x02
    3f56:	84 30       	cpi	r24, 0x04	; 4
    3f58:	08 f0       	brcs	.+2      	; 0x3f5c <DIO_enu_SetPinDirection+0x26>
    3f5a:	0c c1       	rjmp	.+536    	; 0x4174 <DIO_enu_SetPinDirection+0x23e>
    3f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5e:	88 30       	cpi	r24, 0x08	; 8
    3f60:	08 f0       	brcs	.+2      	; 0x3f64 <DIO_enu_SetPinDirection+0x2e>
    3f62:	08 c1       	rjmp	.+528    	; 0x4174 <DIO_enu_SetPinDirection+0x23e>
    3f64:	8c 81       	ldd	r24, Y+4	; 0x04
    3f66:	81 30       	cpi	r24, 0x01	; 1
    3f68:	21 f0       	breq	.+8      	; 0x3f72 <DIO_enu_SetPinDirection+0x3c>
    3f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f6c:	88 23       	and	r24, r24
    3f6e:	09 f0       	breq	.+2      	; 0x3f72 <DIO_enu_SetPinDirection+0x3c>
    3f70:	01 c1       	rjmp	.+514    	; 0x4174 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	3e 87       	std	Y+14, r19	; 0x0e
    3f7a:	2d 87       	std	Y+13, r18	; 0x0d
    3f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f80:	81 30       	cpi	r24, 0x01	; 1
    3f82:	91 05       	cpc	r25, r1
    3f84:	09 f4       	brne	.+2      	; 0x3f88 <DIO_enu_SetPinDirection+0x52>
    3f86:	4f c0       	rjmp	.+158    	; 0x4026 <DIO_enu_SetPinDirection+0xf0>
    3f88:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f8a:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f8c:	22 30       	cpi	r18, 0x02	; 2
    3f8e:	31 05       	cpc	r19, r1
    3f90:	2c f4       	brge	.+10     	; 0x3f9c <DIO_enu_SetPinDirection+0x66>
    3f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f96:	00 97       	sbiw	r24, 0x00	; 0
    3f98:	71 f0       	breq	.+28     	; 0x3fb6 <DIO_enu_SetPinDirection+0x80>
    3f9a:	ed c0       	rjmp	.+474    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
    3f9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f9e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3fa0:	22 30       	cpi	r18, 0x02	; 2
    3fa2:	31 05       	cpc	r19, r1
    3fa4:	09 f4       	brne	.+2      	; 0x3fa8 <DIO_enu_SetPinDirection+0x72>
    3fa6:	77 c0       	rjmp	.+238    	; 0x4096 <DIO_enu_SetPinDirection+0x160>
    3fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fac:	83 30       	cpi	r24, 0x03	; 3
    3fae:	91 05       	cpc	r25, r1
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <DIO_enu_SetPinDirection+0x7e>
    3fb2:	a9 c0       	rjmp	.+338    	; 0x4106 <DIO_enu_SetPinDirection+0x1d0>
    3fb4:	e0 c0       	rjmp	.+448    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    3fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fb8:	28 2f       	mov	r18, r24
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	3c 87       	std	Y+12, r19	; 0x0c
    3fbe:	2b 87       	std	Y+11, r18	; 0x0b
    3fc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fc4:	00 97       	sbiw	r24, 0x00	; 0
    3fc6:	d1 f0       	breq	.+52     	; 0x3ffc <DIO_enu_SetPinDirection+0xc6>
    3fc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fca:	3c 85       	ldd	r19, Y+12	; 0x0c
    3fcc:	21 30       	cpi	r18, 0x01	; 1
    3fce:	31 05       	cpc	r19, r1
    3fd0:	09 f0       	breq	.+2      	; 0x3fd4 <DIO_enu_SetPinDirection+0x9e>
    3fd2:	d1 c0       	rjmp	.+418    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    3fd4:	aa e3       	ldi	r26, 0x3A	; 58
    3fd6:	b0 e0       	ldi	r27, 0x00	; 0
    3fd8:	ea e3       	ldi	r30, 0x3A	; 58
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	80 81       	ld	r24, Z
    3fde:	48 2f       	mov	r20, r24
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	28 2f       	mov	r18, r24
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	02 2e       	mov	r0, r18
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <DIO_enu_SetPinDirection+0xbc>
    3fee:	88 0f       	add	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	0a 94       	dec	r0
    3ff4:	e2 f7       	brpl	.-8      	; 0x3fee <DIO_enu_SetPinDirection+0xb8>
    3ff6:	84 2b       	or	r24, r20
    3ff8:	8c 93       	st	X, r24
    3ffa:	bd c0       	rjmp	.+378    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    3ffc:	aa e3       	ldi	r26, 0x3A	; 58
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	ea e3       	ldi	r30, 0x3A	; 58
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	80 81       	ld	r24, Z
    4006:	48 2f       	mov	r20, r24
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	02 2e       	mov	r0, r18
    4014:	02 c0       	rjmp	.+4      	; 0x401a <DIO_enu_SetPinDirection+0xe4>
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	0a 94       	dec	r0
    401c:	e2 f7       	brpl	.-8      	; 0x4016 <DIO_enu_SetPinDirection+0xe0>
    401e:	80 95       	com	r24
    4020:	84 23       	and	r24, r20
    4022:	8c 93       	st	X, r24
    4024:	a8 c0       	rjmp	.+336    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    4026:	8c 81       	ldd	r24, Y+4	; 0x04
    4028:	28 2f       	mov	r18, r24
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	3a 87       	std	Y+10, r19	; 0x0a
    402e:	29 87       	std	Y+9, r18	; 0x09
    4030:	89 85       	ldd	r24, Y+9	; 0x09
    4032:	9a 85       	ldd	r25, Y+10	; 0x0a
    4034:	00 97       	sbiw	r24, 0x00	; 0
    4036:	d1 f0       	breq	.+52     	; 0x406c <DIO_enu_SetPinDirection+0x136>
    4038:	29 85       	ldd	r18, Y+9	; 0x09
    403a:	3a 85       	ldd	r19, Y+10	; 0x0a
    403c:	21 30       	cpi	r18, 0x01	; 1
    403e:	31 05       	cpc	r19, r1
    4040:	09 f0       	breq	.+2      	; 0x4044 <DIO_enu_SetPinDirection+0x10e>
    4042:	99 c0       	rjmp	.+306    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    4044:	a7 e3       	ldi	r26, 0x37	; 55
    4046:	b0 e0       	ldi	r27, 0x00	; 0
    4048:	e7 e3       	ldi	r30, 0x37	; 55
    404a:	f0 e0       	ldi	r31, 0x00	; 0
    404c:	80 81       	ld	r24, Z
    404e:	48 2f       	mov	r20, r24
    4050:	8b 81       	ldd	r24, Y+3	; 0x03
    4052:	28 2f       	mov	r18, r24
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	02 2e       	mov	r0, r18
    405c:	02 c0       	rjmp	.+4      	; 0x4062 <DIO_enu_SetPinDirection+0x12c>
    405e:	88 0f       	add	r24, r24
    4060:	99 1f       	adc	r25, r25
    4062:	0a 94       	dec	r0
    4064:	e2 f7       	brpl	.-8      	; 0x405e <DIO_enu_SetPinDirection+0x128>
    4066:	84 2b       	or	r24, r20
    4068:	8c 93       	st	X, r24
    406a:	85 c0       	rjmp	.+266    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    406c:	a7 e3       	ldi	r26, 0x37	; 55
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	e7 e3       	ldi	r30, 0x37	; 55
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	48 2f       	mov	r20, r24
    4078:	8b 81       	ldd	r24, Y+3	; 0x03
    407a:	28 2f       	mov	r18, r24
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	02 2e       	mov	r0, r18
    4084:	02 c0       	rjmp	.+4      	; 0x408a <DIO_enu_SetPinDirection+0x154>
    4086:	88 0f       	add	r24, r24
    4088:	99 1f       	adc	r25, r25
    408a:	0a 94       	dec	r0
    408c:	e2 f7       	brpl	.-8      	; 0x4086 <DIO_enu_SetPinDirection+0x150>
    408e:	80 95       	com	r24
    4090:	84 23       	and	r24, r20
    4092:	8c 93       	st	X, r24
    4094:	70 c0       	rjmp	.+224    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    4096:	8c 81       	ldd	r24, Y+4	; 0x04
    4098:	28 2f       	mov	r18, r24
    409a:	30 e0       	ldi	r19, 0x00	; 0
    409c:	38 87       	std	Y+8, r19	; 0x08
    409e:	2f 83       	std	Y+7, r18	; 0x07
    40a0:	8f 81       	ldd	r24, Y+7	; 0x07
    40a2:	98 85       	ldd	r25, Y+8	; 0x08
    40a4:	00 97       	sbiw	r24, 0x00	; 0
    40a6:	d1 f0       	breq	.+52     	; 0x40dc <DIO_enu_SetPinDirection+0x1a6>
    40a8:	2f 81       	ldd	r18, Y+7	; 0x07
    40aa:	38 85       	ldd	r19, Y+8	; 0x08
    40ac:	21 30       	cpi	r18, 0x01	; 1
    40ae:	31 05       	cpc	r19, r1
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <DIO_enu_SetPinDirection+0x17e>
    40b2:	61 c0       	rjmp	.+194    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    40b4:	a4 e3       	ldi	r26, 0x34	; 52
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	e4 e3       	ldi	r30, 0x34	; 52
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	48 2f       	mov	r20, r24
    40c0:	8b 81       	ldd	r24, Y+3	; 0x03
    40c2:	28 2f       	mov	r18, r24
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	02 2e       	mov	r0, r18
    40cc:	02 c0       	rjmp	.+4      	; 0x40d2 <DIO_enu_SetPinDirection+0x19c>
    40ce:	88 0f       	add	r24, r24
    40d0:	99 1f       	adc	r25, r25
    40d2:	0a 94       	dec	r0
    40d4:	e2 f7       	brpl	.-8      	; 0x40ce <DIO_enu_SetPinDirection+0x198>
    40d6:	84 2b       	or	r24, r20
    40d8:	8c 93       	st	X, r24
    40da:	4d c0       	rjmp	.+154    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    40dc:	a4 e3       	ldi	r26, 0x34	; 52
    40de:	b0 e0       	ldi	r27, 0x00	; 0
    40e0:	e4 e3       	ldi	r30, 0x34	; 52
    40e2:	f0 e0       	ldi	r31, 0x00	; 0
    40e4:	80 81       	ld	r24, Z
    40e6:	48 2f       	mov	r20, r24
    40e8:	8b 81       	ldd	r24, Y+3	; 0x03
    40ea:	28 2f       	mov	r18, r24
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	90 e0       	ldi	r25, 0x00	; 0
    40f2:	02 2e       	mov	r0, r18
    40f4:	02 c0       	rjmp	.+4      	; 0x40fa <DIO_enu_SetPinDirection+0x1c4>
    40f6:	88 0f       	add	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	0a 94       	dec	r0
    40fc:	e2 f7       	brpl	.-8      	; 0x40f6 <DIO_enu_SetPinDirection+0x1c0>
    40fe:	80 95       	com	r24
    4100:	84 23       	and	r24, r20
    4102:	8c 93       	st	X, r24
    4104:	38 c0       	rjmp	.+112    	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    4106:	8c 81       	ldd	r24, Y+4	; 0x04
    4108:	28 2f       	mov	r18, r24
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	3e 83       	std	Y+6, r19	; 0x06
    410e:	2d 83       	std	Y+5, r18	; 0x05
    4110:	8d 81       	ldd	r24, Y+5	; 0x05
    4112:	9e 81       	ldd	r25, Y+6	; 0x06
    4114:	00 97       	sbiw	r24, 0x00	; 0
    4116:	c9 f0       	breq	.+50     	; 0x414a <DIO_enu_SetPinDirection+0x214>
    4118:	2d 81       	ldd	r18, Y+5	; 0x05
    411a:	3e 81       	ldd	r19, Y+6	; 0x06
    411c:	21 30       	cpi	r18, 0x01	; 1
    411e:	31 05       	cpc	r19, r1
    4120:	51 f5       	brne	.+84     	; 0x4176 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    4122:	a1 e3       	ldi	r26, 0x31	; 49
    4124:	b0 e0       	ldi	r27, 0x00	; 0
    4126:	e1 e3       	ldi	r30, 0x31	; 49
    4128:	f0 e0       	ldi	r31, 0x00	; 0
    412a:	80 81       	ld	r24, Z
    412c:	48 2f       	mov	r20, r24
    412e:	8b 81       	ldd	r24, Y+3	; 0x03
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	02 2e       	mov	r0, r18
    413a:	02 c0       	rjmp	.+4      	; 0x4140 <DIO_enu_SetPinDirection+0x20a>
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	0a 94       	dec	r0
    4142:	e2 f7       	brpl	.-8      	; 0x413c <DIO_enu_SetPinDirection+0x206>
    4144:	84 2b       	or	r24, r20
    4146:	8c 93       	st	X, r24
    4148:	16 c0       	rjmp	.+44     	; 0x4176 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    414a:	a1 e3       	ldi	r26, 0x31	; 49
    414c:	b0 e0       	ldi	r27, 0x00	; 0
    414e:	e1 e3       	ldi	r30, 0x31	; 49
    4150:	f0 e0       	ldi	r31, 0x00	; 0
    4152:	80 81       	ld	r24, Z
    4154:	48 2f       	mov	r20, r24
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	28 2f       	mov	r18, r24
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	02 2e       	mov	r0, r18
    4162:	02 c0       	rjmp	.+4      	; 0x4168 <DIO_enu_SetPinDirection+0x232>
    4164:	88 0f       	add	r24, r24
    4166:	99 1f       	adc	r25, r25
    4168:	0a 94       	dec	r0
    416a:	e2 f7       	brpl	.-8      	; 0x4164 <DIO_enu_SetPinDirection+0x22e>
    416c:	80 95       	com	r24
    416e:	84 23       	and	r24, r20
    4170:	8c 93       	st	X, r24
    4172:	01 c0       	rjmp	.+2      	; 0x4176 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    4174:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4176:	89 81       	ldd	r24, Y+1	; 0x01
}
    4178:	2e 96       	adiw	r28, 0x0e	; 14
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	f8 94       	cli
    417e:	de bf       	out	0x3e, r29	; 62
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	cd bf       	out	0x3d, r28	; 61
    4184:	cf 91       	pop	r28
    4186:	df 91       	pop	r29
    4188:	08 95       	ret

0000418a <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    418a:	df 93       	push	r29
    418c:	cf 93       	push	r28
    418e:	cd b7       	in	r28, 0x3d	; 61
    4190:	de b7       	in	r29, 0x3e	; 62
    4192:	2e 97       	sbiw	r28, 0x0e	; 14
    4194:	0f b6       	in	r0, 0x3f	; 63
    4196:	f8 94       	cli
    4198:	de bf       	out	0x3e, r29	; 62
    419a:	0f be       	out	0x3f, r0	; 63
    419c:	cd bf       	out	0x3d, r28	; 61
    419e:	8a 83       	std	Y+2, r24	; 0x02
    41a0:	6b 83       	std	Y+3, r22	; 0x03
    41a2:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    41a8:	8a 81       	ldd	r24, Y+2	; 0x02
    41aa:	84 30       	cpi	r24, 0x04	; 4
    41ac:	08 f0       	brcs	.+2      	; 0x41b0 <DIO_enu_SetPinValue+0x26>
    41ae:	0c c1       	rjmp	.+536    	; 0x43c8 <DIO_enu_SetPinValue+0x23e>
    41b0:	8b 81       	ldd	r24, Y+3	; 0x03
    41b2:	88 30       	cpi	r24, 0x08	; 8
    41b4:	08 f0       	brcs	.+2      	; 0x41b8 <DIO_enu_SetPinValue+0x2e>
    41b6:	08 c1       	rjmp	.+528    	; 0x43c8 <DIO_enu_SetPinValue+0x23e>
    41b8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ba:	81 30       	cpi	r24, 0x01	; 1
    41bc:	21 f0       	breq	.+8      	; 0x41c6 <DIO_enu_SetPinValue+0x3c>
    41be:	8c 81       	ldd	r24, Y+4	; 0x04
    41c0:	88 23       	and	r24, r24
    41c2:	09 f0       	breq	.+2      	; 0x41c6 <DIO_enu_SetPinValue+0x3c>
    41c4:	01 c1       	rjmp	.+514    	; 0x43c8 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    41c6:	8a 81       	ldd	r24, Y+2	; 0x02
    41c8:	28 2f       	mov	r18, r24
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	3e 87       	std	Y+14, r19	; 0x0e
    41ce:	2d 87       	std	Y+13, r18	; 0x0d
    41d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d4:	81 30       	cpi	r24, 0x01	; 1
    41d6:	91 05       	cpc	r25, r1
    41d8:	09 f4       	brne	.+2      	; 0x41dc <DIO_enu_SetPinValue+0x52>
    41da:	4f c0       	rjmp	.+158    	; 0x427a <DIO_enu_SetPinValue+0xf0>
    41dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    41de:	3e 85       	ldd	r19, Y+14	; 0x0e
    41e0:	22 30       	cpi	r18, 0x02	; 2
    41e2:	31 05       	cpc	r19, r1
    41e4:	2c f4       	brge	.+10     	; 0x41f0 <DIO_enu_SetPinValue+0x66>
    41e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ea:	00 97       	sbiw	r24, 0x00	; 0
    41ec:	71 f0       	breq	.+28     	; 0x420a <DIO_enu_SetPinValue+0x80>
    41ee:	ed c0       	rjmp	.+474    	; 0x43ca <DIO_enu_SetPinValue+0x240>
    41f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    41f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    41f4:	22 30       	cpi	r18, 0x02	; 2
    41f6:	31 05       	cpc	r19, r1
    41f8:	09 f4       	brne	.+2      	; 0x41fc <DIO_enu_SetPinValue+0x72>
    41fa:	77 c0       	rjmp	.+238    	; 0x42ea <DIO_enu_SetPinValue+0x160>
    41fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    41fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4200:	83 30       	cpi	r24, 0x03	; 3
    4202:	91 05       	cpc	r25, r1
    4204:	09 f4       	brne	.+2      	; 0x4208 <DIO_enu_SetPinValue+0x7e>
    4206:	a9 c0       	rjmp	.+338    	; 0x435a <DIO_enu_SetPinValue+0x1d0>
    4208:	e0 c0       	rjmp	.+448    	; 0x43ca <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    420a:	8c 81       	ldd	r24, Y+4	; 0x04
    420c:	28 2f       	mov	r18, r24
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	3c 87       	std	Y+12, r19	; 0x0c
    4212:	2b 87       	std	Y+11, r18	; 0x0b
    4214:	8b 85       	ldd	r24, Y+11	; 0x0b
    4216:	9c 85       	ldd	r25, Y+12	; 0x0c
    4218:	00 97       	sbiw	r24, 0x00	; 0
    421a:	d1 f0       	breq	.+52     	; 0x4250 <DIO_enu_SetPinValue+0xc6>
    421c:	2b 85       	ldd	r18, Y+11	; 0x0b
    421e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4220:	21 30       	cpi	r18, 0x01	; 1
    4222:	31 05       	cpc	r19, r1
    4224:	09 f0       	breq	.+2      	; 0x4228 <DIO_enu_SetPinValue+0x9e>
    4226:	d1 c0       	rjmp	.+418    	; 0x43ca <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    4228:	ab e3       	ldi	r26, 0x3B	; 59
    422a:	b0 e0       	ldi	r27, 0x00	; 0
    422c:	eb e3       	ldi	r30, 0x3B	; 59
    422e:	f0 e0       	ldi	r31, 0x00	; 0
    4230:	80 81       	ld	r24, Z
    4232:	48 2f       	mov	r20, r24
    4234:	8b 81       	ldd	r24, Y+3	; 0x03
    4236:	28 2f       	mov	r18, r24
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	02 2e       	mov	r0, r18
    4240:	02 c0       	rjmp	.+4      	; 0x4246 <DIO_enu_SetPinValue+0xbc>
    4242:	88 0f       	add	r24, r24
    4244:	99 1f       	adc	r25, r25
    4246:	0a 94       	dec	r0
    4248:	e2 f7       	brpl	.-8      	; 0x4242 <DIO_enu_SetPinValue+0xb8>
    424a:	84 2b       	or	r24, r20
    424c:	8c 93       	st	X, r24
    424e:	bd c0       	rjmp	.+378    	; 0x43ca <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    4250:	ab e3       	ldi	r26, 0x3B	; 59
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	eb e3       	ldi	r30, 0x3B	; 59
    4256:	f0 e0       	ldi	r31, 0x00	; 0
    4258:	80 81       	ld	r24, Z
    425a:	48 2f       	mov	r20, r24
    425c:	8b 81       	ldd	r24, Y+3	; 0x03
    425e:	28 2f       	mov	r18, r24
    4260:	30 e0       	ldi	r19, 0x00	; 0
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	02 2e       	mov	r0, r18
    4268:	02 c0       	rjmp	.+4      	; 0x426e <DIO_enu_SetPinValue+0xe4>
    426a:	88 0f       	add	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	0a 94       	dec	r0
    4270:	e2 f7       	brpl	.-8      	; 0x426a <DIO_enu_SetPinValue+0xe0>
    4272:	80 95       	com	r24
    4274:	84 23       	and	r24, r20
    4276:	8c 93       	st	X, r24
    4278:	a8 c0       	rjmp	.+336    	; 0x43ca <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    427a:	8c 81       	ldd	r24, Y+4	; 0x04
    427c:	28 2f       	mov	r18, r24
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	3a 87       	std	Y+10, r19	; 0x0a
    4282:	29 87       	std	Y+9, r18	; 0x09
    4284:	89 85       	ldd	r24, Y+9	; 0x09
    4286:	9a 85       	ldd	r25, Y+10	; 0x0a
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	d1 f0       	breq	.+52     	; 0x42c0 <DIO_enu_SetPinValue+0x136>
    428c:	29 85       	ldd	r18, Y+9	; 0x09
    428e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4290:	21 30       	cpi	r18, 0x01	; 1
    4292:	31 05       	cpc	r19, r1
    4294:	09 f0       	breq	.+2      	; 0x4298 <DIO_enu_SetPinValue+0x10e>
    4296:	99 c0       	rjmp	.+306    	; 0x43ca <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    4298:	a8 e3       	ldi	r26, 0x38	; 56
    429a:	b0 e0       	ldi	r27, 0x00	; 0
    429c:	e8 e3       	ldi	r30, 0x38	; 56
    429e:	f0 e0       	ldi	r31, 0x00	; 0
    42a0:	80 81       	ld	r24, Z
    42a2:	48 2f       	mov	r20, r24
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	28 2f       	mov	r18, r24
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	02 2e       	mov	r0, r18
    42b0:	02 c0       	rjmp	.+4      	; 0x42b6 <DIO_enu_SetPinValue+0x12c>
    42b2:	88 0f       	add	r24, r24
    42b4:	99 1f       	adc	r25, r25
    42b6:	0a 94       	dec	r0
    42b8:	e2 f7       	brpl	.-8      	; 0x42b2 <DIO_enu_SetPinValue+0x128>
    42ba:	84 2b       	or	r24, r20
    42bc:	8c 93       	st	X, r24
    42be:	85 c0       	rjmp	.+266    	; 0x43ca <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    42c0:	a8 e3       	ldi	r26, 0x38	; 56
    42c2:	b0 e0       	ldi	r27, 0x00	; 0
    42c4:	e8 e3       	ldi	r30, 0x38	; 56
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	80 81       	ld	r24, Z
    42ca:	48 2f       	mov	r20, r24
    42cc:	8b 81       	ldd	r24, Y+3	; 0x03
    42ce:	28 2f       	mov	r18, r24
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	02 2e       	mov	r0, r18
    42d8:	02 c0       	rjmp	.+4      	; 0x42de <DIO_enu_SetPinValue+0x154>
    42da:	88 0f       	add	r24, r24
    42dc:	99 1f       	adc	r25, r25
    42de:	0a 94       	dec	r0
    42e0:	e2 f7       	brpl	.-8      	; 0x42da <DIO_enu_SetPinValue+0x150>
    42e2:	80 95       	com	r24
    42e4:	84 23       	and	r24, r20
    42e6:	8c 93       	st	X, r24
    42e8:	70 c0       	rjmp	.+224    	; 0x43ca <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    42ea:	8c 81       	ldd	r24, Y+4	; 0x04
    42ec:	28 2f       	mov	r18, r24
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	38 87       	std	Y+8, r19	; 0x08
    42f2:	2f 83       	std	Y+7, r18	; 0x07
    42f4:	8f 81       	ldd	r24, Y+7	; 0x07
    42f6:	98 85       	ldd	r25, Y+8	; 0x08
    42f8:	00 97       	sbiw	r24, 0x00	; 0
    42fa:	d1 f0       	breq	.+52     	; 0x4330 <DIO_enu_SetPinValue+0x1a6>
    42fc:	2f 81       	ldd	r18, Y+7	; 0x07
    42fe:	38 85       	ldd	r19, Y+8	; 0x08
    4300:	21 30       	cpi	r18, 0x01	; 1
    4302:	31 05       	cpc	r19, r1
    4304:	09 f0       	breq	.+2      	; 0x4308 <DIO_enu_SetPinValue+0x17e>
    4306:	61 c0       	rjmp	.+194    	; 0x43ca <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    4308:	a5 e3       	ldi	r26, 0x35	; 53
    430a:	b0 e0       	ldi	r27, 0x00	; 0
    430c:	e5 e3       	ldi	r30, 0x35	; 53
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	80 81       	ld	r24, Z
    4312:	48 2f       	mov	r20, r24
    4314:	8b 81       	ldd	r24, Y+3	; 0x03
    4316:	28 2f       	mov	r18, r24
    4318:	30 e0       	ldi	r19, 0x00	; 0
    431a:	81 e0       	ldi	r24, 0x01	; 1
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	02 2e       	mov	r0, r18
    4320:	02 c0       	rjmp	.+4      	; 0x4326 <DIO_enu_SetPinValue+0x19c>
    4322:	88 0f       	add	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	0a 94       	dec	r0
    4328:	e2 f7       	brpl	.-8      	; 0x4322 <DIO_enu_SetPinValue+0x198>
    432a:	84 2b       	or	r24, r20
    432c:	8c 93       	st	X, r24
    432e:	4d c0       	rjmp	.+154    	; 0x43ca <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    4330:	a5 e3       	ldi	r26, 0x35	; 53
    4332:	b0 e0       	ldi	r27, 0x00	; 0
    4334:	e5 e3       	ldi	r30, 0x35	; 53
    4336:	f0 e0       	ldi	r31, 0x00	; 0
    4338:	80 81       	ld	r24, Z
    433a:	48 2f       	mov	r20, r24
    433c:	8b 81       	ldd	r24, Y+3	; 0x03
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	81 e0       	ldi	r24, 0x01	; 1
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	02 2e       	mov	r0, r18
    4348:	02 c0       	rjmp	.+4      	; 0x434e <DIO_enu_SetPinValue+0x1c4>
    434a:	88 0f       	add	r24, r24
    434c:	99 1f       	adc	r25, r25
    434e:	0a 94       	dec	r0
    4350:	e2 f7       	brpl	.-8      	; 0x434a <DIO_enu_SetPinValue+0x1c0>
    4352:	80 95       	com	r24
    4354:	84 23       	and	r24, r20
    4356:	8c 93       	st	X, r24
    4358:	38 c0       	rjmp	.+112    	; 0x43ca <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    435a:	8c 81       	ldd	r24, Y+4	; 0x04
    435c:	28 2f       	mov	r18, r24
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	3e 83       	std	Y+6, r19	; 0x06
    4362:	2d 83       	std	Y+5, r18	; 0x05
    4364:	8d 81       	ldd	r24, Y+5	; 0x05
    4366:	9e 81       	ldd	r25, Y+6	; 0x06
    4368:	00 97       	sbiw	r24, 0x00	; 0
    436a:	c9 f0       	breq	.+50     	; 0x439e <DIO_enu_SetPinValue+0x214>
    436c:	2d 81       	ldd	r18, Y+5	; 0x05
    436e:	3e 81       	ldd	r19, Y+6	; 0x06
    4370:	21 30       	cpi	r18, 0x01	; 1
    4372:	31 05       	cpc	r19, r1
    4374:	51 f5       	brne	.+84     	; 0x43ca <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    4376:	a2 e3       	ldi	r26, 0x32	; 50
    4378:	b0 e0       	ldi	r27, 0x00	; 0
    437a:	e2 e3       	ldi	r30, 0x32	; 50
    437c:	f0 e0       	ldi	r31, 0x00	; 0
    437e:	80 81       	ld	r24, Z
    4380:	48 2f       	mov	r20, r24
    4382:	8b 81       	ldd	r24, Y+3	; 0x03
    4384:	28 2f       	mov	r18, r24
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	81 e0       	ldi	r24, 0x01	; 1
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	02 2e       	mov	r0, r18
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <DIO_enu_SetPinValue+0x20a>
    4390:	88 0f       	add	r24, r24
    4392:	99 1f       	adc	r25, r25
    4394:	0a 94       	dec	r0
    4396:	e2 f7       	brpl	.-8      	; 0x4390 <DIO_enu_SetPinValue+0x206>
    4398:	84 2b       	or	r24, r20
    439a:	8c 93       	st	X, r24
    439c:	16 c0       	rjmp	.+44     	; 0x43ca <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    439e:	a2 e3       	ldi	r26, 0x32	; 50
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	e2 e3       	ldi	r30, 0x32	; 50
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	80 81       	ld	r24, Z
    43a8:	48 2f       	mov	r20, r24
    43aa:	8b 81       	ldd	r24, Y+3	; 0x03
    43ac:	28 2f       	mov	r18, r24
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	02 2e       	mov	r0, r18
    43b6:	02 c0       	rjmp	.+4      	; 0x43bc <DIO_enu_SetPinValue+0x232>
    43b8:	88 0f       	add	r24, r24
    43ba:	99 1f       	adc	r25, r25
    43bc:	0a 94       	dec	r0
    43be:	e2 f7       	brpl	.-8      	; 0x43b8 <DIO_enu_SetPinValue+0x22e>
    43c0:	80 95       	com	r24
    43c2:	84 23       	and	r24, r20
    43c4:	8c 93       	st	X, r24
    43c6:	01 c0       	rjmp	.+2      	; 0x43ca <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    43c8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    43cc:	2e 96       	adiw	r28, 0x0e	; 14
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	cf 91       	pop	r28
    43da:	df 91       	pop	r29
    43dc:	08 95       	ret

000043de <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    43de:	df 93       	push	r29
    43e0:	cf 93       	push	r28
    43e2:	cd b7       	in	r28, 0x3d	; 61
    43e4:	de b7       	in	r29, 0x3e	; 62
    43e6:	27 97       	sbiw	r28, 0x07	; 7
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
    43f2:	8a 83       	std	Y+2, r24	; 0x02
    43f4:	6b 83       	std	Y+3, r22	; 0x03
    43f6:	5d 83       	std	Y+5, r21	; 0x05
    43f8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    43fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4400:	84 30       	cpi	r24, 0x04	; 4
    4402:	08 f0       	brcs	.+2      	; 0x4406 <DIO_enu_GetPinValue+0x28>
    4404:	7a c0       	rjmp	.+244    	; 0x44fa <DIO_enu_GetPinValue+0x11c>
    4406:	8b 81       	ldd	r24, Y+3	; 0x03
    4408:	88 30       	cpi	r24, 0x08	; 8
    440a:	08 f0       	brcs	.+2      	; 0x440e <DIO_enu_GetPinValue+0x30>
    440c:	76 c0       	rjmp	.+236    	; 0x44fa <DIO_enu_GetPinValue+0x11c>
    440e:	8c 81       	ldd	r24, Y+4	; 0x04
    4410:	9d 81       	ldd	r25, Y+5	; 0x05
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	09 f4       	brne	.+2      	; 0x4418 <DIO_enu_GetPinValue+0x3a>
    4416:	71 c0       	rjmp	.+226    	; 0x44fa <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	28 2f       	mov	r18, r24
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	3f 83       	std	Y+7, r19	; 0x07
    4420:	2e 83       	std	Y+6, r18	; 0x06
    4422:	4e 81       	ldd	r20, Y+6	; 0x06
    4424:	5f 81       	ldd	r21, Y+7	; 0x07
    4426:	41 30       	cpi	r20, 0x01	; 1
    4428:	51 05       	cpc	r21, r1
    442a:	59 f1       	breq	.+86     	; 0x4482 <DIO_enu_GetPinValue+0xa4>
    442c:	8e 81       	ldd	r24, Y+6	; 0x06
    442e:	9f 81       	ldd	r25, Y+7	; 0x07
    4430:	82 30       	cpi	r24, 0x02	; 2
    4432:	91 05       	cpc	r25, r1
    4434:	34 f4       	brge	.+12     	; 0x4442 <DIO_enu_GetPinValue+0x64>
    4436:	2e 81       	ldd	r18, Y+6	; 0x06
    4438:	3f 81       	ldd	r19, Y+7	; 0x07
    443a:	21 15       	cp	r18, r1
    443c:	31 05       	cpc	r19, r1
    443e:	69 f0       	breq	.+26     	; 0x445a <DIO_enu_GetPinValue+0x7c>
    4440:	5d c0       	rjmp	.+186    	; 0x44fc <DIO_enu_GetPinValue+0x11e>
    4442:	4e 81       	ldd	r20, Y+6	; 0x06
    4444:	5f 81       	ldd	r21, Y+7	; 0x07
    4446:	42 30       	cpi	r20, 0x02	; 2
    4448:	51 05       	cpc	r21, r1
    444a:	79 f1       	breq	.+94     	; 0x44aa <DIO_enu_GetPinValue+0xcc>
    444c:	8e 81       	ldd	r24, Y+6	; 0x06
    444e:	9f 81       	ldd	r25, Y+7	; 0x07
    4450:	83 30       	cpi	r24, 0x03	; 3
    4452:	91 05       	cpc	r25, r1
    4454:	09 f4       	brne	.+2      	; 0x4458 <DIO_enu_GetPinValue+0x7a>
    4456:	3d c0       	rjmp	.+122    	; 0x44d2 <DIO_enu_GetPinValue+0xf4>
    4458:	51 c0       	rjmp	.+162    	; 0x44fc <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    445a:	e9 e3       	ldi	r30, 0x39	; 57
    445c:	f0 e0       	ldi	r31, 0x00	; 0
    445e:	80 81       	ld	r24, Z
    4460:	28 2f       	mov	r18, r24
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	8b 81       	ldd	r24, Y+3	; 0x03
    4466:	88 2f       	mov	r24, r24
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	a9 01       	movw	r20, r18
    446c:	02 c0       	rjmp	.+4      	; 0x4472 <DIO_enu_GetPinValue+0x94>
    446e:	55 95       	asr	r21
    4470:	47 95       	ror	r20
    4472:	8a 95       	dec	r24
    4474:	e2 f7       	brpl	.-8      	; 0x446e <DIO_enu_GetPinValue+0x90>
    4476:	ca 01       	movw	r24, r20
    4478:	81 70       	andi	r24, 0x01	; 1
    447a:	ec 81       	ldd	r30, Y+4	; 0x04
    447c:	fd 81       	ldd	r31, Y+5	; 0x05
    447e:	80 83       	st	Z, r24
    4480:	3d c0       	rjmp	.+122    	; 0x44fc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    4482:	e6 e3       	ldi	r30, 0x36	; 54
    4484:	f0 e0       	ldi	r31, 0x00	; 0
    4486:	80 81       	ld	r24, Z
    4488:	28 2f       	mov	r18, r24
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	8b 81       	ldd	r24, Y+3	; 0x03
    448e:	88 2f       	mov	r24, r24
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	a9 01       	movw	r20, r18
    4494:	02 c0       	rjmp	.+4      	; 0x449a <DIO_enu_GetPinValue+0xbc>
    4496:	55 95       	asr	r21
    4498:	47 95       	ror	r20
    449a:	8a 95       	dec	r24
    449c:	e2 f7       	brpl	.-8      	; 0x4496 <DIO_enu_GetPinValue+0xb8>
    449e:	ca 01       	movw	r24, r20
    44a0:	81 70       	andi	r24, 0x01	; 1
    44a2:	ec 81       	ldd	r30, Y+4	; 0x04
    44a4:	fd 81       	ldd	r31, Y+5	; 0x05
    44a6:	80 83       	st	Z, r24
    44a8:	29 c0       	rjmp	.+82     	; 0x44fc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    44aa:	e3 e3       	ldi	r30, 0x33	; 51
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	80 81       	ld	r24, Z
    44b0:	28 2f       	mov	r18, r24
    44b2:	30 e0       	ldi	r19, 0x00	; 0
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	88 2f       	mov	r24, r24
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	a9 01       	movw	r20, r18
    44bc:	02 c0       	rjmp	.+4      	; 0x44c2 <DIO_enu_GetPinValue+0xe4>
    44be:	55 95       	asr	r21
    44c0:	47 95       	ror	r20
    44c2:	8a 95       	dec	r24
    44c4:	e2 f7       	brpl	.-8      	; 0x44be <DIO_enu_GetPinValue+0xe0>
    44c6:	ca 01       	movw	r24, r20
    44c8:	81 70       	andi	r24, 0x01	; 1
    44ca:	ec 81       	ldd	r30, Y+4	; 0x04
    44cc:	fd 81       	ldd	r31, Y+5	; 0x05
    44ce:	80 83       	st	Z, r24
    44d0:	15 c0       	rjmp	.+42     	; 0x44fc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    44d2:	e0 e3       	ldi	r30, 0x30	; 48
    44d4:	f0 e0       	ldi	r31, 0x00	; 0
    44d6:	80 81       	ld	r24, Z
    44d8:	28 2f       	mov	r18, r24
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	8b 81       	ldd	r24, Y+3	; 0x03
    44de:	88 2f       	mov	r24, r24
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	a9 01       	movw	r20, r18
    44e4:	02 c0       	rjmp	.+4      	; 0x44ea <DIO_enu_GetPinValue+0x10c>
    44e6:	55 95       	asr	r21
    44e8:	47 95       	ror	r20
    44ea:	8a 95       	dec	r24
    44ec:	e2 f7       	brpl	.-8      	; 0x44e6 <DIO_enu_GetPinValue+0x108>
    44ee:	ca 01       	movw	r24, r20
    44f0:	81 70       	andi	r24, 0x01	; 1
    44f2:	ec 81       	ldd	r30, Y+4	; 0x04
    44f4:	fd 81       	ldd	r31, Y+5	; 0x05
    44f6:	80 83       	st	Z, r24
    44f8:	01 c0       	rjmp	.+2      	; 0x44fc <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    44fa:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    44fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    44fe:	27 96       	adiw	r28, 0x07	; 7
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
    450a:	cf 91       	pop	r28
    450c:	df 91       	pop	r29
    450e:	08 95       	ret

00004510 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    4510:	df 93       	push	r29
    4512:	cf 93       	push	r28
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
    4518:	2d 97       	sbiw	r28, 0x0d	; 13
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	de bf       	out	0x3e, r29	; 62
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	cd bf       	out	0x3d, r28	; 61
    4524:	8a 83       	std	Y+2, r24	; 0x02
    4526:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    4528:	81 e0       	ldi	r24, 0x01	; 1
    452a:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    452c:	8a 81       	ldd	r24, Y+2	; 0x02
    452e:	84 30       	cpi	r24, 0x04	; 4
    4530:	08 f0       	brcs	.+2      	; 0x4534 <DIO_enu_SetPortDirection+0x24>
    4532:	84 c0       	rjmp	.+264    	; 0x463c <DIO_enu_SetPortDirection+0x12c>
    4534:	8b 81       	ldd	r24, Y+3	; 0x03
    4536:	81 30       	cpi	r24, 0x01	; 1
    4538:	21 f0       	breq	.+8      	; 0x4542 <DIO_enu_SetPortDirection+0x32>
    453a:	8b 81       	ldd	r24, Y+3	; 0x03
    453c:	88 23       	and	r24, r24
    453e:	09 f0       	breq	.+2      	; 0x4542 <DIO_enu_SetPortDirection+0x32>
    4540:	7d c0       	rjmp	.+250    	; 0x463c <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    4542:	8a 81       	ldd	r24, Y+2	; 0x02
    4544:	28 2f       	mov	r18, r24
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	3d 87       	std	Y+13, r19	; 0x0d
    454a:	2c 87       	std	Y+12, r18	; 0x0c
    454c:	8c 85       	ldd	r24, Y+12	; 0x0c
    454e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4550:	81 30       	cpi	r24, 0x01	; 1
    4552:	91 05       	cpc	r25, r1
    4554:	71 f1       	breq	.+92     	; 0x45b2 <DIO_enu_SetPortDirection+0xa2>
    4556:	2c 85       	ldd	r18, Y+12	; 0x0c
    4558:	3d 85       	ldd	r19, Y+13	; 0x0d
    455a:	22 30       	cpi	r18, 0x02	; 2
    455c:	31 05       	cpc	r19, r1
    455e:	2c f4       	brge	.+10     	; 0x456a <DIO_enu_SetPortDirection+0x5a>
    4560:	8c 85       	ldd	r24, Y+12	; 0x0c
    4562:	9d 85       	ldd	r25, Y+13	; 0x0d
    4564:	00 97       	sbiw	r24, 0x00	; 0
    4566:	69 f0       	breq	.+26     	; 0x4582 <DIO_enu_SetPortDirection+0x72>
    4568:	6a c0       	rjmp	.+212    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
    456a:	2c 85       	ldd	r18, Y+12	; 0x0c
    456c:	3d 85       	ldd	r19, Y+13	; 0x0d
    456e:	22 30       	cpi	r18, 0x02	; 2
    4570:	31 05       	cpc	r19, r1
    4572:	b1 f1       	breq	.+108    	; 0x45e0 <DIO_enu_SetPortDirection+0xd0>
    4574:	8c 85       	ldd	r24, Y+12	; 0x0c
    4576:	9d 85       	ldd	r25, Y+13	; 0x0d
    4578:	83 30       	cpi	r24, 0x03	; 3
    457a:	91 05       	cpc	r25, r1
    457c:	09 f4       	brne	.+2      	; 0x4580 <DIO_enu_SetPortDirection+0x70>
    457e:	47 c0       	rjmp	.+142    	; 0x460e <DIO_enu_SetPortDirection+0xfe>
    4580:	5e c0       	rjmp	.+188    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    4582:	8b 81       	ldd	r24, Y+3	; 0x03
    4584:	28 2f       	mov	r18, r24
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	3b 87       	std	Y+11, r19	; 0x0b
    458a:	2a 87       	std	Y+10, r18	; 0x0a
    458c:	8a 85       	ldd	r24, Y+10	; 0x0a
    458e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4590:	00 97       	sbiw	r24, 0x00	; 0
    4592:	59 f0       	breq	.+22     	; 0x45aa <DIO_enu_SetPortDirection+0x9a>
    4594:	2a 85       	ldd	r18, Y+10	; 0x0a
    4596:	3b 85       	ldd	r19, Y+11	; 0x0b
    4598:	21 30       	cpi	r18, 0x01	; 1
    459a:	31 05       	cpc	r19, r1
    459c:	09 f0       	breq	.+2      	; 0x45a0 <DIO_enu_SetPortDirection+0x90>
    459e:	4f c0       	rjmp	.+158    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    45a0:	ea e3       	ldi	r30, 0x3A	; 58
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	8f ef       	ldi	r24, 0xFF	; 255
    45a6:	80 83       	st	Z, r24
    45a8:	4a c0       	rjmp	.+148    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    45aa:	ea e3       	ldi	r30, 0x3A	; 58
    45ac:	f0 e0       	ldi	r31, 0x00	; 0
    45ae:	10 82       	st	Z, r1
    45b0:	46 c0       	rjmp	.+140    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    45b2:	8b 81       	ldd	r24, Y+3	; 0x03
    45b4:	28 2f       	mov	r18, r24
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	39 87       	std	Y+9, r19	; 0x09
    45ba:	28 87       	std	Y+8, r18	; 0x08
    45bc:	88 85       	ldd	r24, Y+8	; 0x08
    45be:	99 85       	ldd	r25, Y+9	; 0x09
    45c0:	00 97       	sbiw	r24, 0x00	; 0
    45c2:	51 f0       	breq	.+20     	; 0x45d8 <DIO_enu_SetPortDirection+0xc8>
    45c4:	28 85       	ldd	r18, Y+8	; 0x08
    45c6:	39 85       	ldd	r19, Y+9	; 0x09
    45c8:	21 30       	cpi	r18, 0x01	; 1
    45ca:	31 05       	cpc	r19, r1
    45cc:	c1 f5       	brne	.+112    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    45ce:	e7 e3       	ldi	r30, 0x37	; 55
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	8f ef       	ldi	r24, 0xFF	; 255
    45d4:	80 83       	st	Z, r24
    45d6:	33 c0       	rjmp	.+102    	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    45d8:	e7 e3       	ldi	r30, 0x37	; 55
    45da:	f0 e0       	ldi	r31, 0x00	; 0
    45dc:	10 82       	st	Z, r1
    45de:	2f c0       	rjmp	.+94     	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    45e0:	8b 81       	ldd	r24, Y+3	; 0x03
    45e2:	28 2f       	mov	r18, r24
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	3f 83       	std	Y+7, r19	; 0x07
    45e8:	2e 83       	std	Y+6, r18	; 0x06
    45ea:	8e 81       	ldd	r24, Y+6	; 0x06
    45ec:	9f 81       	ldd	r25, Y+7	; 0x07
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	51 f0       	breq	.+20     	; 0x4606 <DIO_enu_SetPortDirection+0xf6>
    45f2:	2e 81       	ldd	r18, Y+6	; 0x06
    45f4:	3f 81       	ldd	r19, Y+7	; 0x07
    45f6:	21 30       	cpi	r18, 0x01	; 1
    45f8:	31 05       	cpc	r19, r1
    45fa:	09 f5       	brne	.+66     	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    45fc:	e4 e3       	ldi	r30, 0x34	; 52
    45fe:	f0 e0       	ldi	r31, 0x00	; 0
    4600:	8f ef       	ldi	r24, 0xFF	; 255
    4602:	80 83       	st	Z, r24
    4604:	1c c0       	rjmp	.+56     	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    4606:	e4 e3       	ldi	r30, 0x34	; 52
    4608:	f0 e0       	ldi	r31, 0x00	; 0
    460a:	10 82       	st	Z, r1
    460c:	18 c0       	rjmp	.+48     	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    460e:	8b 81       	ldd	r24, Y+3	; 0x03
    4610:	28 2f       	mov	r18, r24
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	3d 83       	std	Y+5, r19	; 0x05
    4616:	2c 83       	std	Y+4, r18	; 0x04
    4618:	8c 81       	ldd	r24, Y+4	; 0x04
    461a:	9d 81       	ldd	r25, Y+5	; 0x05
    461c:	00 97       	sbiw	r24, 0x00	; 0
    461e:	51 f0       	breq	.+20     	; 0x4634 <DIO_enu_SetPortDirection+0x124>
    4620:	2c 81       	ldd	r18, Y+4	; 0x04
    4622:	3d 81       	ldd	r19, Y+5	; 0x05
    4624:	21 30       	cpi	r18, 0x01	; 1
    4626:	31 05       	cpc	r19, r1
    4628:	51 f4       	brne	.+20     	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    462a:	e1 e3       	ldi	r30, 0x31	; 49
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	8f ef       	ldi	r24, 0xFF	; 255
    4630:	80 83       	st	Z, r24
    4632:	05 c0       	rjmp	.+10     	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    4634:	e1 e3       	ldi	r30, 0x31	; 49
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	10 82       	st	Z, r1
    463a:	01 c0       	rjmp	.+2      	; 0x463e <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    463c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    463e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4640:	2d 96       	adiw	r28, 0x0d	; 13
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	cf 91       	pop	r28
    464e:	df 91       	pop	r29
    4650:	08 95       	ret

00004652 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    4652:	df 93       	push	r29
    4654:	cf 93       	push	r28
    4656:	00 d0       	rcall	.+0      	; 0x4658 <DIO_enu_SetPortValue+0x6>
    4658:	00 d0       	rcall	.+0      	; 0x465a <DIO_enu_SetPortValue+0x8>
    465a:	0f 92       	push	r0
    465c:	cd b7       	in	r28, 0x3d	; 61
    465e:	de b7       	in	r29, 0x3e	; 62
    4660:	8a 83       	std	Y+2, r24	; 0x02
    4662:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    4668:	8a 81       	ldd	r24, Y+2	; 0x02
    466a:	84 30       	cpi	r24, 0x04	; 4
    466c:	98 f5       	brcc	.+102    	; 0x46d4 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    466e:	8a 81       	ldd	r24, Y+2	; 0x02
    4670:	28 2f       	mov	r18, r24
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	3d 83       	std	Y+5, r19	; 0x05
    4676:	2c 83       	std	Y+4, r18	; 0x04
    4678:	8c 81       	ldd	r24, Y+4	; 0x04
    467a:	9d 81       	ldd	r25, Y+5	; 0x05
    467c:	81 30       	cpi	r24, 0x01	; 1
    467e:	91 05       	cpc	r25, r1
    4680:	d1 f0       	breq	.+52     	; 0x46b6 <DIO_enu_SetPortValue+0x64>
    4682:	2c 81       	ldd	r18, Y+4	; 0x04
    4684:	3d 81       	ldd	r19, Y+5	; 0x05
    4686:	22 30       	cpi	r18, 0x02	; 2
    4688:	31 05       	cpc	r19, r1
    468a:	2c f4       	brge	.+10     	; 0x4696 <DIO_enu_SetPortValue+0x44>
    468c:	8c 81       	ldd	r24, Y+4	; 0x04
    468e:	9d 81       	ldd	r25, Y+5	; 0x05
    4690:	00 97       	sbiw	r24, 0x00	; 0
    4692:	61 f0       	breq	.+24     	; 0x46ac <DIO_enu_SetPortValue+0x5a>
    4694:	20 c0       	rjmp	.+64     	; 0x46d6 <DIO_enu_SetPortValue+0x84>
    4696:	2c 81       	ldd	r18, Y+4	; 0x04
    4698:	3d 81       	ldd	r19, Y+5	; 0x05
    469a:	22 30       	cpi	r18, 0x02	; 2
    469c:	31 05       	cpc	r19, r1
    469e:	81 f0       	breq	.+32     	; 0x46c0 <DIO_enu_SetPortValue+0x6e>
    46a0:	8c 81       	ldd	r24, Y+4	; 0x04
    46a2:	9d 81       	ldd	r25, Y+5	; 0x05
    46a4:	83 30       	cpi	r24, 0x03	; 3
    46a6:	91 05       	cpc	r25, r1
    46a8:	81 f0       	breq	.+32     	; 0x46ca <DIO_enu_SetPortValue+0x78>
    46aa:	15 c0       	rjmp	.+42     	; 0x46d6 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    46ac:	eb e3       	ldi	r30, 0x3B	; 59
    46ae:	f0 e0       	ldi	r31, 0x00	; 0
    46b0:	8b 81       	ldd	r24, Y+3	; 0x03
    46b2:	80 83       	st	Z, r24
    46b4:	10 c0       	rjmp	.+32     	; 0x46d6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    46b6:	e8 e3       	ldi	r30, 0x38	; 56
    46b8:	f0 e0       	ldi	r31, 0x00	; 0
    46ba:	8b 81       	ldd	r24, Y+3	; 0x03
    46bc:	80 83       	st	Z, r24
    46be:	0b c0       	rjmp	.+22     	; 0x46d6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    46c0:	e5 e3       	ldi	r30, 0x35	; 53
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	80 83       	st	Z, r24
    46c8:	06 c0       	rjmp	.+12     	; 0x46d6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    46ca:	e2 e3       	ldi	r30, 0x32	; 50
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	8b 81       	ldd	r24, Y+3	; 0x03
    46d0:	80 83       	st	Z, r24
    46d2:	01 c0       	rjmp	.+2      	; 0x46d6 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    46d4:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    46d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    46d8:	0f 90       	pop	r0
    46da:	0f 90       	pop	r0
    46dc:	0f 90       	pop	r0
    46de:	0f 90       	pop	r0
    46e0:	0f 90       	pop	r0
    46e2:	cf 91       	pop	r28
    46e4:	df 91       	pop	r29
    46e6:	08 95       	ret

000046e8 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    46e8:	df 93       	push	r29
    46ea:	cf 93       	push	r28
    46ec:	00 d0       	rcall	.+0      	; 0x46ee <DIO_enu_GetPortValue+0x6>
    46ee:	00 d0       	rcall	.+0      	; 0x46f0 <DIO_enu_GetPortValue+0x8>
    46f0:	00 d0       	rcall	.+0      	; 0x46f2 <DIO_enu_GetPortValue+0xa>
    46f2:	cd b7       	in	r28, 0x3d	; 61
    46f4:	de b7       	in	r29, 0x3e	; 62
    46f6:	8a 83       	std	Y+2, r24	; 0x02
    46f8:	7c 83       	std	Y+4, r23	; 0x04
    46fa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    46fc:	81 e0       	ldi	r24, 0x01	; 1
    46fe:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    4700:	8a 81       	ldd	r24, Y+2	; 0x02
    4702:	84 30       	cpi	r24, 0x04	; 4
    4704:	08 f0       	brcs	.+2      	; 0x4708 <DIO_enu_GetPortValue+0x20>
    4706:	3f c0       	rjmp	.+126    	; 0x4786 <DIO_enu_GetPortValue+0x9e>
    4708:	8b 81       	ldd	r24, Y+3	; 0x03
    470a:	9c 81       	ldd	r25, Y+4	; 0x04
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	d9 f1       	breq	.+118    	; 0x4786 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    4710:	8a 81       	ldd	r24, Y+2	; 0x02
    4712:	28 2f       	mov	r18, r24
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	3e 83       	std	Y+6, r19	; 0x06
    4718:	2d 83       	std	Y+5, r18	; 0x05
    471a:	8d 81       	ldd	r24, Y+5	; 0x05
    471c:	9e 81       	ldd	r25, Y+6	; 0x06
    471e:	81 30       	cpi	r24, 0x01	; 1
    4720:	91 05       	cpc	r25, r1
    4722:	e1 f0       	breq	.+56     	; 0x475c <DIO_enu_GetPortValue+0x74>
    4724:	2d 81       	ldd	r18, Y+5	; 0x05
    4726:	3e 81       	ldd	r19, Y+6	; 0x06
    4728:	22 30       	cpi	r18, 0x02	; 2
    472a:	31 05       	cpc	r19, r1
    472c:	2c f4       	brge	.+10     	; 0x4738 <DIO_enu_GetPortValue+0x50>
    472e:	8d 81       	ldd	r24, Y+5	; 0x05
    4730:	9e 81       	ldd	r25, Y+6	; 0x06
    4732:	00 97       	sbiw	r24, 0x00	; 0
    4734:	61 f0       	breq	.+24     	; 0x474e <DIO_enu_GetPortValue+0x66>
    4736:	28 c0       	rjmp	.+80     	; 0x4788 <DIO_enu_GetPortValue+0xa0>
    4738:	2d 81       	ldd	r18, Y+5	; 0x05
    473a:	3e 81       	ldd	r19, Y+6	; 0x06
    473c:	22 30       	cpi	r18, 0x02	; 2
    473e:	31 05       	cpc	r19, r1
    4740:	a1 f0       	breq	.+40     	; 0x476a <DIO_enu_GetPortValue+0x82>
    4742:	8d 81       	ldd	r24, Y+5	; 0x05
    4744:	9e 81       	ldd	r25, Y+6	; 0x06
    4746:	83 30       	cpi	r24, 0x03	; 3
    4748:	91 05       	cpc	r25, r1
    474a:	b1 f0       	breq	.+44     	; 0x4778 <DIO_enu_GetPortValue+0x90>
    474c:	1d c0       	rjmp	.+58     	; 0x4788 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    474e:	e9 e3       	ldi	r30, 0x39	; 57
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	80 81       	ld	r24, Z
    4754:	eb 81       	ldd	r30, Y+3	; 0x03
    4756:	fc 81       	ldd	r31, Y+4	; 0x04
    4758:	80 83       	st	Z, r24
    475a:	16 c0       	rjmp	.+44     	; 0x4788 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    475c:	e6 e3       	ldi	r30, 0x36	; 54
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	80 81       	ld	r24, Z
    4762:	eb 81       	ldd	r30, Y+3	; 0x03
    4764:	fc 81       	ldd	r31, Y+4	; 0x04
    4766:	80 83       	st	Z, r24
    4768:	0f c0       	rjmp	.+30     	; 0x4788 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    476a:	e3 e3       	ldi	r30, 0x33	; 51
    476c:	f0 e0       	ldi	r31, 0x00	; 0
    476e:	80 81       	ld	r24, Z
    4770:	eb 81       	ldd	r30, Y+3	; 0x03
    4772:	fc 81       	ldd	r31, Y+4	; 0x04
    4774:	80 83       	st	Z, r24
    4776:	08 c0       	rjmp	.+16     	; 0x4788 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    4778:	e0 e3       	ldi	r30, 0x30	; 48
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	80 81       	ld	r24, Z
    477e:	eb 81       	ldd	r30, Y+3	; 0x03
    4780:	fc 81       	ldd	r31, Y+4	; 0x04
    4782:	80 83       	st	Z, r24
    4784:	01 c0       	rjmp	.+2      	; 0x4788 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    4786:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    4788:	89 81       	ldd	r24, Y+1	; 0x01
}
    478a:	26 96       	adiw	r28, 0x06	; 6
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	f8 94       	cli
    4790:	de bf       	out	0x3e, r29	; 62
    4792:	0f be       	out	0x3f, r0	; 63
    4794:	cd bf       	out	0x3d, r28	; 61
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <ADC_enu_Init>:
/********************Global Pointer to Notification Function***********************/
static void(* ADC_pf_Notification)(u16) = NULL;
/****************************ADC busy Flag*****************************************/
static u8 ADC_u8_busyFlag = 0;

ES_t ADC_enu_Init(void){
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	cd b7       	in	r28, 0x3d	; 61
    47a2:	de b7       	in	r29, 0x3e	; 62
/**********************Voltage Referance******************/
    #if ADC_REF_VOLTAGE == AVCC
    CLR_BIT(ADMUX_REG,REFS1);
    47a4:	a7 e2       	ldi	r26, 0x27	; 39
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	e7 e2       	ldi	r30, 0x27	; 39
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	8f 77       	andi	r24, 0x7F	; 127
    47b0:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS0);
    47b2:	a7 e2       	ldi	r26, 0x27	; 39
    47b4:	b0 e0       	ldi	r27, 0x00	; 0
    47b6:	e7 e2       	ldi	r30, 0x27	; 39
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	80 81       	ld	r24, Z
    47bc:	80 64       	ori	r24, 0x40	; 64
    47be:	8c 93       	st	X, r24
    SET_BIT(ADMUX_REG,REFS1);
    SET_BIT(ADMUX_REG,REFS0);
    #endif
/**********************Presentation************************/
    #if ADC_PRESENTATION_MODE == RIGHT_ADJUST
    CLR_BIT(ADMUX_REG,ADLAR);
    47c0:	a7 e2       	ldi	r26, 0x27	; 39
    47c2:	b0 e0       	ldi	r27, 0x00	; 0
    47c4:	e7 e2       	ldi	r30, 0x27	; 39
    47c6:	f0 e0       	ldi	r31, 0x00	; 0
    47c8:	80 81       	ld	r24, Z
    47ca:	8f 7d       	andi	r24, 0xDF	; 223
    47cc:	8c 93       	st	X, r24
    #elif ADC_PRESENTATION_MODE == LEFT_ADJUST
    SET_BIT(ADMUX_REG,ADLAR);
    #endif
/****************Conversion Mode**************************/
    #if ADC_CONVERSION_MODE == START_CONVERSION
    CLR_BIT(ADCSRA_REG,ADATE);
    47ce:	a6 e2       	ldi	r26, 0x26	; 38
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	e6 e2       	ldi	r30, 0x26	; 38
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	80 81       	ld	r24, Z
    47d8:	8f 7d       	andi	r24, 0xDF	; 223
    47da:	8c 93       	st	X, r24
    CLR_BIT(SFIOR_REG,ADTS2);
    SET_BIT(SFIOR_REG,ADTS1);
    CLR_BIT(SFIOR_REG,ADTS0);
    #endif
/*******************Division Factor*********************/
    ADCSRA_REG |= ADC_DIVISION_FACTOR;
    47dc:	a6 e2       	ldi	r26, 0x26	; 38
    47de:	b0 e0       	ldi	r27, 0x00	; 0
    47e0:	e6 e2       	ldi	r30, 0x26	; 38
    47e2:	f0 e0       	ldi	r31, 0x00	; 0
    47e4:	80 81       	ld	r24, Z
    47e6:	87 60       	ori	r24, 0x07	; 7
    47e8:	8c 93       	st	X, r24
/******************* Enable ADC **********************/
    SET_BIT(ADCSRA_REG,ADEN);
    47ea:	a6 e2       	ldi	r26, 0x26	; 38
    47ec:	b0 e0       	ldi	r27, 0x00	; 0
    47ee:	e6 e2       	ldi	r30, 0x26	; 38
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	80 81       	ld	r24, Z
    47f4:	80 68       	ori	r24, 0x80	; 128
    47f6:	8c 93       	st	X, r24
    
    return STATE_OK;
    47f8:	81 e0       	ldi	r24, 0x01	; 1
}
    47fa:	cf 91       	pop	r28
    47fc:	df 91       	pop	r29
    47fe:	08 95       	ret

00004800 <ADC_enu_GetDigitalValueSynchNonBlocking>:

ES_t ADC_enu_GetDigitalValueSynchNonBlocking(u8 Copy_u8_channelNb, u16 * Copy_pu16_DigitalValue){
    4800:	df 93       	push	r29
    4802:	cf 93       	push	r28
    4804:	cd b7       	in	r28, 0x3d	; 61
    4806:	de b7       	in	r29, 0x3e	; 62
    4808:	28 97       	sbiw	r28, 0x08	; 8
    480a:	0f b6       	in	r0, 0x3f	; 63
    480c:	f8 94       	cli
    480e:	de bf       	out	0x3e, r29	; 62
    4810:	0f be       	out	0x3f, r0	; 63
    4812:	cd bf       	out	0x3d, r28	; 61
    4814:	8e 83       	std	Y+6, r24	; 0x06
    4816:	78 87       	std	Y+8, r23	; 0x08
    4818:	6f 83       	std	Y+7, r22	; 0x07
    u8 Local_u8_errorState = STATE_OK;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	8d 83       	std	Y+5, r24	; 0x05
    u32 Local_u32_timeOutCounter = 0;
    481e:	19 82       	std	Y+1, r1	; 0x01
    4820:	1a 82       	std	Y+2, r1	; 0x02
    4822:	1b 82       	std	Y+3, r1	; 0x03
    4824:	1c 82       	std	Y+4, r1	; 0x04
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pu16_DigitalValue!= NULL) && (!ADC_u8_busyFlag) ){
    4826:	8e 81       	ldd	r24, Y+6	; 0x06
    4828:	80 32       	cpi	r24, 0x20	; 32
    482a:	08 f0       	brcs	.+2      	; 0x482e <ADC_enu_GetDigitalValueSynchNonBlocking+0x2e>
    482c:	65 c0       	rjmp	.+202    	; 0x48f8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    482e:	8f 81       	ldd	r24, Y+7	; 0x07
    4830:	98 85       	ldd	r25, Y+8	; 0x08
    4832:	00 97       	sbiw	r24, 0x00	; 0
    4834:	09 f4       	brne	.+2      	; 0x4838 <ADC_enu_GetDigitalValueSynchNonBlocking+0x38>
    4836:	60 c0       	rjmp	.+192    	; 0x48f8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
    4838:	80 91 6a 01 	lds	r24, 0x016A
    483c:	88 23       	and	r24, r24
    483e:	09 f0       	breq	.+2      	; 0x4842 <ADC_enu_GetDigitalValueSynchNonBlocking+0x42>
    4840:	5b c0       	rjmp	.+182    	; 0x48f8 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf8>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	80 93 6a 01 	sts	0x016A, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    4848:	a7 e2       	ldi	r26, 0x27	; 39
    484a:	b0 e0       	ldi	r27, 0x00	; 0
    484c:	e7 e2       	ldi	r30, 0x27	; 39
    484e:	f0 e0       	ldi	r31, 0x00	; 0
    4850:	80 81       	ld	r24, Z
    4852:	80 7e       	andi	r24, 0xE0	; 224
    4854:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    4856:	a7 e2       	ldi	r26, 0x27	; 39
    4858:	b0 e0       	ldi	r27, 0x00	; 0
    485a:	e7 e2       	ldi	r30, 0x27	; 39
    485c:	f0 e0       	ldi	r31, 0x00	; 0
    485e:	90 81       	ld	r25, Z
    4860:	8e 81       	ldd	r24, Y+6	; 0x06
    4862:	89 2b       	or	r24, r25
    4864:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    4866:	a6 e2       	ldi	r26, 0x26	; 38
    4868:	b0 e0       	ldi	r27, 0x00	; 0
    486a:	e6 e2       	ldi	r30, 0x26	; 38
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	80 64       	ori	r24, 0x40	; 64
    4872:	8c 93       	st	X, r24
    4874:	0b c0       	rjmp	.+22     	; 0x488c <ADC_enu_GetDigitalValueSynchNonBlocking+0x8c>
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
        {Local_u32_timeOutCounter++;}
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	9a 81       	ldd	r25, Y+2	; 0x02
    487a:	ab 81       	ldd	r26, Y+3	; 0x03
    487c:	bc 81       	ldd	r27, Y+4	; 0x04
    487e:	01 96       	adiw	r24, 0x01	; 1
    4880:	a1 1d       	adc	r26, r1
    4882:	b1 1d       	adc	r27, r1
    4884:	89 83       	std	Y+1, r24	; 0x01
    4886:	9a 83       	std	Y+2, r25	; 0x02
    4888:	ab 83       	std	Y+3, r26	; 0x03
    488a:	bc 83       	std	Y+4, r27	; 0x04
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
        //Wait -> ADC Flag = 1 (Timeout Mechanism)
        while((!GET_BIT(ADCSRA_REG,ADIF)) && (Local_u32_timeOutCounter<ADC_U32_TIMEOUT_MAX_VALUE))
    488c:	e6 e2       	ldi	r30, 0x26	; 38
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	80 81       	ld	r24, Z
    4892:	82 95       	swap	r24
    4894:	8f 70       	andi	r24, 0x0F	; 15
    4896:	88 2f       	mov	r24, r24
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	81 70       	andi	r24, 0x01	; 1
    489c:	90 70       	andi	r25, 0x00	; 0
    489e:	00 97       	sbiw	r24, 0x00	; 0
    48a0:	61 f4       	brne	.+24     	; 0x48ba <ADC_enu_GetDigitalValueSynchNonBlocking+0xba>
    48a2:	89 81       	ldd	r24, Y+1	; 0x01
    48a4:	9a 81       	ldd	r25, Y+2	; 0x02
    48a6:	ab 81       	ldd	r26, Y+3	; 0x03
    48a8:	bc 81       	ldd	r27, Y+4	; 0x04
    48aa:	80 35       	cpi	r24, 0x50	; 80
    48ac:	23 ec       	ldi	r18, 0xC3	; 195
    48ae:	92 07       	cpc	r25, r18
    48b0:	20 e0       	ldi	r18, 0x00	; 0
    48b2:	a2 07       	cpc	r26, r18
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	b2 07       	cpc	r27, r18
    48b8:	f0 f2       	brcs	.-68     	; 0x4876 <ADC_enu_GetDigitalValueSynchNonBlocking+0x76>
        {Local_u32_timeOutCounter++;}
        //Check For ADC Peripheral
        if(GET_BIT(ADCSRA_REG,ADIF)){
    48ba:	e6 e2       	ldi	r30, 0x26	; 38
    48bc:	f0 e0       	ldi	r31, 0x00	; 0
    48be:	80 81       	ld	r24, Z
    48c0:	82 95       	swap	r24
    48c2:	8f 70       	andi	r24, 0x0F	; 15
    48c4:	88 2f       	mov	r24, r24
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	81 70       	andi	r24, 0x01	; 1
    48ca:	90 70       	andi	r25, 0x00	; 0
    48cc:	88 23       	and	r24, r24
    48ce:	91 f0       	breq	.+36     	; 0x48f4 <ADC_enu_GetDigitalValueSynchNonBlocking+0xf4>
            //Clear ADC Flag & busy Flag
            ADC_u8_busyFlag = 0;
    48d0:	10 92 6a 01 	sts	0x016A, r1
            SET_BIT(ADCSRA_REG,ADIF);
    48d4:	a6 e2       	ldi	r26, 0x26	; 38
    48d6:	b0 e0       	ldi	r27, 0x00	; 0
    48d8:	e6 e2       	ldi	r30, 0x26	; 38
    48da:	f0 e0       	ldi	r31, 0x00	; 0
    48dc:	80 81       	ld	r24, Z
    48de:	80 61       	ori	r24, 0x10	; 16
    48e0:	8c 93       	st	X, r24
            //Read Digital Value
            *Copy_pu16_DigitalValue = ADC_REG;
    48e2:	e4 e2       	ldi	r30, 0x24	; 36
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	91 81       	ldd	r25, Z+1	; 0x01
    48ea:	ef 81       	ldd	r30, Y+7	; 0x07
    48ec:	f8 85       	ldd	r31, Y+8	; 0x08
    48ee:	91 83       	std	Z+1, r25	; 0x01
    48f0:	80 83       	st	Z, r24
    48f2:	03 c0       	rjmp	.+6      	; 0x48fa <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }else{
            Local_u8_errorState = STATE_NOT_OK;
    48f4:	1d 82       	std	Y+5, r1	; 0x05
    48f6:	01 c0       	rjmp	.+2      	; 0x48fa <ADC_enu_GetDigitalValueSynchNonBlocking+0xfa>
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    48f8:	1d 82       	std	Y+5, r1	; 0x05
    }
    return Local_u8_errorState;
    48fa:	8d 81       	ldd	r24, Y+5	; 0x05

}
    48fc:	28 96       	adiw	r28, 0x08	; 8
    48fe:	0f b6       	in	r0, 0x3f	; 63
    4900:	f8 94       	cli
    4902:	de bf       	out	0x3e, r29	; 62
    4904:	0f be       	out	0x3f, r0	; 63
    4906:	cd bf       	out	0x3d, r28	; 61
    4908:	cf 91       	pop	r28
    490a:	df 91       	pop	r29
    490c:	08 95       	ret

0000490e <ADC_enu_GetDigitalValueASynch>:
ES_t ADC_enu_GetDigitalValueASynch(u8 Copy_u8_channelNb, void(* Copy_pf_Notification)(u16)){
    490e:	df 93       	push	r29
    4910:	cf 93       	push	r28
    4912:	00 d0       	rcall	.+0      	; 0x4914 <ADC_enu_GetDigitalValueASynch+0x6>
    4914:	00 d0       	rcall	.+0      	; 0x4916 <ADC_enu_GetDigitalValueASynch+0x8>
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	8a 83       	std	Y+2, r24	; 0x02
    491c:	7c 83       	std	Y+4, r23	; 0x04
    491e:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_channelNb<MAX_NUM_OF_CHANNELS) && (Copy_pf_Notification!= NULL) && (!ADC_u8_busyFlag)){
    4924:	8a 81       	ldd	r24, Y+2	; 0x02
    4926:	80 32       	cpi	r24, 0x20	; 32
    4928:	78 f5       	brcc	.+94     	; 0x4988 <ADC_enu_GetDigitalValueASynch+0x7a>
    492a:	8b 81       	ldd	r24, Y+3	; 0x03
    492c:	9c 81       	ldd	r25, Y+4	; 0x04
    492e:	00 97       	sbiw	r24, 0x00	; 0
    4930:	59 f1       	breq	.+86     	; 0x4988 <ADC_enu_GetDigitalValueASynch+0x7a>
    4932:	80 91 6a 01 	lds	r24, 0x016A
    4936:	88 23       	and	r24, r24
    4938:	39 f5       	brne	.+78     	; 0x4988 <ADC_enu_GetDigitalValueASynch+0x7a>
        //Set busy Flag for ADC
        ADC_u8_busyFlag = 1;
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	80 93 6a 01 	sts	0x016A, r24
        //update Global Pointer to Function
        ADC_pf_Notification = Copy_pf_Notification;
    4940:	8b 81       	ldd	r24, Y+3	; 0x03
    4942:	9c 81       	ldd	r25, Y+4	; 0x04
    4944:	90 93 69 01 	sts	0x0169, r25
    4948:	80 93 68 01 	sts	0x0168, r24
        //Enable ADC Interrupt
        SET_BIT(ADCSRA_REG,ADIE);
    494c:	a6 e2       	ldi	r26, 0x26	; 38
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e6 e2       	ldi	r30, 0x26	; 38
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	88 60       	ori	r24, 0x08	; 8
    4958:	8c 93       	st	X, r24
        //Clear MUX4...0
        ADMUX_REG &= CLEAR_MUX_BITS;
    495a:	a7 e2       	ldi	r26, 0x27	; 39
    495c:	b0 e0       	ldi	r27, 0x00	; 0
    495e:	e7 e2       	ldi	r30, 0x27	; 39
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	80 81       	ld	r24, Z
    4964:	80 7e       	andi	r24, 0xE0	; 224
    4966:	8c 93       	st	X, r24
        //Select Channel
        ADMUX_REG |= Copy_u8_channelNb;
    4968:	a7 e2       	ldi	r26, 0x27	; 39
    496a:	b0 e0       	ldi	r27, 0x00	; 0
    496c:	e7 e2       	ldi	r30, 0x27	; 39
    496e:	f0 e0       	ldi	r31, 0x00	; 0
    4970:	90 81       	ld	r25, Z
    4972:	8a 81       	ldd	r24, Y+2	; 0x02
    4974:	89 2b       	or	r24, r25
    4976:	8c 93       	st	X, r24
        //Start Conversion
        SET_BIT(ADCSRA_REG,ADSC);
    4978:	a6 e2       	ldi	r26, 0x26	; 38
    497a:	b0 e0       	ldi	r27, 0x00	; 0
    497c:	e6 e2       	ldi	r30, 0x26	; 38
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 81       	ld	r24, Z
    4982:	80 64       	ori	r24, 0x40	; 64
    4984:	8c 93       	st	X, r24
    4986:	01 c0       	rjmp	.+2      	; 0x498a <ADC_enu_GetDigitalValueASynch+0x7c>
    }else{
        Local_u8_errorState= STATE_NOT_OK;
    4988:	19 82       	std	Y+1, r1	; 0x01
    }

    return Local_u8_errorState;
    498a:	89 81       	ldd	r24, Y+1	; 0x01
}
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	cf 91       	pop	r28
    4996:	df 91       	pop	r29
    4998:	08 95       	ret

0000499a <__vector_16>:

/***************ISR Function OF ADC*************/
void __vector_16(void){
    499a:	1f 92       	push	r1
    499c:	0f 92       	push	r0
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	0f 92       	push	r0
    49a2:	11 24       	eor	r1, r1
    49a4:	2f 93       	push	r18
    49a6:	3f 93       	push	r19
    49a8:	4f 93       	push	r20
    49aa:	5f 93       	push	r21
    49ac:	6f 93       	push	r22
    49ae:	7f 93       	push	r23
    49b0:	8f 93       	push	r24
    49b2:	9f 93       	push	r25
    49b4:	af 93       	push	r26
    49b6:	bf 93       	push	r27
    49b8:	ef 93       	push	r30
    49ba:	ff 93       	push	r31
    49bc:	df 93       	push	r29
    49be:	cf 93       	push	r28
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    if(ADC_pf_Notification !=NULL){
    49c4:	80 91 68 01 	lds	r24, 0x0168
    49c8:	90 91 69 01 	lds	r25, 0x0169
    49cc:	00 97       	sbiw	r24, 0x00	; 0
    49ce:	99 f0       	breq	.+38     	; 0x49f6 <__vector_16+0x5c>
        //Clear ADC Flag & busy Flag
        CLR_BIT(ADCSRA_REG,ADIE);
    49d0:	a6 e2       	ldi	r26, 0x26	; 38
    49d2:	b0 e0       	ldi	r27, 0x00	; 0
    49d4:	e6 e2       	ldi	r30, 0x26	; 38
    49d6:	f0 e0       	ldi	r31, 0x00	; 0
    49d8:	80 81       	ld	r24, Z
    49da:	87 7f       	andi	r24, 0xF7	; 247
    49dc:	8c 93       	st	X, r24
        ADC_u8_busyFlag = 0;
    49de:	10 92 6a 01 	sts	0x016A, r1
        //Calling Notification Func
        ADC_pf_Notification(ADC_REG);
    49e2:	20 91 68 01 	lds	r18, 0x0168
    49e6:	30 91 69 01 	lds	r19, 0x0169
    49ea:	e4 e2       	ldi	r30, 0x24	; 36
    49ec:	f0 e0       	ldi	r31, 0x00	; 0
    49ee:	80 81       	ld	r24, Z
    49f0:	91 81       	ldd	r25, Z+1	; 0x01
    49f2:	f9 01       	movw	r30, r18
    49f4:	09 95       	icall
    }
   

    49f6:	cf 91       	pop	r28
    49f8:	df 91       	pop	r29
    49fa:	ff 91       	pop	r31
    49fc:	ef 91       	pop	r30
    49fe:	bf 91       	pop	r27
    4a00:	af 91       	pop	r26
    4a02:	9f 91       	pop	r25
    4a04:	8f 91       	pop	r24
    4a06:	7f 91       	pop	r23
    4a08:	6f 91       	pop	r22
    4a0a:	5f 91       	pop	r21
    4a0c:	4f 91       	pop	r20
    4a0e:	3f 91       	pop	r19
    4a10:	2f 91       	pop	r18
    4a12:	0f 90       	pop	r0
    4a14:	0f be       	out	0x3f, r0	; 63
    4a16:	0f 90       	pop	r0
    4a18:	1f 90       	pop	r1
    4a1a:	18 95       	reti

00004a1c <__mulsi3>:
    4a1c:	62 9f       	mul	r22, r18
    4a1e:	d0 01       	movw	r26, r0
    4a20:	73 9f       	mul	r23, r19
    4a22:	f0 01       	movw	r30, r0
    4a24:	82 9f       	mul	r24, r18
    4a26:	e0 0d       	add	r30, r0
    4a28:	f1 1d       	adc	r31, r1
    4a2a:	64 9f       	mul	r22, r20
    4a2c:	e0 0d       	add	r30, r0
    4a2e:	f1 1d       	adc	r31, r1
    4a30:	92 9f       	mul	r25, r18
    4a32:	f0 0d       	add	r31, r0
    4a34:	83 9f       	mul	r24, r19
    4a36:	f0 0d       	add	r31, r0
    4a38:	74 9f       	mul	r23, r20
    4a3a:	f0 0d       	add	r31, r0
    4a3c:	65 9f       	mul	r22, r21
    4a3e:	f0 0d       	add	r31, r0
    4a40:	99 27       	eor	r25, r25
    4a42:	72 9f       	mul	r23, r18
    4a44:	b0 0d       	add	r27, r0
    4a46:	e1 1d       	adc	r30, r1
    4a48:	f9 1f       	adc	r31, r25
    4a4a:	63 9f       	mul	r22, r19
    4a4c:	b0 0d       	add	r27, r0
    4a4e:	e1 1d       	adc	r30, r1
    4a50:	f9 1f       	adc	r31, r25
    4a52:	bd 01       	movw	r22, r26
    4a54:	cf 01       	movw	r24, r30
    4a56:	11 24       	eor	r1, r1
    4a58:	08 95       	ret

00004a5a <__udivmodhi4>:
    4a5a:	aa 1b       	sub	r26, r26
    4a5c:	bb 1b       	sub	r27, r27
    4a5e:	51 e1       	ldi	r21, 0x11	; 17
    4a60:	07 c0       	rjmp	.+14     	; 0x4a70 <__udivmodhi4_ep>

00004a62 <__udivmodhi4_loop>:
    4a62:	aa 1f       	adc	r26, r26
    4a64:	bb 1f       	adc	r27, r27
    4a66:	a6 17       	cp	r26, r22
    4a68:	b7 07       	cpc	r27, r23
    4a6a:	10 f0       	brcs	.+4      	; 0x4a70 <__udivmodhi4_ep>
    4a6c:	a6 1b       	sub	r26, r22
    4a6e:	b7 0b       	sbc	r27, r23

00004a70 <__udivmodhi4_ep>:
    4a70:	88 1f       	adc	r24, r24
    4a72:	99 1f       	adc	r25, r25
    4a74:	5a 95       	dec	r21
    4a76:	a9 f7       	brne	.-22     	; 0x4a62 <__udivmodhi4_loop>
    4a78:	80 95       	com	r24
    4a7a:	90 95       	com	r25
    4a7c:	bc 01       	movw	r22, r24
    4a7e:	cd 01       	movw	r24, r26
    4a80:	08 95       	ret

00004a82 <__udivmodsi4>:
    4a82:	a1 e2       	ldi	r26, 0x21	; 33
    4a84:	1a 2e       	mov	r1, r26
    4a86:	aa 1b       	sub	r26, r26
    4a88:	bb 1b       	sub	r27, r27
    4a8a:	fd 01       	movw	r30, r26
    4a8c:	0d c0       	rjmp	.+26     	; 0x4aa8 <__udivmodsi4_ep>

00004a8e <__udivmodsi4_loop>:
    4a8e:	aa 1f       	adc	r26, r26
    4a90:	bb 1f       	adc	r27, r27
    4a92:	ee 1f       	adc	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	a2 17       	cp	r26, r18
    4a98:	b3 07       	cpc	r27, r19
    4a9a:	e4 07       	cpc	r30, r20
    4a9c:	f5 07       	cpc	r31, r21
    4a9e:	20 f0       	brcs	.+8      	; 0x4aa8 <__udivmodsi4_ep>
    4aa0:	a2 1b       	sub	r26, r18
    4aa2:	b3 0b       	sbc	r27, r19
    4aa4:	e4 0b       	sbc	r30, r20
    4aa6:	f5 0b       	sbc	r31, r21

00004aa8 <__udivmodsi4_ep>:
    4aa8:	66 1f       	adc	r22, r22
    4aaa:	77 1f       	adc	r23, r23
    4aac:	88 1f       	adc	r24, r24
    4aae:	99 1f       	adc	r25, r25
    4ab0:	1a 94       	dec	r1
    4ab2:	69 f7       	brne	.-38     	; 0x4a8e <__udivmodsi4_loop>
    4ab4:	60 95       	com	r22
    4ab6:	70 95       	com	r23
    4ab8:	80 95       	com	r24
    4aba:	90 95       	com	r25
    4abc:	9b 01       	movw	r18, r22
    4abe:	ac 01       	movw	r20, r24
    4ac0:	bd 01       	movw	r22, r26
    4ac2:	cf 01       	movw	r24, r30
    4ac4:	08 95       	ret

00004ac6 <__prologue_saves__>:
    4ac6:	2f 92       	push	r2
    4ac8:	3f 92       	push	r3
    4aca:	4f 92       	push	r4
    4acc:	5f 92       	push	r5
    4ace:	6f 92       	push	r6
    4ad0:	7f 92       	push	r7
    4ad2:	8f 92       	push	r8
    4ad4:	9f 92       	push	r9
    4ad6:	af 92       	push	r10
    4ad8:	bf 92       	push	r11
    4ada:	cf 92       	push	r12
    4adc:	df 92       	push	r13
    4ade:	ef 92       	push	r14
    4ae0:	ff 92       	push	r15
    4ae2:	0f 93       	push	r16
    4ae4:	1f 93       	push	r17
    4ae6:	cf 93       	push	r28
    4ae8:	df 93       	push	r29
    4aea:	cd b7       	in	r28, 0x3d	; 61
    4aec:	de b7       	in	r29, 0x3e	; 62
    4aee:	ca 1b       	sub	r28, r26
    4af0:	db 0b       	sbc	r29, r27
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
    4afc:	09 94       	ijmp

00004afe <__epilogue_restores__>:
    4afe:	2a 88       	ldd	r2, Y+18	; 0x12
    4b00:	39 88       	ldd	r3, Y+17	; 0x11
    4b02:	48 88       	ldd	r4, Y+16	; 0x10
    4b04:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b06:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b08:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b10:	b9 84       	ldd	r11, Y+9	; 0x09
    4b12:	c8 84       	ldd	r12, Y+8	; 0x08
    4b14:	df 80       	ldd	r13, Y+7	; 0x07
    4b16:	ee 80       	ldd	r14, Y+6	; 0x06
    4b18:	fd 80       	ldd	r15, Y+5	; 0x05
    4b1a:	0c 81       	ldd	r16, Y+4	; 0x04
    4b1c:	1b 81       	ldd	r17, Y+3	; 0x03
    4b1e:	aa 81       	ldd	r26, Y+2	; 0x02
    4b20:	b9 81       	ldd	r27, Y+1	; 0x01
    4b22:	ce 0f       	add	r28, r30
    4b24:	d1 1d       	adc	r29, r1
    4b26:	0f b6       	in	r0, 0x3f	; 63
    4b28:	f8 94       	cli
    4b2a:	de bf       	out	0x3e, r29	; 62
    4b2c:	0f be       	out	0x3f, r0	; 63
    4b2e:	cd bf       	out	0x3d, r28	; 61
    4b30:	ed 01       	movw	r28, r26
    4b32:	08 95       	ret

00004b34 <_exit>:
    4b34:	f8 94       	cli

00004b36 <__stop_program>:
    4b36:	ff cf       	rjmp	.-2      	; 0x4b36 <__stop_program>
