
ICU_SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00003e78  00003f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800096  00800096  00003f42  2**0
                  ALLOC
  3 .stab         000039fc  00000000  00000000  00003f44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001644  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000090e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00009273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d33c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d77e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e00c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 45 19 	jmp	0x328a	; 0x328a <__vector_1>
       8:	0c 94 78 19 	jmp	0x32f0	; 0x32f0 <__vector_2>
       c:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__vector_7>
      20:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__vector_8>
      24:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__vector_9>
      28:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__vector_10>
      2c:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 3a 1f 	jmp	0x3e74	; 0x3e74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 1f 	jmp	0x3e06	; 0x3e06 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 1f 	jmp	0x3e16	; 0x3e16 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e7       	ldi	r22, 0x76	; 118
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 27 1f 	jmp	0x3e4e	; 0x3e4e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 13 1f 	jmp	0x3e26	; 0x3e26 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2f 1f 	jmp	0x3e5e	; 0x3e5e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#include"../2-HAL/LCD/LCD_Interface.h"
#include"../5-LIB/TYPEDEF.h"
void ICU_SW(void);
static volatile u16 Period_Ticks =0;
static volatile u16 ON_Ticks =0;
int main(){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Init();
     ca6:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <LCD_enu_Init>
	DIO_enu_SetPinDirection(DIO_U8_PORTB, DIO_U8_PIN3,DIO_U8_OUTPUT);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	63 e0       	ldi	r22, 0x03	; 3
     cae:	41 e0       	ldi	r20, 0x01	; 1
     cb0:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
	Timers_enu_Timer0SetCompareValue(64);
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <Timers_enu_Timer0SetCompareValue>
	Timers_enu_Init(TIMER0, FAST_PWM_NON_INVERTING, CLK_8);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	64 e0       	ldi	r22, 0x04	; 4
     cbe:	42 e0       	ldi	r20, 0x02	; 2
     cc0:	0e 94 1f 11 	call	0x223e	; 0x223e <Timers_enu_Init>
	Timers_enu_Init(TIMER1, NORMAL_MODE, CLK_8);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	42 e0       	ldi	r20, 0x02	; 2
     cca:	0e 94 1f 11 	call	0x223e	; 0x223e <Timers_enu_Init>
	EXTI_enu_setCallBack(&ICU_SW, EXTI0);
     cce:	89 ec       	ldi	r24, 0xC9	; 201
     cd0:	96 e0       	ldi	r25, 0x06	; 6
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	0e 94 1d 19 	call	0x323a	; 0x323a <EXTI_enu_setCallBack>
	EXTI_enu_Enable(EXTI0, RISING_EDGE);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	63 e0       	ldi	r22, 0x03	; 3
     cdc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <EXTI_enu_Enable>
	GI_enu_Enable();
     ce0:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <GI_enu_Enable>
	while(1){
		while((Period_Ticks==0) && (ON_Ticks==0));
     ce4:	80 91 96 00 	lds	r24, 0x0096
     ce8:	90 91 97 00 	lds	r25, 0x0097
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	31 f4       	brne	.+12     	; 0xcfc <main+0x5e>
     cf0:	80 91 98 00 	lds	r24, 0x0098
     cf4:	90 91 99 00 	lds	r25, 0x0099
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	a1 f3       	breq	.-24     	; 0xce4 <main+0x46>
			LCD_enu_SetCursor(0,0);
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SetCursor>
			LCD_enu_SendString("Time Period");
     d04:	80 e6       	ldi	r24, 0x60	; 96
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_enu_SendString>
			LCD_enu_SetCursor(0, 12);
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	6c e0       	ldi	r22, 0x0C	; 12
     d10:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SetCursor>
			LCD_enu_SendNum((Period_Ticks*8)/16);
     d14:	80 91 96 00 	lds	r24, 0x0096
     d18:	90 91 97 00 	lds	r25, 0x0097
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	92 95       	swap	r25
     d2a:	82 95       	swap	r24
     d2c:	8f 70       	andi	r24, 0x0F	; 15
     d2e:	89 27       	eor	r24, r25
     d30:	9f 70       	andi	r25, 0x0F	; 15
     d32:	89 27       	eor	r24, r25
     d34:	cc 01       	movw	r24, r24
     d36:	a0 e0       	ldi	r26, 0x00	; 0
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_enu_SendNum>
			LCD_enu_SetCursor(1,0);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SetCursor>
			LCD_enu_SendString("ON Period");
     d4a:	8c e6       	ldi	r24, 0x6C	; 108
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_enu_SendString>
			LCD_enu_SetCursor(1, 10);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	6a e0       	ldi	r22, 0x0A	; 10
     d56:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SetCursor>
			LCD_enu_SendNum((ON_Ticks*8)/16);
     d5a:	80 91 98 00 	lds	r24, 0x0098
     d5e:	90 91 99 00 	lds	r25, 0x0099
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	92 95       	swap	r25
     d70:	82 95       	swap	r24
     d72:	8f 70       	andi	r24, 0x0F	; 15
     d74:	89 27       	eor	r24, r25
     d76:	9f 70       	andi	r25, 0x0F	; 15
     d78:	89 27       	eor	r24, r25
     d7a:	cc 01       	movw	r24, r24
     d7c:	a0 e0       	ldi	r26, 0x00	; 0
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 35 0b 	call	0x166a	; 0x166a <LCD_enu_SendNum>
			break;
	}
	return 0;
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <ICU_SW>:
void ICU_SW(void){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 counter =0;
	counter++;
     d9a:	80 91 9a 00 	lds	r24, 0x009A
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	80 93 9a 00 	sts	0x009A, r24
	if(counter==1){ //First Rising Edge
     da4:	80 91 9a 00 	lds	r24, 0x009A
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	31 f4       	brne	.+12     	; 0xdb8 <ICU_SW+0x26>
		//Timer starts Counting
		Timers_enu_SetTimerValue(TIMER1,0);
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Timers_enu_SetTimerValue>
     db6:	2c c0       	rjmp	.+88     	; 0xe10 <ICU_SW+0x7e>
	}else if (counter==2){ //Second Rising Edge
     db8:	80 91 9a 00 	lds	r24, 0x009A
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	59 f4       	brne	.+22     	; 0xdd6 <ICU_SW+0x44>
		Timers_enu_GetTimerValue(TIMER1,&Period_Ticks);
     dc0:	26 e9       	ldi	r18, 0x96	; 150
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	b9 01       	movw	r22, r18
     dc8:	0e 94 a9 14 	call	0x2952	; 0x2952 <Timers_enu_GetTimerValue>
		//change trigger to falling edge
		EXTI_enu_setSenseControl(EXTI0,FALLING_EDGE);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	0e 94 0e 18 	call	0x301c	; 0x301c <EXTI_enu_setSenseControl>
     dd4:	1d c0       	rjmp	.+58     	; 0xe10 <ICU_SW+0x7e>
	}else if (counter==3){
     dd6:	80 91 9a 00 	lds	r24, 0x009A
     dda:	83 30       	cpi	r24, 0x03	; 3
     ddc:	c9 f4       	brne	.+50     	; 0xe10 <ICU_SW+0x7e>
		//falling edge to get on time
		Timers_enu_GetTimerValue(TIMER1,&ON_Ticks);
     dde:	28 e9       	ldi	r18, 0x98	; 152
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	b9 01       	movw	r22, r18
     de6:	0e 94 a9 14 	call	0x2952	; 0x2952 <Timers_enu_GetTimerValue>
		ON_Ticks -= Period_Ticks;
     dea:	20 91 98 00 	lds	r18, 0x0098
     dee:	30 91 99 00 	lds	r19, 0x0099
     df2:	80 91 96 00 	lds	r24, 0x0096
     df6:	90 91 97 00 	lds	r25, 0x0097
     dfa:	a9 01       	movw	r20, r18
     dfc:	48 1b       	sub	r20, r24
     dfe:	59 0b       	sbc	r21, r25
     e00:	ca 01       	movw	r24, r20
     e02:	90 93 99 00 	sts	0x0099, r25
     e06:	80 93 98 00 	sts	0x0098, r24
		EXTI_enu_Disable(EXTI0);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <EXTI_enu_Disable>
	}
}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	e1 97       	sbiw	r28, 0x31	; 49
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
     e40:	89 a9       	ldd	r24, Y+49	; 0x31
     e42:	98 2f       	mov	r25, r24
     e44:	99 1f       	adc	r25, r25
     e46:	99 27       	eor	r25, r25
     e48:	99 1f       	adc	r25, r25
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	66 e0       	ldi	r22, 0x06	; 6
     e4e:	49 2f       	mov	r20, r25
     e50:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
     e54:	89 a9       	ldd	r24, Y+49	; 0x31
     e56:	82 95       	swap	r24
     e58:	86 95       	lsr	r24
     e5a:	86 95       	lsr	r24
     e5c:	83 70       	andi	r24, 0x03	; 3
     e5e:	98 2f       	mov	r25, r24
     e60:	91 70       	andi	r25, 0x01	; 1
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	65 e0       	ldi	r22, 0x05	; 5
     e66:	49 2f       	mov	r20, r25
     e68:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
     e6c:	89 a9       	ldd	r24, Y+49	; 0x31
     e6e:	82 95       	swap	r24
     e70:	86 95       	lsr	r24
     e72:	87 70       	andi	r24, 0x07	; 7
     e74:	98 2f       	mov	r25, r24
     e76:	91 70       	andi	r25, 0x01	; 1
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	64 e0       	ldi	r22, 0x04	; 4
     e7c:	49 2f       	mov	r20, r25
     e7e:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
     e82:	89 a9       	ldd	r24, Y+49	; 0x31
     e84:	82 95       	swap	r24
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	98 2f       	mov	r25, r24
     e8a:	91 70       	andi	r25, 0x01	; 1
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	63 e0       	ldi	r22, 0x03	; 3
     e90:	49 2f       	mov	r20, r25
     e92:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a0 e8       	ldi	r26, 0x80	; 128
     ea6:	bf e3       	ldi	r27, 0x3F	; 63
     ea8:	8d a7       	std	Y+45, r24	; 0x2d
     eaa:	9e a7       	std	Y+46, r25	; 0x2e
     eac:	af a7       	std	Y+47, r26	; 0x2f
     eae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     eb0:	6d a5       	ldd	r22, Y+45	; 0x2d
     eb2:	7e a5       	ldd	r23, Y+46	; 0x2e
     eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb6:	98 a9       	ldd	r25, Y+48	; 0x30
     eb8:	2b ea       	ldi	r18, 0xAB	; 171
     eba:	3a ea       	ldi	r19, 0xAA	; 170
     ebc:	4a ea       	ldi	r20, 0xAA	; 170
     ebe:	50 e4       	ldi	r21, 0x40	; 64
     ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	89 a7       	std	Y+41, r24	; 0x29
     eca:	9a a7       	std	Y+42, r25	; 0x2a
     ecc:	ab a7       	std	Y+43, r26	; 0x2b
     ece:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     ed0:	69 a5       	ldd	r22, Y+41	; 0x29
     ed2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ee4:	88 23       	and	r24, r24
     ee6:	1c f4       	brge	.+6      	; 0xeee <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	88 a7       	std	Y+40, r24	; 0x28
     eec:	91 c0       	rjmp	.+290    	; 0x1010 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
     eee:	69 a5       	ldd	r22, Y+41	; 0x29
     ef0:	7a a5       	ldd	r23, Y+42	; 0x2a
     ef2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	4f e7       	ldi	r20, 0x7F	; 127
     efc:	53 e4       	ldi	r21, 0x43	; 67
     efe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f02:	18 16       	cp	r1, r24
     f04:	0c f0       	brlt	.+2      	; 0xf08 <LCD_enu_SendCmnd+0xf2>
     f06:	7b c0       	rjmp	.+246    	; 0xffe <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
     f08:	6d a5       	ldd	r22, Y+45	; 0x2d
     f0a:	7e a5       	ldd	r23, Y+46	; 0x2e
     f0c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f0e:	98 a9       	ldd	r25, Y+48	; 0x30
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a e7       	ldi	r20, 0x7A	; 122
     f16:	54 e4       	ldi	r21, 0x44	; 68
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	8c a3       	std	Y+36, r24	; 0x24
     f22:	9d a3       	std	Y+37, r25	; 0x25
     f24:	ae a3       	std	Y+38, r26	; 0x26
     f26:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6c a1       	ldd	r22, Y+36	; 0x24
     f2a:	7d a1       	ldd	r23, Y+37	; 0x25
     f2c:	8e a1       	ldd	r24, Y+38	; 0x26
     f2e:	9f a1       	ldd	r25, Y+39	; 0x27
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a e7       	ldi	r20, 0x7A	; 122
     f36:	55 e4       	ldi	r21, 0x45	; 69
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	88 a3       	std	Y+32, r24	; 0x20
     f42:	99 a3       	std	Y+33, r25	; 0x21
     f44:	aa a3       	std	Y+34, r26	; 0x22
     f46:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f48:	68 a1       	ldd	r22, Y+32	; 0x20
     f4a:	79 a1       	ldd	r23, Y+33	; 0x21
     f4c:	8a a1       	ldd	r24, Y+34	; 0x22
     f4e:	9b a1       	ldd	r25, Y+35	; 0x23
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9f 8f       	std	Y+31, r25	; 0x1f
     f66:	8e 8f       	std	Y+30, r24	; 0x1e
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
     f6a:	68 a1       	ldd	r22, Y+32	; 0x20
     f6c:	79 a1       	ldd	r23, Y+33	; 0x21
     f6e:	8a a1       	ldd	r24, Y+34	; 0x22
     f70:	9b a1       	ldd	r25, Y+35	; 0x23
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6c a1       	ldd	r22, Y+36	; 0x24
     f84:	7d a1       	ldd	r23, Y+37	; 0x25
     f86:	8e a1       	ldd	r24, Y+38	; 0x26
     f88:	9f a1       	ldd	r25, Y+39	; 0x27
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9f 8f       	std	Y+31, r25	; 0x1f
     fa8:	8e 8f       	std	Y+30, r24	; 0x1e
     faa:	0f c0       	rjmp	.+30     	; 0xfca <LCD_enu_SendCmnd+0x1b4>
     fac:	80 e9       	ldi	r24, 0x90	; 144
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	9d 8f       	std	Y+29, r25	; 0x1d
     fb2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fb4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fb6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <LCD_enu_SendCmnd+0x1a2>
     fbc:	9d 8f       	std	Y+29, r25	; 0x1d
     fbe:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9f 8f       	std	Y+31, r25	; 0x1f
     fc8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fcc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <LCD_enu_SendCmnd+0x196>
     fd2:	24 c0       	rjmp	.+72     	; 0x101c <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	68 a1       	ldd	r22, Y+32	; 0x20
     fd6:	79 a1       	ldd	r23, Y+33	; 0x21
     fd8:	8a a1       	ldd	r24, Y+34	; 0x22
     fda:	9b a1       	ldd	r25, Y+35	; 0x23
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9f 8f       	std	Y+31, r25	; 0x1f
     fe6:	8e 8f       	std	Y+30, r24	; 0x1e
     fe8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fea:	9f 8d       	ldd	r25, Y+31	; 0x1f
     fec:	9b 8f       	std	Y+27, r25	; 0x1b
     fee:	8a 8f       	std	Y+26, r24	; 0x1a
     ff0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ff2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <LCD_enu_SendCmnd+0x1de>
     ff8:	9b 8f       	std	Y+27, r25	; 0x1b
     ffa:	8a 8f       	std	Y+26, r24	; 0x1a
     ffc:	0f c0       	rjmp	.+30     	; 0x101c <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ffe:	69 a5       	ldd	r22, Y+41	; 0x29
    1000:	7a a5       	ldd	r23, Y+42	; 0x2a
    1002:	8b a5       	ldd	r24, Y+43	; 0x2b
    1004:	9c a5       	ldd	r25, Y+44	; 0x2c
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	88 a7       	std	Y+40, r24	; 0x28
    1010:	88 a5       	ldd	r24, Y+40	; 0x28
    1012:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1014:	89 8d       	ldd	r24, Y+25	; 0x19
    1016:	8a 95       	dec	r24
    1018:	f1 f7       	brne	.-4      	; 0x1016 <LCD_enu_SendCmnd+0x200>
    101a:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	62 e0       	ldi	r22, 0x02	; 2
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    1026:	89 a9       	ldd	r24, Y+49	; 0x31
    1028:	86 95       	lsr	r24
    102a:	86 95       	lsr	r24
    102c:	86 95       	lsr	r24
    102e:	98 2f       	mov	r25, r24
    1030:	91 70       	andi	r25, 0x01	; 1
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	66 e0       	ldi	r22, 0x06	; 6
    1036:	49 2f       	mov	r20, r25
    1038:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    103c:	89 a9       	ldd	r24, Y+49	; 0x31
    103e:	86 95       	lsr	r24
    1040:	86 95       	lsr	r24
    1042:	98 2f       	mov	r25, r24
    1044:	91 70       	andi	r25, 0x01	; 1
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	65 e0       	ldi	r22, 0x05	; 5
    104a:	49 2f       	mov	r20, r25
    104c:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    1050:	89 a9       	ldd	r24, Y+49	; 0x31
    1052:	86 95       	lsr	r24
    1054:	98 2f       	mov	r25, r24
    1056:	91 70       	andi	r25, 0x01	; 1
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	64 e0       	ldi	r22, 0x04	; 4
    105c:	49 2f       	mov	r20, r25
    105e:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    1062:	89 a9       	ldd	r24, Y+49	; 0x31
    1064:	98 2f       	mov	r25, r24
    1066:	91 70       	andi	r25, 0x01	; 1
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	63 e0       	ldi	r22, 0x03	; 3
    106c:	49 2f       	mov	r20, r25
    106e:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e8       	ldi	r26, 0x80	; 128
    1082:	bf e3       	ldi	r27, 0x3F	; 63
    1084:	8d 8b       	std	Y+21, r24	; 0x15
    1086:	9e 8b       	std	Y+22, r25	; 0x16
    1088:	af 8b       	std	Y+23, r26	; 0x17
    108a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	2b ea       	ldi	r18, 0xAB	; 171
    1096:	3a ea       	ldi	r19, 0xAA	; 170
    1098:	4a ea       	ldi	r20, 0xAA	; 170
    109a:	50 e4       	ldi	r21, 0x40	; 64
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	89 8b       	std	Y+17, r24	; 0x11
    10a6:	9a 8b       	std	Y+18, r25	; 0x12
    10a8:	ab 8b       	std	Y+19, r26	; 0x13
    10aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    10ac:	69 89       	ldd	r22, Y+17	; 0x11
    10ae:	7a 89       	ldd	r23, Y+18	; 0x12
    10b0:	8b 89       	ldd	r24, Y+19	; 0x13
    10b2:	9c 89       	ldd	r25, Y+20	; 0x14
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	1c f4       	brge	.+6      	; 0x10ca <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	88 8b       	std	Y+16, r24	; 0x10
    10c8:	91 c0       	rjmp	.+290    	; 0x11ec <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    10ca:	69 89       	ldd	r22, Y+17	; 0x11
    10cc:	7a 89       	ldd	r23, Y+18	; 0x12
    10ce:	8b 89       	ldd	r24, Y+19	; 0x13
    10d0:	9c 89       	ldd	r25, Y+20	; 0x14
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	53 e4       	ldi	r21, 0x43	; 67
    10da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10de:	18 16       	cp	r1, r24
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <LCD_enu_SendCmnd+0x2ce>
    10e2:	7b c0       	rjmp	.+246    	; 0x11da <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    10e4:	6d 89       	ldd	r22, Y+21	; 0x15
    10e6:	7e 89       	ldd	r23, Y+22	; 0x16
    10e8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ea:	98 8d       	ldd	r25, Y+24	; 0x18
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a e7       	ldi	r20, 0x7A	; 122
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8c 87       	std	Y+12, r24	; 0x0c
    10fe:	9d 87       	std	Y+13, r25	; 0x0d
    1100:	ae 87       	std	Y+14, r26	; 0x0e
    1102:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1104:	6c 85       	ldd	r22, Y+12	; 0x0c
    1106:	7d 85       	ldd	r23, Y+13	; 0x0d
    1108:	8e 85       	ldd	r24, Y+14	; 0x0e
    110a:	9f 85       	ldd	r25, Y+15	; 0x0f
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	4a e7       	ldi	r20, 0x7A	; 122
    1112:	55 e4       	ldi	r21, 0x45	; 69
    1114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	88 87       	std	Y+8, r24	; 0x08
    111e:	99 87       	std	Y+9, r25	; 0x09
    1120:	aa 87       	std	Y+10, r26	; 0x0a
    1122:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1124:	68 85       	ldd	r22, Y+8	; 0x08
    1126:	79 85       	ldd	r23, Y+9	; 0x09
    1128:	8a 85       	ldd	r24, Y+10	; 0x0a
    112a:	9b 85       	ldd	r25, Y+11	; 0x0b
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e8       	ldi	r20, 0x80	; 128
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1138:	88 23       	and	r24, r24
    113a:	2c f4       	brge	.+10     	; 0x1146 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9f 83       	std	Y+7, r25	; 0x07
    1142:	8e 83       	std	Y+6, r24	; 0x06
    1144:	3f c0       	rjmp	.+126    	; 0x11c4 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    1146:	68 85       	ldd	r22, Y+8	; 0x08
    1148:	79 85       	ldd	r23, Y+9	; 0x09
    114a:	8a 85       	ldd	r24, Y+10	; 0x0a
    114c:	9b 85       	ldd	r25, Y+11	; 0x0b
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	3f ef       	ldi	r19, 0xFF	; 255
    1152:	4f e7       	ldi	r20, 0x7F	; 127
    1154:	57 e4       	ldi	r21, 0x47	; 71
    1156:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    115a:	18 16       	cp	r1, r24
    115c:	4c f5       	brge	.+82     	; 0x11b0 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1160:	7d 85       	ldd	r23, Y+13	; 0x0d
    1162:	8e 85       	ldd	r24, Y+14	; 0x0e
    1164:	9f 85       	ldd	r25, Y+15	; 0x0f
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	40 e2       	ldi	r20, 0x20	; 32
    116c:	51 e4       	ldi	r21, 0x41	; 65
    116e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	9f 83       	std	Y+7, r25	; 0x07
    1184:	8e 83       	std	Y+6, r24	; 0x06
    1186:	0f c0       	rjmp	.+30     	; 0x11a6 <LCD_enu_SendCmnd+0x390>
    1188:	80 e9       	ldi	r24, 0x90	; 144
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	9d 83       	std	Y+5, r25	; 0x05
    118e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <LCD_enu_SendCmnd+0x37e>
    1198:	9d 83       	std	Y+5, r25	; 0x05
    119a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119c:	8e 81       	ldd	r24, Y+6	; 0x06
    119e:	9f 81       	ldd	r25, Y+7	; 0x07
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	9f 83       	std	Y+7, r25	; 0x07
    11a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a6:	8e 81       	ldd	r24, Y+6	; 0x06
    11a8:	9f 81       	ldd	r25, Y+7	; 0x07
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	69 f7       	brne	.-38     	; 0x1188 <LCD_enu_SendCmnd+0x372>
    11ae:	24 c0       	rjmp	.+72     	; 0x11f8 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b0:	68 85       	ldd	r22, Y+8	; 0x08
    11b2:	79 85       	ldd	r23, Y+9	; 0x09
    11b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	9f 83       	std	Y+7, r25	; 0x07
    11c2:	8e 83       	std	Y+6, r24	; 0x06
    11c4:	8e 81       	ldd	r24, Y+6	; 0x06
    11c6:	9f 81       	ldd	r25, Y+7	; 0x07
    11c8:	9b 83       	std	Y+3, r25	; 0x03
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	01 97       	sbiw	r24, 0x01	; 1
    11d2:	f1 f7       	brne	.-4      	; 0x11d0 <LCD_enu_SendCmnd+0x3ba>
    11d4:	9b 83       	std	Y+3, r25	; 0x03
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11da:	69 89       	ldd	r22, Y+17	; 0x11
    11dc:	7a 89       	ldd	r23, Y+18	; 0x12
    11de:	8b 89       	ldd	r24, Y+19	; 0x13
    11e0:	9c 89       	ldd	r25, Y+20	; 0x14
    11e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	88 8b       	std	Y+16, r24	; 0x10
    11ec:	88 89       	ldd	r24, Y+16	; 0x10
    11ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	8a 95       	dec	r24
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <LCD_enu_SendCmnd+0x3dc>
    11f6:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	62 e0       	ldi	r22, 0x02	; 2
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
         return STATE_OK;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1204:	e1 96       	adiw	r28, 0x31	; 49
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	e1 97       	sbiw	r28, 0x31	; 49
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	40 e0       	ldi	r20, 0x00	; 0
    123c:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    1240:	89 a9       	ldd	r24, Y+49	; 0x31
    1242:	98 2f       	mov	r25, r24
    1244:	99 1f       	adc	r25, r25
    1246:	99 27       	eor	r25, r25
    1248:	99 1f       	adc	r25, r25
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	66 e0       	ldi	r22, 0x06	; 6
    124e:	49 2f       	mov	r20, r25
    1250:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    1254:	89 a9       	ldd	r24, Y+49	; 0x31
    1256:	82 95       	swap	r24
    1258:	86 95       	lsr	r24
    125a:	86 95       	lsr	r24
    125c:	83 70       	andi	r24, 0x03	; 3
    125e:	98 2f       	mov	r25, r24
    1260:	91 70       	andi	r25, 0x01	; 1
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	65 e0       	ldi	r22, 0x05	; 5
    1266:	49 2f       	mov	r20, r25
    1268:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    126c:	89 a9       	ldd	r24, Y+49	; 0x31
    126e:	82 95       	swap	r24
    1270:	86 95       	lsr	r24
    1272:	87 70       	andi	r24, 0x07	; 7
    1274:	98 2f       	mov	r25, r24
    1276:	91 70       	andi	r25, 0x01	; 1
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	64 e0       	ldi	r22, 0x04	; 4
    127c:	49 2f       	mov	r20, r25
    127e:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    1282:	89 a9       	ldd	r24, Y+49	; 0x31
    1284:	82 95       	swap	r24
    1286:	8f 70       	andi	r24, 0x0F	; 15
    1288:	98 2f       	mov	r25, r24
    128a:	91 70       	andi	r25, 0x01	; 1
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	63 e0       	ldi	r22, 0x03	; 3
    1290:	49 2f       	mov	r20, r25
    1292:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	62 e0       	ldi	r22, 0x02	; 2
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	a0 e8       	ldi	r26, 0x80	; 128
    12a6:	bf e3       	ldi	r27, 0x3F	; 63
    12a8:	8d a7       	std	Y+45, r24	; 0x2d
    12aa:	9e a7       	std	Y+46, r25	; 0x2e
    12ac:	af a7       	std	Y+47, r26	; 0x2f
    12ae:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    12b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    12b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b6:	98 a9       	ldd	r25, Y+48	; 0x30
    12b8:	2b ea       	ldi	r18, 0xAB	; 171
    12ba:	3a ea       	ldi	r19, 0xAA	; 170
    12bc:	4a ea       	ldi	r20, 0xAA	; 170
    12be:	50 e4       	ldi	r21, 0x40	; 64
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	89 a7       	std	Y+41, r24	; 0x29
    12ca:	9a a7       	std	Y+42, r25	; 0x2a
    12cc:	ab a7       	std	Y+43, r26	; 0x2b
    12ce:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    12d0:	69 a5       	ldd	r22, Y+41	; 0x29
    12d2:	7a a5       	ldd	r23, Y+42	; 0x2a
    12d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    12d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e8       	ldi	r20, 0x80	; 128
    12de:	5f e3       	ldi	r21, 0x3F	; 63
    12e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12e4:	88 23       	and	r24, r24
    12e6:	1c f4       	brge	.+6      	; 0x12ee <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	88 a7       	std	Y+40, r24	; 0x28
    12ec:	91 c0       	rjmp	.+290    	; 0x1410 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    12ee:	69 a5       	ldd	r22, Y+41	; 0x29
    12f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    12f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    12f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4f e7       	ldi	r20, 0x7F	; 127
    12fc:	53 e4       	ldi	r21, 0x43	; 67
    12fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1302:	18 16       	cp	r1, r24
    1304:	0c f0       	brlt	.+2      	; 0x1308 <LCD_enu_SendChar+0xf2>
    1306:	7b c0       	rjmp	.+246    	; 0x13fe <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1308:	6d a5       	ldd	r22, Y+45	; 0x2d
    130a:	7e a5       	ldd	r23, Y+46	; 0x2e
    130c:	8f a5       	ldd	r24, Y+47	; 0x2f
    130e:	98 a9       	ldd	r25, Y+48	; 0x30
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a e7       	ldi	r20, 0x7A	; 122
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8c a3       	std	Y+36, r24	; 0x24
    1322:	9d a3       	std	Y+37, r25	; 0x25
    1324:	ae a3       	std	Y+38, r26	; 0x26
    1326:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	6c a1       	ldd	r22, Y+36	; 0x24
    132a:	7d a1       	ldd	r23, Y+37	; 0x25
    132c:	8e a1       	ldd	r24, Y+38	; 0x26
    132e:	9f a1       	ldd	r25, Y+39	; 0x27
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	4a e7       	ldi	r20, 0x7A	; 122
    1336:	55 e4       	ldi	r21, 0x45	; 69
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	88 a3       	std	Y+32, r24	; 0x20
    1342:	99 a3       	std	Y+33, r25	; 0x21
    1344:	aa a3       	std	Y+34, r26	; 0x22
    1346:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1348:	68 a1       	ldd	r22, Y+32	; 0x20
    134a:	79 a1       	ldd	r23, Y+33	; 0x21
    134c:	8a a1       	ldd	r24, Y+34	; 0x22
    134e:	9b a1       	ldd	r25, Y+35	; 0x23
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e8       	ldi	r20, 0x80	; 128
    1356:	5f e3       	ldi	r21, 0x3F	; 63
    1358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    135c:	88 23       	and	r24, r24
    135e:	2c f4       	brge	.+10     	; 0x136a <LCD_enu_SendChar+0x154>
		__ticks = 1;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9f 8f       	std	Y+31, r25	; 0x1f
    1366:	8e 8f       	std	Y+30, r24	; 0x1e
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    136a:	68 a1       	ldd	r22, Y+32	; 0x20
    136c:	79 a1       	ldd	r23, Y+33	; 0x21
    136e:	8a a1       	ldd	r24, Y+34	; 0x22
    1370:	9b a1       	ldd	r25, Y+35	; 0x23
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	4f e7       	ldi	r20, 0x7F	; 127
    1378:	57 e4       	ldi	r21, 0x47	; 71
    137a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    137e:	18 16       	cp	r1, r24
    1380:	4c f5       	brge	.+82     	; 0x13d4 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1382:	6c a1       	ldd	r22, Y+36	; 0x24
    1384:	7d a1       	ldd	r23, Y+37	; 0x25
    1386:	8e a1       	ldd	r24, Y+38	; 0x26
    1388:	9f a1       	ldd	r25, Y+39	; 0x27
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	9f 8f       	std	Y+31, r25	; 0x1f
    13a8:	8e 8f       	std	Y+30, r24	; 0x1e
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <LCD_enu_SendChar+0x1b4>
    13ac:	80 e9       	ldi	r24, 0x90	; 144
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	9d 8f       	std	Y+29, r25	; 0x1d
    13b2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_enu_SendChar+0x1a2>
    13bc:	9d 8f       	std	Y+29, r25	; 0x1d
    13be:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	9f 8f       	std	Y+31, r25	; 0x1f
    13c8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	69 f7       	brne	.-38     	; 0x13ac <LCD_enu_SendChar+0x196>
    13d2:	24 c0       	rjmp	.+72     	; 0x141c <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d4:	68 a1       	ldd	r22, Y+32	; 0x20
    13d6:	79 a1       	ldd	r23, Y+33	; 0x21
    13d8:	8a a1       	ldd	r24, Y+34	; 0x22
    13da:	9b a1       	ldd	r25, Y+35	; 0x23
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9f 8f       	std	Y+31, r25	; 0x1f
    13e6:	8e 8f       	std	Y+30, r24	; 0x1e
    13e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13ec:	9b 8f       	std	Y+27, r25	; 0x1b
    13ee:	8a 8f       	std	Y+26, r24	; 0x1a
    13f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_enu_SendChar+0x1de>
    13f8:	9b 8f       	std	Y+27, r25	; 0x1b
    13fa:	8a 8f       	std	Y+26, r24	; 0x1a
    13fc:	0f c0       	rjmp	.+30     	; 0x141c <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13fe:	69 a5       	ldd	r22, Y+41	; 0x29
    1400:	7a a5       	ldd	r23, Y+42	; 0x2a
    1402:	8b a5       	ldd	r24, Y+43	; 0x2b
    1404:	9c a5       	ldd	r25, Y+44	; 0x2c
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	88 a7       	std	Y+40, r24	; 0x28
    1410:	88 a5       	ldd	r24, Y+40	; 0x28
    1412:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1414:	89 8d       	ldd	r24, Y+25	; 0x19
    1416:	8a 95       	dec	r24
    1418:	f1 f7       	brne	.-4      	; 0x1416 <LCD_enu_SendChar+0x200>
    141a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    1426:	89 a9       	ldd	r24, Y+49	; 0x31
    1428:	86 95       	lsr	r24
    142a:	86 95       	lsr	r24
    142c:	86 95       	lsr	r24
    142e:	98 2f       	mov	r25, r24
    1430:	91 70       	andi	r25, 0x01	; 1
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	66 e0       	ldi	r22, 0x06	; 6
    1436:	49 2f       	mov	r20, r25
    1438:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    143c:	89 a9       	ldd	r24, Y+49	; 0x31
    143e:	86 95       	lsr	r24
    1440:	86 95       	lsr	r24
    1442:	98 2f       	mov	r25, r24
    1444:	91 70       	andi	r25, 0x01	; 1
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	65 e0       	ldi	r22, 0x05	; 5
    144a:	49 2f       	mov	r20, r25
    144c:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    1450:	89 a9       	ldd	r24, Y+49	; 0x31
    1452:	86 95       	lsr	r24
    1454:	98 2f       	mov	r25, r24
    1456:	91 70       	andi	r25, 0x01	; 1
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	64 e0       	ldi	r22, 0x04	; 4
    145c:	49 2f       	mov	r20, r25
    145e:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    1462:	89 a9       	ldd	r24, Y+49	; 0x31
    1464:	98 2f       	mov	r25, r24
    1466:	91 70       	andi	r25, 0x01	; 1
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	63 e0       	ldi	r22, 0x03	; 3
    146c:	49 2f       	mov	r20, r25
    146e:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	62 e0       	ldi	r22, 0x02	; 2
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	a0 e8       	ldi	r26, 0x80	; 128
    1482:	bf e3       	ldi	r27, 0x3F	; 63
    1484:	8d 8b       	std	Y+21, r24	; 0x15
    1486:	9e 8b       	std	Y+22, r25	; 0x16
    1488:	af 8b       	std	Y+23, r26	; 0x17
    148a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    148c:	6d 89       	ldd	r22, Y+21	; 0x15
    148e:	7e 89       	ldd	r23, Y+22	; 0x16
    1490:	8f 89       	ldd	r24, Y+23	; 0x17
    1492:	98 8d       	ldd	r25, Y+24	; 0x18
    1494:	2b ea       	ldi	r18, 0xAB	; 171
    1496:	3a ea       	ldi	r19, 0xAA	; 170
    1498:	4a ea       	ldi	r20, 0xAA	; 170
    149a:	50 e4       	ldi	r21, 0x40	; 64
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	89 8b       	std	Y+17, r24	; 0x11
    14a6:	9a 8b       	std	Y+18, r25	; 0x12
    14a8:	ab 8b       	std	Y+19, r26	; 0x13
    14aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14ac:	69 89       	ldd	r22, Y+17	; 0x11
    14ae:	7a 89       	ldd	r23, Y+18	; 0x12
    14b0:	8b 89       	ldd	r24, Y+19	; 0x13
    14b2:	9c 89       	ldd	r25, Y+20	; 0x14
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	1c f4       	brge	.+6      	; 0x14ca <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	88 8b       	std	Y+16, r24	; 0x10
    14c8:	91 c0       	rjmp	.+290    	; 0x15ec <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    14ca:	69 89       	ldd	r22, Y+17	; 0x11
    14cc:	7a 89       	ldd	r23, Y+18	; 0x12
    14ce:	8b 89       	ldd	r24, Y+19	; 0x13
    14d0:	9c 89       	ldd	r25, Y+20	; 0x14
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4f e7       	ldi	r20, 0x7F	; 127
    14d8:	53 e4       	ldi	r21, 0x43	; 67
    14da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14de:	18 16       	cp	r1, r24
    14e0:	0c f0       	brlt	.+2      	; 0x14e4 <LCD_enu_SendChar+0x2ce>
    14e2:	7b c0       	rjmp	.+246    	; 0x15da <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    14e4:	6d 89       	ldd	r22, Y+21	; 0x15
    14e6:	7e 89       	ldd	r23, Y+22	; 0x16
    14e8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ea:	98 8d       	ldd	r25, Y+24	; 0x18
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a e7       	ldi	r20, 0x7A	; 122
    14f2:	54 e4       	ldi	r21, 0x44	; 68
    14f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8c 87       	std	Y+12, r24	; 0x0c
    14fe:	9d 87       	std	Y+13, r25	; 0x0d
    1500:	ae 87       	std	Y+14, r26	; 0x0e
    1502:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	6c 85       	ldd	r22, Y+12	; 0x0c
    1506:	7d 85       	ldd	r23, Y+13	; 0x0d
    1508:	8e 85       	ldd	r24, Y+14	; 0x0e
    150a:	9f 85       	ldd	r25, Y+15	; 0x0f
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a e7       	ldi	r20, 0x7A	; 122
    1512:	55 e4       	ldi	r21, 0x45	; 69
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	88 87       	std	Y+8, r24	; 0x08
    151e:	99 87       	std	Y+9, r25	; 0x09
    1520:	aa 87       	std	Y+10, r26	; 0x0a
    1522:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1524:	68 85       	ldd	r22, Y+8	; 0x08
    1526:	79 85       	ldd	r23, Y+9	; 0x09
    1528:	8a 85       	ldd	r24, Y+10	; 0x0a
    152a:	9b 85       	ldd	r25, Y+11	; 0x0b
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9f 83       	std	Y+7, r25	; 0x07
    1542:	8e 83       	std	Y+6, r24	; 0x06
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    1546:	68 85       	ldd	r22, Y+8	; 0x08
    1548:	79 85       	ldd	r23, Y+9	; 0x09
    154a:	8a 85       	ldd	r24, Y+10	; 0x0a
    154c:	9b 85       	ldd	r25, Y+11	; 0x0b
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1560:	7d 85       	ldd	r23, Y+13	; 0x0d
    1562:	8e 85       	ldd	r24, Y+14	; 0x0e
    1564:	9f 85       	ldd	r25, Y+15	; 0x0f
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9f 83       	std	Y+7, r25	; 0x07
    1584:	8e 83       	std	Y+6, r24	; 0x06
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <LCD_enu_SendChar+0x390>
    1588:	80 e9       	ldi	r24, 0x90	; 144
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	9d 83       	std	Y+5, r25	; 0x05
    158e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <LCD_enu_SendChar+0x37e>
    1598:	9d 83       	std	Y+5, r25	; 0x05
    159a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8e 81       	ldd	r24, Y+6	; 0x06
    159e:	9f 81       	ldd	r25, Y+7	; 0x07
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9f 83       	std	Y+7, r25	; 0x07
    15a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8e 81       	ldd	r24, Y+6	; 0x06
    15a8:	9f 81       	ldd	r25, Y+7	; 0x07
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <LCD_enu_SendChar+0x372>
    15ae:	24 c0       	rjmp	.+72     	; 0x15f8 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	68 85       	ldd	r22, Y+8	; 0x08
    15b2:	79 85       	ldd	r23, Y+9	; 0x09
    15b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9f 83       	std	Y+7, r25	; 0x07
    15c2:	8e 83       	std	Y+6, r24	; 0x06
    15c4:	8e 81       	ldd	r24, Y+6	; 0x06
    15c6:	9f 81       	ldd	r25, Y+7	; 0x07
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_enu_SendChar+0x3ba>
    15d4:	9b 83       	std	Y+3, r25	; 0x03
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	0f c0       	rjmp	.+30     	; 0x15f8 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15da:	69 89       	ldd	r22, Y+17	; 0x11
    15dc:	7a 89       	ldd	r23, Y+18	; 0x12
    15de:	8b 89       	ldd	r24, Y+19	; 0x13
    15e0:	9c 89       	ldd	r25, Y+20	; 0x14
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	88 8b       	std	Y+16, r24	; 0x10
    15ec:	88 89       	ldd	r24, Y+16	; 0x10
    15ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	8a 95       	dec	r24
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <LCD_enu_SendChar+0x3dc>
    15f6:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	62 e0       	ldi	r22, 0x02	; 2
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
    return STATE_OK;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1604:	e1 96       	adiw	r28, 0x31	; 49
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <LCD_enu_SendString+0x6>
    161c:	0f 92       	push	r0
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	9b 83       	std	Y+3, r25	; 0x03
    1624:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    1626:	19 82       	std	Y+1, r1	; 0x01
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <LCD_enu_SendString+0x30>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	9b 81       	ldd	r25, Y+3	; 0x03
    1634:	fc 01       	movw	r30, r24
    1636:	e2 0f       	add	r30, r18
    1638:	f3 1f       	adc	r31, r19
    163a:	80 81       	ld	r24, Z
    163c:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i = 0 ; Copy_pu8_String[i] != '\0' ; i++ ){
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	9b 81       	ldd	r25, Y+3	; 0x03
    1650:	fc 01       	movw	r30, r24
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	80 81       	ld	r24, Z
    1658:	88 23       	and	r24, r24
    165a:	39 f7       	brne	.-50     	; 0x162a <LCD_enu_SendString+0x14>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    165c:	81 e0       	ldi	r24, 0x01	; 1
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	60 97       	sbiw	r28, 0x10	; 16
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	6d 87       	std	Y+13, r22	; 0x0d
    1684:	7e 87       	std	Y+14, r23	; 0x0e
    1686:	8f 87       	std	Y+15, r24	; 0x0f
    1688:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    168a:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    168c:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    168e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1690:	9e 85       	ldd	r25, Y+14	; 0x0e
    1692:	af 85       	ldd	r26, Y+15	; 0x0f
    1694:	b8 89       	ldd	r27, Y+16	; 0x10
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	a1 05       	cpc	r26, r1
    169a:	b1 05       	cpc	r27, r1
    169c:	89 f5       	brne	.+98     	; 0x1700 <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    169e:	80 e3       	ldi	r24, 0x30	; 48
    16a0:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_enu_SendChar>
    16a4:	4d c0       	rjmp	.+154    	; 0x1740 <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	08 2f       	mov	r16, r24
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	af 85       	ldd	r26, Y+15	; 0x0f
    16b2:	b8 89       	ldd	r27, Y+16	; 0x10
    16b4:	2a e0       	ldi	r18, 0x0A	; 10
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__udivmodsi4>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	28 2f       	mov	r18, r24
    16ca:	ce 01       	movw	r24, r28
    16cc:	03 96       	adiw	r24, 0x03	; 3
    16ce:	fc 01       	movw	r30, r24
    16d0:	e0 0f       	add	r30, r16
    16d2:	f1 1f       	adc	r31, r17
    16d4:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    16d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16da:	af 85       	ldd	r26, Y+15	; 0x0f
    16dc:	b8 89       	ldd	r27, Y+16	; 0x10
    16de:	2a e0       	ldi	r18, 0x0A	; 10
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e0       	ldi	r20, 0x00	; 0
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	bc 01       	movw	r22, r24
    16e8:	cd 01       	movw	r24, r26
    16ea:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__udivmodsi4>
    16ee:	da 01       	movw	r26, r20
    16f0:	c9 01       	movw	r24, r18
    16f2:	8d 87       	std	Y+13, r24	; 0x0d
    16f4:	9e 87       	std	Y+14, r25	; 0x0e
    16f6:	af 87       	std	Y+15, r26	; 0x0f
    16f8:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	8f 5f       	subi	r24, 0xFF	; 255
    16fe:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    1700:	8d 85       	ldd	r24, Y+13	; 0x0d
    1702:	9e 85       	ldd	r25, Y+14	; 0x0e
    1704:	af 85       	ldd	r26, Y+15	; 0x0f
    1706:	b8 89       	ldd	r27, Y+16	; 0x10
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	a1 05       	cpc	r26, r1
    170c:	b1 05       	cpc	r27, r1
    170e:	59 f6       	brne	.-106    	; 0x16a6 <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	81 50       	subi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	11 c0       	rjmp	.+34     	; 0x173a <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	33 27       	eor	r19, r19
    171e:	27 fd       	sbrc	r18, 7
    1720:	30 95       	com	r19
    1722:	ce 01       	movw	r24, r28
    1724:	03 96       	adiw	r24, 0x03	; 3
    1726:	fc 01       	movw	r30, r24
    1728:	e2 0f       	add	r30, r18
    172a:	f3 1f       	adc	r31, r19
    172c:	80 81       	ld	r24, Z
    172e:	80 5d       	subi	r24, 0xD0	; 208
    1730:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	81 50       	subi	r24, 0x01	; 1
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	88 23       	and	r24, r24
    173e:	64 f7       	brge	.-40     	; 0x1718 <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    1740:	81 e0       	ldi	r24, 0x01	; 1
}
    1742:	60 96       	adiw	r28, 0x10	; 16
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	08 95       	ret

00001758 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	00 d0       	rcall	.+0      	; 0x175e <LCD_enu_SetCursor+0x6>
    175e:	00 d0       	rcall	.+0      	; 0x1760 <LCD_enu_SetCursor+0x8>
    1760:	0f 92       	push	r0
    1762:	cd b7       	in	r28, 0x3d	; 61
    1764:	de b7       	in	r29, 0x3e	; 62
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	88 32       	cpi	r24, 0x28	; 40
    176e:	f0 f4       	brcc	.+60     	; 0x17ac <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	3d 83       	std	Y+5, r19	; 0x05
    1778:	2c 83       	std	Y+4, r18	; 0x04
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	31 f0       	breq	.+12     	; 0x178e <LCD_enu_SetCursor+0x36>
    1782:	2c 81       	ldd	r18, Y+4	; 0x04
    1784:	3d 81       	ldd	r19, Y+5	; 0x05
    1786:	21 30       	cpi	r18, 0x01	; 1
    1788:	31 05       	cpc	r19, r1
    178a:	31 f0       	breq	.+12     	; 0x1798 <LCD_enu_SetCursor+0x40>
    178c:	0a c0       	rjmp	.+20     	; 0x17a2 <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	80 58       	subi	r24, 0x80	; 128
    1792:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	80 54       	subi	r24, 0x40	; 64
    179c:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    17a2:	1b 82       	std	Y+3, r1	; 0x03
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    17a6:	31 e0       	ldi	r19, 0x01	; 1
    17a8:	3b 83       	std	Y+3, r19	; 0x03
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    17ac:	1b 82       	std	Y+3, r1	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	cc 54       	subi	r28, 0x4C	; 76
    17ce:	d0 40       	sbci	r29, 0x00	; 0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	66 e0       	ldi	r22, 0x06	; 6
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	65 e0       	ldi	r22, 0x05	; 5
    1806:	41 e0       	ldi	r20, 0x01	; 1
    1808:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	64 e0       	ldi	r22, 0x04	; 4
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	63 e0       	ldi	r22, 0x03	; 3
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
    1820:	fe 01       	movw	r30, r28
    1822:	e7 5b       	subi	r30, 0xB7	; 183
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	ac e0       	ldi	r26, 0x0C	; 12
    182c:	b2 e4       	ldi	r27, 0x42	; 66
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1836:	8e 01       	movw	r16, r28
    1838:	0b 5b       	subi	r16, 0xBB	; 187
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	fe 01       	movw	r30, r28
    183e:	e7 5b       	subi	r30, 0xB7	; 183
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a e7       	ldi	r20, 0x7A	; 122
    1850:	55 e4       	ldi	r21, 0x45	; 69
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	f8 01       	movw	r30, r16
    185c:	80 83       	st	Z, r24
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	a2 83       	std	Z+2, r26	; 0x02
    1862:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1864:	fe 01       	movw	r30, r28
    1866:	eb 5b       	subi	r30, 0xBB	; 187
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    187e:	88 23       	and	r24, r24
    1880:	44 f4       	brge	.+16     	; 0x1892 <LCD_enu_Init+0xd2>
		__ticks = 1;
    1882:	fe 01       	movw	r30, r28
    1884:	ed 5b       	subi	r30, 0xBD	; 189
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	64 c0       	rjmp	.+200    	; 0x195a <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    1892:	fe 01       	movw	r30, r28
    1894:	eb 5b       	subi	r30, 0xBB	; 187
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	57 e4       	ldi	r21, 0x47	; 71
    18a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	0c f0       	brlt	.+2      	; 0x18b2 <LCD_enu_Init+0xf2>
    18b0:	43 c0       	rjmp	.+134    	; 0x1938 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	fe 01       	movw	r30, r28
    18b4:	e7 5b       	subi	r30, 0xB7	; 183
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e2       	ldi	r20, 0x20	; 32
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8e 01       	movw	r16, r28
    18d2:	0d 5b       	subi	r16, 0xBD	; 189
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	f8 01       	movw	r30, r16
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	1f c0       	rjmp	.+62     	; 0x1928 <LCD_enu_Init+0x168>
    18ea:	fe 01       	movw	r30, r28
    18ec:	ef 5b       	subi	r30, 0xBF	; 191
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	80 e9       	ldi	r24, 0x90	; 144
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	91 83       	std	Z+1, r25	; 0x01
    18f6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f8:	fe 01       	movw	r30, r28
    18fa:	ef 5b       	subi	r30, 0xBF	; 191
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	80 81       	ld	r24, Z
    1900:	91 81       	ldd	r25, Z+1	; 0x01
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCD_enu_Init+0x142>
    1906:	fe 01       	movw	r30, r28
    1908:	ef 5b       	subi	r30, 0xBF	; 191
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	de 01       	movw	r26, r28
    1912:	ad 5b       	subi	r26, 0xBD	; 189
    1914:	bf 4f       	sbci	r27, 0xFF	; 255
    1916:	fe 01       	movw	r30, r28
    1918:	ed 5b       	subi	r30, 0xBD	; 189
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	9c 93       	st	X, r25
    1926:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1928:	fe 01       	movw	r30, r28
    192a:	ed 5b       	subi	r30, 0xBD	; 189
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	d1 f6       	brne	.-76     	; 0x18ea <LCD_enu_Init+0x12a>
    1936:	24 c0       	rjmp	.+72     	; 0x1980 <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1938:	8e 01       	movw	r16, r28
    193a:	0d 5b       	subi	r16, 0xBD	; 189
    193c:	1f 4f       	sbci	r17, 0xFF	; 255
    193e:	fe 01       	movw	r30, r28
    1940:	eb 5b       	subi	r30, 0xBB	; 187
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	f8 01       	movw	r30, r16
    1956:	91 83       	std	Z+1, r25	; 0x01
    1958:	80 83       	st	Z, r24
    195a:	fe 01       	movw	r30, r28
    195c:	ed 5b       	subi	r30, 0xBD	; 189
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	91 81       	ldd	r25, Z+1	; 0x01
    1964:	fe 01       	movw	r30, r28
    1966:	ff 96       	adiw	r30, 0x3f	; 63
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
    196c:	fe 01       	movw	r30, r28
    196e:	ff 96       	adiw	r30, 0x3f	; 63
    1970:	80 81       	ld	r24, Z
    1972:	91 81       	ldd	r25, Z+1	; 0x01
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_enu_Init+0x1b4>
    1978:	fe 01       	movw	r30, r28
    197a:	ff 96       	adiw	r30, 0x3f	; 63
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    1980:	83 e3       	ldi	r24, 0x33	; 51
    1982:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    1986:	82 e3       	ldi	r24, 0x32	; 50
    1988:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    198c:	88 e2       	ldi	r24, 0x28	; 40
    198e:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e2       	ldi	r26, 0x20	; 32
    1998:	b2 e4       	ldi	r27, 0x42	; 66
    199a:	8b af       	std	Y+59, r24	; 0x3b
    199c:	9c af       	std	Y+60, r25	; 0x3c
    199e:	ad af       	std	Y+61, r26	; 0x3d
    19a0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19a2:	6b ad       	ldd	r22, Y+59	; 0x3b
    19a4:	7c ad       	ldd	r23, Y+60	; 0x3c
    19a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19aa:	2b ea       	ldi	r18, 0xAB	; 171
    19ac:	3a ea       	ldi	r19, 0xAA	; 170
    19ae:	4a ea       	ldi	r20, 0xAA	; 170
    19b0:	50 e4       	ldi	r21, 0x40	; 64
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8f ab       	std	Y+55, r24	; 0x37
    19bc:	98 af       	std	Y+56, r25	; 0x38
    19be:	a9 af       	std	Y+57, r26	; 0x39
    19c0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    19c2:	6f a9       	ldd	r22, Y+55	; 0x37
    19c4:	78 ad       	ldd	r23, Y+56	; 0x38
    19c6:	89 ad       	ldd	r24, Y+57	; 0x39
    19c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	1c f4       	brge	.+6      	; 0x19e0 <LCD_enu_Init+0x220>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	8e ab       	std	Y+54, r24	; 0x36
    19de:	91 c0       	rjmp	.+290    	; 0x1b02 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    19e0:	6f a9       	ldd	r22, Y+55	; 0x37
    19e2:	78 ad       	ldd	r23, Y+56	; 0x38
    19e4:	89 ad       	ldd	r24, Y+57	; 0x39
    19e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	53 e4       	ldi	r21, 0x43	; 67
    19f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	0c f0       	brlt	.+2      	; 0x19fa <LCD_enu_Init+0x23a>
    19f8:	7b c0       	rjmp	.+246    	; 0x1af0 <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    19fa:	6b ad       	ldd	r22, Y+59	; 0x3b
    19fc:	7c ad       	ldd	r23, Y+60	; 0x3c
    19fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	4a e7       	ldi	r20, 0x7A	; 122
    1a08:	54 e4       	ldi	r21, 0x44	; 68
    1a0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8a ab       	std	Y+50, r24	; 0x32
    1a14:	9b ab       	std	Y+51, r25	; 0x33
    1a16:	ac ab       	std	Y+52, r26	; 0x34
    1a18:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1a:	6a a9       	ldd	r22, Y+50	; 0x32
    1a1c:	7b a9       	ldd	r23, Y+51	; 0x33
    1a1e:	8c a9       	ldd	r24, Y+52	; 0x34
    1a20:	9d a9       	ldd	r25, Y+53	; 0x35
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	4a e7       	ldi	r20, 0x7A	; 122
    1a28:	55 e4       	ldi	r21, 0x45	; 69
    1a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	8e a7       	std	Y+46, r24	; 0x2e
    1a34:	9f a7       	std	Y+47, r25	; 0x2f
    1a36:	a8 ab       	std	Y+48, r26	; 0x30
    1a38:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a3a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a3c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a3e:	88 a9       	ldd	r24, Y+48	; 0x30
    1a40:	99 a9       	ldd	r25, Y+49	; 0x31
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	40 e8       	ldi	r20, 0x80	; 128
    1a48:	5f e3       	ldi	r21, 0x3F	; 63
    1a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <LCD_enu_Init+0x29c>
		__ticks = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	9d a7       	std	Y+45, r25	; 0x2d
    1a58:	8c a7       	std	Y+44, r24	; 0x2c
    1a5a:	3f c0       	rjmp	.+126    	; 0x1ada <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    1a5c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a5e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a60:	88 a9       	ldd	r24, Y+48	; 0x30
    1a62:	99 a9       	ldd	r25, Y+49	; 0x31
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	3f ef       	ldi	r19, 0xFF	; 255
    1a68:	4f e7       	ldi	r20, 0x7F	; 127
    1a6a:	57 e4       	ldi	r21, 0x47	; 71
    1a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a70:	18 16       	cp	r1, r24
    1a72:	4c f5       	brge	.+82     	; 0x1ac6 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a74:	6a a9       	ldd	r22, Y+50	; 0x32
    1a76:	7b a9       	ldd	r23, Y+51	; 0x33
    1a78:	8c a9       	ldd	r24, Y+52	; 0x34
    1a7a:	9d a9       	ldd	r25, Y+53	; 0x35
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	40 e2       	ldi	r20, 0x20	; 32
    1a82:	51 e4       	ldi	r21, 0x41	; 65
    1a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9d a7       	std	Y+45, r25	; 0x2d
    1a9a:	8c a7       	std	Y+44, r24	; 0x2c
    1a9c:	0f c0       	rjmp	.+30     	; 0x1abc <LCD_enu_Init+0x2fc>
    1a9e:	80 e9       	ldi	r24, 0x90	; 144
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	9b a7       	std	Y+43, r25	; 0x2b
    1aa4:	8a a7       	std	Y+42, r24	; 0x2a
    1aa6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1aa8:	9b a5       	ldd	r25, Y+43	; 0x2b
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_enu_Init+0x2ea>
    1aae:	9b a7       	std	Y+43, r25	; 0x2b
    1ab0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ab4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	9d a7       	std	Y+45, r25	; 0x2d
    1aba:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1abe:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	69 f7       	brne	.-38     	; 0x1a9e <LCD_enu_Init+0x2de>
    1ac4:	24 c0       	rjmp	.+72     	; 0x1b0e <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ac8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aca:	88 a9       	ldd	r24, Y+48	; 0x30
    1acc:	99 a9       	ldd	r25, Y+49	; 0x31
    1ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	9d a7       	std	Y+45, r25	; 0x2d
    1ad8:	8c a7       	std	Y+44, r24	; 0x2c
    1ada:	8c a5       	ldd	r24, Y+44	; 0x2c
    1adc:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ade:	99 a7       	std	Y+41, r25	; 0x29
    1ae0:	88 a7       	std	Y+40, r24	; 0x28
    1ae2:	88 a5       	ldd	r24, Y+40	; 0x28
    1ae4:	99 a5       	ldd	r25, Y+41	; 0x29
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	f1 f7       	brne	.-4      	; 0x1ae6 <LCD_enu_Init+0x326>
    1aea:	99 a7       	std	Y+41, r25	; 0x29
    1aec:	88 a7       	std	Y+40, r24	; 0x28
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1af0:	6f a9       	ldd	r22, Y+55	; 0x37
    1af2:	78 ad       	ldd	r23, Y+56	; 0x38
    1af4:	89 ad       	ldd	r24, Y+57	; 0x39
    1af6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	8e ab       	std	Y+54, r24	; 0x36
    1b02:	8e a9       	ldd	r24, Y+54	; 0x36
    1b04:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b06:	8f a1       	ldd	r24, Y+39	; 0x27
    1b08:	8a 95       	dec	r24
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_enu_Init+0x348>
    1b0c:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    1b0e:	8f e0       	ldi	r24, 0x0F	; 15
    1b10:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a0 e2       	ldi	r26, 0x20	; 32
    1b1a:	b2 e4       	ldi	r27, 0x42	; 66
    1b1c:	8b a3       	std	Y+35, r24	; 0x23
    1b1e:	9c a3       	std	Y+36, r25	; 0x24
    1b20:	ad a3       	std	Y+37, r26	; 0x25
    1b22:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b24:	6b a1       	ldd	r22, Y+35	; 0x23
    1b26:	7c a1       	ldd	r23, Y+36	; 0x24
    1b28:	8d a1       	ldd	r24, Y+37	; 0x25
    1b2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b2c:	2b ea       	ldi	r18, 0xAB	; 171
    1b2e:	3a ea       	ldi	r19, 0xAA	; 170
    1b30:	4a ea       	ldi	r20, 0xAA	; 170
    1b32:	50 e4       	ldi	r21, 0x40	; 64
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1b3e:	98 a3       	std	Y+32, r25	; 0x20
    1b40:	a9 a3       	std	Y+33, r26	; 0x21
    1b42:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b46:	78 a1       	ldd	r23, Y+32	; 0x20
    1b48:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	1c f4       	brge	.+6      	; 0x1b62 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	8e 8f       	std	Y+30, r24	; 0x1e
    1b60:	91 c0       	rjmp	.+290    	; 0x1c84 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    1b62:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b64:	78 a1       	ldd	r23, Y+32	; 0x20
    1b66:	89 a1       	ldd	r24, Y+33	; 0x21
    1b68:	9a a1       	ldd	r25, Y+34	; 0x22
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	53 e4       	ldi	r21, 0x43	; 67
    1b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	0c f0       	brlt	.+2      	; 0x1b7c <LCD_enu_Init+0x3bc>
    1b7a:	7b c0       	rjmp	.+246    	; 0x1c72 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    1b7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b80:	8d a1       	ldd	r24, Y+37	; 0x25
    1b82:	9e a1       	ldd	r25, Y+38	; 0x26
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a e7       	ldi	r20, 0x7A	; 122
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8a 8f       	std	Y+26, r24	; 0x1a
    1b96:	9b 8f       	std	Y+27, r25	; 0x1b
    1b98:	ac 8f       	std	Y+28, r26	; 0x1c
    1b9a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b9e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ba0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ba2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a e7       	ldi	r20, 0x7A	; 122
    1baa:	55 e4       	ldi	r21, 0x45	; 69
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8e 8b       	std	Y+22, r24	; 0x16
    1bb6:	9f 8b       	std	Y+23, r25	; 0x17
    1bb8:	a8 8f       	std	Y+24, r26	; 0x18
    1bba:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1bbc:	6e 89       	ldd	r22, Y+22	; 0x16
    1bbe:	7f 89       	ldd	r23, Y+23	; 0x17
    1bc0:	88 8d       	ldd	r24, Y+24	; 0x18
    1bc2:	99 8d       	ldd	r25, Y+25	; 0x19
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <LCD_enu_Init+0x41e>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9d 8b       	std	Y+21, r25	; 0x15
    1bda:	8c 8b       	std	Y+20, r24	; 0x14
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    1bde:	6e 89       	ldd	r22, Y+22	; 0x16
    1be0:	7f 89       	ldd	r23, Y+23	; 0x17
    1be2:	88 8d       	ldd	r24, Y+24	; 0x18
    1be4:	99 8d       	ldd	r25, Y+25	; 0x19
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	4c f5       	brge	.+82     	; 0x1c48 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bf8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bfc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9d 8b       	std	Y+21, r25	; 0x15
    1c1c:	8c 8b       	std	Y+20, r24	; 0x14
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <LCD_enu_Init+0x47e>
    1c20:	80 e9       	ldi	r24, 0x90	; 144
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	9b 8b       	std	Y+19, r25	; 0x13
    1c26:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c28:	8a 89       	ldd	r24, Y+18	; 0x12
    1c2a:	9b 89       	ldd	r25, Y+19	; 0x13
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_enu_Init+0x46c>
    1c30:	9b 8b       	std	Y+19, r25	; 0x13
    1c32:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c34:	8c 89       	ldd	r24, Y+20	; 0x14
    1c36:	9d 89       	ldd	r25, Y+21	; 0x15
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	9d 8b       	std	Y+21, r25	; 0x15
    1c3c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c40:	9d 89       	ldd	r25, Y+21	; 0x15
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <LCD_enu_Init+0x460>
    1c46:	24 c0       	rjmp	.+72     	; 0x1c90 <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	6e 89       	ldd	r22, Y+22	; 0x16
    1c4a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9d 8b       	std	Y+21, r25	; 0x15
    1c5a:	8c 8b       	std	Y+20, r24	; 0x14
    1c5c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c5e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c60:	99 8b       	std	Y+17, r25	; 0x11
    1c62:	88 8b       	std	Y+16, r24	; 0x10
    1c64:	88 89       	ldd	r24, Y+16	; 0x10
    1c66:	99 89       	ldd	r25, Y+17	; 0x11
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_enu_Init+0x4a8>
    1c6c:	99 8b       	std	Y+17, r25	; 0x11
    1c6e:	88 8b       	std	Y+16, r24	; 0x10
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c72:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c74:	78 a1       	ldd	r23, Y+32	; 0x20
    1c76:	89 a1       	ldd	r24, Y+33	; 0x21
    1c78:	9a a1       	ldd	r25, Y+34	; 0x22
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8e 8f       	std	Y+30, r24	; 0x1e
    1c84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c86:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8a:	8a 95       	dec	r24
    1c8c:	f1 f7       	brne	.-4      	; 0x1c8a <LCD_enu_Init+0x4ca>
    1c8e:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e0       	ldi	r26, 0x00	; 0
    1c9c:	b0 e4       	ldi	r27, 0x40	; 64
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	55 e4       	ldi	r21, 0x45	; 69
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_enu_Init+0x528>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_enu_Init+0x588>
    1d2a:	80 e9       	ldi	r24, 0x90	; 144
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_enu_Init+0x576>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_enu_Init+0x56a>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_enu_Init+0x5b2>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    1d7a:	86 e0       	ldi	r24, 0x06	; 6
    1d7c:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    return STATE_OK;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    1d82:	c4 5b       	subi	r28, 0xB4	; 180
    1d84:	df 4f       	sbci	r29, 0xFF	; 255
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	08 95       	ret

00001d9a <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	2e 97       	sbiw	r28, 0x0e	; 14
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e0       	ldi	r26, 0x00	; 0
    1dba:	b0 e4       	ldi	r27, 0x40	; 64
    1dbc:	8b 87       	std	Y+11, r24	; 0x0b
    1dbe:	9c 87       	std	Y+12, r25	; 0x0c
    1dc0:	ad 87       	std	Y+13, r26	; 0x0d
    1dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	55 e4       	ldi	r21, 0x45	; 69
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8f 83       	std	Y+7, r24	; 0x07
    1dde:	98 87       	std	Y+8, r25	; 0x08
    1de0:	a9 87       	std	Y+9, r26	; 0x09
    1de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_enu_Clear+0xcc>
    1e48:	80 e9       	ldi	r24, 0x90	; 144
    1e4a:	91 e0       	ldi	r25, 0x01	; 1
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_enu_Clear+0xba>
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <LCD_enu_Clear+0xae>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_enu_Clear+0xf6>
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
}
    1e9a:	2e 96       	adiw	r28, 0x0e	; 14
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <LCD_enu_CreateCustomChar+0x6>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <LCD_enu_CreateCustomChar+0x8>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	8a 83       	std	Y+2, r24	; 0x02
    1ebc:	7c 83       	std	Y+4, r23	; 0x04
    1ebe:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	49 f1       	breq	.+82     	; 0x1f1a <LCD_enu_CreateCustomChar+0x6e>
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	88 30       	cpi	r24, 0x08	; 8
    1ecc:	30 f5       	brcc	.+76     	; 0x1f1a <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	08 96       	adiw	r24, 0x08	; 8
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0e 94 0b 07 	call	0xe16	; 0xe16 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    1ee6:	19 82       	std	Y+1, r1	; 0x01
    1ee8:	0e c0       	rjmp	.+28     	; 0x1f06 <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e2 0f       	add	r30, r18
    1ef8:	f3 1f       	adc	r31, r19
    1efa:	80 81       	ld	r24, Z
    1efc:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	8f 5f       	subi	r24, 0xFF	; 255
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	88 30       	cpi	r24, 0x08	; 8
    1f0a:	78 f3       	brcs	.-34     	; 0x1eea <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_enu_SetCursor>
        return STATE_OK;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	0f 92       	push	r0
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    1f3a:	19 82       	std	Y+1, r1	; 0x01
    1f3c:	33 c0       	rjmp	.+102    	; 0x1fa4 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	88 2f       	mov	r24, r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	fc 01       	movw	r30, r24
    1f46:	e2 57       	subi	r30, 0x72	; 114
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	90 81       	ld	r25, Z
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	69 2f       	mov	r22, r25
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	e2 57       	subi	r30, 0x72	; 114
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	90 81       	ld	r25, Z
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	69 2f       	mov	r22, r25
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	fc 01       	movw	r30, r24
    1f76:	ee 56       	subi	r30, 0x6E	; 110
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	90 81       	ld	r25, Z
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	69 2f       	mov	r22, r25
    1f80:	40 e0       	ldi	r20, 0x00	; 0
    1f82:	0e 94 03 1a 	call	0x3406	; 0x3406 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	ee 56       	subi	r30, 0x6E	; 110
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	90 81       	ld	r25, Z
    1f94:	83 e0       	ldi	r24, 0x03	; 3
    1f96:	69 2f       	mov	r22, r25
    1f98:	41 e0       	ldi	r20, 0x01	; 1
    1f9a:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	84 30       	cpi	r24, 0x04	; 4
    1fa8:	50 f2       	brcs	.-108    	; 0x1f3e <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
}
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	65 97       	sbiw	r28, 0x15	; 21
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	9d 8b       	std	Y+21, r25	; 0x15
    1fca:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	8a 8b       	std	Y+18, r24	; 0x12
    1fd0:	1b 8a       	std	Y+19, r1	; 0x13
    1fd2:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    1fd4:	8c 89       	ldd	r24, Y+20	; 0x14
    1fd6:	9d 89       	ldd	r25, Y+21	; 0x15
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	09 f4       	brne	.+2      	; 0x1fde <Keypad_enu_getKey+0x2a>
    1fdc:	f0 c0       	rjmp	.+480    	; 0x21be <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    1fde:	ec 89       	ldd	r30, Y+20	; 0x14
    1fe0:	fd 89       	ldd	r31, Y+21	; 0x15
    1fe2:	8f ef       	ldi	r24, 0xFF	; 255
    1fe4:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    1fe6:	19 8a       	std	Y+17, r1	; 0x11
    1fe8:	e5 c0       	rjmp	.+458    	; 0x21b4 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    1fea:	89 89       	ldd	r24, Y+17	; 0x11
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	fc 01       	movw	r30, r24
    1ff2:	e2 57       	subi	r30, 0x72	; 114
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	90 81       	ld	r25, Z
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	69 2f       	mov	r22, r25
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2002:	18 8a       	std	Y+16, r1	; 0x10
    2004:	c1 c0       	rjmp	.+386    	; 0x2188 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2006:	88 89       	ldd	r24, Y+16	; 0x10
    2008:	88 2f       	mov	r24, r24
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	fc 01       	movw	r30, r24
    200e:	ee 56       	subi	r30, 0x6E	; 110
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	90 81       	ld	r25, Z
    2014:	9e 01       	movw	r18, r28
    2016:	2d 5e       	subi	r18, 0xED	; 237
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	69 2f       	mov	r22, r25
    201e:	a9 01       	movw	r20, r18
    2020:	0e 94 57 1c 	call	0x38ae	; 0x38ae <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	88 23       	and	r24, r24
    2028:	09 f0       	breq	.+2      	; 0x202c <Keypad_enu_getKey+0x78>
    202a:	ab c0       	rjmp	.+342    	; 0x2182 <Keypad_enu_getKey+0x1ce>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 ea       	ldi	r26, 0xA0	; 160
    2032:	b1 e4       	ldi	r27, 0x41	; 65
    2034:	8b 87       	std	Y+11, r24	; 0x0b
    2036:	9c 87       	std	Y+12, r25	; 0x0c
    2038:	ad 87       	std	Y+13, r26	; 0x0d
    203a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	6b 85       	ldd	r22, Y+11	; 0x0b
    203e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2040:	8d 85       	ldd	r24, Y+13	; 0x0d
    2042:	9e 85       	ldd	r25, Y+14	; 0x0e
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a e7       	ldi	r20, 0x7A	; 122
    204a:	55 e4       	ldi	r21, 0x45	; 69
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	8f 83       	std	Y+7, r24	; 0x07
    2056:	98 87       	std	Y+8, r25	; 0x08
    2058:	a9 87       	std	Y+9, r26	; 0x09
    205a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    207e:	6f 81       	ldd	r22, Y+7	; 0x07
    2080:	78 85       	ldd	r23, Y+8	; 0x08
    2082:	89 85       	ldd	r24, Y+9	; 0x09
    2084:	9a 85       	ldd	r25, Y+10	; 0x0a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	6b 85       	ldd	r22, Y+11	; 0x0b
    2098:	7c 85       	ldd	r23, Y+12	; 0x0c
    209a:	8d 85       	ldd	r24, Y+13	; 0x0d
    209c:	9e 85       	ldd	r25, Y+14	; 0x0e
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	0f c0       	rjmp	.+30     	; 0x20de <Keypad_enu_getKey+0x12a>
    20c0:	80 e9       	ldi	r24, 0x90	; 144
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	9c 83       	std	Y+4, r25	; 0x04
    20c6:	8b 83       	std	Y+3, r24	; 0x03
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <Keypad_enu_getKey+0x118>
    20d0:	9c 83       	std	Y+4, r25	; 0x04
    20d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	8d 81       	ldd	r24, Y+5	; 0x05
    20d6:	9e 81       	ldd	r25, Y+6	; 0x06
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <Keypad_enu_getKey+0x10c>
    20e6:	14 c0       	rjmp	.+40     	; 0x2110 <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ea:	78 85       	ldd	r23, Y+8	; 0x08
    20ec:	89 85       	ldd	r24, Y+9	; 0x09
    20ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <Keypad_enu_getKey+0x154>
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2110:	88 89       	ldd	r24, Y+16	; 0x10
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	fc 01       	movw	r30, r24
    2118:	ee 56       	subi	r30, 0x6E	; 110
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	90 81       	ld	r25, Z
    211e:	9e 01       	movw	r18, r28
    2120:	2d 5e       	subi	r18, 0xED	; 237
    2122:	3f 4f       	sbci	r19, 0xFF	; 255
    2124:	83 e0       	ldi	r24, 0x03	; 3
    2126:	69 2f       	mov	r22, r25
    2128:	a9 01       	movw	r20, r18
    212a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <DIO_enu_GetPinValue>
    212e:	0f c0       	rjmp	.+30     	; 0x214e <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2130:	88 89       	ldd	r24, Y+16	; 0x10
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	fc 01       	movw	r30, r24
    2138:	ee 56       	subi	r30, 0x6E	; 110
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	90 81       	ld	r25, Z
    213e:	9e 01       	movw	r18, r28
    2140:	2d 5e       	subi	r18, 0xED	; 237
    2142:	3f 4f       	sbci	r19, 0xFF	; 255
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	69 2f       	mov	r22, r25
    2148:	a9 01       	movw	r20, r18
    214a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    214e:	8b 89       	ldd	r24, Y+19	; 0x13
    2150:	88 23       	and	r24, r24
    2152:	71 f3       	breq	.-36     	; 0x2130 <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    2154:	89 89       	ldd	r24, Y+17	; 0x11
    2156:	48 2f       	mov	r20, r24
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	88 89       	ldd	r24, Y+16	; 0x10
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	ca 01       	movw	r24, r20
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	fc 01       	movw	r30, r24
    2170:	e2 58       	subi	r30, 0x82	; 130
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	ec 89       	ldd	r30, Y+20	; 0x14
    2178:	fd 89       	ldd	r31, Y+21	; 0x15
    217a:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	8f 87       	std	Y+15, r24	; 0x0f
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2182:	88 89       	ldd	r24, Y+16	; 0x10
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	88 8b       	std	Y+16, r24	; 0x10
    2188:	88 89       	ldd	r24, Y+16	; 0x10
    218a:	84 30       	cpi	r24, 0x04	; 4
    218c:	08 f4       	brcc	.+2      	; 0x2190 <Keypad_enu_getKey+0x1dc>
    218e:	3b cf       	rjmp	.-394    	; 0x2006 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    2190:	89 89       	ldd	r24, Y+17	; 0x11
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	fc 01       	movw	r30, r24
    2198:	e2 57       	subi	r30, 0x72	; 114
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	90 81       	ld	r25, Z
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	69 2f       	mov	r22, r25
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 2d 1b 	call	0x365a	; 0x365a <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    21a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21aa:	88 23       	and	r24, r24
    21ac:	49 f4       	brne	.+18     	; 0x21c0 <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	8f 5f       	subi	r24, 0xFF	; 255
    21b2:	89 8b       	std	Y+17, r24	; 0x11
    21b4:	89 89       	ldd	r24, Y+17	; 0x11
    21b6:	84 30       	cpi	r24, 0x04	; 4
    21b8:	08 f4       	brcc	.+2      	; 0x21bc <Keypad_enu_getKey+0x208>
    21ba:	17 cf       	rjmp	.-466    	; 0x1fea <Keypad_enu_getKey+0x36>
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    21be:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    21c0:	8a 89       	ldd	r24, Y+18	; 0x12
}
    21c2:	65 96       	adiw	r28, 0x15	; 21
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <WDT_enu_Enable>:
#include"../../5-LIB/BIT_MATH.h"
#include"WDT_Config.h"
#include"WDT_Private.h"


ES_t WDT_enu_Enable(u8 Copy_u8_Time){
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <WDT_enu_Enable+0x6>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_enu_errorState = STATE_OK;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_Time<8){
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	88 30       	cpi	r24, 0x08	; 8
    21e8:	80 f4       	brcc	.+32     	; 0x220a <WDT_enu_Enable+0x36>
        /*Enable With Input Time*/
        WDT_WDTCR_REG |= Copy_u8_Time;
    21ea:	a1 e4       	ldi	r26, 0x41	; 65
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e1 e4       	ldi	r30, 0x41	; 65
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	90 81       	ld	r25, Z
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	89 2b       	or	r24, r25
    21f8:	8c 93       	st	X, r24
        SET_BIT(WDT_WDTCR_REG,WDE);
    21fa:	a1 e4       	ldi	r26, 0x41	; 65
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e1 e4       	ldi	r30, 0x41	; 65
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	88 60       	ori	r24, 0x08	; 8
    2206:	8c 93       	st	X, r24
    2208:	01 c0       	rjmp	.+2      	; 0x220c <WDT_enu_Enable+0x38>
    }else{
        Local_enu_errorState = STATE_NOT_OK;
    220a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_enu_errorState;
    220c:	89 81       	ldd	r24, Y+1	; 0x01

}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	08 95       	ret

00002218 <WDT_enu_Disable>:
ES_t WDT_enu_Disable(void){
    2218:	df 93       	push	r29
    221a:	cf 93       	push	r28
    221c:	0f 92       	push	r0
    221e:	cd b7       	in	r28, 0x3d	; 61
    2220:	de b7       	in	r29, 0x3e	; 62
    /*Disable Sequance*/
    WDT_WDTCR_REG |= ((1<<WDTOE) | (1<<WDE));
    2222:	a1 e4       	ldi	r26, 0x41	; 65
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e1 e4       	ldi	r30, 0x41	; 65
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	88 61       	ori	r24, 0x18	; 24
    222e:	8c 93       	st	X, r24
    WDT_WDTCR_REG = 0x00;
    2230:	e1 e4       	ldi	r30, 0x41	; 65
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	10 82       	st	Z, r1
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <Timers_enu_Init>:
#include"Timer_Config.h"
static u8 Timer0_u8_Prescaler , Timer1_u8_Prescaler;
/*Global Pointer To Function */
static  void(*Timers_pf_Timer0[2])(void) = {NULL};
static  void(*Timers_pf_Timer1[3])(void)= {NULL};
ES_t Timers_enu_Init(u8 Copy_u8_TimerNo,u8 Copy_u8_Mode,u8 Copy_u8_Prescaler){
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	2a 97       	sbiw	r28, 0x0a	; 10
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	8a 83       	std	Y+2, r24	; 0x02
    2254:	6b 83       	std	Y+3, r22	; 0x03
    2256:	4c 83       	std	Y+4, r20	; 0x04
u8 Local_u8_errorState = STATE_OK;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 83       	std	Y+1, r24	; 0x01
if((Copy_u8_TimerNo<2)&& (Copy_u8_Mode < 7)&&(Copy_u8_Prescaler<8)){
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	82 30       	cpi	r24, 0x02	; 2
    2260:	08 f0       	brcs	.+2      	; 0x2264 <Timers_enu_Init+0x26>
    2262:	e4 c1       	rjmp	.+968    	; 0x262c <Timers_enu_Init+0x3ee>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	87 30       	cpi	r24, 0x07	; 7
    2268:	08 f0       	brcs	.+2      	; 0x226c <Timers_enu_Init+0x2e>
    226a:	e0 c1       	rjmp	.+960    	; 0x262c <Timers_enu_Init+0x3ee>
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	88 30       	cpi	r24, 0x08	; 8
    2270:	08 f0       	brcs	.+2      	; 0x2274 <Timers_enu_Init+0x36>
    2272:	dc c1       	rjmp	.+952    	; 0x262c <Timers_enu_Init+0x3ee>
    switch (Copy_u8_TimerNo)
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	3a 87       	std	Y+10, r19	; 0x0a
    227c:	29 87       	std	Y+9, r18	; 0x09
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	39 f0       	breq	.+14     	; 0x2294 <Timers_enu_Init+0x56>
    2286:	29 85       	ldd	r18, Y+9	; 0x09
    2288:	3a 85       	ldd	r19, Y+10	; 0x0a
    228a:	21 30       	cpi	r18, 0x01	; 1
    228c:	31 05       	cpc	r19, r1
    228e:	09 f4       	brne	.+2      	; 0x2292 <Timers_enu_Init+0x54>
    2290:	d9 c0       	rjmp	.+434    	; 0x2444 <Timers_enu_Init+0x206>
    2292:	cd c1       	rjmp	.+922    	; 0x262e <Timers_enu_Init+0x3f0>
    {
    case TIMER0:
        switch (Copy_u8_Mode)
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	38 87       	std	Y+8, r19	; 0x08
    229c:	2f 83       	std	Y+7, r18	; 0x07
    229e:	8f 81       	ldd	r24, Y+7	; 0x07
    22a0:	98 85       	ldd	r25, Y+8	; 0x08
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	91 05       	cpc	r25, r1
    22a6:	09 f4       	brne	.+2      	; 0x22aa <Timers_enu_Init+0x6c>
    22a8:	4e c0       	rjmp	.+156    	; 0x2346 <Timers_enu_Init+0x108>
    22aa:	2f 81       	ldd	r18, Y+7	; 0x07
    22ac:	38 85       	ldd	r19, Y+8	; 0x08
    22ae:	24 30       	cpi	r18, 0x04	; 4
    22b0:	31 05       	cpc	r19, r1
    22b2:	54 f4       	brge	.+20     	; 0x22c8 <Timers_enu_Init+0x8a>
    22b4:	8f 81       	ldd	r24, Y+7	; 0x07
    22b6:	98 85       	ldd	r25, Y+8	; 0x08
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	c9 f0       	breq	.+50     	; 0x22ee <Timers_enu_Init+0xb0>
    22bc:	2f 81       	ldd	r18, Y+7	; 0x07
    22be:	38 85       	ldd	r19, Y+8	; 0x08
    22c0:	21 30       	cpi	r18, 0x01	; 1
    22c2:	31 05       	cpc	r19, r1
    22c4:	51 f1       	breq	.+84     	; 0x231a <Timers_enu_Init+0xdc>
    22c6:	b2 c0       	rjmp	.+356    	; 0x242c <Timers_enu_Init+0x1ee>
    22c8:	8f 81       	ldd	r24, Y+7	; 0x07
    22ca:	98 85       	ldd	r25, Y+8	; 0x08
    22cc:	85 30       	cpi	r24, 0x05	; 5
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <Timers_enu_Init+0x96>
    22d2:	73 c0       	rjmp	.+230    	; 0x23ba <Timers_enu_Init+0x17c>
    22d4:	2f 81       	ldd	r18, Y+7	; 0x07
    22d6:	38 85       	ldd	r19, Y+8	; 0x08
    22d8:	25 30       	cpi	r18, 0x05	; 5
    22da:	31 05       	cpc	r19, r1
    22dc:	0c f4       	brge	.+2      	; 0x22e0 <Timers_enu_Init+0xa2>
    22de:	50 c0       	rjmp	.+160    	; 0x2380 <Timers_enu_Init+0x142>
    22e0:	8f 81       	ldd	r24, Y+7	; 0x07
    22e2:	98 85       	ldd	r25, Y+8	; 0x08
    22e4:	86 30       	cpi	r24, 0x06	; 6
    22e6:	91 05       	cpc	r25, r1
    22e8:	09 f4       	brne	.+2      	; 0x22ec <Timers_enu_Init+0xae>
    22ea:	84 c0       	rjmp	.+264    	; 0x23f4 <Timers_enu_Init+0x1b6>
    22ec:	9f c0       	rjmp	.+318    	; 0x242c <Timers_enu_Init+0x1ee>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    22ee:	a3 e5       	ldi	r26, 0x53	; 83
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e3 e5       	ldi	r30, 0x53	; 83
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	8f 7b       	andi	r24, 0xBF	; 191
    22fa:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    22fc:	a3 e5       	ldi	r26, 0x53	; 83
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e3 e5       	ldi	r30, 0x53	; 83
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	87 7f       	andi	r24, 0xF7	; 247
    2308:	8c 93       	st	X, r24
            // Enable OverFlow Interrupt
            SET_BIT(TIMER_TIMSK_REG, TOIE0);
    230a:	a9 e5       	ldi	r26, 0x59	; 89
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e9 e5       	ldi	r30, 0x59	; 89
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	81 60       	ori	r24, 0x01	; 1
    2316:	8c 93       	st	X, r24
    2318:	89 c0       	rjmp	.+274    	; 0x242c <Timers_enu_Init+0x1ee>
        break;
        case CTC_MODE:
            CLR_BIT(TIMER0_TCCR0_REG, WGM00);
    231a:	a3 e5       	ldi	r26, 0x53	; 83
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e3 e5       	ldi	r30, 0x53	; 83
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8f 7b       	andi	r24, 0xBF	; 191
    2326:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    2328:	a3 e5       	ldi	r26, 0x53	; 83
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e3 e5       	ldi	r30, 0x53	; 83
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	88 60       	ori	r24, 0x08	; 8
    2334:	8c 93       	st	X, r24
            // Enable CTC Interrupt
            SET_BIT(TIMER_TIMSK_REG, OCIE0);
    2336:	a9 e5       	ldi	r26, 0x59	; 89
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e9 e5       	ldi	r30, 0x59	; 89
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	82 60       	ori	r24, 0x02	; 2
    2342:	8c 93       	st	X, r24
    2344:	73 c0       	rjmp	.+230    	; 0x242c <Timers_enu_Init+0x1ee>
        break;
        case FAST_PWM_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    2346:	a3 e5       	ldi	r26, 0x53	; 83
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e3 e5       	ldi	r30, 0x53	; 83
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 64       	ori	r24, 0x40	; 64
    2352:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    2354:	a3 e5       	ldi	r26, 0x53	; 83
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e3 e5       	ldi	r30, 0x53	; 83
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	88 60       	ori	r24, 0x08	; 8
    2360:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    2362:	a3 e5       	ldi	r26, 0x53	; 83
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e3 e5       	ldi	r30, 0x53	; 83
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	80 62       	ori	r24, 0x20	; 32
    236e:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    2370:	a3 e5       	ldi	r26, 0x53	; 83
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e3 e5       	ldi	r30, 0x53	; 83
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	80 61       	ori	r24, 0x10	; 16
    237c:	8c 93       	st	X, r24
    237e:	56 c0       	rjmp	.+172    	; 0x242c <Timers_enu_Init+0x1ee>
        break;
        case FAST_PWM_NON_INVERTING:
            // Fast
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    2380:	a3 e5       	ldi	r26, 0x53	; 83
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e3 e5       	ldi	r30, 0x53	; 83
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	80 81       	ld	r24, Z
    238a:	80 64       	ori	r24, 0x40	; 64
    238c:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, WGM01);
    238e:	a3 e5       	ldi	r26, 0x53	; 83
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e3 e5       	ldi	r30, 0x53	; 83
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	88 60       	ori	r24, 0x08	; 8
    239a:	8c 93       	st	X, r24
            // Non Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    239c:	a3 e5       	ldi	r26, 0x53	; 83
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e3 e5       	ldi	r30, 0x53	; 83
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	80 62       	ori	r24, 0x20	; 32
    23a8:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    23aa:	a3 e5       	ldi	r26, 0x53	; 83
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e3 e5       	ldi	r30, 0x53	; 83
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	8f 7e       	andi	r24, 0xEF	; 239
    23b6:	8c 93       	st	X, r24
    23b8:	39 c0       	rjmp	.+114    	; 0x242c <Timers_enu_Init+0x1ee>
        break;
        case PHASE_CORRECT_PWM_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    23ba:	a3 e5       	ldi	r26, 0x53	; 83
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e3 e5       	ldi	r30, 0x53	; 83
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	80 64       	ori	r24, 0x40	; 64
    23c6:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    23c8:	a3 e5       	ldi	r26, 0x53	; 83
    23ca:	b0 e0       	ldi	r27, 0x00	; 0
    23cc:	e3 e5       	ldi	r30, 0x53	; 83
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	87 7f       	andi	r24, 0xF7	; 247
    23d4:	8c 93       	st	X, r24
            // Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    23d6:	a3 e5       	ldi	r26, 0x53	; 83
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e3 e5       	ldi	r30, 0x53	; 83
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 62       	ori	r24, 0x20	; 32
    23e2:	8c 93       	st	X, r24
            SET_BIT(TIMER0_TCCR0_REG, COM00);
    23e4:	a3 e5       	ldi	r26, 0x53	; 83
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e3 e5       	ldi	r30, 0x53	; 83
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 61       	ori	r24, 0x10	; 16
    23f0:	8c 93       	st	X, r24
    23f2:	1c c0       	rjmp	.+56     	; 0x242c <Timers_enu_Init+0x1ee>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            // Phase Correct
            SET_BIT(TIMER0_TCCR0_REG, WGM00);
    23f4:	a3 e5       	ldi	r26, 0x53	; 83
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e3 e5       	ldi	r30, 0x53	; 83
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	80 64       	ori	r24, 0x40	; 64
    2400:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, WGM01);
    2402:	a3 e5       	ldi	r26, 0x53	; 83
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e3 e5       	ldi	r30, 0x53	; 83
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	87 7f       	andi	r24, 0xF7	; 247
    240e:	8c 93       	st	X, r24
            // NON Inverting
            SET_BIT(TIMER0_TCCR0_REG, COM01);
    2410:	a3 e5       	ldi	r26, 0x53	; 83
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e3 e5       	ldi	r30, 0x53	; 83
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	80 62       	ori	r24, 0x20	; 32
    241c:	8c 93       	st	X, r24
            CLR_BIT(TIMER0_TCCR0_REG, COM00);
    241e:	a3 e5       	ldi	r26, 0x53	; 83
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e3 e5       	ldi	r30, 0x53	; 83
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	8f 7e       	andi	r24, 0xEF	; 239
    242a:	8c 93       	st	X, r24
        break;
        }
    TIMER0_TCCR0_REG |= Copy_u8_Prescaler;
    242c:	a3 e5       	ldi	r26, 0x53	; 83
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	e3 e5       	ldi	r30, 0x53	; 83
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	90 81       	ld	r25, Z
    2436:	8c 81       	ldd	r24, Y+4	; 0x04
    2438:	89 2b       	or	r24, r25
    243a:	8c 93       	st	X, r24
    Timer0_u8_Prescaler = Copy_u8_Prescaler;
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	80 93 a5 00 	sts	0x00A5, r24
    2442:	f5 c0       	rjmp	.+490    	; 0x262e <Timers_enu_Init+0x3f0>
    break;
    case TIMER1:
        switch (Copy_u8_Mode)
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	3e 83       	std	Y+6, r19	; 0x06
    244c:	2d 83       	std	Y+5, r18	; 0x05
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	91 05       	cpc	r25, r1
    2456:	09 f4       	brne	.+2      	; 0x245a <Timers_enu_Init+0x21c>
    2458:	64 c0       	rjmp	.+200    	; 0x2522 <Timers_enu_Init+0x2e4>
    245a:	2d 81       	ldd	r18, Y+5	; 0x05
    245c:	3e 81       	ldd	r19, Y+6	; 0x06
    245e:	23 30       	cpi	r18, 0x03	; 3
    2460:	31 05       	cpc	r19, r1
    2462:	54 f4       	brge	.+20     	; 0x2478 <Timers_enu_Init+0x23a>
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	99 f0       	breq	.+38     	; 0x2492 <Timers_enu_Init+0x254>
    246c:	2d 81       	ldd	r18, Y+5	; 0x05
    246e:	3e 81       	ldd	r19, Y+6	; 0x06
    2470:	21 30       	cpi	r18, 0x01	; 1
    2472:	31 05       	cpc	r19, r1
    2474:	91 f1       	breq	.+100    	; 0x24da <Timers_enu_Init+0x29c>
    2476:	ce c0       	rjmp	.+412    	; 0x2614 <Timers_enu_Init+0x3d6>
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	84 30       	cpi	r24, 0x04	; 4
    247e:	91 05       	cpc	r25, r1
    2480:	09 f4       	brne	.+2      	; 0x2484 <Timers_enu_Init+0x246>
    2482:	73 c0       	rjmp	.+230    	; 0x256a <Timers_enu_Init+0x32c>
    2484:	2d 81       	ldd	r18, Y+5	; 0x05
    2486:	3e 81       	ldd	r19, Y+6	; 0x06
    2488:	26 30       	cpi	r18, 0x06	; 6
    248a:	31 05       	cpc	r19, r1
    248c:	09 f4       	brne	.+2      	; 0x2490 <Timers_enu_Init+0x252>
    248e:	98 c0       	rjmp	.+304    	; 0x25c0 <Timers_enu_Init+0x382>
    2490:	c1 c0       	rjmp	.+386    	; 0x2614 <Timers_enu_Init+0x3d6>
        {
        case NORMAL_MODE:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    2492:	af e4       	ldi	r26, 0x4F	; 79
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	8e 7f       	andi	r24, 0xFE	; 254
    249e:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    24a0:	af e4       	ldi	r26, 0x4F	; 79
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	ef e4       	ldi	r30, 0x4F	; 79
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	8d 7f       	andi	r24, 0xFD	; 253
    24ac:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    24ae:	ae e4       	ldi	r26, 0x4E	; 78
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ee e4       	ldi	r30, 0x4E	; 78
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	87 7f       	andi	r24, 0xF7	; 247
    24ba:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    24bc:	ae e4       	ldi	r26, 0x4E	; 78
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ee e4       	ldi	r30, 0x4E	; 78
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	8f 7e       	andi	r24, 0xEF	; 239
    24c8:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, TOIE1);
    24ca:	a9 e5       	ldi	r26, 0x59	; 89
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e9 e5       	ldi	r30, 0x59	; 89
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	84 60       	ori	r24, 0x04	; 4
    24d6:	8c 93       	st	X, r24
    24d8:	9d c0       	rjmp	.+314    	; 0x2614 <Timers_enu_Init+0x3d6>
        break;
        case CTC_MODE_A:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    24da:	af e4       	ldi	r26, 0x4F	; 79
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	ef e4       	ldi	r30, 0x4F	; 79
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	8e 7f       	andi	r24, 0xFE	; 254
    24e6:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    24e8:	af e4       	ldi	r26, 0x4F	; 79
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ef e4       	ldi	r30, 0x4F	; 79
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	8d 7f       	andi	r24, 0xFD	; 253
    24f4:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    24f6:	ae e4       	ldi	r26, 0x4E	; 78
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	ee e4       	ldi	r30, 0x4E	; 78
    24fc:	f0 e0       	ldi	r31, 0x00	; 0
    24fe:	80 81       	ld	r24, Z
    2500:	88 60       	ori	r24, 0x08	; 8
    2502:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    2504:	ae e4       	ldi	r26, 0x4E	; 78
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	ee e4       	ldi	r30, 0x4E	; 78
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	8f 7e       	andi	r24, 0xEF	; 239
    2510:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, OCIE1A);
    2512:	a9 e5       	ldi	r26, 0x59	; 89
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	e9 e5       	ldi	r30, 0x59	; 89
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	80 61       	ori	r24, 0x10	; 16
    251e:	8c 93       	st	X, r24
    2520:	79 c0       	rjmp	.+242    	; 0x2614 <Timers_enu_Init+0x3d6>
        break;
        case CTC_MODE_B:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    2522:	af e4       	ldi	r26, 0x4F	; 79
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ef e4       	ldi	r30, 0x4F	; 79
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, WGM11);
    2530:	af e4       	ldi	r26, 0x4F	; 79
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ef e4       	ldi	r30, 0x4F	; 79
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8d 7f       	andi	r24, 0xFD	; 253
    253c:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    253e:	ae e4       	ldi	r26, 0x4E	; 78
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	ee e4       	ldi	r30, 0x4E	; 78
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	87 7f       	andi	r24, 0xF7	; 247
    254a:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM13);
    254c:	ae e4       	ldi	r26, 0x4E	; 78
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ee e4       	ldi	r30, 0x4E	; 78
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 7e       	andi	r24, 0xEF	; 239
    2558:	8c 93       	st	X, r24
            SET_BIT(TIMER_TIMSK_REG, OCIE1B);
    255a:	a9 e5       	ldi	r26, 0x59	; 89
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e9 e5       	ldi	r30, 0x59	; 89
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	88 60       	ori	r24, 0x08	; 8
    2566:	8c 93       	st	X, r24
    2568:	55 c0       	rjmp	.+170    	; 0x2614 <Timers_enu_Init+0x3d6>
        break;
        case FAST_PWM_NON_INVERTING:
            CLR_BIT(TIMER1_TCCR1A_REG, WGM10);
    256a:	af e4       	ldi	r26, 0x4F	; 79
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	ef e4       	ldi	r30, 0x4F	; 79
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8e 7f       	andi	r24, 0xFE	; 254
    2576:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    2578:	af e4       	ldi	r26, 0x4F	; 79
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ef e4       	ldi	r30, 0x4F	; 79
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	82 60       	ori	r24, 0x02	; 2
    2584:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM12);
    2586:	ae e4       	ldi	r26, 0x4E	; 78
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	ee e4       	ldi	r30, 0x4E	; 78
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    2594:	ae e4       	ldi	r26, 0x4E	; 78
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	ee e4       	ldi	r30, 0x4E	; 78
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	80 61       	ori	r24, 0x10	; 16
    25a0:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    25a2:	af e4       	ldi	r26, 0x4F	; 79
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	ef e4       	ldi	r30, 0x4F	; 79
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	80 68       	ori	r24, 0x80	; 128
    25ae:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    25b0:	af e4       	ldi	r26, 0x4F	; 79
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	ef e4       	ldi	r30, 0x4F	; 79
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	8f 7b       	andi	r24, 0xBF	; 191
    25bc:	8c 93       	st	X, r24
    25be:	2a c0       	rjmp	.+84     	; 0x2614 <Timers_enu_Init+0x3d6>
        break;
        case PHASE_CORRECT_PWM_NON_INVERTING:
            SET_BIT(TIMER1_TCCR1A_REG, WGM10);
    25c0:	af e4       	ldi	r26, 0x4F	; 79
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	ef e4       	ldi	r30, 0x4F	; 79
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	81 60       	ori	r24, 0x01	; 1
    25cc:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, WGM11);
    25ce:	af e4       	ldi	r26, 0x4F	; 79
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ef e4       	ldi	r30, 0x4F	; 79
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	82 60       	ori	r24, 0x02	; 2
    25da:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1B_REG, WGM12);
    25dc:	ae e4       	ldi	r26, 0x4E	; 78
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	ee e4       	ldi	r30, 0x4E	; 78
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	87 7f       	andi	r24, 0xF7	; 247
    25e8:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1B_REG, WGM13);
    25ea:	ae e4       	ldi	r26, 0x4E	; 78
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	ee e4       	ldi	r30, 0x4E	; 78
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	80 61       	ori	r24, 0x10	; 16
    25f6:	8c 93       	st	X, r24
            SET_BIT(TIMER1_TCCR1A_REG, COM1A1);
    25f8:	af e4       	ldi	r26, 0x4F	; 79
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	ef e4       	ldi	r30, 0x4F	; 79
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	80 68       	ori	r24, 0x80	; 128
    2604:	8c 93       	st	X, r24
            CLR_BIT(TIMER1_TCCR1A_REG, COM1A0);
    2606:	af e4       	ldi	r26, 0x4F	; 79
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	ef e4       	ldi	r30, 0x4F	; 79
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8f 7b       	andi	r24, 0xBF	; 191
    2612:	8c 93       	st	X, r24
        break;
        }
    TIMER1_TCCR1B_REG |= Copy_u8_Prescaler;
    2614:	ae e4       	ldi	r26, 0x4E	; 78
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	ee e4       	ldi	r30, 0x4E	; 78
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	90 81       	ld	r25, Z
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	89 2b       	or	r24, r25
    2622:	8c 93       	st	X, r24
    Timer1_u8_Prescaler = Copy_u8_Prescaler;
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	80 93 a6 00 	sts	0x00A6, r24
    262a:	01 c0       	rjmp	.+2      	; 0x262e <Timers_enu_Init+0x3f0>
    break;
    }
}else{
    Local_u8_errorState = STATE_NOT_OK;
    262c:	19 82       	std	Y+1, r1	; 0x01
}
return Local_u8_errorState;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2630:	2a 96       	adiw	r28, 0x0a	; 10
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <Timers_enu_SetCallBack>:
ES_t Timers_enu_SetCallBack(u8 Copy_u8_TimerNo,void(*Copy_pf)(void),u8 Copy_u8_Mode){
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	29 97       	sbiw	r28, 0x09	; 9
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	8a 83       	std	Y+2, r24	; 0x02
    2658:	7c 83       	std	Y+4, r23	; 0x04
    265a:	6b 83       	std	Y+3, r22	; 0x03
    265c:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_errorState = STATE_OK;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_TimerNo<2)&(Copy_pf != NULL) && (Copy_u8_Mode<7)){
    2662:	19 86       	std	Y+9, r1	; 0x09
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	82 30       	cpi	r24, 0x02	; 2
    2668:	10 f4       	brcc	.+4      	; 0x266e <Timers_enu_SetCallBack+0x2c>
    266a:	21 e0       	ldi	r18, 0x01	; 1
    266c:	29 87       	std	Y+9, r18	; 0x09
    266e:	18 86       	std	Y+8, r1	; 0x08
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	11 f0       	breq	.+4      	; 0x267c <Timers_enu_SetCallBack+0x3a>
    2678:	31 e0       	ldi	r19, 0x01	; 1
    267a:	38 87       	std	Y+8, r19	; 0x08
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	98 85       	ldd	r25, Y+8	; 0x08
    2680:	89 23       	and	r24, r25
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	89 27       	eor	r24, r25
    2686:	88 23       	and	r24, r24
    2688:	61 f5       	brne	.+88     	; 0x26e2 <Timers_enu_SetCallBack+0xa0>
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	87 30       	cpi	r24, 0x07	; 7
    268e:	48 f5       	brcc	.+82     	; 0x26e2 <Timers_enu_SetCallBack+0xa0>
        switch (Copy_u8_TimerNo)
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	3f 83       	std	Y+7, r19	; 0x07
    2698:	2e 83       	std	Y+6, r18	; 0x06
    269a:	8e 81       	ldd	r24, Y+6	; 0x06
    269c:	9f 81       	ldd	r25, Y+7	; 0x07
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	31 f0       	breq	.+12     	; 0x26ae <Timers_enu_SetCallBack+0x6c>
    26a2:	2e 81       	ldd	r18, Y+6	; 0x06
    26a4:	3f 81       	ldd	r19, Y+7	; 0x07
    26a6:	21 30       	cpi	r18, 0x01	; 1
    26a8:	31 05       	cpc	r19, r1
    26aa:	71 f0       	breq	.+28     	; 0x26c8 <Timers_enu_SetCallBack+0x86>
    26ac:	1b c0       	rjmp	.+54     	; 0x26e4 <Timers_enu_SetCallBack+0xa2>
        {
        case TIMER0:
            Timers_pf_Timer0[Copy_u8_Mode] = Copy_pf;
    26ae:	8d 81       	ldd	r24, Y+5	; 0x05
    26b0:	88 2f       	mov	r24, r24
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	88 0f       	add	r24, r24
    26b6:	99 1f       	adc	r25, r25
    26b8:	fc 01       	movw	r30, r24
    26ba:	e5 56       	subi	r30, 0x65	; 101
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	8b 81       	ldd	r24, Y+3	; 0x03
    26c0:	9c 81       	ldd	r25, Y+4	; 0x04
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	80 83       	st	Z, r24
    26c6:	0e c0       	rjmp	.+28     	; 0x26e4 <Timers_enu_SetCallBack+0xa2>
        break;
        case TIMER1:
            Timers_pf_Timer1[Copy_u8_Mode] = Copy_pf;
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	fc 01       	movw	r30, r24
    26d4:	e1 56       	subi	r30, 0x61	; 97
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	91 83       	std	Z+1, r25	; 0x01
    26de:	80 83       	st	Z, r24
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <Timers_enu_SetCallBack+0xa2>
        break;
        }
        
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    26e2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    26e6:	29 96       	adiw	r28, 0x09	; 9
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <Timers_enu_SetCLKSource>:
ES_t Timers_enu_SetCLKSource(u8 Copy_u8_TimerNo,u8 Copy_u8_CLK_Source){
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <Timers_enu_SetCLKSource+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <Timers_enu_SetCLKSource+0x8>
    2700:	0f 92       	push	r0
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	8a 83       	std	Y+2, r24	; 0x02
    2708:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_CLK_Source < 8) && (Copy_u8_TimerNo < 2)){
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	88 30       	cpi	r24, 0x08	; 8
    2712:	c0 f5       	brcc	.+112    	; 0x2784 <Timers_enu_SetCLKSource+0x8c>
    2714:	8a 81       	ldd	r24, Y+2	; 0x02
    2716:	82 30       	cpi	r24, 0x02	; 2
    2718:	a8 f5       	brcc	.+106    	; 0x2784 <Timers_enu_SetCLKSource+0x8c>
        switch (Copy_u8_TimerNo)
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	28 2f       	mov	r18, r24
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	3d 83       	std	Y+5, r19	; 0x05
    2722:	2c 83       	std	Y+4, r18	; 0x04
    2724:	8c 81       	ldd	r24, Y+4	; 0x04
    2726:	9d 81       	ldd	r25, Y+5	; 0x05
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	31 f0       	breq	.+12     	; 0x2738 <Timers_enu_SetCLKSource+0x40>
    272c:	2c 81       	ldd	r18, Y+4	; 0x04
    272e:	3d 81       	ldd	r19, Y+5	; 0x05
    2730:	21 30       	cpi	r18, 0x01	; 1
    2732:	31 05       	cpc	r19, r1
    2734:	a1 f0       	breq	.+40     	; 0x275e <Timers_enu_SetCLKSource+0x66>
    2736:	27 c0       	rjmp	.+78     	; 0x2786 <Timers_enu_SetCLKSource+0x8e>
        {
        case TIMER0:
            // Clear Old Value of Prescaler
            TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    2738:	a3 e5       	ldi	r26, 0x53	; 83
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	e3 e5       	ldi	r30, 0x53	; 83
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	88 7f       	andi	r24, 0xF8	; 248
    2744:	8c 93       	st	X, r24
            TIMER0_TCCR0_REG |= Copy_u8_CLK_Source;
    2746:	a3 e5       	ldi	r26, 0x53	; 83
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e3 e5       	ldi	r30, 0x53	; 83
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	90 81       	ld	r25, Z
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	89 2b       	or	r24, r25
    2754:	8c 93       	st	X, r24
            Timer0_u8_Prescaler = Copy_u8_CLK_Source;
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	80 93 a5 00 	sts	0x00A5, r24
    275c:	14 c0       	rjmp	.+40     	; 0x2786 <Timers_enu_SetCLKSource+0x8e>
        break;
        case TIMER1:
            // Clear Old Value of Prescaler
            TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    275e:	ae e4       	ldi	r26, 0x4E	; 78
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	ee e4       	ldi	r30, 0x4E	; 78
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	88 7f       	andi	r24, 0xF8	; 248
    276a:	8c 93       	st	X, r24
            TIMER1_TCCR1B_REG |= Copy_u8_CLK_Source;
    276c:	ae e4       	ldi	r26, 0x4E	; 78
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	ee e4       	ldi	r30, 0x4E	; 78
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	90 81       	ld	r25, Z
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	89 2b       	or	r24, r25
    277a:	8c 93       	st	X, r24
            Timer1_u8_Prescaler = Copy_u8_CLK_Source;
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	80 93 a6 00 	sts	0x00A6, r24
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <Timers_enu_SetCLKSource+0x8e>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2784:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2786:	89 81       	ldd	r24, Y+1	; 0x01
}
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <Timers_enu_delay_ms>:
ES_t Timers_enu_delay_ms(u32 Copy_u32_Time)
{
    2798:	ef 92       	push	r14
    279a:	ff 92       	push	r15
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	2d 97       	sbiw	r28, 0x0d	; 13
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	69 87       	std	Y+9, r22	; 0x09
    27b6:	7a 87       	std	Y+10, r23	; 0x0a
    27b8:	8b 87       	std	Y+11, r24	; 0x0b
    27ba:	9c 87       	std	Y+12, r25	; 0x0c
    TIMER0_TCCR0_REG |= Timer0_u8_Prescaler;
    27bc:	a3 e5       	ldi	r26, 0x53	; 83
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e3 e5       	ldi	r30, 0x53	; 83
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	90 81       	ld	r25, Z
    27c6:	80 91 a5 00 	lds	r24, 0x00A5
    27ca:	89 2b       	or	r24, r25
    27cc:	8c 93       	st	X, r24
    u16 local_u16_OVF_Time = 256 * 8 / F_CPU;
    27ce:	80 e8       	ldi	r24, 0x80	; 128
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	98 87       	std	Y+8, r25	; 0x08
    27d4:	8f 83       	std	Y+7, r24	; 0x07
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000) / local_u16_OVF_Time;
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	ab 85       	ldd	r26, Y+11	; 0x0b
    27dc:	bc 85       	ldd	r27, Y+12	; 0x0c
    27de:	28 ee       	ldi	r18, 0xE8	; 232
    27e0:	33 e0       	ldi	r19, 0x03	; 3
    27e2:	40 e0       	ldi	r20, 0x00	; 0
    27e4:	50 e0       	ldi	r21, 0x00	; 0
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__mulsi3>
    27ee:	7b 01       	movw	r14, r22
    27f0:	8c 01       	movw	r16, r24
    27f2:	8f 81       	ldd	r24, Y+7	; 0x07
    27f4:	98 85       	ldd	r25, Y+8	; 0x08
    27f6:	9c 01       	movw	r18, r24
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	c8 01       	movw	r24, r16
    27fe:	b7 01       	movw	r22, r14
    2800:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__udivmodsi4>
    2804:	da 01       	movw	r26, r20
    2806:	c9 01       	movw	r24, r18
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	ab 85       	ldd	r26, Y+11	; 0x0b
    2812:	bc 85       	ldd	r27, Y+12	; 0x0c
    2814:	28 ee       	ldi	r18, 0xE8	; 232
    2816:	33 e0       	ldi	r19, 0x03	; 3
    2818:	40 e0       	ldi	r20, 0x00	; 0
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <__mulsi3>
    2824:	7b 01       	movw	r14, r22
    2826:	8c 01       	movw	r16, r24
    2828:	8f 81       	ldd	r24, Y+7	; 0x07
    282a:	98 85       	ldd	r25, Y+8	; 0x08
    282c:	9c 01       	movw	r18, r24
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	50 e0       	ldi	r21, 0x00	; 0
    2832:	c8 01       	movw	r24, r16
    2834:	b7 01       	movw	r22, r14
    2836:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__udivmodsi4>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	88 0f       	add	r24, r24
    2840:	99 1f       	adc	r25, r25
    2842:	aa 1f       	adc	r26, r26
    2844:	bb 1f       	adc	r27, r27
    2846:	88 0f       	add	r24, r24
    2848:	99 1f       	adc	r25, r25
    284a:	aa 1f       	adc	r26, r26
    284c:	bb 1f       	adc	r27, r27
    284e:	88 0f       	add	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	aa 1f       	adc	r26, r26
    2854:	bb 1f       	adc	r27, r27
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	aa 1f       	adc	r26, r26
    285c:	bb 1f       	adc	r27, r27
    285e:	68 94       	set
    2860:	12 f8       	bld	r1, 2
    2862:	b6 95       	lsr	r27
    2864:	a7 95       	ror	r26
    2866:	97 95       	ror	r25
    2868:	87 95       	ror	r24
    286a:	16 94       	lsr	r1
    286c:	d1 f7       	brne	.-12     	; 0x2862 <Timers_enu_delay_ms+0xca>
    286e:	9c 83       	std	Y+4, r25	; 0x04
    2870:	8b 83       	std	Y+3, r24	; 0x03
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    2872:	e2 e5       	ldi	r30, 0x52	; 82
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	81 95       	neg	r24
    287a:	80 83       	st	Z, r24
    u16 local_u16_counter = 0;
    287c:	1a 82       	std	Y+2, r1	; 0x02
    287e:	19 82       	std	Y+1, r1	; 0x01
    2880:	15 c0       	rjmp	.+42     	; 0x28ac <Timers_enu_delay_ms+0x114>
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
    2882:	a8 e5       	ldi	r26, 0x58	; 88
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e8 e5       	ldi	r30, 0x58	; 88
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	81 60       	ori	r24, 0x01	; 1
    288e:	8c 93       	st	X, r24
        local_u16_counter++;
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	9a 81       	ldd	r25, Y+2	; 0x02
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    {
        while (GET_BIT(TIMER_TIFR_REG, TOV0) != 0)
    289a:	e8 e5       	ldi	r30, 0x58	; 88
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	81 70       	andi	r24, 0x01	; 1
    28a6:	90 70       	andi	r25, 0x00	; 0
    28a8:	88 23       	and	r24, r24
    28aa:	59 f7       	brne	.-42     	; 0x2882 <Timers_enu_delay_ms+0xea>
    u16 local_u16_OVF_Time = 256 * 8 / F_CPU;
    u16 local_u16_NumOfOVF = (Copy_u32_Time * 1000) / local_u16_OVF_Time;
    u16 local_u16_proLoad = (((Copy_u32_Time * 1000) % local_u16_OVF_Time) * F_CPU) / 8;
    TIMER0_TCNT0_REG = 256 - local_u16_proLoad;
    u16 local_u16_counter = 0;
    while (local_u16_counter != (local_u16_NumOfOVF + 1))
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	9c 01       	movw	r18, r24
    28b2:	2f 5f       	subi	r18, 0xFF	; 255
    28b4:	3f 4f       	sbci	r19, 0xFF	; 255
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ba:	28 17       	cp	r18, r24
    28bc:	39 07       	cpc	r19, r25
    28be:	69 f7       	brne	.-38     	; 0x289a <Timers_enu_delay_ms+0x102>
        {
        SET_BIT(TIMER_TIFR_REG, TOV0);
        local_u16_counter++;
        }
    }
    TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    28c0:	a3 e5       	ldi	r26, 0x53	; 83
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	e3 e5       	ldi	r30, 0x53	; 83
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	88 7f       	andi	r24, 0xF8	; 248
    28cc:	8c 93       	st	X, r24
}
    28ce:	2d 96       	adiw	r28, 0x0d	; 13
    28d0:	0f b6       	in	r0, 0x3f	; 63
    28d2:	f8 94       	cli
    28d4:	de bf       	out	0x3e, r29	; 62
    28d6:	0f be       	out	0x3f, r0	; 63
    28d8:	cd bf       	out	0x3d, r28	; 61
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	ff 90       	pop	r15
    28e4:	ef 90       	pop	r14
    28e6:	08 95       	ret

000028e8 <Timers_enu_SetTimerValue>:
ES_t Timers_enu_SetTimerValue(u8 Copy_u8_TimerNo,u16 Copy_u8_Value){
    28e8:	df 93       	push	r29
    28ea:	cf 93       	push	r28
    28ec:	00 d0       	rcall	.+0      	; 0x28ee <Timers_enu_SetTimerValue+0x6>
    28ee:	00 d0       	rcall	.+0      	; 0x28f0 <Timers_enu_SetTimerValue+0x8>
    28f0:	00 d0       	rcall	.+0      	; 0x28f2 <Timers_enu_SetTimerValue+0xa>
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	8a 83       	std	Y+2, r24	; 0x02
    28f8:	7c 83       	std	Y+4, r23	; 0x04
    28fa:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	83 30       	cpi	r24, 0x03	; 3
    2904:	d8 f4       	brcc	.+54     	; 0x293c <Timers_enu_SetTimerValue+0x54>
        switch (Copy_u8_TimerNo)
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	28 2f       	mov	r18, r24
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	3e 83       	std	Y+6, r19	; 0x06
    290e:	2d 83       	std	Y+5, r18	; 0x05
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	31 f0       	breq	.+12     	; 0x2924 <Timers_enu_SetTimerValue+0x3c>
    2918:	2d 81       	ldd	r18, Y+5	; 0x05
    291a:	3e 81       	ldd	r19, Y+6	; 0x06
    291c:	21 30       	cpi	r18, 0x01	; 1
    291e:	31 05       	cpc	r19, r1
    2920:	31 f0       	breq	.+12     	; 0x292e <Timers_enu_SetTimerValue+0x46>
    2922:	0d c0       	rjmp	.+26     	; 0x293e <Timers_enu_SetTimerValue+0x56>
        {
        case TIMER0:
            TIMER0_TCNT0_REG = Copy_u8_Value;
    2924:	e2 e5       	ldi	r30, 0x52	; 82
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	80 83       	st	Z, r24
    292c:	08 c0       	rjmp	.+16     	; 0x293e <Timers_enu_SetTimerValue+0x56>
        break;
        case TIMER1:
            TIMER1_TCNT1_REG = Copy_u8_Value;
    292e:	ec e4       	ldi	r30, 0x4C	; 76
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	01 c0       	rjmp	.+2      	; 0x293e <Timers_enu_SetTimerValue+0x56>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    293c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2940:	26 96       	adiw	r28, 0x06	; 6
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	cf 91       	pop	r28
    294e:	df 91       	pop	r29
    2950:	08 95       	ret

00002952 <Timers_enu_GetTimerValue>:
ES_t Timers_enu_GetTimerValue(u8 Copy_u8_TimerNo,u16 *Copy_u8_Value){
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <Timers_enu_GetTimerValue+0x6>
    2958:	00 d0       	rcall	.+0      	; 0x295a <Timers_enu_GetTimerValue+0x8>
    295a:	00 d0       	rcall	.+0      	; 0x295c <Timers_enu_GetTimerValue+0xa>
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	8a 83       	std	Y+2, r24	; 0x02
    2962:	7c 83       	std	Y+4, r23	; 0x04
    2964:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo < 3){
    296a:	8a 81       	ldd	r24, Y+2	; 0x02
    296c:	83 30       	cpi	r24, 0x03	; 3
    296e:	10 f5       	brcc	.+68     	; 0x29b4 <Timers_enu_GetTimerValue+0x62>
        switch (Copy_u8_TimerNo)
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	3e 83       	std	Y+6, r19	; 0x06
    2978:	2d 83       	std	Y+5, r18	; 0x05
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	31 f0       	breq	.+12     	; 0x298e <Timers_enu_GetTimerValue+0x3c>
    2982:	2d 81       	ldd	r18, Y+5	; 0x05
    2984:	3e 81       	ldd	r19, Y+6	; 0x06
    2986:	21 30       	cpi	r18, 0x01	; 1
    2988:	31 05       	cpc	r19, r1
    298a:	59 f0       	breq	.+22     	; 0x29a2 <Timers_enu_GetTimerValue+0x50>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <Timers_enu_GetTimerValue+0x64>
        {
        case TIMER0:
            *Copy_u8_Value = TIMER0_TCNT0_REG;
    298e:	e2 e5       	ldi	r30, 0x52	; 82
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	88 2f       	mov	r24, r24
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	eb 81       	ldd	r30, Y+3	; 0x03
    299a:	fc 81       	ldd	r31, Y+4	; 0x04
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	0a c0       	rjmp	.+20     	; 0x29b6 <Timers_enu_GetTimerValue+0x64>
        break;
        case TIMER1:
            *Copy_u8_Value = TIMER1_TCNT1_REG;
    29a2:	ec e4       	ldi	r30, 0x4C	; 76
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	eb 81       	ldd	r30, Y+3	; 0x03
    29ac:	fc 81       	ldd	r31, Y+4	; 0x04
    29ae:	91 83       	std	Z+1, r25	; 0x01
    29b0:	80 83       	st	Z, r24
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <Timers_enu_GetTimerValue+0x64>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    29b4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    29b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    29b8:	26 96       	adiw	r28, 0x06	; 6
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <Timers_enu_Timer0SetCompareValue>:
ES_t Timers_enu_Timer0SetCompareValue(u8 Copy_u8_Value){
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	0f 92       	push	r0
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	89 83       	std	Y+1, r24	; 0x01
    TIMER0_OCR0_REG = Copy_u8_Value;
    29d6:	ec e5       	ldi	r30, 0x5C	; 92
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	80 83       	st	Z, r24
    return STATE_OK;
    29de:	81 e0       	ldi	r24, 0x01	; 1
}
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <Timers_enu_Timer1_setTopValue>:
ES_t Timers_enu_Timer1_setTopValue(u16 Copy_u16_Value){
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <Timers_enu_Timer1_setTopValue+0x6>
    29ee:	0f 92       	push	r0
    29f0:	cd b7       	in	r28, 0x3d	; 61
    29f2:	de b7       	in	r29, 0x3e	; 62
    29f4:	9a 83       	std	Y+2, r25	; 0x02
    29f6:	89 83       	std	Y+1, r24	; 0x01
        TIMER1_ICR1_REG = Copy_u16_Value;
    29f8:	e6 e4       	ldi	r30, 0x46	; 70
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	91 83       	std	Z+1, r25	; 0x01
    2a02:	80 83       	st	Z, r24
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <Timers_enu_Timer1SetCompareValue>:
ES_t Timers_enu_Timer1SetCompareValue(u8 Copy_u8_compareREG ,u16 Copy_u8_Value){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <Timers_enu_Timer1SetCompareValue+0x6>
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <Timers_enu_Timer1SetCompareValue+0x8>
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <Timers_enu_Timer1SetCompareValue+0xa>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	8a 83       	std	Y+2, r24	; 0x02
    2a20:	7c 83       	std	Y+4, r23	; 0x04
    2a22:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_compareREG < 2){
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	e8 f4       	brcc	.+58     	; 0x2a68 <Timers_enu_Timer1SetCompareValue+0x58>
        switch (Copy_u8_compareREG)
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	3e 83       	std	Y+6, r19	; 0x06
    2a36:	2d 83       	std	Y+5, r18	; 0x05
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	31 f0       	breq	.+12     	; 0x2a4c <Timers_enu_Timer1SetCompareValue+0x3c>
    2a40:	2d 81       	ldd	r18, Y+5	; 0x05
    2a42:	3e 81       	ldd	r19, Y+6	; 0x06
    2a44:	21 30       	cpi	r18, 0x01	; 1
    2a46:	31 05       	cpc	r19, r1
    2a48:	41 f0       	breq	.+16     	; 0x2a5a <Timers_enu_Timer1SetCompareValue+0x4a>
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <Timers_enu_Timer1SetCompareValue+0x5a>
        {
        case COMPARE_UNIT_A:
            TIMER1_OCR1A_REG = Copy_u8_Value;
    2a4c:	ea e4       	ldi	r30, 0x4A	; 74
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
    2a58:	08 c0       	rjmp	.+16     	; 0x2a6a <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        case COMPARE_UNIT_B:
            TIMER1_OCR1B_REG = Copy_u8_Value;
    2a5a:	e8 e4       	ldi	r30, 0x48	; 72
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	9c 81       	ldd	r25, Y+4	; 0x04
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <Timers_enu_Timer1SetCompareValue+0x5a>
        break;
        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    2a68:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a6c:	26 96       	adiw	r28, 0x06	; 6
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <Timers_enu_Stop>:
ES_t Timers_enu_Stop(u8 Copy_u8_TimerNo){
    2a7e:	df 93       	push	r29
    2a80:	cf 93       	push	r28
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <Timers_enu_Stop+0x6>
    2a84:	00 d0       	rcall	.+0      	; 0x2a86 <Timers_enu_Stop+0x8>
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	89 83       	std	Y+1, r24	; 0x01
    if(Copy_u8_TimerNo<2){
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	82 30       	cpi	r24, 0x02	; 2
    2a94:	c8 f5       	brcc	.+114    	; 0x2b08 <Timers_enu_Stop+0x8a>
        switch (Copy_u8_TimerNo)
    2a96:	8a 81       	ldd	r24, Y+2	; 0x02
    2a98:	28 2f       	mov	r18, r24
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	3c 83       	std	Y+4, r19	; 0x04
    2a9e:	2b 83       	std	Y+3, r18	; 0x03
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	31 f0       	breq	.+12     	; 0x2ab4 <Timers_enu_Stop+0x36>
    2aa8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aaa:	fc 81       	ldd	r31, Y+4	; 0x04
    2aac:	e1 30       	cpi	r30, 0x01	; 1
    2aae:	f1 05       	cpc	r31, r1
    2ab0:	81 f0       	breq	.+32     	; 0x2ad2 <Timers_enu_Stop+0x54>
    2ab2:	2b c0       	rjmp	.+86     	; 0x2b0a <Timers_enu_Stop+0x8c>
        {
        case TIMER0:
        TIMER0_TCCR0_REG &= CLEAR_CLK_SOURCE;
    2ab4:	a3 e5       	ldi	r26, 0x53	; 83
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e3 e5       	ldi	r30, 0x53	; 83
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	88 7f       	andi	r24, 0xF8	; 248
    2ac0:	8c 93       	st	X, r24
        TIMER0_TCNT0_REG = TIMER0_OCR0_REG = 0;
    2ac2:	a2 e5       	ldi	r26, 0x52	; 82
    2ac4:	b0 e0       	ldi	r27, 0x00	; 0
    2ac6:	ec e5       	ldi	r30, 0x5C	; 92
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	10 82       	st	Z, r1
    2acc:	80 81       	ld	r24, Z
    2ace:	8c 93       	st	X, r24
    2ad0:	1c c0       	rjmp	.+56     	; 0x2b0a <Timers_enu_Stop+0x8c>
        break;
        case TIMER1:
        TIMER1_TCCR1B_REG &= CLEAR_CLK_SOURCE;
    2ad2:	ae e4       	ldi	r26, 0x4E	; 78
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	ee e4       	ldi	r30, 0x4E	; 78
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	88 7f       	andi	r24, 0xF8	; 248
    2ade:	8c 93       	st	X, r24
        TIMER1_TCNT1_REG = TIMER1_OCR1A_REG = TIMER1_OCR1B_REG = 0;
    2ae0:	2c e4       	ldi	r18, 0x4C	; 76
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	aa e4       	ldi	r26, 0x4A	; 74
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e8 e4       	ldi	r30, 0x48	; 72
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	11 82       	std	Z+1, r1	; 0x01
    2aee:	10 82       	st	Z, r1
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	11 96       	adiw	r26, 0x01	; 1
    2af6:	9c 93       	st	X, r25
    2af8:	8e 93       	st	-X, r24
    2afa:	8d 91       	ld	r24, X+
    2afc:	9c 91       	ld	r25, X
    2afe:	11 97       	sbiw	r26, 0x01	; 1
    2b00:	f9 01       	movw	r30, r18
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	80 83       	st	Z, r24
    2b06:	01 c0       	rjmp	.+2      	; 0x2b0a <Timers_enu_Stop+0x8c>
        break;
        }
    }else{
        Local_u8_errorState =STATE_NOT_OK;
    2b08:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	08 95       	ret

00002b1a <__vector_7>:

/*****ISR(Timer1) CTC Mode A*****/
void __vector_7(void){
    2b1a:	1f 92       	push	r1
    2b1c:	0f 92       	push	r0
    2b1e:	0f b6       	in	r0, 0x3f	; 63
    2b20:	0f 92       	push	r0
    2b22:	11 24       	eor	r1, r1
    2b24:	2f 93       	push	r18
    2b26:	3f 93       	push	r19
    2b28:	4f 93       	push	r20
    2b2a:	5f 93       	push	r21
    2b2c:	6f 93       	push	r22
    2b2e:	7f 93       	push	r23
    2b30:	8f 93       	push	r24
    2b32:	9f 93       	push	r25
    2b34:	af 93       	push	r26
    2b36:	bf 93       	push	r27
    2b38:	ef 93       	push	r30
    2b3a:	ff 93       	push	r31
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_A] != NULL)
    2b44:	80 91 a1 00 	lds	r24, 0x00A1
    2b48:	90 91 a2 00 	lds	r25, 0x00A2
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	29 f0       	breq	.+10     	; 0x2b5a <__vector_7+0x40>
        Timers_pf_Timer1[CTC_MODE_A]();
    2b50:	e0 91 a1 00 	lds	r30, 0x00A1
    2b54:	f0 91 a2 00 	lds	r31, 0x00A2
    2b58:	09 95       	icall
}
    2b5a:	cf 91       	pop	r28
    2b5c:	df 91       	pop	r29
    2b5e:	ff 91       	pop	r31
    2b60:	ef 91       	pop	r30
    2b62:	bf 91       	pop	r27
    2b64:	af 91       	pop	r26
    2b66:	9f 91       	pop	r25
    2b68:	8f 91       	pop	r24
    2b6a:	7f 91       	pop	r23
    2b6c:	6f 91       	pop	r22
    2b6e:	5f 91       	pop	r21
    2b70:	4f 91       	pop	r20
    2b72:	3f 91       	pop	r19
    2b74:	2f 91       	pop	r18
    2b76:	0f 90       	pop	r0
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	0f 90       	pop	r0
    2b7c:	1f 90       	pop	r1
    2b7e:	18 95       	reti

00002b80 <__vector_8>:
/*****ISR(Timer1) CTC Mode B*****/
void __vector_8(void){
    2b80:	1f 92       	push	r1
    2b82:	0f 92       	push	r0
    2b84:	0f b6       	in	r0, 0x3f	; 63
    2b86:	0f 92       	push	r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	2f 93       	push	r18
    2b8c:	3f 93       	push	r19
    2b8e:	4f 93       	push	r20
    2b90:	5f 93       	push	r21
    2b92:	6f 93       	push	r22
    2b94:	7f 93       	push	r23
    2b96:	8f 93       	push	r24
    2b98:	9f 93       	push	r25
    2b9a:	af 93       	push	r26
    2b9c:	bf 93       	push	r27
    2b9e:	ef 93       	push	r30
    2ba0:	ff 93       	push	r31
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[CTC_MODE_B] != NULL)
    2baa:	80 91 a3 00 	lds	r24, 0x00A3
    2bae:	90 91 a4 00 	lds	r25, 0x00A4
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	29 f0       	breq	.+10     	; 0x2bc0 <__vector_8+0x40>
        Timers_pf_Timer1[CTC_MODE_B]();
    2bb6:	e0 91 a3 00 	lds	r30, 0x00A3
    2bba:	f0 91 a4 00 	lds	r31, 0x00A4
    2bbe:	09 95       	icall
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	ff 91       	pop	r31
    2bc6:	ef 91       	pop	r30
    2bc8:	bf 91       	pop	r27
    2bca:	af 91       	pop	r26
    2bcc:	9f 91       	pop	r25
    2bce:	8f 91       	pop	r24
    2bd0:	7f 91       	pop	r23
    2bd2:	6f 91       	pop	r22
    2bd4:	5f 91       	pop	r21
    2bd6:	4f 91       	pop	r20
    2bd8:	3f 91       	pop	r19
    2bda:	2f 91       	pop	r18
    2bdc:	0f 90       	pop	r0
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	0f 90       	pop	r0
    2be2:	1f 90       	pop	r1
    2be4:	18 95       	reti

00002be6 <__vector_9>:
/*****ISR(Timer1) Normal Mode*****/
void __vector_9(void){
    2be6:	1f 92       	push	r1
    2be8:	0f 92       	push	r0
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	0f 92       	push	r0
    2bee:	11 24       	eor	r1, r1
    2bf0:	2f 93       	push	r18
    2bf2:	3f 93       	push	r19
    2bf4:	4f 93       	push	r20
    2bf6:	5f 93       	push	r21
    2bf8:	6f 93       	push	r22
    2bfa:	7f 93       	push	r23
    2bfc:	8f 93       	push	r24
    2bfe:	9f 93       	push	r25
    2c00:	af 93       	push	r26
    2c02:	bf 93       	push	r27
    2c04:	ef 93       	push	r30
    2c06:	ff 93       	push	r31
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer1[NORMAL_MODE] != NULL)
    2c10:	80 91 9f 00 	lds	r24, 0x009F
    2c14:	90 91 a0 00 	lds	r25, 0x00A0
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	29 f0       	breq	.+10     	; 0x2c26 <__vector_9+0x40>
        Timers_pf_Timer1[NORMAL_MODE]();
    2c1c:	e0 91 9f 00 	lds	r30, 0x009F
    2c20:	f0 91 a0 00 	lds	r31, 0x00A0
    2c24:	09 95       	icall
}
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	ff 91       	pop	r31
    2c2c:	ef 91       	pop	r30
    2c2e:	bf 91       	pop	r27
    2c30:	af 91       	pop	r26
    2c32:	9f 91       	pop	r25
    2c34:	8f 91       	pop	r24
    2c36:	7f 91       	pop	r23
    2c38:	6f 91       	pop	r22
    2c3a:	5f 91       	pop	r21
    2c3c:	4f 91       	pop	r20
    2c3e:	3f 91       	pop	r19
    2c40:	2f 91       	pop	r18
    2c42:	0f 90       	pop	r0
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	0f 90       	pop	r0
    2c48:	1f 90       	pop	r1
    2c4a:	18 95       	reti

00002c4c <__vector_10>:
/*****ISR(Timer0) CTC Mode*****/
void __vector_10(void){
    2c4c:	1f 92       	push	r1
    2c4e:	0f 92       	push	r0
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	0f 92       	push	r0
    2c54:	11 24       	eor	r1, r1
    2c56:	2f 93       	push	r18
    2c58:	3f 93       	push	r19
    2c5a:	4f 93       	push	r20
    2c5c:	5f 93       	push	r21
    2c5e:	6f 93       	push	r22
    2c60:	7f 93       	push	r23
    2c62:	8f 93       	push	r24
    2c64:	9f 93       	push	r25
    2c66:	af 93       	push	r26
    2c68:	bf 93       	push	r27
    2c6a:	ef 93       	push	r30
    2c6c:	ff 93       	push	r31
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[CTC_MODE] != NULL)
    2c76:	80 91 9d 00 	lds	r24, 0x009D
    2c7a:	90 91 9e 00 	lds	r25, 0x009E
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	29 f0       	breq	.+10     	; 0x2c8c <__vector_10+0x40>
        Timers_pf_Timer0[CTC_MODE]();
    2c82:	e0 91 9d 00 	lds	r30, 0x009D
    2c86:	f0 91 9e 00 	lds	r31, 0x009E
    2c8a:	09 95       	icall
}
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	ff 91       	pop	r31
    2c92:	ef 91       	pop	r30
    2c94:	bf 91       	pop	r27
    2c96:	af 91       	pop	r26
    2c98:	9f 91       	pop	r25
    2c9a:	8f 91       	pop	r24
    2c9c:	7f 91       	pop	r23
    2c9e:	6f 91       	pop	r22
    2ca0:	5f 91       	pop	r21
    2ca2:	4f 91       	pop	r20
    2ca4:	3f 91       	pop	r19
    2ca6:	2f 91       	pop	r18
    2ca8:	0f 90       	pop	r0
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	0f 90       	pop	r0
    2cae:	1f 90       	pop	r1
    2cb0:	18 95       	reti

00002cb2 <__vector_11>:
/*****ISR(Timer0) Normal Mode*****/
void __vector_11(void){
    2cb2:	1f 92       	push	r1
    2cb4:	0f 92       	push	r0
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	0f 92       	push	r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	2f 93       	push	r18
    2cbe:	3f 93       	push	r19
    2cc0:	4f 93       	push	r20
    2cc2:	5f 93       	push	r21
    2cc4:	6f 93       	push	r22
    2cc6:	7f 93       	push	r23
    2cc8:	8f 93       	push	r24
    2cca:	9f 93       	push	r25
    2ccc:	af 93       	push	r26
    2cce:	bf 93       	push	r27
    2cd0:	ef 93       	push	r30
    2cd2:	ff 93       	push	r31
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
    if (Timers_pf_Timer0[NORMAL_MODE] != NULL)
    2cdc:	80 91 9b 00 	lds	r24, 0x009B
    2ce0:	90 91 9c 00 	lds	r25, 0x009C
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	29 f0       	breq	.+10     	; 0x2cf2 <__vector_11+0x40>
        Timers_pf_Timer0[NORMAL_MODE]();
    2ce8:	e0 91 9b 00 	lds	r30, 0x009B
    2cec:	f0 91 9c 00 	lds	r31, 0x009C
    2cf0:	09 95       	icall
}
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	ff 91       	pop	r31
    2cf8:	ef 91       	pop	r30
    2cfa:	bf 91       	pop	r27
    2cfc:	af 91       	pop	r26
    2cfe:	9f 91       	pop	r25
    2d00:	8f 91       	pop	r24
    2d02:	7f 91       	pop	r23
    2d04:	6f 91       	pop	r22
    2d06:	5f 91       	pop	r21
    2d08:	4f 91       	pop	r20
    2d0a:	3f 91       	pop	r19
    2d0c:	2f 91       	pop	r18
    2d0e:	0f 90       	pop	r0
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	0f 90       	pop	r0
    2d14:	1f 90       	pop	r1
    2d16:	18 95       	reti

00002d18 <GI_enu_Enable>:
#include"../../5-LIB/ERROR_STATE.h"
#include"../../5-LIB/BIT_MATH.h"

#include"GI_Private.h"

ES_t GI_enu_Enable(void){
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    2d20:	af e5       	ldi	r26, 0x5F	; 95
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	ef e5       	ldi	r30, 0x5F	; 95
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	80 68       	ori	r24, 0x80	; 128
    2d2c:	8c 93       	st	X, r24
    return STATE_OK;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
}
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <GI_enu_Disable>:
ES_t GI_enu_Disable(void){
    2d36:	df 93       	push	r29
    2d38:	cf 93       	push	r28
    2d3a:	cd b7       	in	r28, 0x3d	; 61
    2d3c:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(EXTI_U8_SREG,EXTI_U8_IBIT);
    2d3e:	af e5       	ldi	r26, 0x5F	; 95
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	ef e5       	ldi	r30, 0x5F	; 95
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	8f 77       	andi	r24, 0x7F	; 127
    2d4a:	8c 93       	st	X, r24
    return STATE_OK;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
}
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <EXTI_enu_Enable>:

/*Global Array of Pointers To Function*/
static void (*Apf_EXTI[NUM_OF_ISR_FUNCTIONS])(void) = {NULL};

ES_t EXTI_enu_Enable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Edge)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	2b 97       	sbiw	r28, 0x0b	; 11
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	8a 83       	std	Y+2, r24	; 0x02
    2d6a:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    2d70:	8a 81       	ldd	r24, Y+2	; 0x02
    2d72:	83 30       	cpi	r24, 0x03	; 3
    2d74:	08 f0       	brcs	.+2      	; 0x2d78 <EXTI_enu_Enable+0x24>
    2d76:	07 c1       	rjmp	.+526    	; 0x2f86 <EXTI_enu_Enable+0x232>
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	84 30       	cpi	r24, 0x04	; 4
    2d7c:	08 f0       	brcs	.+2      	; 0x2d80 <EXTI_enu_Enable+0x2c>
    2d7e:	03 c1       	rjmp	.+518    	; 0x2f86 <EXTI_enu_Enable+0x232>
    {
        switch (Copy_u8_EXTI_Index)
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	3b 87       	std	Y+11, r19	; 0x0b
    2d88:	2a 87       	std	Y+10, r18	; 0x0a
    2d8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	91 05       	cpc	r25, r1
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <EXTI_enu_Enable+0x42>
    2d94:	6d c0       	rjmp	.+218    	; 0x2e70 <EXTI_enu_Enable+0x11c>
    2d96:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d98:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d9a:	22 30       	cpi	r18, 0x02	; 2
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <EXTI_enu_Enable+0x4e>
    2da0:	c9 c0       	rjmp	.+402    	; 0x2f34 <EXTI_enu_Enable+0x1e0>
    2da2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2da4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	09 f0       	breq	.+2      	; 0x2dac <EXTI_enu_Enable+0x58>
    2daa:	ee c0       	rjmp	.+476    	; 0x2f88 <EXTI_enu_Enable+0x234>
        {
        case EXTI0:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    2dac:	ab e5       	ldi	r26, 0x5B	; 91
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	eb e5       	ldi	r30, 0x5B	; 91
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	80 64       	ori	r24, 0x40	; 64
    2db8:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	39 87       	std	Y+9, r19	; 0x09
    2dc2:	28 87       	std	Y+8, r18	; 0x08
    2dc4:	88 85       	ldd	r24, Y+8	; 0x08
    2dc6:	99 85       	ldd	r25, Y+9	; 0x09
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	91 05       	cpc	r25, r1
    2dcc:	21 f1       	breq	.+72     	; 0x2e16 <EXTI_enu_Enable+0xc2>
    2dce:	28 85       	ldd	r18, Y+8	; 0x08
    2dd0:	39 85       	ldd	r19, Y+9	; 0x09
    2dd2:	22 30       	cpi	r18, 0x02	; 2
    2dd4:	31 05       	cpc	r19, r1
    2dd6:	2c f4       	brge	.+10     	; 0x2de2 <EXTI_enu_Enable+0x8e>
    2dd8:	88 85       	ldd	r24, Y+8	; 0x08
    2dda:	99 85       	ldd	r25, Y+9	; 0x09
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	61 f0       	breq	.+24     	; 0x2df8 <EXTI_enu_Enable+0xa4>
    2de0:	d3 c0       	rjmp	.+422    	; 0x2f88 <EXTI_enu_Enable+0x234>
    2de2:	28 85       	ldd	r18, Y+8	; 0x08
    2de4:	39 85       	ldd	r19, Y+9	; 0x09
    2de6:	22 30       	cpi	r18, 0x02	; 2
    2de8:	31 05       	cpc	r19, r1
    2dea:	21 f1       	breq	.+72     	; 0x2e34 <EXTI_enu_Enable+0xe0>
    2dec:	88 85       	ldd	r24, Y+8	; 0x08
    2dee:	99 85       	ldd	r25, Y+9	; 0x09
    2df0:	83 30       	cpi	r24, 0x03	; 3
    2df2:	91 05       	cpc	r25, r1
    2df4:	71 f1       	breq	.+92     	; 0x2e52 <EXTI_enu_Enable+0xfe>
    2df6:	c8 c0       	rjmp	.+400    	; 0x2f88 <EXTI_enu_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2df8:	a5 e5       	ldi	r26, 0x55	; 85
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e5 e5       	ldi	r30, 0x55	; 85
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8e 7f       	andi	r24, 0xFE	; 254
    2e04:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2e06:	a5 e5       	ldi	r26, 0x55	; 85
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e5 e5       	ldi	r30, 0x55	; 85
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8d 7f       	andi	r24, 0xFD	; 253
    2e12:	8c 93       	st	X, r24
    2e14:	b9 c0       	rjmp	.+370    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2e16:	a5 e5       	ldi	r26, 0x55	; 85
    2e18:	b0 e0       	ldi	r27, 0x00	; 0
    2e1a:	e5 e5       	ldi	r30, 0x55	; 85
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	80 81       	ld	r24, Z
    2e20:	81 60       	ori	r24, 0x01	; 1
    2e22:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2e24:	a5 e5       	ldi	r26, 0x55	; 85
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e5 e5       	ldi	r30, 0x55	; 85
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8d 7f       	andi	r24, 0xFD	; 253
    2e30:	8c 93       	st	X, r24
    2e32:	aa c0       	rjmp	.+340    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2e34:	a5 e5       	ldi	r26, 0x55	; 85
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e5 e5       	ldi	r30, 0x55	; 85
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8e 7f       	andi	r24, 0xFE	; 254
    2e40:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2e42:	a5 e5       	ldi	r26, 0x55	; 85
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e5 e5       	ldi	r30, 0x55	; 85
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	82 60       	ori	r24, 0x02	; 2
    2e4e:	8c 93       	st	X, r24
    2e50:	9b c0       	rjmp	.+310    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    2e52:	a5 e5       	ldi	r26, 0x55	; 85
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e5 e5       	ldi	r30, 0x55	; 85
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	81 60       	ori	r24, 0x01	; 1
    2e5e:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    2e60:	a5 e5       	ldi	r26, 0x55	; 85
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e5 e5       	ldi	r30, 0x55	; 85
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	82 60       	ori	r24, 0x02	; 2
    2e6c:	8c 93       	st	X, r24
    2e6e:	8c c0       	rjmp	.+280    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            }
            break;
        case EXTI1:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    2e70:	ab e5       	ldi	r26, 0x5B	; 91
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	eb e5       	ldi	r30, 0x5B	; 91
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	28 2f       	mov	r18, r24
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	3f 83       	std	Y+7, r19	; 0x07
    2e86:	2e 83       	std	Y+6, r18	; 0x06
    2e88:	8e 81       	ldd	r24, Y+6	; 0x06
    2e8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e8c:	81 30       	cpi	r24, 0x01	; 1
    2e8e:	91 05       	cpc	r25, r1
    2e90:	21 f1       	breq	.+72     	; 0x2eda <EXTI_enu_Enable+0x186>
    2e92:	2e 81       	ldd	r18, Y+6	; 0x06
    2e94:	3f 81       	ldd	r19, Y+7	; 0x07
    2e96:	22 30       	cpi	r18, 0x02	; 2
    2e98:	31 05       	cpc	r19, r1
    2e9a:	2c f4       	brge	.+10     	; 0x2ea6 <EXTI_enu_Enable+0x152>
    2e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	61 f0       	breq	.+24     	; 0x2ebc <EXTI_enu_Enable+0x168>
    2ea4:	71 c0       	rjmp	.+226    	; 0x2f88 <EXTI_enu_Enable+0x234>
    2ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    2ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    2eaa:	22 30       	cpi	r18, 0x02	; 2
    2eac:	31 05       	cpc	r19, r1
    2eae:	21 f1       	breq	.+72     	; 0x2ef8 <EXTI_enu_Enable+0x1a4>
    2eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	71 f1       	breq	.+92     	; 0x2f16 <EXTI_enu_Enable+0x1c2>
    2eba:	66 c0       	rjmp	.+204    	; 0x2f88 <EXTI_enu_Enable+0x234>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2ebc:	a5 e5       	ldi	r26, 0x55	; 85
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e5 e5       	ldi	r30, 0x55	; 85
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8b 7f       	andi	r24, 0xFB	; 251
    2ec8:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2eca:	a5 e5       	ldi	r26, 0x55	; 85
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e5 e5       	ldi	r30, 0x55	; 85
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	87 7f       	andi	r24, 0xF7	; 247
    2ed6:	8c 93       	st	X, r24
    2ed8:	57 c0       	rjmp	.+174    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2eda:	a5 e5       	ldi	r26, 0x55	; 85
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	e5 e5       	ldi	r30, 0x55	; 85
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	84 60       	ori	r24, 0x04	; 4
    2ee6:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2ee8:	a5 e5       	ldi	r26, 0x55	; 85
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e5 e5       	ldi	r30, 0x55	; 85
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	87 7f       	andi	r24, 0xF7	; 247
    2ef4:	8c 93       	st	X, r24
    2ef6:	48 c0       	rjmp	.+144    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2ef8:	a5 e5       	ldi	r26, 0x55	; 85
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e5 e5       	ldi	r30, 0x55	; 85
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	8b 7f       	andi	r24, 0xFB	; 251
    2f04:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2f06:	a5 e5       	ldi	r26, 0x55	; 85
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e5 e5       	ldi	r30, 0x55	; 85
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	88 60       	ori	r24, 0x08	; 8
    2f12:	8c 93       	st	X, r24
    2f14:	39 c0       	rjmp	.+114    	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    2f16:	a5 e5       	ldi	r26, 0x55	; 85
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	e5 e5       	ldi	r30, 0x55	; 85
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	84 60       	ori	r24, 0x04	; 4
    2f22:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    2f24:	a5 e5       	ldi	r26, 0x55	; 85
    2f26:	b0 e0       	ldi	r27, 0x00	; 0
    2f28:	e5 e5       	ldi	r30, 0x55	; 85
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 60       	ori	r24, 0x08	; 8
    2f30:	8c 93       	st	X, r24
    2f32:	2a c0       	rjmp	.+84     	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            }
            break;
        case EXTI2:
            SET_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    2f34:	ab e5       	ldi	r26, 0x5B	; 91
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	eb e5       	ldi	r30, 0x5B	; 91
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	80 62       	ori	r24, 0x20	; 32
    2f40:	8c 93       	st	X, r24
            switch (Copy_u8_EXTI_Edge)
    2f42:	8b 81       	ldd	r24, Y+3	; 0x03
    2f44:	28 2f       	mov	r18, r24
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	3d 83       	std	Y+5, r19	; 0x05
    2f4a:	2c 83       	std	Y+4, r18	; 0x04
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	91 05       	cpc	r25, r1
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <EXTI_enu_Enable+0x20e>
    2f56:	2c 81       	ldd	r18, Y+4	; 0x04
    2f58:	3d 81       	ldd	r19, Y+5	; 0x05
    2f5a:	23 30       	cpi	r18, 0x03	; 3
    2f5c:	31 05       	cpc	r19, r1
    2f5e:	49 f0       	breq	.+18     	; 0x2f72 <EXTI_enu_Enable+0x21e>
    2f60:	10 c0       	rjmp	.+32     	; 0x2f82 <EXTI_enu_Enable+0x22e>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    2f62:	a4 e5       	ldi	r26, 0x54	; 84
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e4 e5       	ldi	r30, 0x54	; 84
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8f 7b       	andi	r24, 0xBF	; 191
    2f6e:	8c 93       	st	X, r24
    2f70:	0b c0       	rjmp	.+22     	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    2f72:	a4 e5       	ldi	r26, 0x54	; 84
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e4 e5       	ldi	r30, 0x54	; 84
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 64       	ori	r24, 0x40	; 64
    2f7e:	8c 93       	st	X, r24
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <EXTI_enu_Enable+0x234>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    2f82:	19 82       	std	Y+1, r1	; 0x01
    2f84:	01 c0       	rjmp	.+2      	; 0x2f88 <EXTI_enu_Enable+0x234>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    2f86:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f8a:	2b 96       	adiw	r28, 0x0b	; 11
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <EXTI_enu_Disable>:

ES_t EXTI_enu_Disable(u8 Copy_u8_EXTI_Index)
{
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <EXTI_enu_Disable+0x6>
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <EXTI_enu_Disable+0x8>
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2)
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	83 30       	cpi	r24, 0x03	; 3
    2fb2:	58 f5       	brcc	.+86     	; 0x300a <EXTI_enu_Disable+0x6e>
    {
        switch (Copy_u8_EXTI_Index)
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	28 2f       	mov	r18, r24
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	3c 83       	std	Y+4, r19	; 0x04
    2fbc:	2b 83       	std	Y+3, r18	; 0x03
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	89 f0       	breq	.+34     	; 0x2fea <EXTI_enu_Disable+0x4e>
    2fc8:	2b 81       	ldd	r18, Y+3	; 0x03
    2fca:	3c 81       	ldd	r19, Y+4	; 0x04
    2fcc:	22 30       	cpi	r18, 0x02	; 2
    2fce:	31 05       	cpc	r19, r1
    2fd0:	a1 f0       	breq	.+40     	; 0x2ffa <EXTI_enu_Disable+0x5e>
    2fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	c9 f4       	brne	.+50     	; 0x300c <EXTI_enu_Disable+0x70>
        {
        case EXTI0:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN0);
    2fda:	ab e5       	ldi	r26, 0x5B	; 91
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	eb e5       	ldi	r30, 0x5B	; 91
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	8f 7b       	andi	r24, 0xBF	; 191
    2fe6:	8c 93       	st	X, r24
    2fe8:	11 c0       	rjmp	.+34     	; 0x300c <EXTI_enu_Disable+0x70>
            break;
        case EXTI1:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN1);
    2fea:	ab e5       	ldi	r26, 0x5B	; 91
    2fec:	b0 e0       	ldi	r27, 0x00	; 0
    2fee:	eb e5       	ldi	r30, 0x5B	; 91
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	8f 77       	andi	r24, 0x7F	; 127
    2ff6:	8c 93       	st	X, r24
    2ff8:	09 c0       	rjmp	.+18     	; 0x300c <EXTI_enu_Disable+0x70>
            break;
        case EXTI2:
            CLR_BIT(EXTI_U8_GICR, EXTI_U8_IN2);
    2ffa:	ab e5       	ldi	r26, 0x5B	; 91
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	eb e5       	ldi	r30, 0x5B	; 91
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	8f 7d       	andi	r24, 0xDF	; 223
    3006:	8c 93       	st	X, r24
    3008:	01 c0       	rjmp	.+2      	; 0x300c <EXTI_enu_Disable+0x70>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    300a:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    300c:	89 81       	ldd	r24, Y+1	; 0x01
}
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <EXTI_enu_setSenseControl>:
ES_t EXTI_enu_setSenseControl(u8 Copy_u8_EXTI_Index,u8 Copy_u8_EXTI_Edge){
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	2b 97       	sbiw	r28, 0x0b	; 11
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	8a 83       	std	Y+2, r24	; 0x02
    3032:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_EXTI_Index <= EXTI2 && Copy_u8_EXTI_Edge <= MAX_CHANGE_CASES)
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	08 f0       	brcs	.+2      	; 0x3040 <EXTI_enu_setSenseControl+0x24>
    303e:	f2 c0       	rjmp	.+484    	; 0x3224 <EXTI_enu_setSenseControl+0x208>
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	84 30       	cpi	r24, 0x04	; 4
    3044:	08 f0       	brcs	.+2      	; 0x3048 <EXTI_enu_setSenseControl+0x2c>
    3046:	ee c0       	rjmp	.+476    	; 0x3224 <EXTI_enu_setSenseControl+0x208>
    {
        switch (Copy_u8_EXTI_Index)
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	3b 87       	std	Y+11, r19	; 0x0b
    3050:	2a 87       	std	Y+10, r18	; 0x0a
    3052:	8a 85       	ldd	r24, Y+10	; 0x0a
    3054:	9b 85       	ldd	r25, Y+11	; 0x0b
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	91 05       	cpc	r25, r1
    305a:	09 f4       	brne	.+2      	; 0x305e <EXTI_enu_setSenseControl+0x42>
    305c:	66 c0       	rjmp	.+204    	; 0x312a <EXTI_enu_setSenseControl+0x10e>
    305e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3060:	3b 85       	ldd	r19, Y+11	; 0x0b
    3062:	22 30       	cpi	r18, 0x02	; 2
    3064:	31 05       	cpc	r19, r1
    3066:	09 f4       	brne	.+2      	; 0x306a <EXTI_enu_setSenseControl+0x4e>
    3068:	bb c0       	rjmp	.+374    	; 0x31e0 <EXTI_enu_setSenseControl+0x1c4>
    306a:	8a 85       	ldd	r24, Y+10	; 0x0a
    306c:	9b 85       	ldd	r25, Y+11	; 0x0b
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	09 f0       	breq	.+2      	; 0x3074 <EXTI_enu_setSenseControl+0x58>
    3072:	d9 c0       	rjmp	.+434    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
        {
        case EXTI0:
            switch (Copy_u8_EXTI_Edge)
    3074:	8b 81       	ldd	r24, Y+3	; 0x03
    3076:	28 2f       	mov	r18, r24
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	39 87       	std	Y+9, r19	; 0x09
    307c:	28 87       	std	Y+8, r18	; 0x08
    307e:	88 85       	ldd	r24, Y+8	; 0x08
    3080:	99 85       	ldd	r25, Y+9	; 0x09
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	91 05       	cpc	r25, r1
    3086:	21 f1       	breq	.+72     	; 0x30d0 <EXTI_enu_setSenseControl+0xb4>
    3088:	28 85       	ldd	r18, Y+8	; 0x08
    308a:	39 85       	ldd	r19, Y+9	; 0x09
    308c:	22 30       	cpi	r18, 0x02	; 2
    308e:	31 05       	cpc	r19, r1
    3090:	2c f4       	brge	.+10     	; 0x309c <EXTI_enu_setSenseControl+0x80>
    3092:	88 85       	ldd	r24, Y+8	; 0x08
    3094:	99 85       	ldd	r25, Y+9	; 0x09
    3096:	00 97       	sbiw	r24, 0x00	; 0
    3098:	61 f0       	breq	.+24     	; 0x30b2 <EXTI_enu_setSenseControl+0x96>
    309a:	c5 c0       	rjmp	.+394    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
    309c:	28 85       	ldd	r18, Y+8	; 0x08
    309e:	39 85       	ldd	r19, Y+9	; 0x09
    30a0:	22 30       	cpi	r18, 0x02	; 2
    30a2:	31 05       	cpc	r19, r1
    30a4:	21 f1       	breq	.+72     	; 0x30ee <EXTI_enu_setSenseControl+0xd2>
    30a6:	88 85       	ldd	r24, Y+8	; 0x08
    30a8:	99 85       	ldd	r25, Y+9	; 0x09
    30aa:	83 30       	cpi	r24, 0x03	; 3
    30ac:	91 05       	cpc	r25, r1
    30ae:	71 f1       	breq	.+92     	; 0x310c <EXTI_enu_setSenseControl+0xf0>
    30b0:	ba c0       	rjmp	.+372    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    30b2:	a5 e5       	ldi	r26, 0x55	; 85
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	e5 e5       	ldi	r30, 0x55	; 85
    30b8:	f0 e0       	ldi	r31, 0x00	; 0
    30ba:	80 81       	ld	r24, Z
    30bc:	8e 7f       	andi	r24, 0xFE	; 254
    30be:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    30c0:	a5 e5       	ldi	r26, 0x55	; 85
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e5 e5       	ldi	r30, 0x55	; 85
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	8d 7f       	andi	r24, 0xFD	; 253
    30cc:	8c 93       	st	X, r24
    30ce:	ab c0       	rjmp	.+342    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    30d0:	a5 e5       	ldi	r26, 0x55	; 85
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e5 e5       	ldi	r30, 0x55	; 85
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	81 60       	ori	r24, 0x01	; 1
    30dc:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    30de:	a5 e5       	ldi	r26, 0x55	; 85
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e5 e5       	ldi	r30, 0x55	; 85
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8d 7f       	andi	r24, 0xFD	; 253
    30ea:	8c 93       	st	X, r24
    30ec:	9c c0       	rjmp	.+312    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    30ee:	a5 e5       	ldi	r26, 0x55	; 85
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e5 e5       	ldi	r30, 0x55	; 85
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	8e 7f       	andi	r24, 0xFE	; 254
    30fa:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    30fc:	a5 e5       	ldi	r26, 0x55	; 85
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e5 e5       	ldi	r30, 0x55	; 85
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	82 60       	ori	r24, 0x02	; 2
    3108:	8c 93       	st	X, r24
    310a:	8d c0       	rjmp	.+282    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC00);
    310c:	a5 e5       	ldi	r26, 0x55	; 85
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	e5 e5       	ldi	r30, 0x55	; 85
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	81 60       	ori	r24, 0x01	; 1
    3118:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC01);
    311a:	a5 e5       	ldi	r26, 0x55	; 85
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e5 e5       	ldi	r30, 0x55	; 85
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	82 60       	ori	r24, 0x02	; 2
    3126:	8c 93       	st	X, r24
    3128:	7e c0       	rjmp	.+252    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI1:
            switch (Copy_u8_EXTI_Edge)
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	28 2f       	mov	r18, r24
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	3f 83       	std	Y+7, r19	; 0x07
    3132:	2e 83       	std	Y+6, r18	; 0x06
    3134:	8e 81       	ldd	r24, Y+6	; 0x06
    3136:	9f 81       	ldd	r25, Y+7	; 0x07
    3138:	81 30       	cpi	r24, 0x01	; 1
    313a:	91 05       	cpc	r25, r1
    313c:	21 f1       	breq	.+72     	; 0x3186 <EXTI_enu_setSenseControl+0x16a>
    313e:	2e 81       	ldd	r18, Y+6	; 0x06
    3140:	3f 81       	ldd	r19, Y+7	; 0x07
    3142:	22 30       	cpi	r18, 0x02	; 2
    3144:	31 05       	cpc	r19, r1
    3146:	2c f4       	brge	.+10     	; 0x3152 <EXTI_enu_setSenseControl+0x136>
    3148:	8e 81       	ldd	r24, Y+6	; 0x06
    314a:	9f 81       	ldd	r25, Y+7	; 0x07
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	61 f0       	breq	.+24     	; 0x3168 <EXTI_enu_setSenseControl+0x14c>
    3150:	6a c0       	rjmp	.+212    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
    3152:	2e 81       	ldd	r18, Y+6	; 0x06
    3154:	3f 81       	ldd	r19, Y+7	; 0x07
    3156:	22 30       	cpi	r18, 0x02	; 2
    3158:	31 05       	cpc	r19, r1
    315a:	21 f1       	breq	.+72     	; 0x31a4 <EXTI_enu_setSenseControl+0x188>
    315c:	8e 81       	ldd	r24, Y+6	; 0x06
    315e:	9f 81       	ldd	r25, Y+7	; 0x07
    3160:	83 30       	cpi	r24, 0x03	; 3
    3162:	91 05       	cpc	r25, r1
    3164:	71 f1       	breq	.+92     	; 0x31c2 <EXTI_enu_setSenseControl+0x1a6>
    3166:	5f c0       	rjmp	.+190    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
            {
            case LOW_LEVEL:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3168:	a5 e5       	ldi	r26, 0x55	; 85
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	e5 e5       	ldi	r30, 0x55	; 85
    316e:	f0 e0       	ldi	r31, 0x00	; 0
    3170:	80 81       	ld	r24, Z
    3172:	8b 7f       	andi	r24, 0xFB	; 251
    3174:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3176:	a5 e5       	ldi	r26, 0x55	; 85
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e5 e5       	ldi	r30, 0x55	; 85
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	87 7f       	andi	r24, 0xF7	; 247
    3182:	8c 93       	st	X, r24
    3184:	50 c0       	rjmp	.+160    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case ANY_LOGICAL_CHANGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    3186:	a5 e5       	ldi	r26, 0x55	; 85
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e5 e5       	ldi	r30, 0x55	; 85
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	84 60       	ori	r24, 0x04	; 4
    3192:	8c 93       	st	X, r24
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    3194:	a5 e5       	ldi	r26, 0x55	; 85
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	e5 e5       	ldi	r30, 0x55	; 85
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	87 7f       	andi	r24, 0xF7	; 247
    31a0:	8c 93       	st	X, r24
    31a2:	41 c0       	rjmp	.+130    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    31a4:	a5 e5       	ldi	r26, 0x55	; 85
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e5 e5       	ldi	r30, 0x55	; 85
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8b 7f       	andi	r24, 0xFB	; 251
    31b0:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    31b2:	a5 e5       	ldi	r26, 0x55	; 85
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e5 e5       	ldi	r30, 0x55	; 85
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	88 60       	ori	r24, 0x08	; 8
    31be:	8c 93       	st	X, r24
    31c0:	32 c0       	rjmp	.+100    	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC10);
    31c2:	a5 e5       	ldi	r26, 0x55	; 85
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	e5 e5       	ldi	r30, 0x55	; 85
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	84 60       	ori	r24, 0x04	; 4
    31ce:	8c 93       	st	X, r24
                SET_BIT(EXTI_U8_MCUCR, EXTI_U8_ISC11);
    31d0:	a5 e5       	ldi	r26, 0x55	; 85
    31d2:	b0 e0       	ldi	r27, 0x00	; 0
    31d4:	e5 e5       	ldi	r30, 0x55	; 85
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	88 60       	ori	r24, 0x08	; 8
    31dc:	8c 93       	st	X, r24
    31de:	23 c0       	rjmp	.+70     	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            }
            break;
        case EXTI2:
            switch (Copy_u8_EXTI_Edge)
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	3d 83       	std	Y+5, r19	; 0x05
    31e8:	2c 83       	std	Y+4, r18	; 0x04
    31ea:	8c 81       	ldd	r24, Y+4	; 0x04
    31ec:	9d 81       	ldd	r25, Y+5	; 0x05
    31ee:	82 30       	cpi	r24, 0x02	; 2
    31f0:	91 05       	cpc	r25, r1
    31f2:	31 f0       	breq	.+12     	; 0x3200 <EXTI_enu_setSenseControl+0x1e4>
    31f4:	2c 81       	ldd	r18, Y+4	; 0x04
    31f6:	3d 81       	ldd	r19, Y+5	; 0x05
    31f8:	23 30       	cpi	r18, 0x03	; 3
    31fa:	31 05       	cpc	r19, r1
    31fc:	49 f0       	breq	.+18     	; 0x3210 <EXTI_enu_setSenseControl+0x1f4>
    31fe:	10 c0       	rjmp	.+32     	; 0x3220 <EXTI_enu_setSenseControl+0x204>
            {
            case FALLING_EDGE:
                CLR_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3200:	a4 e5       	ldi	r26, 0x54	; 84
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e4 e5       	ldi	r30, 0x54	; 84
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	8f 7b       	andi	r24, 0xBF	; 191
    320c:	8c 93       	st	X, r24
    320e:	0b c0       	rjmp	.+22     	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            case RISING_EDGE:
                SET_BIT(EXTI_U8_MCUCSR, EXTI_U8_ISC2);
    3210:	a4 e5       	ldi	r26, 0x54	; 84
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e4 e5       	ldi	r30, 0x54	; 84
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	80 64       	ori	r24, 0x40	; 64
    321c:	8c 93       	st	X, r24
    321e:	03 c0       	rjmp	.+6      	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
                break;
            default:
                Local_u8_errorState = STATE_NOT_OK;
    3220:	19 82       	std	Y+1, r1	; 0x01
    3222:	01 c0       	rjmp	.+2      	; 0x3226 <EXTI_enu_setSenseControl+0x20a>
            break;
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3224:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3226:	89 81       	ldd	r24, Y+1	; 0x01
}
    3228:	2b 96       	adiw	r28, 0x0b	; 11
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <EXTI_enu_setCallBack>:
ES_t EXTI_enu_setCallBack(void (*Copy_pf_ISR)(void), u8 Copy_u8_ISR_Index)
{
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	00 d0       	rcall	.+0      	; 0x3240 <EXTI_enu_setCallBack+0x6>
    3240:	00 d0       	rcall	.+0      	; 0x3242 <EXTI_enu_setCallBack+0x8>
    3242:	cd b7       	in	r28, 0x3d	; 61
    3244:	de b7       	in	r29, 0x3e	; 62
    3246:	9b 83       	std	Y+3, r25	; 0x03
    3248:	8a 83       	std	Y+2, r24	; 0x02
    324a:	6c 83       	std	Y+4, r22	; 0x04
    u8 Local_u8_errorState = STATE_OK;
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pf_ISR != NULL && Copy_u8_ISR_Index <= EXTI2)
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
    3252:	9b 81       	ldd	r25, Y+3	; 0x03
    3254:	00 97       	sbiw	r24, 0x00	; 0
    3256:	81 f0       	breq	.+32     	; 0x3278 <EXTI_enu_setCallBack+0x3e>
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	83 30       	cpi	r24, 0x03	; 3
    325c:	68 f4       	brcc	.+26     	; 0x3278 <EXTI_enu_setCallBack+0x3e>
    {
        Apf_EXTI[Copy_u8_ISR_Index] = Copy_pf_ISR;
    325e:	8c 81       	ldd	r24, Y+4	; 0x04
    3260:	88 2f       	mov	r24, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	fc 01       	movw	r30, r24
    326a:	e9 55       	subi	r30, 0x59	; 89
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	8a 81       	ldd	r24, Y+2	; 0x02
    3270:	9b 81       	ldd	r25, Y+3	; 0x03
    3272:	91 83       	std	Z+1, r25	; 0x01
    3274:	80 83       	st	Z, r24
    3276:	01 c0       	rjmp	.+2      	; 0x327a <EXTI_enu_setCallBack+0x40>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    3278:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    327a:	89 81       	ldd	r24, Y+1	; 0x01
}
    327c:	0f 90       	pop	r0
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <__vector_1>:
/*ISR OF EXTI0*/
void __vector_1(void)
{
    328a:	1f 92       	push	r1
    328c:	0f 92       	push	r0
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	0f 92       	push	r0
    3292:	11 24       	eor	r1, r1
    3294:	2f 93       	push	r18
    3296:	3f 93       	push	r19
    3298:	4f 93       	push	r20
    329a:	5f 93       	push	r21
    329c:	6f 93       	push	r22
    329e:	7f 93       	push	r23
    32a0:	8f 93       	push	r24
    32a2:	9f 93       	push	r25
    32a4:	af 93       	push	r26
    32a6:	bf 93       	push	r27
    32a8:	ef 93       	push	r30
    32aa:	ff 93       	push	r31
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	cd b7       	in	r28, 0x3d	; 61
    32b2:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI0] != NULL)
    32b4:	80 91 a7 00 	lds	r24, 0x00A7
    32b8:	90 91 a8 00 	lds	r25, 0x00A8
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	29 f0       	breq	.+10     	; 0x32ca <__vector_1+0x40>
        Apf_EXTI[EXTI0]();
    32c0:	e0 91 a7 00 	lds	r30, 0x00A7
    32c4:	f0 91 a8 00 	lds	r31, 0x00A8
    32c8:	09 95       	icall
}
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	ff 91       	pop	r31
    32d0:	ef 91       	pop	r30
    32d2:	bf 91       	pop	r27
    32d4:	af 91       	pop	r26
    32d6:	9f 91       	pop	r25
    32d8:	8f 91       	pop	r24
    32da:	7f 91       	pop	r23
    32dc:	6f 91       	pop	r22
    32de:	5f 91       	pop	r21
    32e0:	4f 91       	pop	r20
    32e2:	3f 91       	pop	r19
    32e4:	2f 91       	pop	r18
    32e6:	0f 90       	pop	r0
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	0f 90       	pop	r0
    32ec:	1f 90       	pop	r1
    32ee:	18 95       	reti

000032f0 <__vector_2>:
/*ISR OF EXTI1*/
void __vector_2(void)
{
    32f0:	1f 92       	push	r1
    32f2:	0f 92       	push	r0
    32f4:	0f b6       	in	r0, 0x3f	; 63
    32f6:	0f 92       	push	r0
    32f8:	11 24       	eor	r1, r1
    32fa:	2f 93       	push	r18
    32fc:	3f 93       	push	r19
    32fe:	4f 93       	push	r20
    3300:	5f 93       	push	r21
    3302:	6f 93       	push	r22
    3304:	7f 93       	push	r23
    3306:	8f 93       	push	r24
    3308:	9f 93       	push	r25
    330a:	af 93       	push	r26
    330c:	bf 93       	push	r27
    330e:	ef 93       	push	r30
    3310:	ff 93       	push	r31
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI1] != NULL)
    331a:	80 91 a9 00 	lds	r24, 0x00A9
    331e:	90 91 aa 00 	lds	r25, 0x00AA
    3322:	00 97       	sbiw	r24, 0x00	; 0
    3324:	29 f0       	breq	.+10     	; 0x3330 <__vector_2+0x40>
        Apf_EXTI[EXTI1]();
    3326:	e0 91 a9 00 	lds	r30, 0x00A9
    332a:	f0 91 aa 00 	lds	r31, 0x00AA
    332e:	09 95       	icall
}
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	ff 91       	pop	r31
    3336:	ef 91       	pop	r30
    3338:	bf 91       	pop	r27
    333a:	af 91       	pop	r26
    333c:	9f 91       	pop	r25
    333e:	8f 91       	pop	r24
    3340:	7f 91       	pop	r23
    3342:	6f 91       	pop	r22
    3344:	5f 91       	pop	r21
    3346:	4f 91       	pop	r20
    3348:	3f 91       	pop	r19
    334a:	2f 91       	pop	r18
    334c:	0f 90       	pop	r0
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	0f 90       	pop	r0
    3352:	1f 90       	pop	r1
    3354:	18 95       	reti

00003356 <__vector_3>:
/*ISR OF EXTI2*/
void __vector_3(void)
{
    3356:	1f 92       	push	r1
    3358:	0f 92       	push	r0
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	0f 92       	push	r0
    335e:	11 24       	eor	r1, r1
    3360:	2f 93       	push	r18
    3362:	3f 93       	push	r19
    3364:	4f 93       	push	r20
    3366:	5f 93       	push	r21
    3368:	6f 93       	push	r22
    336a:	7f 93       	push	r23
    336c:	8f 93       	push	r24
    336e:	9f 93       	push	r25
    3370:	af 93       	push	r26
    3372:	bf 93       	push	r27
    3374:	ef 93       	push	r30
    3376:	ff 93       	push	r31
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    if (Apf_EXTI[EXTI2] != NULL)
    3380:	80 91 ab 00 	lds	r24, 0x00AB
    3384:	90 91 ac 00 	lds	r25, 0x00AC
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	29 f0       	breq	.+10     	; 0x3396 <__vector_3+0x40>
        Apf_EXTI[EXTI2]();
    338c:	e0 91 ab 00 	lds	r30, 0x00AB
    3390:	f0 91 ac 00 	lds	r31, 0x00AC
    3394:	09 95       	icall
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	ff 91       	pop	r31
    339c:	ef 91       	pop	r30
    339e:	bf 91       	pop	r27
    33a0:	af 91       	pop	r26
    33a2:	9f 91       	pop	r25
    33a4:	8f 91       	pop	r24
    33a6:	7f 91       	pop	r23
    33a8:	6f 91       	pop	r22
    33aa:	5f 91       	pop	r21
    33ac:	4f 91       	pop	r20
    33ae:	3f 91       	pop	r19
    33b0:	2f 91       	pop	r18
    33b2:	0f 90       	pop	r0
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	0f 90       	pop	r0
    33b8:	1f 90       	pop	r1
    33ba:	18 95       	reti

000033bc <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    33c4:	ea e3       	ldi	r30, 0x3A	; 58
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	8f e7       	ldi	r24, 0x7F	; 127
    33ca:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    33cc:	e7 e3       	ldi	r30, 0x37	; 55
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	8d ef       	ldi	r24, 0xFD	; 253
    33d2:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    33d4:	e4 e3       	ldi	r30, 0x34	; 52
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	83 e1       	ldi	r24, 0x13	; 19
    33da:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    33dc:	e1 e3       	ldi	r30, 0x31	; 49
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    33e2:	eb e3       	ldi	r30, 0x3B	; 59
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    33e8:	e8 e3       	ldi	r30, 0x38	; 56
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	84 ef       	ldi	r24, 0xF4	; 244
    33ee:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    33f0:	e5 e3       	ldi	r30, 0x35	; 53
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    33f6:	e2 e3       	ldi	r30, 0x32	; 50
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	8c e3       	ldi	r24, 0x3C	; 60
    33fc:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
}
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	cd b7       	in	r28, 0x3d	; 61
    340c:	de b7       	in	r29, 0x3e	; 62
    340e:	2e 97       	sbiw	r28, 0x0e	; 14
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	f8 94       	cli
    3414:	de bf       	out	0x3e, r29	; 62
    3416:	0f be       	out	0x3f, r0	; 63
    3418:	cd bf       	out	0x3d, r28	; 61
    341a:	8a 83       	std	Y+2, r24	; 0x02
    341c:	6b 83       	std	Y+3, r22	; 0x03
    341e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	84 30       	cpi	r24, 0x04	; 4
    3428:	08 f0       	brcs	.+2      	; 0x342c <DIO_enu_SetPinDirection+0x26>
    342a:	0c c1       	rjmp	.+536    	; 0x3644 <DIO_enu_SetPinDirection+0x23e>
    342c:	8b 81       	ldd	r24, Y+3	; 0x03
    342e:	88 30       	cpi	r24, 0x08	; 8
    3430:	08 f0       	brcs	.+2      	; 0x3434 <DIO_enu_SetPinDirection+0x2e>
    3432:	08 c1       	rjmp	.+528    	; 0x3644 <DIO_enu_SetPinDirection+0x23e>
    3434:	8c 81       	ldd	r24, Y+4	; 0x04
    3436:	81 30       	cpi	r24, 0x01	; 1
    3438:	21 f0       	breq	.+8      	; 0x3442 <DIO_enu_SetPinDirection+0x3c>
    343a:	8c 81       	ldd	r24, Y+4	; 0x04
    343c:	88 23       	and	r24, r24
    343e:	09 f0       	breq	.+2      	; 0x3442 <DIO_enu_SetPinDirection+0x3c>
    3440:	01 c1       	rjmp	.+514    	; 0x3644 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	3e 87       	std	Y+14, r19	; 0x0e
    344a:	2d 87       	std	Y+13, r18	; 0x0d
    344c:	8d 85       	ldd	r24, Y+13	; 0x0d
    344e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	91 05       	cpc	r25, r1
    3454:	09 f4       	brne	.+2      	; 0x3458 <DIO_enu_SetPinDirection+0x52>
    3456:	4f c0       	rjmp	.+158    	; 0x34f6 <DIO_enu_SetPinDirection+0xf0>
    3458:	2d 85       	ldd	r18, Y+13	; 0x0d
    345a:	3e 85       	ldd	r19, Y+14	; 0x0e
    345c:	22 30       	cpi	r18, 0x02	; 2
    345e:	31 05       	cpc	r19, r1
    3460:	2c f4       	brge	.+10     	; 0x346c <DIO_enu_SetPinDirection+0x66>
    3462:	8d 85       	ldd	r24, Y+13	; 0x0d
    3464:	9e 85       	ldd	r25, Y+14	; 0x0e
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	71 f0       	breq	.+28     	; 0x3486 <DIO_enu_SetPinDirection+0x80>
    346a:	ed c0       	rjmp	.+474    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
    346c:	2d 85       	ldd	r18, Y+13	; 0x0d
    346e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3470:	22 30       	cpi	r18, 0x02	; 2
    3472:	31 05       	cpc	r19, r1
    3474:	09 f4       	brne	.+2      	; 0x3478 <DIO_enu_SetPinDirection+0x72>
    3476:	77 c0       	rjmp	.+238    	; 0x3566 <DIO_enu_SetPinDirection+0x160>
    3478:	8d 85       	ldd	r24, Y+13	; 0x0d
    347a:	9e 85       	ldd	r25, Y+14	; 0x0e
    347c:	83 30       	cpi	r24, 0x03	; 3
    347e:	91 05       	cpc	r25, r1
    3480:	09 f4       	brne	.+2      	; 0x3484 <DIO_enu_SetPinDirection+0x7e>
    3482:	a9 c0       	rjmp	.+338    	; 0x35d6 <DIO_enu_SetPinDirection+0x1d0>
    3484:	e0 c0       	rjmp	.+448    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    3486:	8c 81       	ldd	r24, Y+4	; 0x04
    3488:	28 2f       	mov	r18, r24
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	3c 87       	std	Y+12, r19	; 0x0c
    348e:	2b 87       	std	Y+11, r18	; 0x0b
    3490:	8b 85       	ldd	r24, Y+11	; 0x0b
    3492:	9c 85       	ldd	r25, Y+12	; 0x0c
    3494:	00 97       	sbiw	r24, 0x00	; 0
    3496:	d1 f0       	breq	.+52     	; 0x34cc <DIO_enu_SetPinDirection+0xc6>
    3498:	2b 85       	ldd	r18, Y+11	; 0x0b
    349a:	3c 85       	ldd	r19, Y+12	; 0x0c
    349c:	21 30       	cpi	r18, 0x01	; 1
    349e:	31 05       	cpc	r19, r1
    34a0:	09 f0       	breq	.+2      	; 0x34a4 <DIO_enu_SetPinDirection+0x9e>
    34a2:	d1 c0       	rjmp	.+418    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    34a4:	aa e3       	ldi	r26, 0x3A	; 58
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	ea e3       	ldi	r30, 0x3A	; 58
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	48 2f       	mov	r20, r24
    34b0:	8b 81       	ldd	r24, Y+3	; 0x03
    34b2:	28 2f       	mov	r18, r24
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	02 2e       	mov	r0, r18
    34bc:	02 c0       	rjmp	.+4      	; 0x34c2 <DIO_enu_SetPinDirection+0xbc>
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	0a 94       	dec	r0
    34c4:	e2 f7       	brpl	.-8      	; 0x34be <DIO_enu_SetPinDirection+0xb8>
    34c6:	84 2b       	or	r24, r20
    34c8:	8c 93       	st	X, r24
    34ca:	bd c0       	rjmp	.+378    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    34cc:	aa e3       	ldi	r26, 0x3A	; 58
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	ea e3       	ldi	r30, 0x3A	; 58
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	48 2f       	mov	r20, r24
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	02 2e       	mov	r0, r18
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <DIO_enu_SetPinDirection+0xe4>
    34e6:	88 0f       	add	r24, r24
    34e8:	99 1f       	adc	r25, r25
    34ea:	0a 94       	dec	r0
    34ec:	e2 f7       	brpl	.-8      	; 0x34e6 <DIO_enu_SetPinDirection+0xe0>
    34ee:	80 95       	com	r24
    34f0:	84 23       	and	r24, r20
    34f2:	8c 93       	st	X, r24
    34f4:	a8 c0       	rjmp	.+336    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    34f6:	8c 81       	ldd	r24, Y+4	; 0x04
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	3a 87       	std	Y+10, r19	; 0x0a
    34fe:	29 87       	std	Y+9, r18	; 0x09
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	00 97       	sbiw	r24, 0x00	; 0
    3506:	d1 f0       	breq	.+52     	; 0x353c <DIO_enu_SetPinDirection+0x136>
    3508:	29 85       	ldd	r18, Y+9	; 0x09
    350a:	3a 85       	ldd	r19, Y+10	; 0x0a
    350c:	21 30       	cpi	r18, 0x01	; 1
    350e:	31 05       	cpc	r19, r1
    3510:	09 f0       	breq	.+2      	; 0x3514 <DIO_enu_SetPinDirection+0x10e>
    3512:	99 c0       	rjmp	.+306    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    3514:	a7 e3       	ldi	r26, 0x37	; 55
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	e7 e3       	ldi	r30, 0x37	; 55
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	48 2f       	mov	r20, r24
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	02 2e       	mov	r0, r18
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <DIO_enu_SetPinDirection+0x12c>
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	0a 94       	dec	r0
    3534:	e2 f7       	brpl	.-8      	; 0x352e <DIO_enu_SetPinDirection+0x128>
    3536:	84 2b       	or	r24, r20
    3538:	8c 93       	st	X, r24
    353a:	85 c0       	rjmp	.+266    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    353c:	a7 e3       	ldi	r26, 0x37	; 55
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	e7 e3       	ldi	r30, 0x37	; 55
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	48 2f       	mov	r20, r24
    3548:	8b 81       	ldd	r24, Y+3	; 0x03
    354a:	28 2f       	mov	r18, r24
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	02 2e       	mov	r0, r18
    3554:	02 c0       	rjmp	.+4      	; 0x355a <DIO_enu_SetPinDirection+0x154>
    3556:	88 0f       	add	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	0a 94       	dec	r0
    355c:	e2 f7       	brpl	.-8      	; 0x3556 <DIO_enu_SetPinDirection+0x150>
    355e:	80 95       	com	r24
    3560:	84 23       	and	r24, r20
    3562:	8c 93       	st	X, r24
    3564:	70 c0       	rjmp	.+224    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    3566:	8c 81       	ldd	r24, Y+4	; 0x04
    3568:	28 2f       	mov	r18, r24
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	38 87       	std	Y+8, r19	; 0x08
    356e:	2f 83       	std	Y+7, r18	; 0x07
    3570:	8f 81       	ldd	r24, Y+7	; 0x07
    3572:	98 85       	ldd	r25, Y+8	; 0x08
    3574:	00 97       	sbiw	r24, 0x00	; 0
    3576:	d1 f0       	breq	.+52     	; 0x35ac <DIO_enu_SetPinDirection+0x1a6>
    3578:	2f 81       	ldd	r18, Y+7	; 0x07
    357a:	38 85       	ldd	r19, Y+8	; 0x08
    357c:	21 30       	cpi	r18, 0x01	; 1
    357e:	31 05       	cpc	r19, r1
    3580:	09 f0       	breq	.+2      	; 0x3584 <DIO_enu_SetPinDirection+0x17e>
    3582:	61 c0       	rjmp	.+194    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    3584:	a4 e3       	ldi	r26, 0x34	; 52
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e4 e3       	ldi	r30, 0x34	; 52
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	48 2f       	mov	r20, r24
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	81 e0       	ldi	r24, 0x01	; 1
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	02 2e       	mov	r0, r18
    359c:	02 c0       	rjmp	.+4      	; 0x35a2 <DIO_enu_SetPinDirection+0x19c>
    359e:	88 0f       	add	r24, r24
    35a0:	99 1f       	adc	r25, r25
    35a2:	0a 94       	dec	r0
    35a4:	e2 f7       	brpl	.-8      	; 0x359e <DIO_enu_SetPinDirection+0x198>
    35a6:	84 2b       	or	r24, r20
    35a8:	8c 93       	st	X, r24
    35aa:	4d c0       	rjmp	.+154    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    35ac:	a4 e3       	ldi	r26, 0x34	; 52
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	e4 e3       	ldi	r30, 0x34	; 52
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	48 2f       	mov	r20, r24
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	28 2f       	mov	r18, r24
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	02 2e       	mov	r0, r18
    35c4:	02 c0       	rjmp	.+4      	; 0x35ca <DIO_enu_SetPinDirection+0x1c4>
    35c6:	88 0f       	add	r24, r24
    35c8:	99 1f       	adc	r25, r25
    35ca:	0a 94       	dec	r0
    35cc:	e2 f7       	brpl	.-8      	; 0x35c6 <DIO_enu_SetPinDirection+0x1c0>
    35ce:	80 95       	com	r24
    35d0:	84 23       	and	r24, r20
    35d2:	8c 93       	st	X, r24
    35d4:	38 c0       	rjmp	.+112    	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    35d6:	8c 81       	ldd	r24, Y+4	; 0x04
    35d8:	28 2f       	mov	r18, r24
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	3e 83       	std	Y+6, r19	; 0x06
    35de:	2d 83       	std	Y+5, r18	; 0x05
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	c9 f0       	breq	.+50     	; 0x361a <DIO_enu_SetPinDirection+0x214>
    35e8:	2d 81       	ldd	r18, Y+5	; 0x05
    35ea:	3e 81       	ldd	r19, Y+6	; 0x06
    35ec:	21 30       	cpi	r18, 0x01	; 1
    35ee:	31 05       	cpc	r19, r1
    35f0:	51 f5       	brne	.+84     	; 0x3646 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    35f2:	a1 e3       	ldi	r26, 0x31	; 49
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e1 e3       	ldi	r30, 0x31	; 49
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	48 2f       	mov	r20, r24
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	28 2f       	mov	r18, r24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	02 2e       	mov	r0, r18
    360a:	02 c0       	rjmp	.+4      	; 0x3610 <DIO_enu_SetPinDirection+0x20a>
    360c:	88 0f       	add	r24, r24
    360e:	99 1f       	adc	r25, r25
    3610:	0a 94       	dec	r0
    3612:	e2 f7       	brpl	.-8      	; 0x360c <DIO_enu_SetPinDirection+0x206>
    3614:	84 2b       	or	r24, r20
    3616:	8c 93       	st	X, r24
    3618:	16 c0       	rjmp	.+44     	; 0x3646 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    361a:	a1 e3       	ldi	r26, 0x31	; 49
    361c:	b0 e0       	ldi	r27, 0x00	; 0
    361e:	e1 e3       	ldi	r30, 0x31	; 49
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	80 81       	ld	r24, Z
    3624:	48 2f       	mov	r20, r24
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	28 2f       	mov	r18, r24
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	02 2e       	mov	r0, r18
    3632:	02 c0       	rjmp	.+4      	; 0x3638 <DIO_enu_SetPinDirection+0x232>
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	0a 94       	dec	r0
    363a:	e2 f7       	brpl	.-8      	; 0x3634 <DIO_enu_SetPinDirection+0x22e>
    363c:	80 95       	com	r24
    363e:	84 23       	and	r24, r20
    3640:	8c 93       	st	X, r24
    3642:	01 c0       	rjmp	.+2      	; 0x3646 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3644:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3646:	89 81       	ldd	r24, Y+1	; 0x01
}
    3648:	2e 96       	adiw	r28, 0x0e	; 14
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    365a:	df 93       	push	r29
    365c:	cf 93       	push	r28
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	2e 97       	sbiw	r28, 0x0e	; 14
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	de bf       	out	0x3e, r29	; 62
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	cd bf       	out	0x3d, r28	; 61
    366e:	8a 83       	std	Y+2, r24	; 0x02
    3670:	6b 83       	std	Y+3, r22	; 0x03
    3672:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    3678:	8a 81       	ldd	r24, Y+2	; 0x02
    367a:	84 30       	cpi	r24, 0x04	; 4
    367c:	08 f0       	brcs	.+2      	; 0x3680 <DIO_enu_SetPinValue+0x26>
    367e:	0c c1       	rjmp	.+536    	; 0x3898 <DIO_enu_SetPinValue+0x23e>
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	88 30       	cpi	r24, 0x08	; 8
    3684:	08 f0       	brcs	.+2      	; 0x3688 <DIO_enu_SetPinValue+0x2e>
    3686:	08 c1       	rjmp	.+528    	; 0x3898 <DIO_enu_SetPinValue+0x23e>
    3688:	8c 81       	ldd	r24, Y+4	; 0x04
    368a:	81 30       	cpi	r24, 0x01	; 1
    368c:	21 f0       	breq	.+8      	; 0x3696 <DIO_enu_SetPinValue+0x3c>
    368e:	8c 81       	ldd	r24, Y+4	; 0x04
    3690:	88 23       	and	r24, r24
    3692:	09 f0       	breq	.+2      	; 0x3696 <DIO_enu_SetPinValue+0x3c>
    3694:	01 c1       	rjmp	.+514    	; 0x3898 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	3e 87       	std	Y+14, r19	; 0x0e
    369e:	2d 87       	std	Y+13, r18	; 0x0d
    36a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	91 05       	cpc	r25, r1
    36a8:	09 f4       	brne	.+2      	; 0x36ac <DIO_enu_SetPinValue+0x52>
    36aa:	4f c0       	rjmp	.+158    	; 0x374a <DIO_enu_SetPinValue+0xf0>
    36ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    36ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    36b0:	22 30       	cpi	r18, 0x02	; 2
    36b2:	31 05       	cpc	r19, r1
    36b4:	2c f4       	brge	.+10     	; 0x36c0 <DIO_enu_SetPinValue+0x66>
    36b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	71 f0       	breq	.+28     	; 0x36da <DIO_enu_SetPinValue+0x80>
    36be:	ed c0       	rjmp	.+474    	; 0x389a <DIO_enu_SetPinValue+0x240>
    36c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    36c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    36c4:	22 30       	cpi	r18, 0x02	; 2
    36c6:	31 05       	cpc	r19, r1
    36c8:	09 f4       	brne	.+2      	; 0x36cc <DIO_enu_SetPinValue+0x72>
    36ca:	77 c0       	rjmp	.+238    	; 0x37ba <DIO_enu_SetPinValue+0x160>
    36cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	91 05       	cpc	r25, r1
    36d4:	09 f4       	brne	.+2      	; 0x36d8 <DIO_enu_SetPinValue+0x7e>
    36d6:	a9 c0       	rjmp	.+338    	; 0x382a <DIO_enu_SetPinValue+0x1d0>
    36d8:	e0 c0       	rjmp	.+448    	; 0x389a <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    36da:	8c 81       	ldd	r24, Y+4	; 0x04
    36dc:	28 2f       	mov	r18, r24
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	3c 87       	std	Y+12, r19	; 0x0c
    36e2:	2b 87       	std	Y+11, r18	; 0x0b
    36e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    36e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	d1 f0       	breq	.+52     	; 0x3720 <DIO_enu_SetPinValue+0xc6>
    36ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    36ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    36f0:	21 30       	cpi	r18, 0x01	; 1
    36f2:	31 05       	cpc	r19, r1
    36f4:	09 f0       	breq	.+2      	; 0x36f8 <DIO_enu_SetPinValue+0x9e>
    36f6:	d1 c0       	rjmp	.+418    	; 0x389a <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    36f8:	ab e3       	ldi	r26, 0x3B	; 59
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	eb e3       	ldi	r30, 0x3B	; 59
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	48 2f       	mov	r20, r24
    3704:	8b 81       	ldd	r24, Y+3	; 0x03
    3706:	28 2f       	mov	r18, r24
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	02 2e       	mov	r0, r18
    3710:	02 c0       	rjmp	.+4      	; 0x3716 <DIO_enu_SetPinValue+0xbc>
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	0a 94       	dec	r0
    3718:	e2 f7       	brpl	.-8      	; 0x3712 <DIO_enu_SetPinValue+0xb8>
    371a:	84 2b       	or	r24, r20
    371c:	8c 93       	st	X, r24
    371e:	bd c0       	rjmp	.+378    	; 0x389a <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    3720:	ab e3       	ldi	r26, 0x3B	; 59
    3722:	b0 e0       	ldi	r27, 0x00	; 0
    3724:	eb e3       	ldi	r30, 0x3B	; 59
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	80 81       	ld	r24, Z
    372a:	48 2f       	mov	r20, r24
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	02 2e       	mov	r0, r18
    3738:	02 c0       	rjmp	.+4      	; 0x373e <DIO_enu_SetPinValue+0xe4>
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	0a 94       	dec	r0
    3740:	e2 f7       	brpl	.-8      	; 0x373a <DIO_enu_SetPinValue+0xe0>
    3742:	80 95       	com	r24
    3744:	84 23       	and	r24, r20
    3746:	8c 93       	st	X, r24
    3748:	a8 c0       	rjmp	.+336    	; 0x389a <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    374a:	8c 81       	ldd	r24, Y+4	; 0x04
    374c:	28 2f       	mov	r18, r24
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	3a 87       	std	Y+10, r19	; 0x0a
    3752:	29 87       	std	Y+9, r18	; 0x09
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	9a 85       	ldd	r25, Y+10	; 0x0a
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	d1 f0       	breq	.+52     	; 0x3790 <DIO_enu_SetPinValue+0x136>
    375c:	29 85       	ldd	r18, Y+9	; 0x09
    375e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3760:	21 30       	cpi	r18, 0x01	; 1
    3762:	31 05       	cpc	r19, r1
    3764:	09 f0       	breq	.+2      	; 0x3768 <DIO_enu_SetPinValue+0x10e>
    3766:	99 c0       	rjmp	.+306    	; 0x389a <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    3768:	a8 e3       	ldi	r26, 0x38	; 56
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	e8 e3       	ldi	r30, 0x38	; 56
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	80 81       	ld	r24, Z
    3772:	48 2f       	mov	r20, r24
    3774:	8b 81       	ldd	r24, Y+3	; 0x03
    3776:	28 2f       	mov	r18, r24
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	02 2e       	mov	r0, r18
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <DIO_enu_SetPinValue+0x12c>
    3782:	88 0f       	add	r24, r24
    3784:	99 1f       	adc	r25, r25
    3786:	0a 94       	dec	r0
    3788:	e2 f7       	brpl	.-8      	; 0x3782 <DIO_enu_SetPinValue+0x128>
    378a:	84 2b       	or	r24, r20
    378c:	8c 93       	st	X, r24
    378e:	85 c0       	rjmp	.+266    	; 0x389a <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    3790:	a8 e3       	ldi	r26, 0x38	; 56
    3792:	b0 e0       	ldi	r27, 0x00	; 0
    3794:	e8 e3       	ldi	r30, 0x38	; 56
    3796:	f0 e0       	ldi	r31, 0x00	; 0
    3798:	80 81       	ld	r24, Z
    379a:	48 2f       	mov	r20, r24
    379c:	8b 81       	ldd	r24, Y+3	; 0x03
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	81 e0       	ldi	r24, 0x01	; 1
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	02 2e       	mov	r0, r18
    37a8:	02 c0       	rjmp	.+4      	; 0x37ae <DIO_enu_SetPinValue+0x154>
    37aa:	88 0f       	add	r24, r24
    37ac:	99 1f       	adc	r25, r25
    37ae:	0a 94       	dec	r0
    37b0:	e2 f7       	brpl	.-8      	; 0x37aa <DIO_enu_SetPinValue+0x150>
    37b2:	80 95       	com	r24
    37b4:	84 23       	and	r24, r20
    37b6:	8c 93       	st	X, r24
    37b8:	70 c0       	rjmp	.+224    	; 0x389a <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    37ba:	8c 81       	ldd	r24, Y+4	; 0x04
    37bc:	28 2f       	mov	r18, r24
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	38 87       	std	Y+8, r19	; 0x08
    37c2:	2f 83       	std	Y+7, r18	; 0x07
    37c4:	8f 81       	ldd	r24, Y+7	; 0x07
    37c6:	98 85       	ldd	r25, Y+8	; 0x08
    37c8:	00 97       	sbiw	r24, 0x00	; 0
    37ca:	d1 f0       	breq	.+52     	; 0x3800 <DIO_enu_SetPinValue+0x1a6>
    37cc:	2f 81       	ldd	r18, Y+7	; 0x07
    37ce:	38 85       	ldd	r19, Y+8	; 0x08
    37d0:	21 30       	cpi	r18, 0x01	; 1
    37d2:	31 05       	cpc	r19, r1
    37d4:	09 f0       	breq	.+2      	; 0x37d8 <DIO_enu_SetPinValue+0x17e>
    37d6:	61 c0       	rjmp	.+194    	; 0x389a <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    37d8:	a5 e3       	ldi	r26, 0x35	; 53
    37da:	b0 e0       	ldi	r27, 0x00	; 0
    37dc:	e5 e3       	ldi	r30, 0x35	; 53
    37de:	f0 e0       	ldi	r31, 0x00	; 0
    37e0:	80 81       	ld	r24, Z
    37e2:	48 2f       	mov	r20, r24
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	28 2f       	mov	r18, r24
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	02 2e       	mov	r0, r18
    37f0:	02 c0       	rjmp	.+4      	; 0x37f6 <DIO_enu_SetPinValue+0x19c>
    37f2:	88 0f       	add	r24, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	0a 94       	dec	r0
    37f8:	e2 f7       	brpl	.-8      	; 0x37f2 <DIO_enu_SetPinValue+0x198>
    37fa:	84 2b       	or	r24, r20
    37fc:	8c 93       	st	X, r24
    37fe:	4d c0       	rjmp	.+154    	; 0x389a <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    3800:	a5 e3       	ldi	r26, 0x35	; 53
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e5 e3       	ldi	r30, 0x35	; 53
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	48 2f       	mov	r20, r24
    380c:	8b 81       	ldd	r24, Y+3	; 0x03
    380e:	28 2f       	mov	r18, r24
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	02 2e       	mov	r0, r18
    3818:	02 c0       	rjmp	.+4      	; 0x381e <DIO_enu_SetPinValue+0x1c4>
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	0a 94       	dec	r0
    3820:	e2 f7       	brpl	.-8      	; 0x381a <DIO_enu_SetPinValue+0x1c0>
    3822:	80 95       	com	r24
    3824:	84 23       	and	r24, r20
    3826:	8c 93       	st	X, r24
    3828:	38 c0       	rjmp	.+112    	; 0x389a <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    382a:	8c 81       	ldd	r24, Y+4	; 0x04
    382c:	28 2f       	mov	r18, r24
    382e:	30 e0       	ldi	r19, 0x00	; 0
    3830:	3e 83       	std	Y+6, r19	; 0x06
    3832:	2d 83       	std	Y+5, r18	; 0x05
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	00 97       	sbiw	r24, 0x00	; 0
    383a:	c9 f0       	breq	.+50     	; 0x386e <DIO_enu_SetPinValue+0x214>
    383c:	2d 81       	ldd	r18, Y+5	; 0x05
    383e:	3e 81       	ldd	r19, Y+6	; 0x06
    3840:	21 30       	cpi	r18, 0x01	; 1
    3842:	31 05       	cpc	r19, r1
    3844:	51 f5       	brne	.+84     	; 0x389a <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    3846:	a2 e3       	ldi	r26, 0x32	; 50
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	e2 e3       	ldi	r30, 0x32	; 50
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	80 81       	ld	r24, Z
    3850:	48 2f       	mov	r20, r24
    3852:	8b 81       	ldd	r24, Y+3	; 0x03
    3854:	28 2f       	mov	r18, r24
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	02 2e       	mov	r0, r18
    385e:	02 c0       	rjmp	.+4      	; 0x3864 <DIO_enu_SetPinValue+0x20a>
    3860:	88 0f       	add	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	0a 94       	dec	r0
    3866:	e2 f7       	brpl	.-8      	; 0x3860 <DIO_enu_SetPinValue+0x206>
    3868:	84 2b       	or	r24, r20
    386a:	8c 93       	st	X, r24
    386c:	16 c0       	rjmp	.+44     	; 0x389a <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    386e:	a2 e3       	ldi	r26, 0x32	; 50
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	e2 e3       	ldi	r30, 0x32	; 50
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	80 81       	ld	r24, Z
    3878:	48 2f       	mov	r20, r24
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	28 2f       	mov	r18, r24
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	02 2e       	mov	r0, r18
    3886:	02 c0       	rjmp	.+4      	; 0x388c <DIO_enu_SetPinValue+0x232>
    3888:	88 0f       	add	r24, r24
    388a:	99 1f       	adc	r25, r25
    388c:	0a 94       	dec	r0
    388e:	e2 f7       	brpl	.-8      	; 0x3888 <DIO_enu_SetPinValue+0x22e>
    3890:	80 95       	com	r24
    3892:	84 23       	and	r24, r20
    3894:	8c 93       	st	X, r24
    3896:	01 c0       	rjmp	.+2      	; 0x389a <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3898:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    389a:	89 81       	ldd	r24, Y+1	; 0x01
}
    389c:	2e 96       	adiw	r28, 0x0e	; 14
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	cf 91       	pop	r28
    38aa:	df 91       	pop	r29
    38ac:	08 95       	ret

000038ae <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    38ae:	df 93       	push	r29
    38b0:	cf 93       	push	r28
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	27 97       	sbiw	r28, 0x07	; 7
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	8a 83       	std	Y+2, r24	; 0x02
    38c4:	6b 83       	std	Y+3, r22	; 0x03
    38c6:	5d 83       	std	Y+5, r21	; 0x05
    38c8:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	84 30       	cpi	r24, 0x04	; 4
    38d2:	08 f0       	brcs	.+2      	; 0x38d6 <DIO_enu_GetPinValue+0x28>
    38d4:	7a c0       	rjmp	.+244    	; 0x39ca <DIO_enu_GetPinValue+0x11c>
    38d6:	8b 81       	ldd	r24, Y+3	; 0x03
    38d8:	88 30       	cpi	r24, 0x08	; 8
    38da:	08 f0       	brcs	.+2      	; 0x38de <DIO_enu_GetPinValue+0x30>
    38dc:	76 c0       	rjmp	.+236    	; 0x39ca <DIO_enu_GetPinValue+0x11c>
    38de:	8c 81       	ldd	r24, Y+4	; 0x04
    38e0:	9d 81       	ldd	r25, Y+5	; 0x05
    38e2:	00 97       	sbiw	r24, 0x00	; 0
    38e4:	09 f4       	brne	.+2      	; 0x38e8 <DIO_enu_GetPinValue+0x3a>
    38e6:	71 c0       	rjmp	.+226    	; 0x39ca <DIO_enu_GetPinValue+0x11c>
    {
        switch (Copy_u8_PortId)
    38e8:	8a 81       	ldd	r24, Y+2	; 0x02
    38ea:	28 2f       	mov	r18, r24
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	3f 83       	std	Y+7, r19	; 0x07
    38f0:	2e 83       	std	Y+6, r18	; 0x06
    38f2:	4e 81       	ldd	r20, Y+6	; 0x06
    38f4:	5f 81       	ldd	r21, Y+7	; 0x07
    38f6:	41 30       	cpi	r20, 0x01	; 1
    38f8:	51 05       	cpc	r21, r1
    38fa:	59 f1       	breq	.+86     	; 0x3952 <DIO_enu_GetPinValue+0xa4>
    38fc:	8e 81       	ldd	r24, Y+6	; 0x06
    38fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3900:	82 30       	cpi	r24, 0x02	; 2
    3902:	91 05       	cpc	r25, r1
    3904:	34 f4       	brge	.+12     	; 0x3912 <DIO_enu_GetPinValue+0x64>
    3906:	2e 81       	ldd	r18, Y+6	; 0x06
    3908:	3f 81       	ldd	r19, Y+7	; 0x07
    390a:	21 15       	cp	r18, r1
    390c:	31 05       	cpc	r19, r1
    390e:	69 f0       	breq	.+26     	; 0x392a <DIO_enu_GetPinValue+0x7c>
    3910:	5d c0       	rjmp	.+186    	; 0x39cc <DIO_enu_GetPinValue+0x11e>
    3912:	4e 81       	ldd	r20, Y+6	; 0x06
    3914:	5f 81       	ldd	r21, Y+7	; 0x07
    3916:	42 30       	cpi	r20, 0x02	; 2
    3918:	51 05       	cpc	r21, r1
    391a:	79 f1       	breq	.+94     	; 0x397a <DIO_enu_GetPinValue+0xcc>
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	9f 81       	ldd	r25, Y+7	; 0x07
    3920:	83 30       	cpi	r24, 0x03	; 3
    3922:	91 05       	cpc	r25, r1
    3924:	09 f4       	brne	.+2      	; 0x3928 <DIO_enu_GetPinValue+0x7a>
    3926:	3d c0       	rjmp	.+122    	; 0x39a2 <DIO_enu_GetPinValue+0xf4>
    3928:	51 c0       	rjmp	.+162    	; 0x39cc <DIO_enu_GetPinValue+0x11e>
        {
            case DIO_U8_PORTA:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);break;
    392a:	e9 e3       	ldi	r30, 0x39	; 57
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	28 2f       	mov	r18, r24
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	8b 81       	ldd	r24, Y+3	; 0x03
    3936:	88 2f       	mov	r24, r24
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	a9 01       	movw	r20, r18
    393c:	02 c0       	rjmp	.+4      	; 0x3942 <DIO_enu_GetPinValue+0x94>
    393e:	55 95       	asr	r21
    3940:	47 95       	ror	r20
    3942:	8a 95       	dec	r24
    3944:	e2 f7       	brpl	.-8      	; 0x393e <DIO_enu_GetPinValue+0x90>
    3946:	ca 01       	movw	r24, r20
    3948:	81 70       	andi	r24, 0x01	; 1
    394a:	ec 81       	ldd	r30, Y+4	; 0x04
    394c:	fd 81       	ldd	r31, Y+5	; 0x05
    394e:	80 83       	st	Z, r24
    3950:	3d c0       	rjmp	.+122    	; 0x39cc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTB:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);break;
    3952:	e6 e3       	ldi	r30, 0x36	; 54
    3954:	f0 e0       	ldi	r31, 0x00	; 0
    3956:	80 81       	ld	r24, Z
    3958:	28 2f       	mov	r18, r24
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	8b 81       	ldd	r24, Y+3	; 0x03
    395e:	88 2f       	mov	r24, r24
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	a9 01       	movw	r20, r18
    3964:	02 c0       	rjmp	.+4      	; 0x396a <DIO_enu_GetPinValue+0xbc>
    3966:	55 95       	asr	r21
    3968:	47 95       	ror	r20
    396a:	8a 95       	dec	r24
    396c:	e2 f7       	brpl	.-8      	; 0x3966 <DIO_enu_GetPinValue+0xb8>
    396e:	ca 01       	movw	r24, r20
    3970:	81 70       	andi	r24, 0x01	; 1
    3972:	ec 81       	ldd	r30, Y+4	; 0x04
    3974:	fd 81       	ldd	r31, Y+5	; 0x05
    3976:	80 83       	st	Z, r24
    3978:	29 c0       	rjmp	.+82     	; 0x39cc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTC:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);break;
    397a:	e3 e3       	ldi	r30, 0x33	; 51
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	80 81       	ld	r24, Z
    3980:	28 2f       	mov	r18, r24
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	8b 81       	ldd	r24, Y+3	; 0x03
    3986:	88 2f       	mov	r24, r24
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	a9 01       	movw	r20, r18
    398c:	02 c0       	rjmp	.+4      	; 0x3992 <DIO_enu_GetPinValue+0xe4>
    398e:	55 95       	asr	r21
    3990:	47 95       	ror	r20
    3992:	8a 95       	dec	r24
    3994:	e2 f7       	brpl	.-8      	; 0x398e <DIO_enu_GetPinValue+0xe0>
    3996:	ca 01       	movw	r24, r20
    3998:	81 70       	andi	r24, 0x01	; 1
    399a:	ec 81       	ldd	r30, Y+4	; 0x04
    399c:	fd 81       	ldd	r31, Y+5	; 0x05
    399e:	80 83       	st	Z, r24
    39a0:	15 c0       	rjmp	.+42     	; 0x39cc <DIO_enu_GetPinValue+0x11e>
            case DIO_U8_PORTD:*Copy_pu8_ReturnPinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);break;
    39a2:	e0 e3       	ldi	r30, 0x30	; 48
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	88 2f       	mov	r24, r24
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	a9 01       	movw	r20, r18
    39b4:	02 c0       	rjmp	.+4      	; 0x39ba <DIO_enu_GetPinValue+0x10c>
    39b6:	55 95       	asr	r21
    39b8:	47 95       	ror	r20
    39ba:	8a 95       	dec	r24
    39bc:	e2 f7       	brpl	.-8      	; 0x39b6 <DIO_enu_GetPinValue+0x108>
    39be:	ca 01       	movw	r24, r20
    39c0:	81 70       	andi	r24, 0x01	; 1
    39c2:	ec 81       	ldd	r30, Y+4	; 0x04
    39c4:	fd 81       	ldd	r31, Y+5	; 0x05
    39c6:	80 83       	st	Z, r24
    39c8:	01 c0       	rjmp	.+2      	; 0x39cc <DIO_enu_GetPinValue+0x11e>
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    39ca:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ce:	27 96       	adiw	r28, 0x07	; 7
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	f8 94       	cli
    39d4:	de bf       	out	0x3e, r29	; 62
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	cd bf       	out	0x3d, r28	; 61
    39da:	cf 91       	pop	r28
    39dc:	df 91       	pop	r29
    39de:	08 95       	ret

000039e0 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	2d 97       	sbiw	r28, 0x0d	; 13
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	8a 83       	std	Y+2, r24	; 0x02
    39f6:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    39fc:	8a 81       	ldd	r24, Y+2	; 0x02
    39fe:	84 30       	cpi	r24, 0x04	; 4
    3a00:	08 f0       	brcs	.+2      	; 0x3a04 <DIO_enu_SetPortDirection+0x24>
    3a02:	84 c0       	rjmp	.+264    	; 0x3b0c <DIO_enu_SetPortDirection+0x12c>
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
    3a06:	81 30       	cpi	r24, 0x01	; 1
    3a08:	21 f0       	breq	.+8      	; 0x3a12 <DIO_enu_SetPortDirection+0x32>
    3a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0c:	88 23       	and	r24, r24
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <DIO_enu_SetPortDirection+0x32>
    3a10:	7d c0       	rjmp	.+250    	; 0x3b0c <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    3a12:	8a 81       	ldd	r24, Y+2	; 0x02
    3a14:	28 2f       	mov	r18, r24
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	3d 87       	std	Y+13, r19	; 0x0d
    3a1a:	2c 87       	std	Y+12, r18	; 0x0c
    3a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a20:	81 30       	cpi	r24, 0x01	; 1
    3a22:	91 05       	cpc	r25, r1
    3a24:	71 f1       	breq	.+92     	; 0x3a82 <DIO_enu_SetPortDirection+0xa2>
    3a26:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a28:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a2a:	22 30       	cpi	r18, 0x02	; 2
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	2c f4       	brge	.+10     	; 0x3a3a <DIO_enu_SetPortDirection+0x5a>
    3a30:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a32:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	69 f0       	breq	.+26     	; 0x3a52 <DIO_enu_SetPortDirection+0x72>
    3a38:	6a c0       	rjmp	.+212    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
    3a3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3a3c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3a3e:	22 30       	cpi	r18, 0x02	; 2
    3a40:	31 05       	cpc	r19, r1
    3a42:	b1 f1       	breq	.+108    	; 0x3ab0 <DIO_enu_SetPortDirection+0xd0>
    3a44:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a46:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a48:	83 30       	cpi	r24, 0x03	; 3
    3a4a:	91 05       	cpc	r25, r1
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <DIO_enu_SetPortDirection+0x70>
    3a4e:	47 c0       	rjmp	.+142    	; 0x3ade <DIO_enu_SetPortDirection+0xfe>
    3a50:	5e c0       	rjmp	.+188    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    3a52:	8b 81       	ldd	r24, Y+3	; 0x03
    3a54:	28 2f       	mov	r18, r24
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	3b 87       	std	Y+11, r19	; 0x0b
    3a5a:	2a 87       	std	Y+10, r18	; 0x0a
    3a5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a60:	00 97       	sbiw	r24, 0x00	; 0
    3a62:	59 f0       	breq	.+22     	; 0x3a7a <DIO_enu_SetPortDirection+0x9a>
    3a64:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a66:	3b 85       	ldd	r19, Y+11	; 0x0b
    3a68:	21 30       	cpi	r18, 0x01	; 1
    3a6a:	31 05       	cpc	r19, r1
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <DIO_enu_SetPortDirection+0x90>
    3a6e:	4f c0       	rjmp	.+158    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    3a70:	ea e3       	ldi	r30, 0x3A	; 58
    3a72:	f0 e0       	ldi	r31, 0x00	; 0
    3a74:	8f ef       	ldi	r24, 0xFF	; 255
    3a76:	80 83       	st	Z, r24
    3a78:	4a c0       	rjmp	.+148    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    3a7a:	ea e3       	ldi	r30, 0x3A	; 58
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	10 82       	st	Z, r1
    3a80:	46 c0       	rjmp	.+140    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    3a82:	8b 81       	ldd	r24, Y+3	; 0x03
    3a84:	28 2f       	mov	r18, r24
    3a86:	30 e0       	ldi	r19, 0x00	; 0
    3a88:	39 87       	std	Y+9, r19	; 0x09
    3a8a:	28 87       	std	Y+8, r18	; 0x08
    3a8c:	88 85       	ldd	r24, Y+8	; 0x08
    3a8e:	99 85       	ldd	r25, Y+9	; 0x09
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	51 f0       	breq	.+20     	; 0x3aa8 <DIO_enu_SetPortDirection+0xc8>
    3a94:	28 85       	ldd	r18, Y+8	; 0x08
    3a96:	39 85       	ldd	r19, Y+9	; 0x09
    3a98:	21 30       	cpi	r18, 0x01	; 1
    3a9a:	31 05       	cpc	r19, r1
    3a9c:	c1 f5       	brne	.+112    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    3a9e:	e7 e3       	ldi	r30, 0x37	; 55
    3aa0:	f0 e0       	ldi	r31, 0x00	; 0
    3aa2:	8f ef       	ldi	r24, 0xFF	; 255
    3aa4:	80 83       	st	Z, r24
    3aa6:	33 c0       	rjmp	.+102    	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    3aa8:	e7 e3       	ldi	r30, 0x37	; 55
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	10 82       	st	Z, r1
    3aae:	2f c0       	rjmp	.+94     	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    3ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab2:	28 2f       	mov	r18, r24
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	3f 83       	std	Y+7, r19	; 0x07
    3ab8:	2e 83       	std	Y+6, r18	; 0x06
    3aba:	8e 81       	ldd	r24, Y+6	; 0x06
    3abc:	9f 81       	ldd	r25, Y+7	; 0x07
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	51 f0       	breq	.+20     	; 0x3ad6 <DIO_enu_SetPortDirection+0xf6>
    3ac2:	2e 81       	ldd	r18, Y+6	; 0x06
    3ac4:	3f 81       	ldd	r19, Y+7	; 0x07
    3ac6:	21 30       	cpi	r18, 0x01	; 1
    3ac8:	31 05       	cpc	r19, r1
    3aca:	09 f5       	brne	.+66     	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    3acc:	e4 e3       	ldi	r30, 0x34	; 52
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	8f ef       	ldi	r24, 0xFF	; 255
    3ad2:	80 83       	st	Z, r24
    3ad4:	1c c0       	rjmp	.+56     	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    3ad6:	e4 e3       	ldi	r30, 0x34	; 52
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	10 82       	st	Z, r1
    3adc:	18 c0       	rjmp	.+48     	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    3ade:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae0:	28 2f       	mov	r18, r24
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	3d 83       	std	Y+5, r19	; 0x05
    3ae6:	2c 83       	std	Y+4, r18	; 0x04
    3ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    3aea:	9d 81       	ldd	r25, Y+5	; 0x05
    3aec:	00 97       	sbiw	r24, 0x00	; 0
    3aee:	51 f0       	breq	.+20     	; 0x3b04 <DIO_enu_SetPortDirection+0x124>
    3af0:	2c 81       	ldd	r18, Y+4	; 0x04
    3af2:	3d 81       	ldd	r19, Y+5	; 0x05
    3af4:	21 30       	cpi	r18, 0x01	; 1
    3af6:	31 05       	cpc	r19, r1
    3af8:	51 f4       	brne	.+20     	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    3afa:	e1 e3       	ldi	r30, 0x31	; 49
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	8f ef       	ldi	r24, 0xFF	; 255
    3b00:	80 83       	st	Z, r24
    3b02:	05 c0       	rjmp	.+10     	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    3b04:	e1 e3       	ldi	r30, 0x31	; 49
    3b06:	f0 e0       	ldi	r31, 0x00	; 0
    3b08:	10 82       	st	Z, r1
    3b0a:	01 c0       	rjmp	.+2      	; 0x3b0e <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3b0c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b10:	2d 96       	adiw	r28, 0x0d	; 13
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <DIO_enu_SetPortValue+0x6>
    3b28:	00 d0       	rcall	.+0      	; 0x3b2a <DIO_enu_SetPortValue+0x8>
    3b2a:	0f 92       	push	r0
    3b2c:	cd b7       	in	r28, 0x3d	; 61
    3b2e:	de b7       	in	r29, 0x3e	; 62
    3b30:	8a 83       	std	Y+2, r24	; 0x02
    3b32:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	84 30       	cpi	r24, 0x04	; 4
    3b3c:	98 f5       	brcc	.+102    	; 0x3ba4 <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    3b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b40:	28 2f       	mov	r18, r24
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	3d 83       	std	Y+5, r19	; 0x05
    3b46:	2c 83       	std	Y+4, r18	; 0x04
    3b48:	8c 81       	ldd	r24, Y+4	; 0x04
    3b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b4c:	81 30       	cpi	r24, 0x01	; 1
    3b4e:	91 05       	cpc	r25, r1
    3b50:	d1 f0       	breq	.+52     	; 0x3b86 <DIO_enu_SetPortValue+0x64>
    3b52:	2c 81       	ldd	r18, Y+4	; 0x04
    3b54:	3d 81       	ldd	r19, Y+5	; 0x05
    3b56:	22 30       	cpi	r18, 0x02	; 2
    3b58:	31 05       	cpc	r19, r1
    3b5a:	2c f4       	brge	.+10     	; 0x3b66 <DIO_enu_SetPortValue+0x44>
    3b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	61 f0       	breq	.+24     	; 0x3b7c <DIO_enu_SetPortValue+0x5a>
    3b64:	20 c0       	rjmp	.+64     	; 0x3ba6 <DIO_enu_SetPortValue+0x84>
    3b66:	2c 81       	ldd	r18, Y+4	; 0x04
    3b68:	3d 81       	ldd	r19, Y+5	; 0x05
    3b6a:	22 30       	cpi	r18, 0x02	; 2
    3b6c:	31 05       	cpc	r19, r1
    3b6e:	81 f0       	breq	.+32     	; 0x3b90 <DIO_enu_SetPortValue+0x6e>
    3b70:	8c 81       	ldd	r24, Y+4	; 0x04
    3b72:	9d 81       	ldd	r25, Y+5	; 0x05
    3b74:	83 30       	cpi	r24, 0x03	; 3
    3b76:	91 05       	cpc	r25, r1
    3b78:	81 f0       	breq	.+32     	; 0x3b9a <DIO_enu_SetPortValue+0x78>
    3b7a:	15 c0       	rjmp	.+42     	; 0x3ba6 <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    3b7c:	eb e3       	ldi	r30, 0x3B	; 59
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	80 83       	st	Z, r24
    3b84:	10 c0       	rjmp	.+32     	; 0x3ba6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    3b86:	e8 e3       	ldi	r30, 0x38	; 56
    3b88:	f0 e0       	ldi	r31, 0x00	; 0
    3b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8c:	80 83       	st	Z, r24
    3b8e:	0b c0       	rjmp	.+22     	; 0x3ba6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    3b90:	e5 e3       	ldi	r30, 0x35	; 53
    3b92:	f0 e0       	ldi	r31, 0x00	; 0
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	80 83       	st	Z, r24
    3b98:	06 c0       	rjmp	.+12     	; 0x3ba6 <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    3b9a:	e2 e3       	ldi	r30, 0x32	; 50
    3b9c:	f0 e0       	ldi	r31, 0x00	; 0
    3b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba0:	80 83       	st	Z, r24
    3ba2:	01 c0       	rjmp	.+2      	; 0x3ba6 <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    3ba4:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ba8:	0f 90       	pop	r0
    3baa:	0f 90       	pop	r0
    3bac:	0f 90       	pop	r0
    3bae:	0f 90       	pop	r0
    3bb0:	0f 90       	pop	r0
    3bb2:	cf 91       	pop	r28
    3bb4:	df 91       	pop	r29
    3bb6:	08 95       	ret

00003bb8 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    3bb8:	df 93       	push	r29
    3bba:	cf 93       	push	r28
    3bbc:	00 d0       	rcall	.+0      	; 0x3bbe <DIO_enu_GetPortValue+0x6>
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <DIO_enu_GetPortValue+0x8>
    3bc0:	00 d0       	rcall	.+0      	; 0x3bc2 <DIO_enu_GetPortValue+0xa>
    3bc2:	cd b7       	in	r28, 0x3d	; 61
    3bc4:	de b7       	in	r29, 0x3e	; 62
    3bc6:	8a 83       	std	Y+2, r24	; 0x02
    3bc8:	7c 83       	std	Y+4, r23	; 0x04
    3bca:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	84 30       	cpi	r24, 0x04	; 4
    3bd4:	08 f0       	brcs	.+2      	; 0x3bd8 <DIO_enu_GetPortValue+0x20>
    3bd6:	3f c0       	rjmp	.+126    	; 0x3c56 <DIO_enu_GetPortValue+0x9e>
    3bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bda:	9c 81       	ldd	r25, Y+4	; 0x04
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	d9 f1       	breq	.+118    	; 0x3c56 <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    3be0:	8a 81       	ldd	r24, Y+2	; 0x02
    3be2:	28 2f       	mov	r18, r24
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	3e 83       	std	Y+6, r19	; 0x06
    3be8:	2d 83       	std	Y+5, r18	; 0x05
    3bea:	8d 81       	ldd	r24, Y+5	; 0x05
    3bec:	9e 81       	ldd	r25, Y+6	; 0x06
    3bee:	81 30       	cpi	r24, 0x01	; 1
    3bf0:	91 05       	cpc	r25, r1
    3bf2:	e1 f0       	breq	.+56     	; 0x3c2c <DIO_enu_GetPortValue+0x74>
    3bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    3bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    3bf8:	22 30       	cpi	r18, 0x02	; 2
    3bfa:	31 05       	cpc	r19, r1
    3bfc:	2c f4       	brge	.+10     	; 0x3c08 <DIO_enu_GetPortValue+0x50>
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	61 f0       	breq	.+24     	; 0x3c1e <DIO_enu_GetPortValue+0x66>
    3c06:	28 c0       	rjmp	.+80     	; 0x3c58 <DIO_enu_GetPortValue+0xa0>
    3c08:	2d 81       	ldd	r18, Y+5	; 0x05
    3c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    3c0c:	22 30       	cpi	r18, 0x02	; 2
    3c0e:	31 05       	cpc	r19, r1
    3c10:	a1 f0       	breq	.+40     	; 0x3c3a <DIO_enu_GetPortValue+0x82>
    3c12:	8d 81       	ldd	r24, Y+5	; 0x05
    3c14:	9e 81       	ldd	r25, Y+6	; 0x06
    3c16:	83 30       	cpi	r24, 0x03	; 3
    3c18:	91 05       	cpc	r25, r1
    3c1a:	b1 f0       	breq	.+44     	; 0x3c48 <DIO_enu_GetPortValue+0x90>
    3c1c:	1d c0       	rjmp	.+58     	; 0x3c58 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    3c1e:	e9 e3       	ldi	r30, 0x39	; 57
    3c20:	f0 e0       	ldi	r31, 0x00	; 0
    3c22:	80 81       	ld	r24, Z
    3c24:	eb 81       	ldd	r30, Y+3	; 0x03
    3c26:	fc 81       	ldd	r31, Y+4	; 0x04
    3c28:	80 83       	st	Z, r24
    3c2a:	16 c0       	rjmp	.+44     	; 0x3c58 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    3c2c:	e6 e3       	ldi	r30, 0x36	; 54
    3c2e:	f0 e0       	ldi	r31, 0x00	; 0
    3c30:	80 81       	ld	r24, Z
    3c32:	eb 81       	ldd	r30, Y+3	; 0x03
    3c34:	fc 81       	ldd	r31, Y+4	; 0x04
    3c36:	80 83       	st	Z, r24
    3c38:	0f c0       	rjmp	.+30     	; 0x3c58 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    3c3a:	e3 e3       	ldi	r30, 0x33	; 51
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	80 81       	ld	r24, Z
    3c40:	eb 81       	ldd	r30, Y+3	; 0x03
    3c42:	fc 81       	ldd	r31, Y+4	; 0x04
    3c44:	80 83       	st	Z, r24
    3c46:	08 c0       	rjmp	.+16     	; 0x3c58 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    3c48:	e0 e3       	ldi	r30, 0x30	; 48
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3c50:	fc 81       	ldd	r31, Y+4	; 0x04
    3c52:	80 83       	st	Z, r24
    3c54:	01 c0       	rjmp	.+2      	; 0x3c58 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3c56:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c5a:	26 96       	adiw	r28, 0x06	; 6
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	cf 91       	pop	r28
    3c68:	df 91       	pop	r29
    3c6a:	08 95       	ret

00003c6c <DIO_enu_ToggPin>:
ES_t DIO_enu_ToggPin(u8 Copy_u8_PortId, u8 Copy_u8_PinId){
    3c6c:	df 93       	push	r29
    3c6e:	cf 93       	push	r28
    3c70:	00 d0       	rcall	.+0      	; 0x3c72 <DIO_enu_ToggPin+0x6>
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <DIO_enu_ToggPin+0x8>
    3c74:	0f 92       	push	r0
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	8a 83       	std	Y+2, r24	; 0x02
    3c7c:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3c7e:	81 e0       	ldi	r24, 0x01	; 1
    3c80:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <=DIO_U8_PORTD)&&(Copy_u8_PinId <= DIO_U8_PIN7)){
    3c82:	8a 81       	ldd	r24, Y+2	; 0x02
    3c84:	84 30       	cpi	r24, 0x04	; 4
    3c86:	08 f0       	brcs	.+2      	; 0x3c8a <DIO_enu_ToggPin+0x1e>
    3c88:	73 c0       	rjmp	.+230    	; 0x3d70 <DIO_enu_ToggPin+0x104>
    3c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c8c:	88 30       	cpi	r24, 0x08	; 8
    3c8e:	08 f0       	brcs	.+2      	; 0x3c92 <DIO_enu_ToggPin+0x26>
    3c90:	6f c0       	rjmp	.+222    	; 0x3d70 <DIO_enu_ToggPin+0x104>
        switch (Copy_u8_PortId)
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	28 2f       	mov	r18, r24
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	3d 83       	std	Y+5, r19	; 0x05
    3c9a:	2c 83       	std	Y+4, r18	; 0x04
    3c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca0:	81 30       	cpi	r24, 0x01	; 1
    3ca2:	91 05       	cpc	r25, r1
    3ca4:	49 f1       	breq	.+82     	; 0x3cf8 <DIO_enu_ToggPin+0x8c>
    3ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    3ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    3caa:	22 30       	cpi	r18, 0x02	; 2
    3cac:	31 05       	cpc	r19, r1
    3cae:	2c f4       	brge	.+10     	; 0x3cba <DIO_enu_ToggPin+0x4e>
    3cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    3cb4:	00 97       	sbiw	r24, 0x00	; 0
    3cb6:	61 f0       	breq	.+24     	; 0x3cd0 <DIO_enu_ToggPin+0x64>
    3cb8:	5c c0       	rjmp	.+184    	; 0x3d72 <DIO_enu_ToggPin+0x106>
    3cba:	2c 81       	ldd	r18, Y+4	; 0x04
    3cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    3cbe:	22 30       	cpi	r18, 0x02	; 2
    3cc0:	31 05       	cpc	r19, r1
    3cc2:	71 f1       	breq	.+92     	; 0x3d20 <DIO_enu_ToggPin+0xb4>
    3cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc8:	83 30       	cpi	r24, 0x03	; 3
    3cca:	91 05       	cpc	r25, r1
    3ccc:	e9 f1       	breq	.+122    	; 0x3d48 <DIO_enu_ToggPin+0xdc>
    3cce:	51 c0       	rjmp	.+162    	; 0x3d72 <DIO_enu_ToggPin+0x106>
	        {
	        case DIO_U8_PORTA:TOG_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    3cd0:	ab e3       	ldi	r26, 0x3B	; 59
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	eb e3       	ldi	r30, 0x3B	; 59
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	80 81       	ld	r24, Z
    3cda:	48 2f       	mov	r20, r24
    3cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	02 2e       	mov	r0, r18
    3ce8:	02 c0       	rjmp	.+4      	; 0x3cee <DIO_enu_ToggPin+0x82>
    3cea:	88 0f       	add	r24, r24
    3cec:	99 1f       	adc	r25, r25
    3cee:	0a 94       	dec	r0
    3cf0:	e2 f7       	brpl	.-8      	; 0x3cea <DIO_enu_ToggPin+0x7e>
    3cf2:	84 27       	eor	r24, r20
    3cf4:	8c 93       	st	X, r24
    3cf6:	3d c0       	rjmp	.+122    	; 0x3d72 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTB:TOG_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    3cf8:	a8 e3       	ldi	r26, 0x38	; 56
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	e8 e3       	ldi	r30, 0x38	; 56
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	48 2f       	mov	r20, r24
    3d04:	8b 81       	ldd	r24, Y+3	; 0x03
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	02 2e       	mov	r0, r18
    3d10:	02 c0       	rjmp	.+4      	; 0x3d16 <DIO_enu_ToggPin+0xaa>
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	0a 94       	dec	r0
    3d18:	e2 f7       	brpl	.-8      	; 0x3d12 <DIO_enu_ToggPin+0xa6>
    3d1a:	84 27       	eor	r24, r20
    3d1c:	8c 93       	st	X, r24
    3d1e:	29 c0       	rjmp	.+82     	; 0x3d72 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTC:TOG_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    3d20:	a5 e3       	ldi	r26, 0x35	; 53
    3d22:	b0 e0       	ldi	r27, 0x00	; 0
    3d24:	e5 e3       	ldi	r30, 0x35	; 53
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	80 81       	ld	r24, Z
    3d2a:	48 2f       	mov	r20, r24
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	28 2f       	mov	r18, r24
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	02 2e       	mov	r0, r18
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <DIO_enu_ToggPin+0xd2>
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	0a 94       	dec	r0
    3d40:	e2 f7       	brpl	.-8      	; 0x3d3a <DIO_enu_ToggPin+0xce>
    3d42:	84 27       	eor	r24, r20
    3d44:	8c 93       	st	X, r24
    3d46:	15 c0       	rjmp	.+42     	; 0x3d72 <DIO_enu_ToggPin+0x106>
	        case DIO_U8_PORTD:TOG_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    3d48:	a2 e3       	ldi	r26, 0x32	; 50
    3d4a:	b0 e0       	ldi	r27, 0x00	; 0
    3d4c:	e2 e3       	ldi	r30, 0x32	; 50
    3d4e:	f0 e0       	ldi	r31, 0x00	; 0
    3d50:	80 81       	ld	r24, Z
    3d52:	48 2f       	mov	r20, r24
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	28 2f       	mov	r18, r24
    3d58:	30 e0       	ldi	r19, 0x00	; 0
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	02 2e       	mov	r0, r18
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <DIO_enu_ToggPin+0xfa>
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	0a 94       	dec	r0
    3d68:	e2 f7       	brpl	.-8      	; 0x3d62 <DIO_enu_ToggPin+0xf6>
    3d6a:	84 27       	eor	r24, r20
    3d6c:	8c 93       	st	X, r24
    3d6e:	01 c0       	rjmp	.+2      	; 0x3d72 <DIO_enu_ToggPin+0x106>
	        }
    }else{
        Local_u8_errorState = STATE_NOT_OK;
    3d70:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    3d72:	89 81       	ldd	r24, Y+1	; 0x01


}
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	08 95       	ret

00003d84 <__mulsi3>:
    3d84:	62 9f       	mul	r22, r18
    3d86:	d0 01       	movw	r26, r0
    3d88:	73 9f       	mul	r23, r19
    3d8a:	f0 01       	movw	r30, r0
    3d8c:	82 9f       	mul	r24, r18
    3d8e:	e0 0d       	add	r30, r0
    3d90:	f1 1d       	adc	r31, r1
    3d92:	64 9f       	mul	r22, r20
    3d94:	e0 0d       	add	r30, r0
    3d96:	f1 1d       	adc	r31, r1
    3d98:	92 9f       	mul	r25, r18
    3d9a:	f0 0d       	add	r31, r0
    3d9c:	83 9f       	mul	r24, r19
    3d9e:	f0 0d       	add	r31, r0
    3da0:	74 9f       	mul	r23, r20
    3da2:	f0 0d       	add	r31, r0
    3da4:	65 9f       	mul	r22, r21
    3da6:	f0 0d       	add	r31, r0
    3da8:	99 27       	eor	r25, r25
    3daa:	72 9f       	mul	r23, r18
    3dac:	b0 0d       	add	r27, r0
    3dae:	e1 1d       	adc	r30, r1
    3db0:	f9 1f       	adc	r31, r25
    3db2:	63 9f       	mul	r22, r19
    3db4:	b0 0d       	add	r27, r0
    3db6:	e1 1d       	adc	r30, r1
    3db8:	f9 1f       	adc	r31, r25
    3dba:	bd 01       	movw	r22, r26
    3dbc:	cf 01       	movw	r24, r30
    3dbe:	11 24       	eor	r1, r1
    3dc0:	08 95       	ret

00003dc2 <__udivmodsi4>:
    3dc2:	a1 e2       	ldi	r26, 0x21	; 33
    3dc4:	1a 2e       	mov	r1, r26
    3dc6:	aa 1b       	sub	r26, r26
    3dc8:	bb 1b       	sub	r27, r27
    3dca:	fd 01       	movw	r30, r26
    3dcc:	0d c0       	rjmp	.+26     	; 0x3de8 <__udivmodsi4_ep>

00003dce <__udivmodsi4_loop>:
    3dce:	aa 1f       	adc	r26, r26
    3dd0:	bb 1f       	adc	r27, r27
    3dd2:	ee 1f       	adc	r30, r30
    3dd4:	ff 1f       	adc	r31, r31
    3dd6:	a2 17       	cp	r26, r18
    3dd8:	b3 07       	cpc	r27, r19
    3dda:	e4 07       	cpc	r30, r20
    3ddc:	f5 07       	cpc	r31, r21
    3dde:	20 f0       	brcs	.+8      	; 0x3de8 <__udivmodsi4_ep>
    3de0:	a2 1b       	sub	r26, r18
    3de2:	b3 0b       	sbc	r27, r19
    3de4:	e4 0b       	sbc	r30, r20
    3de6:	f5 0b       	sbc	r31, r21

00003de8 <__udivmodsi4_ep>:
    3de8:	66 1f       	adc	r22, r22
    3dea:	77 1f       	adc	r23, r23
    3dec:	88 1f       	adc	r24, r24
    3dee:	99 1f       	adc	r25, r25
    3df0:	1a 94       	dec	r1
    3df2:	69 f7       	brne	.-38     	; 0x3dce <__udivmodsi4_loop>
    3df4:	60 95       	com	r22
    3df6:	70 95       	com	r23
    3df8:	80 95       	com	r24
    3dfa:	90 95       	com	r25
    3dfc:	9b 01       	movw	r18, r22
    3dfe:	ac 01       	movw	r20, r24
    3e00:	bd 01       	movw	r22, r26
    3e02:	cf 01       	movw	r24, r30
    3e04:	08 95       	ret

00003e06 <__prologue_saves__>:
    3e06:	2f 92       	push	r2
    3e08:	3f 92       	push	r3
    3e0a:	4f 92       	push	r4
    3e0c:	5f 92       	push	r5
    3e0e:	6f 92       	push	r6
    3e10:	7f 92       	push	r7
    3e12:	8f 92       	push	r8
    3e14:	9f 92       	push	r9
    3e16:	af 92       	push	r10
    3e18:	bf 92       	push	r11
    3e1a:	cf 92       	push	r12
    3e1c:	df 92       	push	r13
    3e1e:	ef 92       	push	r14
    3e20:	ff 92       	push	r15
    3e22:	0f 93       	push	r16
    3e24:	1f 93       	push	r17
    3e26:	cf 93       	push	r28
    3e28:	df 93       	push	r29
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	ca 1b       	sub	r28, r26
    3e30:	db 0b       	sbc	r29, r27
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	09 94       	ijmp

00003e3e <__epilogue_restores__>:
    3e3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e40:	39 88       	ldd	r3, Y+17	; 0x11
    3e42:	48 88       	ldd	r4, Y+16	; 0x10
    3e44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e50:	b9 84       	ldd	r11, Y+9	; 0x09
    3e52:	c8 84       	ldd	r12, Y+8	; 0x08
    3e54:	df 80       	ldd	r13, Y+7	; 0x07
    3e56:	ee 80       	ldd	r14, Y+6	; 0x06
    3e58:	fd 80       	ldd	r15, Y+5	; 0x05
    3e5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3e60:	b9 81       	ldd	r27, Y+1	; 0x01
    3e62:	ce 0f       	add	r28, r30
    3e64:	d1 1d       	adc	r29, r1
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	ed 01       	movw	r28, r26
    3e72:	08 95       	ret

00003e74 <_exit>:
    3e74:	f8 94       	cli

00003e76 <__stop_program>:
    3e76:	ff cf       	rjmp	.-2      	; 0x3e76 <__stop_program>
