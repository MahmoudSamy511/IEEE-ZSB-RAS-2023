
ElectronicSwitches_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  00800060  00003d02  00003d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000038a0  00000000  00000000  00003e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000152e  00000000  00000000  00007708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00008c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00008d96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00008f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  0000af6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  0000c06b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000cff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000d432  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 35       	cpi	r26, 0x50	; 80
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d5 06 	call	0xdaa	; 0xdaa <main>
      7a:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e1       	ldi	r26, 0x1F	; 31
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 48 1e 	jmp	0x3c90	; 0x3c90 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e1       	ldi	r24, 0x1F	; 31
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 64 1e 	jmp	0x3cc8	; 0x3cc8 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e1       	ldi	r22, 0x1F	; 31
     68c:	71 e0       	ldi	r23, 0x01	; 1
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 6c 1e 	jmp	0x3cd8	; 0x3cd8 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 54 1e 	jmp	0x3ca8	; 0x3ca8 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 74 1e 	jmp	0x3ce8	; 0x3ce8 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <displayOptionsPage>:

/* ********************Set your own password************* */
#define PasswordLength      5
#define Password          "51120"

void displayOptionsPage(){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     c96:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
	LCD_enu_SendString("1-DCMotor 3-Exit");
     c9a:	80 e6       	ldi	r24, 0x60	; 96
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Stepper Motor");
     caa:	81 e7       	ldi	r24, 0x71	; 113
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
}
     cb2:	cf 91       	pop	r28
     cb4:	df 91       	pop	r29
     cb6:	08 95       	ret

00000cb8 <takeUserOption>:

void takeUserOption(u8 *option){
     cb8:	df 93       	push	r29
     cba:	cf 93       	push	r28
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <takeUserOption+0x6>
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	9a 83       	std	Y+2, r25	; 0x02
     cc4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Keypad_enu_getKey(option);
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Keypad_enu_getKey>
		if(*option == '1' || *option == '2' || *option == '3')break;
     cce:	e9 81       	ldd	r30, Y+1	; 0x01
     cd0:	fa 81       	ldd	r31, Y+2	; 0x02
     cd2:	80 81       	ld	r24, Z
     cd4:	81 33       	cpi	r24, 0x31	; 49
     cd6:	51 f0       	breq	.+20     	; 0xcec <takeUserOption+0x34>
     cd8:	e9 81       	ldd	r30, Y+1	; 0x01
     cda:	fa 81       	ldd	r31, Y+2	; 0x02
     cdc:	80 81       	ld	r24, Z
     cde:	82 33       	cpi	r24, 0x32	; 50
     ce0:	29 f0       	breq	.+10     	; 0xcec <takeUserOption+0x34>
     ce2:	e9 81       	ldd	r30, Y+1	; 0x01
     ce4:	fa 81       	ldd	r31, Y+2	; 0x02
     ce6:	80 81       	ld	r24, Z
     ce8:	83 33       	cpi	r24, 0x33	; 51
     cea:	69 f7       	brne	.-38     	; 0xcc6 <takeUserOption+0xe>
	}
}
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <displayRotationOptions>:

void displayRotationOptions(){
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	LCD_enu_Clear();
     cfe:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
	LCD_enu_SendString("1-Rotate CW ");
     d02:	81 e8       	ldi	r24, 0x81	; 129
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	60 e0       	ldi	r22, 0x00	; 0
     d0e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
	LCD_enu_SendString("2-Rotate CCW");
     d12:	8e e8       	ldi	r24, 0x8E	; 142
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <returnAngle>:

u16 returnAngle(u8 * array){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <returnAngle+0x6>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <returnAngle+0x8>
     d28:	0f 92       	push	r0
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	9d 83       	std	Y+5, r25	; 0x05
     d30:	8c 83       	std	Y+4, r24	; 0x04
	u16 k = 0;
     d32:	1b 82       	std	Y+3, r1	; 0x03
     d34:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i = 0 ; i<3 ; i++){
     d36:	19 82       	std	Y+1, r1	; 0x01
     d38:	2b c0       	rjmp	.+86     	; 0xd90 <returnAngle+0x70>
		// ignore non entered digits
		if(array[i] == 'a') break;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8c 81       	ldd	r24, Y+4	; 0x04
     d42:	9d 81       	ldd	r25, Y+5	; 0x05
     d44:	fc 01       	movw	r30, r24
     d46:	e2 0f       	add	r30, r18
     d48:	f3 1f       	adc	r31, r19
     d4a:	80 81       	ld	r24, Z
     d4c:	81 36       	cpi	r24, 0x61	; 97
     d4e:	19 f1       	breq	.+70     	; 0xd96 <returnAngle+0x76>
		k = k*10 + (array[i] - '0');
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	9c 01       	movw	r18, r24
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	88 0f       	add	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	a9 01       	movw	r20, r18
     d66:	48 0f       	add	r20, r24
     d68:	59 1f       	adc	r21, r25
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8c 81       	ldd	r24, Y+4	; 0x04
     d72:	9d 81       	ldd	r25, Y+5	; 0x05
     d74:	fc 01       	movw	r30, r24
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	80 81       	ld	r24, Z
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	84 0f       	add	r24, r20
     d82:	95 1f       	adc	r25, r21
     d84:	c0 97       	sbiw	r24, 0x30	; 48
     d86:	9b 83       	std	Y+3, r25	; 0x03
     d88:	8a 83       	std	Y+2, r24	; 0x02
	LCD_enu_SendString("2-Rotate CCW");
}

u16 returnAngle(u8 * array){
	u16 k = 0;
	for(u8 i = 0 ; i<3 ; i++){
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	83 30       	cpi	r24, 0x03	; 3
     d94:	90 f2       	brcs	.-92     	; 0xd3a <returnAngle+0x1a>
		// ignore non entered digits
		if(array[i] == 'a') break;
		k = k*10 + (array[i] - '0');
	}
	return k;
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <main>:
int main(void){
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	c0 57       	subi	r28, 0x70	; 112
     db8:	d0 40       	sbci	r29, 0x00	; 0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
	Keypad_enu_Init();
     dc4:	0e 94 57 17 	call	0x2eae	; 0x2eae <Keypad_enu_Init>
	LCD_enu_Init();
     dc8:	0e 94 9f 13 	call	0x273e	; 0x273e <LCD_enu_Init>
	DC_Motor_enu_Init(1, 1);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	0e 94 a9 18 	call	0x3152	; 0x3152 <DC_Motor_enu_Init>
	STEP_Motor_enu_Init();
     dd4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <STEP_Motor_enu_Init>
	u8 savedPass[] = Password , pass[PasswordLength], Index=0, checkCounter = 0,homeFlag = 0,inputFlag = 0;
     dd8:	ce 01       	movw	r24, r28
     dda:	84 5a       	subi	r24, 0xA4	; 164
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	ae 96       	adiw	r28, 0x2e	; 46
     de0:	9f af       	std	Y+63, r25	; 0x3f
     de2:	8e af       	std	Y+62, r24	; 0x3e
     de4:	ae 97       	sbiw	r28, 0x2e	; 46
     de6:	89 e1       	ldi	r24, 0x19	; 25
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	e0 96       	adiw	r28, 0x30	; 48
     dec:	9f af       	std	Y+63, r25	; 0x3f
     dee:	8e af       	std	Y+62, r24	; 0x3e
     df0:	e0 97       	sbiw	r28, 0x30	; 48
     df2:	96 e0       	ldi	r25, 0x06	; 6
     df4:	e1 96       	adiw	r28, 0x31	; 49
     df6:	9f af       	std	Y+63, r25	; 0x3f
     df8:	e1 97       	sbiw	r28, 0x31	; 49
     dfa:	e0 96       	adiw	r28, 0x30	; 48
     dfc:	ee ad       	ldd	r30, Y+62	; 0x3e
     dfe:	ff ad       	ldd	r31, Y+63	; 0x3f
     e00:	e0 97       	sbiw	r28, 0x30	; 48
     e02:	00 80       	ld	r0, Z
     e04:	e0 96       	adiw	r28, 0x30	; 48
     e06:	8e ad       	ldd	r24, Y+62	; 0x3e
     e08:	9f ad       	ldd	r25, Y+63	; 0x3f
     e0a:	e0 97       	sbiw	r28, 0x30	; 48
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	e0 96       	adiw	r28, 0x30	; 48
     e10:	9f af       	std	Y+63, r25	; 0x3f
     e12:	8e af       	std	Y+62, r24	; 0x3e
     e14:	e0 97       	sbiw	r28, 0x30	; 48
     e16:	ae 96       	adiw	r28, 0x2e	; 46
     e18:	ee ad       	ldd	r30, Y+62	; 0x3e
     e1a:	ff ad       	ldd	r31, Y+63	; 0x3f
     e1c:	ae 97       	sbiw	r28, 0x2e	; 46
     e1e:	00 82       	st	Z, r0
     e20:	ae 96       	adiw	r28, 0x2e	; 46
     e22:	8e ad       	ldd	r24, Y+62	; 0x3e
     e24:	9f ad       	ldd	r25, Y+63	; 0x3f
     e26:	ae 97       	sbiw	r28, 0x2e	; 46
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	ae 96       	adiw	r28, 0x2e	; 46
     e2c:	9f af       	std	Y+63, r25	; 0x3f
     e2e:	8e af       	std	Y+62, r24	; 0x3e
     e30:	ae 97       	sbiw	r28, 0x2e	; 46
     e32:	e1 96       	adiw	r28, 0x31	; 49
     e34:	9f ad       	ldd	r25, Y+63	; 0x3f
     e36:	e1 97       	sbiw	r28, 0x31	; 49
     e38:	91 50       	subi	r25, 0x01	; 1
     e3a:	e1 96       	adiw	r28, 0x31	; 49
     e3c:	9f af       	std	Y+63, r25	; 0x3f
     e3e:	e1 97       	sbiw	r28, 0x31	; 49
     e40:	e1 96       	adiw	r28, 0x31	; 49
     e42:	ef ad       	ldd	r30, Y+63	; 0x3f
     e44:	e1 97       	sbiw	r28, 0x31	; 49
     e46:	ee 23       	and	r30, r30
     e48:	c1 f6       	brne	.-80     	; 0xdfa <main+0x50>
     e4a:	fe 01       	movw	r30, r28
     e4c:	e5 5a       	subi	r30, 0xA5	; 165
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	10 82       	st	Z, r1
     e52:	fe 01       	movw	r30, r28
     e54:	e6 5a       	subi	r30, 0xA6	; 166
     e56:	ff 4f       	sbci	r31, 0xFF	; 255
     e58:	10 82       	st	Z, r1
     e5a:	fe 01       	movw	r30, r28
     e5c:	e7 5a       	subi	r30, 0xA7	; 167
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	10 82       	st	Z, r1
     e62:	fe 01       	movw	r30, r28
     e64:	e8 5a       	subi	r30, 0xA8	; 168
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	10 82       	st	Z, r1
	LCD_enu_SendString("Hello, User :)");
     e6a:	8b e9       	ldi	r24, 0x9B	; 155
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
     e72:	fe 01       	movw	r30, r28
     e74:	ef 5a       	subi	r30, 0xAF	; 175
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	aa e7       	ldi	r26, 0x7A	; 122
     e7e:	b4 e4       	ldi	r27, 0x44	; 68
     e80:	80 83       	st	Z, r24
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	a2 83       	std	Z+2, r26	; 0x02
     e86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	8e 01       	movw	r16, r28
     e8a:	03 5b       	subi	r16, 0xB3	; 179
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	ef 5a       	subi	r30, 0xAF	; 175
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	60 81       	ld	r22, Z
     e96:	71 81       	ldd	r23, Z+1	; 0x01
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4a e7       	ldi	r20, 0x7A	; 122
     ea2:	55 e4       	ldi	r21, 0x45	; 69
     ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	f8 01       	movw	r30, r16
     eae:	80 83       	st	Z, r24
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	a2 83       	std	Z+2, r26	; 0x02
     eb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     eb6:	fe 01       	movw	r30, r28
     eb8:	e3 5b       	subi	r30, 0xB3	; 179
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	44 f4       	brge	.+16     	; 0xee4 <main+0x13a>
		__ticks = 1;
     ed4:	fe 01       	movw	r30, r28
     ed6:	e5 5b       	subi	r30, 0xB5	; 181
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	64 c0       	rjmp	.+200    	; 0xfac <main+0x202>
	else if (__tmp > 65535)
     ee4:	fe 01       	movw	r30, r28
     ee6:	e3 5b       	subi	r30, 0xB3	; 179
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	60 81       	ld	r22, Z
     eec:	71 81       	ldd	r23, Z+1	; 0x01
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	3f ef       	ldi	r19, 0xFF	; 255
     ef6:	4f e7       	ldi	r20, 0x7F	; 127
     ef8:	57 e4       	ldi	r21, 0x47	; 71
     efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     efe:	18 16       	cp	r1, r24
     f00:	0c f0       	brlt	.+2      	; 0xf04 <main+0x15a>
     f02:	43 c0       	rjmp	.+134    	; 0xf8a <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	fe 01       	movw	r30, r28
     f06:	ef 5a       	subi	r30, 0xAF	; 175
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	8e 01       	movw	r16, r28
     f24:	05 5b       	subi	r16, 0xB5	; 181
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
     f2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	f8 01       	movw	r30, r16
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	1f c0       	rjmp	.+62     	; 0xf7a <main+0x1d0>
     f3c:	fe 01       	movw	r30, r28
     f3e:	e7 5b       	subi	r30, 0xB7	; 183
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 e9       	ldi	r24, 0x90	; 144
     f44:	91 e0       	ldi	r25, 0x01	; 1
     f46:	91 83       	std	Z+1, r25	; 0x01
     f48:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f4a:	fe 01       	movw	r30, r28
     f4c:	e7 5b       	subi	r30, 0xB7	; 183
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <main+0x1aa>
     f58:	fe 01       	movw	r30, r28
     f5a:	e7 5b       	subi	r30, 0xB7	; 183
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	91 83       	std	Z+1, r25	; 0x01
     f60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	de 01       	movw	r26, r28
     f64:	a5 5b       	subi	r26, 0xB5	; 181
     f66:	bf 4f       	sbci	r27, 0xFF	; 255
     f68:	fe 01       	movw	r30, r28
     f6a:	e5 5b       	subi	r30, 0xB5	; 181
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	91 81       	ldd	r25, Z+1	; 0x01
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7a:	fe 01       	movw	r30, r28
     f7c:	e5 5b       	subi	r30, 0xB5	; 181
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	d1 f6       	brne	.-76     	; 0xf3c <main+0x192>
     f88:	27 c0       	rjmp	.+78     	; 0xfd8 <main+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	8e 01       	movw	r16, r28
     f8c:	05 5b       	subi	r16, 0xB5	; 181
     f8e:	1f 4f       	sbci	r17, 0xFF	; 255
     f90:	fe 01       	movw	r30, r28
     f92:	e3 5b       	subi	r30, 0xB3	; 179
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	f8 01       	movw	r30, r16
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	de 01       	movw	r26, r28
     fae:	a9 5b       	subi	r26, 0xB9	; 185
     fb0:	bf 4f       	sbci	r27, 0xFF	; 255
     fb2:	fe 01       	movw	r30, r28
     fb4:	e5 5b       	subi	r30, 0xB5	; 181
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	8d 93       	st	X+, r24
     fbe:	9c 93       	st	X, r25
     fc0:	fe 01       	movw	r30, r28
     fc2:	e9 5b       	subi	r30, 0xB9	; 185
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <main+0x220>
     fce:	fe 01       	movw	r30, r28
     fd0:	e9 5b       	subi	r30, 0xB9	; 185
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	80 83       	st	Z, r24
	_delay_ms(delay);
	LCD_enu_Clear();
     fd8:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
	LCD_enu_SendString("Enter Password:");
     fdc:	8a ea       	ldi	r24, 0xAA	; 170
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
	LCD_enu_SetCursor(1, 0);
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	60 e0       	ldi	r22, 0x00	; 0
     fe8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
	while(1){
/************************************ Taking Password Section*************************************/
		u8 key=0,order = 0;
     fec:	fe 01       	movw	r30, r28
     fee:	e9 59       	subi	r30, 0x99	; 153
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	10 82       	st	Z, r1
     ff4:	fe 01       	movw	r30, r28
     ff6:	e8 59       	subi	r30, 0x98	; 152
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	10 82       	st	Z, r1
		Keypad_enu_getKey(&key);
     ffc:	ce 01       	movw	r24, r28
     ffe:	89 59       	subi	r24, 0x99	; 153
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Keypad_enu_getKey>
		if(key != KEYPAD_U8_NO_KEY_PRESSED){
    1006:	fe 01       	movw	r30, r28
    1008:	e9 59       	subi	r30, 0x99	; 153
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	8f 3f       	cpi	r24, 0xFF	; 255
    1010:	31 f1       	breq	.+76     	; 0x105e <main+0x2b4>
			LCD_enu_SendChar('*');
    1012:	8a e2       	ldi	r24, 0x2A	; 42
    1014:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_enu_SendChar>
			pass[Index] = key;
    1018:	fe 01       	movw	r30, r28
    101a:	e5 5a       	subi	r30, 0xA5	; 165
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 81       	ld	r24, Z
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	fe 01       	movw	r30, r28
    1026:	e9 59       	subi	r30, 0x99	; 153
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	40 81       	ld	r20, Z
    102c:	ce 01       	movw	r24, r28
    102e:	8e 59       	subi	r24, 0x9E	; 158
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	fc 01       	movw	r30, r24
    1034:	e2 0f       	add	r30, r18
    1036:	f3 1f       	adc	r31, r19
    1038:	40 83       	st	Z, r20
			Index++;
    103a:	de 01       	movw	r26, r28
    103c:	a5 5a       	subi	r26, 0xA5	; 165
    103e:	bf 4f       	sbci	r27, 0xFF	; 255
    1040:	fe 01       	movw	r30, r28
    1042:	e5 5a       	subi	r30, 0xA5	; 165
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 81       	ld	r24, Z
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	8c 93       	st	X, r24
			checkCounter++;
    104c:	de 01       	movw	r26, r28
    104e:	a6 5a       	subi	r26, 0xA6	; 166
    1050:	bf 4f       	sbci	r27, 0xFF	; 255
    1052:	fe 01       	movw	r30, r28
    1054:	e6 5a       	subi	r30, 0xA6	; 166
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	8c 93       	st	X, r24
		}
		if(checkCounter == PasswordLength){
    105e:	fe 01       	movw	r30, r28
    1060:	e6 5a       	subi	r30, 0xA6	; 166
    1062:	ff 4f       	sbci	r31, 0xFF	; 255
    1064:	80 81       	ld	r24, Z
    1066:	85 30       	cpi	r24, 0x05	; 5
    1068:	09 f6       	brne	.-126    	; 0xfec <main+0x242>
			for(int j =0 ;j<PasswordLength ; j++){
    106a:	fe 01       	movw	r30, r28
    106c:	ea 5a       	subi	r30, 0xAA	; 170
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	10 82       	st	Z, r1
    1074:	2c c0       	rjmp	.+88     	; 0x10ce <main+0x324>
				if(pass[j] != savedPass[j]){
    1076:	fe 01       	movw	r30, r28
    1078:	ea 5a       	subi	r30, 0xAA	; 170
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	ce 01       	movw	r24, r28
    1082:	8e 59       	subi	r24, 0x9E	; 158
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	40 81       	ld	r20, Z
    108e:	fe 01       	movw	r30, r28
    1090:	ea 5a       	subi	r30, 0xAA	; 170
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	20 81       	ld	r18, Z
    1096:	31 81       	ldd	r19, Z+1	; 0x01
    1098:	ce 01       	movw	r24, r28
    109a:	84 5a       	subi	r24, 0xA4	; 164
    109c:	9f 4f       	sbci	r25, 0xFF	; 255
    109e:	fc 01       	movw	r30, r24
    10a0:	e2 0f       	add	r30, r18
    10a2:	f3 1f       	adc	r31, r19
    10a4:	80 81       	ld	r24, Z
    10a6:	48 17       	cp	r20, r24
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <main+0x30c>
					inputFlag = 1;
    10aa:	fe 01       	movw	r30, r28
    10ac:	e8 5a       	subi	r30, 0xA8	; 168
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 83       	st	Z, r24
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <main+0x334>
			pass[Index] = key;
			Index++;
			checkCounter++;
		}
		if(checkCounter == PasswordLength){
			for(int j =0 ;j<PasswordLength ; j++){
    10b6:	de 01       	movw	r26, r28
    10b8:	aa 5a       	subi	r26, 0xAA	; 170
    10ba:	bf 4f       	sbci	r27, 0xFF	; 255
    10bc:	fe 01       	movw	r30, r28
    10be:	ea 5a       	subi	r30, 0xAA	; 170
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 81       	ld	r24, Z
    10c4:	91 81       	ldd	r25, Z+1	; 0x01
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	9c 93       	st	X, r25
    10cc:	8e 93       	st	-X, r24
    10ce:	fe 01       	movw	r30, r28
    10d0:	ea 5a       	subi	r30, 0xAA	; 170
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	85 30       	cpi	r24, 0x05	; 5
    10da:	91 05       	cpc	r25, r1
    10dc:	64 f2       	brlt	.-104    	; 0x1076 <main+0x2cc>
				if(pass[j] != savedPass[j]){
					inputFlag = 1;
					break;
				}
			}
			if (inputFlag){
    10de:	fe 01       	movw	r30, r28
    10e0:	e8 5a       	subi	r30, 0xA8	; 168
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	80 81       	ld	r24, Z
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <main+0x342>
    10ea:	aa c0       	rjmp	.+340    	; 0x1240 <main+0x496>
				Index =0;
    10ec:	fe 01       	movw	r30, r28
    10ee:	e5 5a       	subi	r30, 0xA5	; 165
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	10 82       	st	Z, r1
				checkCounter =0;
    10f4:	fe 01       	movw	r30, r28
    10f6:	e6 5a       	subi	r30, 0xA6	; 166
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	10 82       	st	Z, r1
				inputFlag = 0;
    10fc:	fe 01       	movw	r30, r28
    10fe:	e8 5a       	subi	r30, 0xA8	; 168
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	10 82       	st	Z, r1
				LCD_enu_Clear();
    1104:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
				LCD_enu_SendString("Wrong Password");
    1108:	8a eb       	ldi	r24, 0xBA	; 186
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
				LCD_enu_SendString("Try Again!");
    1118:	89 ec       	ldi	r24, 0xC9	; 201
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
    1120:	fe 01       	movw	r30, r28
    1122:	ed 5b       	subi	r30, 0xBD	; 189
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	aa e7       	ldi	r26, 0x7A	; 122
    112c:	b4 e4       	ldi	r27, 0x44	; 68
    112e:	80 83       	st	Z, r24
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	a2 83       	std	Z+2, r26	; 0x02
    1134:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	8e 01       	movw	r16, r28
    1138:	01 5c       	subi	r16, 0xC1	; 193
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	fe 01       	movw	r30, r28
    113e:	ed 5b       	subi	r30, 0xBD	; 189
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	4a e7       	ldi	r20, 0x7A	; 122
    1150:	55 e4       	ldi	r21, 0x45	; 69
    1152:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	f8 01       	movw	r30, r16
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	a2 83       	std	Z+2, r26	; 0x02
    1162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1164:	fe 01       	movw	r30, r28
    1166:	ff 96       	adiw	r30, 0x3f	; 63
    1168:	60 81       	ld	r22, Z
    116a:	71 81       	ldd	r23, Z+1	; 0x01
    116c:	82 81       	ldd	r24, Z+2	; 0x02
    116e:	93 81       	ldd	r25, Z+3	; 0x03
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	40 e8       	ldi	r20, 0x80	; 128
    1176:	5f e3       	ldi	r21, 0x3F	; 63
    1178:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    117c:	88 23       	and	r24, r24
    117e:	2c f4       	brge	.+10     	; 0x118a <main+0x3e0>
		__ticks = 1;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9e af       	std	Y+62, r25	; 0x3e
    1186:	8d af       	std	Y+61, r24	; 0x3d
    1188:	46 c0       	rjmp	.+140    	; 0x1216 <main+0x46c>
	else if (__tmp > 65535)
    118a:	fe 01       	movw	r30, r28
    118c:	ff 96       	adiw	r30, 0x3f	; 63
    118e:	60 81       	ld	r22, Z
    1190:	71 81       	ldd	r23, Z+1	; 0x01
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	64 f5       	brge	.+88     	; 0x11fe <main+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	fe 01       	movw	r30, r28
    11a8:	ed 5b       	subi	r30, 0xBD	; 189
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9e af       	std	Y+62, r25	; 0x3e
    11d2:	8d af       	std	Y+61, r24	; 0x3d
    11d4:	0f c0       	rjmp	.+30     	; 0x11f4 <main+0x44a>
    11d6:	80 e9       	ldi	r24, 0x90	; 144
    11d8:	91 e0       	ldi	r25, 0x01	; 1
    11da:	9c af       	std	Y+60, r25	; 0x3c
    11dc:	8b af       	std	Y+59, r24	; 0x3b
    11de:	8b ad       	ldd	r24, Y+59	; 0x3b
    11e0:	9c ad       	ldd	r25, Y+60	; 0x3c
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <main+0x438>
    11e6:	9c af       	std	Y+60, r25	; 0x3c
    11e8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	9e af       	std	Y+62, r25	; 0x3e
    11f2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    11f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	69 f7       	brne	.-38     	; 0x11d6 <main+0x42c>
    11fc:	16 c0       	rjmp	.+44     	; 0x122a <main+0x480>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fe:	fe 01       	movw	r30, r28
    1200:	ff 96       	adiw	r30, 0x3f	; 63
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	93 81       	ldd	r25, Z+3	; 0x03
    120a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e af       	std	Y+62, r25	; 0x3e
    1214:	8d af       	std	Y+61, r24	; 0x3d
    1216:	8d ad       	ldd	r24, Y+61	; 0x3d
    1218:	9e ad       	ldd	r25, Y+62	; 0x3e
    121a:	9a af       	std	Y+58, r25	; 0x3a
    121c:	89 af       	std	Y+57, r24	; 0x39
    121e:	89 ad       	ldd	r24, Y+57	; 0x39
    1220:	9a ad       	ldd	r25, Y+58	; 0x3a
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <main+0x478>
    1226:	9a af       	std	Y+58, r25	; 0x3a
    1228:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(delay);
				LCD_enu_Clear();
    122a:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
				LCD_enu_SendString("Enter Password:");
    122e:	8a ea       	ldi	r24, 0xAA	; 170
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
				LCD_enu_SetCursor(1, 0);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
    123e:	d6 ce       	rjmp	.-596    	; 0xfec <main+0x242>
			}else{
				//To display this message only once
				if(!homeFlag){
    1240:	fe 01       	movw	r30, r28
    1242:	e7 5a       	subi	r30, 0xA7	; 167
    1244:	ff 4f       	sbci	r31, 0xFF	; 255
    1246:	80 81       	ld	r24, Z
    1248:	88 23       	and	r24, r24
    124a:	09 f0       	breq	.+2      	; 0x124e <main+0x4a4>
    124c:	85 c0       	rjmp	.+266    	; 0x1358 <main+0x5ae>
					LCD_enu_Clear();
    124e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
					LCD_enu_SendString("Welcome :)");
    1252:	84 ed       	ldi	r24, 0xD4	; 212
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
					LCD_enu_SendString("Choose Option ..");
    1262:	8f ed       	ldi	r24, 0xDF	; 223
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
					homeFlag = 1;
    126a:	fe 01       	movw	r30, r28
    126c:	e7 5a       	subi	r30, 0xA7	; 167
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 83       	st	Z, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	aa e7       	ldi	r26, 0x7A	; 122
    127a:	b4 e4       	ldi	r27, 0x44	; 68
    127c:	8d ab       	std	Y+53, r24	; 0x35
    127e:	9e ab       	std	Y+54, r25	; 0x36
    1280:	af ab       	std	Y+55, r26	; 0x37
    1282:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6d a9       	ldd	r22, Y+53	; 0x35
    1286:	7e a9       	ldd	r23, Y+54	; 0x36
    1288:	8f a9       	ldd	r24, Y+55	; 0x37
    128a:	98 ad       	ldd	r25, Y+56	; 0x38
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	55 e4       	ldi	r21, 0x45	; 69
    1294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	89 ab       	std	Y+49, r24	; 0x31
    129e:	9a ab       	std	Y+50, r25	; 0x32
    12a0:	ab ab       	std	Y+51, r26	; 0x33
    12a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12a4:	69 a9       	ldd	r22, Y+49	; 0x31
    12a6:	7a a9       	ldd	r23, Y+50	; 0x32
    12a8:	8b a9       	ldd	r24, Y+51	; 0x33
    12aa:	9c a9       	ldd	r25, Y+52	; 0x34
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <main+0x51c>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 ab       	std	Y+48, r25	; 0x30
    12c2:	8f a7       	std	Y+47, r24	; 0x2f
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <main+0x59a>
	else if (__tmp > 65535)
    12c6:	69 a9       	ldd	r22, Y+49	; 0x31
    12c8:	7a a9       	ldd	r23, Y+50	; 0x32
    12ca:	8b a9       	ldd	r24, Y+51	; 0x33
    12cc:	9c a9       	ldd	r25, Y+52	; 0x34
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <main+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6d a9       	ldd	r22, Y+53	; 0x35
    12e0:	7e a9       	ldd	r23, Y+54	; 0x36
    12e2:	8f a9       	ldd	r24, Y+55	; 0x37
    12e4:	98 ad       	ldd	r25, Y+56	; 0x38
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	98 ab       	std	Y+48, r25	; 0x30
    1304:	8f a7       	std	Y+47, r24	; 0x2f
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <main+0x57c>
    1308:	80 e9       	ldi	r24, 0x90	; 144
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	9e a7       	std	Y+46, r25	; 0x2e
    130e:	8d a7       	std	Y+45, r24	; 0x2d
    1310:	8d a5       	ldd	r24, Y+45	; 0x2d
    1312:	9e a5       	ldd	r25, Y+46	; 0x2e
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <main+0x56a>
    1318:	9e a7       	std	Y+46, r25	; 0x2e
    131a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8f a5       	ldd	r24, Y+47	; 0x2f
    131e:	98 a9       	ldd	r25, Y+48	; 0x30
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	98 ab       	std	Y+48, r25	; 0x30
    1324:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8f a5       	ldd	r24, Y+47	; 0x2f
    1328:	98 a9       	ldd	r25, Y+48	; 0x30
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <main+0x55e>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <main+0x5ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	69 a9       	ldd	r22, Y+49	; 0x31
    1332:	7a a9       	ldd	r23, Y+50	; 0x32
    1334:	8b a9       	ldd	r24, Y+51	; 0x33
    1336:	9c a9       	ldd	r25, Y+52	; 0x34
    1338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	98 ab       	std	Y+48, r25	; 0x30
    1342:	8f a7       	std	Y+47, r24	; 0x2f
    1344:	8f a5       	ldd	r24, Y+47	; 0x2f
    1346:	98 a9       	ldd	r25, Y+48	; 0x30
    1348:	9c a7       	std	Y+44, r25	; 0x2c
    134a:	8b a7       	std	Y+43, r24	; 0x2b
    134c:	8b a5       	ldd	r24, Y+43	; 0x2b
    134e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <main+0x5a6>
    1354:	9c a7       	std	Y+44, r25	; 0x2c
    1356:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(delay);
				}
				displayOptionsPage();
    1358:	0e 94 47 06 	call	0xc8e	; 0xc8e <displayOptionsPage>
				takeUserOption(&order);
    135c:	ce 01       	movw	r24, r28
    135e:	88 59       	subi	r24, 0x98	; 152
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <takeUserOption>
/************************************DC Motor Section*************************************/
				if(order == '1'){
    1366:	fe 01       	movw	r30, r28
    1368:	e8 59       	subi	r30, 0x98	; 152
    136a:	ff 4f       	sbci	r31, 0xFF	; 255
    136c:	80 81       	ld	r24, Z
    136e:	81 33       	cpi	r24, 0x31	; 49
    1370:	31 f5       	brne	.+76     	; 0x13be <main+0x614>
					displayRotationOptions();
    1372:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <displayRotationOptions>
					takeUserOption(&order);
    1376:	ce 01       	movw	r24, r28
    1378:	88 59       	subi	r24, 0x98	; 152
    137a:	9f 4f       	sbci	r25, 0xFF	; 255
    137c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <takeUserOption>
					// Rotate DC Motors CW
					if(order == '1'){
    1380:	fe 01       	movw	r30, r28
    1382:	e8 59       	subi	r30, 0x98	; 152
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	80 81       	ld	r24, Z
    1388:	81 33       	cpi	r24, 0x31	; 49
    138a:	49 f4       	brne	.+18     	; 0x139e <main+0x5f4>
						DC_Motor_enu_Rotate(MOTOR1, CW);
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	61 e0       	ldi	r22, 0x01	; 1
    1390:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <DC_Motor_enu_Rotate>
						DC_Motor_enu_Rotate(MOTOR2, CW);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	61 e0       	ldi	r22, 0x01	; 1
    1398:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <DC_Motor_enu_Rotate>
    139c:	27 ce       	rjmp	.-946    	; 0xfec <main+0x242>
					}
					// Rotate DC Motors CCW
					else if (order == '2'){
    139e:	fe 01       	movw	r30, r28
    13a0:	e8 59       	subi	r30, 0x98	; 152
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	82 33       	cpi	r24, 0x32	; 50
    13a8:	09 f0       	breq	.+2      	; 0x13ac <main+0x602>
    13aa:	20 ce       	rjmp	.-960    	; 0xfec <main+0x242>
						DC_Motor_enu_Rotate(MOTOR1, CCW);
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <DC_Motor_enu_Rotate>
						DC_Motor_enu_Rotate(MOTOR2, CCW);
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <DC_Motor_enu_Rotate>
    13bc:	17 ce       	rjmp	.-978    	; 0xfec <main+0x242>
					}
/****************************** Stepper Motor Section **************************************/
				}else if(order == '2'){
    13be:	fe 01       	movw	r30, r28
    13c0:	e8 59       	subi	r30, 0x98	; 152
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	82 33       	cpi	r24, 0x32	; 50
    13c8:	09 f0       	breq	.+2      	; 0x13cc <main+0x622>
    13ca:	71 c1       	rjmp	.+738    	; 0x16ae <main+0x904>
					// Take Stepper Motor Angle
					LCD_enu_Clear();
    13cc:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
					LCD_enu_SendString("Enter Angle:");
    13d0:	80 ef       	ldi	r24, 0xF0	; 240
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
					u8 stepperMotorAngle[3],angleCounter = 0 ;
    13d8:	fe 01       	movw	r30, r28
    13da:	eb 5a       	subi	r30, 0xAB	; 171
    13dc:	ff 4f       	sbci	r31, 0xFF	; 255
    13de:	10 82       	st	Z, r1
    13e0:	50 c0       	rjmp	.+160    	; 0x1482 <main+0x6d8>
					// Display and Storing Angle
					while(angleCounter!=3){
						Keypad_enu_getKey(&key);
    13e2:	ce 01       	movw	r24, r28
    13e4:	89 59       	subi	r24, 0x99	; 153
    13e6:	9f 4f       	sbci	r25, 0xFF	; 255
    13e8:	0e 94 99 17 	call	0x2f32	; 0x2f32 <Keypad_enu_getKey>
						if(key != KEYPAD_U8_NO_KEY_PRESSED && key != '='){
    13ec:	fe 01       	movw	r30, r28
    13ee:	e9 59       	subi	r30, 0x99	; 153
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 3f       	cpi	r24, 0xFF	; 255
    13f6:	39 f1       	breq	.+78     	; 0x1446 <main+0x69c>
    13f8:	fe 01       	movw	r30, r28
    13fa:	e9 59       	subi	r30, 0x99	; 153
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	8d 33       	cpi	r24, 0x3D	; 61
    1402:	09 f1       	breq	.+66     	; 0x1446 <main+0x69c>
							LCD_enu_SendChar(key);
    1404:	fe 01       	movw	r30, r28
    1406:	e9 59       	subi	r30, 0x99	; 153
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 81       	ld	r24, Z
    140c:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_enu_SendChar>
							stepperMotorAngle[angleCounter] = key;
    1410:	fe 01       	movw	r30, r28
    1412:	eb 5a       	subi	r30, 0xAB	; 171
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	fe 01       	movw	r30, r28
    141e:	e9 59       	subi	r30, 0x99	; 153
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	40 81       	ld	r20, Z
    1424:	ce 01       	movw	r24, r28
    1426:	87 59       	subi	r24, 0x97	; 151
    1428:	9f 4f       	sbci	r25, 0xFF	; 255
    142a:	fc 01       	movw	r30, r24
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	40 83       	st	Z, r20
							angleCounter++;
    1432:	de 01       	movw	r26, r28
    1434:	ab 5a       	subi	r26, 0xAB	; 171
    1436:	bf 4f       	sbci	r27, 0xFF	; 255
    1438:	fe 01       	movw	r30, r28
    143a:	eb 5a       	subi	r30, 0xAB	; 171
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 81       	ld	r24, Z
    1440:	8f 5f       	subi	r24, 0xFF	; 255
    1442:	8c 93       	st	X, r24
    1444:	1e c0       	rjmp	.+60     	; 0x1482 <main+0x6d8>
						}else if(key == '=') {
    1446:	fe 01       	movw	r30, r28
    1448:	e9 59       	subi	r30, 0x99	; 153
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	80 81       	ld	r24, Z
    144e:	8d 33       	cpi	r24, 0x3D	; 61
    1450:	c1 f4       	brne	.+48     	; 0x1482 <main+0x6d8>
						// if user entered angle of one or two digits
						if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
    1452:	fe 01       	movw	r30, r28
    1454:	eb 5a       	subi	r30, 0xAB	; 171
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	80 81       	ld	r24, Z
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	31 f4       	brne	.+12     	; 0x146a <main+0x6c0>
    145e:	fe 01       	movw	r30, r28
    1460:	e7 59       	subi	r30, 0x97	; 151
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	81 e6       	ldi	r24, 0x61	; 97
    1466:	81 83       	std	Z+1, r24	; 0x01
    1468:	13 c0       	rjmp	.+38     	; 0x1490 <main+0x6e6>
						if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
    146a:	fe 01       	movw	r30, r28
    146c:	eb 5a       	subi	r30, 0xAB	; 171
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	31 f4       	brne	.+12     	; 0x1482 <main+0x6d8>
    1476:	fe 01       	movw	r30, r28
    1478:	e7 59       	subi	r30, 0x97	; 151
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	81 e6       	ldi	r24, 0x61	; 97
    147e:	82 83       	std	Z+2, r24	; 0x02
    1480:	07 c0       	rjmp	.+14     	; 0x1490 <main+0x6e6>
					// Take Stepper Motor Angle
					LCD_enu_Clear();
					LCD_enu_SendString("Enter Angle:");
					u8 stepperMotorAngle[3],angleCounter = 0 ;
					// Display and Storing Angle
					while(angleCounter!=3){
    1482:	fe 01       	movw	r30, r28
    1484:	eb 5a       	subi	r30, 0xAB	; 171
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	09 f0       	breq	.+2      	; 0x1490 <main+0x6e6>
    148e:	a9 cf       	rjmp	.-174    	; 0x13e2 <main+0x638>
						// if user entered angle of one or two digits
						if(angleCounter==1) {stepperMotorAngle[1]  = 'a';break;}
						if(angleCounter==2) {stepperMotorAngle[2]  = 'a';break;}
						}
					}
					displayRotationOptions();
    1490:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <displayRotationOptions>
					takeUserOption(&order);
    1494:	ce 01       	movw	r24, r28
    1496:	88 59       	subi	r24, 0x98	; 152
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <takeUserOption>
					// Rotate Stepper Motor CW With Entered Angle
					if(order == '1'){
    149e:	fe 01       	movw	r30, r28
    14a0:	e8 59       	subi	r30, 0x98	; 152
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	81 33       	cpi	r24, 0x31	; 49
    14a8:	09 f0       	breq	.+2      	; 0x14ac <main+0x702>
    14aa:	7d c0       	rjmp	.+250    	; 0x15a6 <main+0x7fc>
						STEP_Motor_enu_Rotate(CW, returnAngle(stepperMotorAngle) );
    14ac:	ce 01       	movw	r24, r28
    14ae:	87 59       	subi	r24, 0x97	; 151
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	0e 94 90 06 	call	0xd20	; 0xd20 <returnAngle>
    14b6:	9c 01       	movw	r18, r24
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	b9 01       	movw	r22, r18
    14bc:	0e 94 29 0c 	call	0x1852	; 0x1852 <STEP_Motor_enu_Rotate>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	aa e7       	ldi	r26, 0x7A	; 122
    14c6:	b4 e4       	ldi	r27, 0x44	; 68
    14c8:	8f a3       	std	Y+39, r24	; 0x27
    14ca:	98 a7       	std	Y+40, r25	; 0x28
    14cc:	a9 a7       	std	Y+41, r26	; 0x29
    14ce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	6f a1       	ldd	r22, Y+39	; 0x27
    14d2:	78 a5       	ldd	r23, Y+40	; 0x28
    14d4:	89 a5       	ldd	r24, Y+41	; 0x29
    14d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a e7       	ldi	r20, 0x7A	; 122
    14de:	55 e4       	ldi	r21, 0x45	; 69
    14e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8b a3       	std	Y+35, r24	; 0x23
    14ea:	9c a3       	std	Y+36, r25	; 0x24
    14ec:	ad a3       	std	Y+37, r26	; 0x25
    14ee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14f0:	6b a1       	ldd	r22, Y+35	; 0x23
    14f2:	7c a1       	ldd	r23, Y+36	; 0x24
    14f4:	8d a1       	ldd	r24, Y+37	; 0x25
    14f6:	9e a1       	ldd	r25, Y+38	; 0x26
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <main+0x768>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9a a3       	std	Y+34, r25	; 0x22
    150e:	89 a3       	std	Y+33, r24	; 0x21
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <main+0x7e6>
	else if (__tmp > 65535)
    1512:	6b a1       	ldd	r22, Y+35	; 0x23
    1514:	7c a1       	ldd	r23, Y+36	; 0x24
    1516:	8d a1       	ldd	r24, Y+37	; 0x25
    1518:	9e a1       	ldd	r25, Y+38	; 0x26
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3f ef       	ldi	r19, 0xFF	; 255
    151e:	4f e7       	ldi	r20, 0x7F	; 127
    1520:	57 e4       	ldi	r21, 0x47	; 71
    1522:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <main+0x7d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	6f a1       	ldd	r22, Y+39	; 0x27
    152c:	78 a5       	ldd	r23, Y+40	; 0x28
    152e:	89 a5       	ldd	r24, Y+41	; 0x29
    1530:	9a a5       	ldd	r25, Y+42	; 0x2a
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9a a3       	std	Y+34, r25	; 0x22
    1550:	89 a3       	std	Y+33, r24	; 0x21
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <main+0x7c8>
    1554:	80 e9       	ldi	r24, 0x90	; 144
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	98 a3       	std	Y+32, r25	; 0x20
    155a:	8f 8f       	std	Y+31, r24	; 0x1f
    155c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    155e:	98 a1       	ldd	r25, Y+32	; 0x20
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <main+0x7b6>
    1564:	98 a3       	std	Y+32, r25	; 0x20
    1566:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	89 a1       	ldd	r24, Y+33	; 0x21
    156a:	9a a1       	ldd	r25, Y+34	; 0x22
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	89 a1       	ldd	r24, Y+33	; 0x21
    1574:	9a a1       	ldd	r25, Y+34	; 0x22
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f7       	brne	.-38     	; 0x1554 <main+0x7aa>
    157a:	38 cd       	rjmp	.-1424   	; 0xfec <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	6b a1       	ldd	r22, Y+35	; 0x23
    157e:	7c a1       	ldd	r23, Y+36	; 0x24
    1580:	8d a1       	ldd	r24, Y+37	; 0x25
    1582:	9e a1       	ldd	r25, Y+38	; 0x26
    1584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9a a3       	std	Y+34, r25	; 0x22
    158e:	89 a3       	std	Y+33, r24	; 0x21
    1590:	89 a1       	ldd	r24, Y+33	; 0x21
    1592:	9a a1       	ldd	r25, Y+34	; 0x22
    1594:	9e 8f       	std	Y+30, r25	; 0x1e
    1596:	8d 8f       	std	Y+29, r24	; 0x1d
    1598:	8d 8d       	ldd	r24, Y+29	; 0x1d
    159a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <main+0x7f2>
    15a0:	9e 8f       	std	Y+30, r25	; 0x1e
    15a2:	8d 8f       	std	Y+29, r24	; 0x1d
    15a4:	23 cd       	rjmp	.-1466   	; 0xfec <main+0x242>
						_delay_ms(delay);
					}
					// Rotate Stepper Motor CCW With Entered Angle
					else if (order == '2'){
    15a6:	fe 01       	movw	r30, r28
    15a8:	e8 59       	subi	r30, 0x98	; 152
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	82 33       	cpi	r24, 0x32	; 50
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <main+0x80a>
    15b2:	1c cd       	rjmp	.-1480   	; 0xfec <main+0x242>
						STEP_Motor_enu_Rotate(CCW, returnAngle(stepperMotorAngle) );
    15b4:	ce 01       	movw	r24, r28
    15b6:	87 59       	subi	r24, 0x97	; 151
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	0e 94 90 06 	call	0xd20	; 0xd20 <returnAngle>
    15be:	9c 01       	movw	r18, r24
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	b9 01       	movw	r22, r18
    15c4:	0e 94 29 0c 	call	0x1852	; 0x1852 <STEP_Motor_enu_Rotate>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	aa e7       	ldi	r26, 0x7A	; 122
    15ce:	b4 e4       	ldi	r27, 0x44	; 68
    15d0:	89 8f       	std	Y+25, r24	; 0x19
    15d2:	9a 8f       	std	Y+26, r25	; 0x1a
    15d4:	ab 8f       	std	Y+27, r26	; 0x1b
    15d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15d8:	69 8d       	ldd	r22, Y+25	; 0x19
    15da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4a e7       	ldi	r20, 0x7A	; 122
    15e6:	55 e4       	ldi	r21, 0x45	; 69
    15e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	8d 8b       	std	Y+21, r24	; 0x15
    15f2:	9e 8b       	std	Y+22, r25	; 0x16
    15f4:	af 8b       	std	Y+23, r26	; 0x17
    15f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15f8:	6d 89       	ldd	r22, Y+21	; 0x15
    15fa:	7e 89       	ldd	r23, Y+22	; 0x16
    15fc:	8f 89       	ldd	r24, Y+23	; 0x17
    15fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	40 e8       	ldi	r20, 0x80	; 128
    1606:	5f e3       	ldi	r21, 0x3F	; 63
    1608:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    160c:	88 23       	and	r24, r24
    160e:	2c f4       	brge	.+10     	; 0x161a <main+0x870>
		__ticks = 1;
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	8b 8b       	std	Y+19, r24	; 0x13
    1618:	3f c0       	rjmp	.+126    	; 0x1698 <main+0x8ee>
	else if (__tmp > 65535)
    161a:	6d 89       	ldd	r22, Y+21	; 0x15
    161c:	7e 89       	ldd	r23, Y+22	; 0x16
    161e:	8f 89       	ldd	r24, Y+23	; 0x17
    1620:	98 8d       	ldd	r25, Y+24	; 0x18
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	3f ef       	ldi	r19, 0xFF	; 255
    1626:	4f e7       	ldi	r20, 0x7F	; 127
    1628:	57 e4       	ldi	r21, 0x47	; 71
    162a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    162e:	18 16       	cp	r1, r24
    1630:	4c f5       	brge	.+82     	; 0x1684 <main+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1632:	69 8d       	ldd	r22, Y+25	; 0x19
    1634:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e2       	ldi	r20, 0x20	; 32
    1640:	51 e4       	ldi	r21, 0x41	; 65
    1642:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	9c 8b       	std	Y+20, r25	; 0x14
    1658:	8b 8b       	std	Y+19, r24	; 0x13
    165a:	0f c0       	rjmp	.+30     	; 0x167a <main+0x8d0>
    165c:	80 e9       	ldi	r24, 0x90	; 144
    165e:	91 e0       	ldi	r25, 0x01	; 1
    1660:	9a 8b       	std	Y+18, r25	; 0x12
    1662:	89 8b       	std	Y+17, r24	; 0x11
    1664:	89 89       	ldd	r24, Y+17	; 0x11
    1666:	9a 89       	ldd	r25, Y+18	; 0x12
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	f1 f7       	brne	.-4      	; 0x1668 <main+0x8be>
    166c:	9a 8b       	std	Y+18, r25	; 0x12
    166e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	8b 89       	ldd	r24, Y+19	; 0x13
    1672:	9c 89       	ldd	r25, Y+20	; 0x14
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	9c 8b       	std	Y+20, r25	; 0x14
    1678:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	8b 89       	ldd	r24, Y+19	; 0x13
    167c:	9c 89       	ldd	r25, Y+20	; 0x14
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	69 f7       	brne	.-38     	; 0x165c <main+0x8b2>
    1682:	b4 cc       	rjmp	.-1688   	; 0xfec <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1684:	6d 89       	ldd	r22, Y+21	; 0x15
    1686:	7e 89       	ldd	r23, Y+22	; 0x16
    1688:	8f 89       	ldd	r24, Y+23	; 0x17
    168a:	98 8d       	ldd	r25, Y+24	; 0x18
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	98 8b       	std	Y+16, r25	; 0x10
    169e:	8f 87       	std	Y+15, r24	; 0x0f
    16a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a2:	98 89       	ldd	r25, Y+16	; 0x10
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <main+0x8fa>
    16a8:	98 8b       	std	Y+16, r25	; 0x10
    16aa:	8f 87       	std	Y+15, r24	; 0x0f
    16ac:	9f cc       	rjmp	.-1730   	; 0xfec <main+0x242>
						_delay_ms(delay);
					}
/********************************************* Exit Section *****************************************/
				}else if (order == '3'){
    16ae:	fe 01       	movw	r30, r28
    16b0:	e8 59       	subi	r30, 0x98	; 152
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	83 33       	cpi	r24, 0x33	; 51
    16b8:	09 f0       	breq	.+2      	; 0x16bc <main+0x912>
    16ba:	98 cc       	rjmp	.-1744   	; 0xfec <main+0x242>
					LCD_enu_Clear();
    16bc:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
					LCD_enu_SendString("Exiting .. ");
    16c0:	8d ef       	ldi	r24, 0xFD	; 253
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
					LCD_enu_SetCursor(1, 0);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
					LCD_enu_SendString("Stopping Motors");
    16d0:	89 e0       	ldi	r24, 0x09	; 9
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	0e 94 cb 12 	call	0x2596	; 0x2596 <LCD_enu_SendString>
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	aa e7       	ldi	r26, 0x7A	; 122
    16de:	b4 e4       	ldi	r27, 0x44	; 68
    16e0:	8b 87       	std	Y+11, r24	; 0x0b
    16e2:	9c 87       	std	Y+12, r25	; 0x0c
    16e4:	ad 87       	std	Y+13, r26	; 0x0d
    16e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	4a e7       	ldi	r20, 0x7A	; 122
    16f6:	55 e4       	ldi	r21, 0x45	; 69
    16f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	8f 83       	std	Y+7, r24	; 0x07
    1702:	98 87       	std	Y+8, r25	; 0x08
    1704:	a9 87       	std	Y+9, r26	; 0x09
    1706:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1708:	6f 81       	ldd	r22, Y+7	; 0x07
    170a:	78 85       	ldd	r23, Y+8	; 0x08
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	2c f4       	brge	.+10     	; 0x172a <main+0x980>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	3f c0       	rjmp	.+126    	; 0x17a8 <main+0x9fe>
	else if (__tmp > 65535)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	3f ef       	ldi	r19, 0xFF	; 255
    1736:	4f e7       	ldi	r20, 0x7F	; 127
    1738:	57 e4       	ldi	r21, 0x47	; 71
    173a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    173e:	18 16       	cp	r1, r24
    1740:	4c f5       	brge	.+82     	; 0x1794 <main+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	6b 85       	ldd	r22, Y+11	; 0x0b
    1744:	7c 85       	ldd	r23, Y+12	; 0x0c
    1746:	8d 85       	ldd	r24, Y+13	; 0x0d
    1748:	9e 85       	ldd	r25, Y+14	; 0x0e
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e2       	ldi	r20, 0x20	; 32
    1750:	51 e4       	ldi	r21, 0x41	; 65
    1752:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	9e 83       	std	Y+6, r25	; 0x06
    1768:	8d 83       	std	Y+5, r24	; 0x05
    176a:	0f c0       	rjmp	.+30     	; 0x178a <main+0x9e0>
    176c:	80 e9       	ldi	r24, 0x90	; 144
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <main+0x9ce>
    177c:	9c 83       	std	Y+4, r25	; 0x04
    177e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	9e 81       	ldd	r25, Y+6	; 0x06
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	69 f7       	brne	.-38     	; 0x176c <main+0x9c2>
    1792:	14 c0       	rjmp	.+40     	; 0x17bc <main+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	8d 81       	ldd	r24, Y+5	; 0x05
    17aa:	9e 81       	ldd	r25, Y+6	; 0x06
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 97       	sbiw	r24, 0x01	; 1
    17b6:	f1 f7       	brne	.-4      	; 0x17b4 <main+0xa0a>
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(delay);
					LCD_enu_Clear();
    17bc:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <LCD_enu_Clear>
					/*Stop All Motors*/
					DC_Motor_enu_Stop(MOTOR1);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	0e 94 74 19 	call	0x32e8	; 0x32e8 <DC_Motor_enu_Stop>
					DC_Motor_enu_Stop(MOTOR2);
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 74 19 	call	0x32e8	; 0x32e8 <DC_Motor_enu_Stop>
					STEP_Motor_enu_Rotate(CW,0);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	0e 94 29 0c 	call	0x1852	; 0x1852 <STEP_Motor_enu_Rotate>
				}
			}
		}

	}
	return 0;
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
}
    17da:	c0 59       	subi	r28, 0x90	; 144
    17dc:	df 4f       	sbci	r29, 0xFF	; 255
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <STEP_Motor_enu_Init>:


#define  delay   125

ES_t STEP_Motor_enu_Init()
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_OUTPUT);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_OUTPUT);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_OUTPUT);
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	62 e0       	ldi	r22, 0x02	; 2
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_OUTPUT);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	63 e0       	ldi	r22, 0x03	; 3
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	61 e0       	ldi	r22, 0x01	; 1
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	62 e0       	ldi	r22, 0x02	; 2
    183a:	40 e0       	ldi	r20, 0x00	; 0
    183c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	63 e0       	ldi	r22, 0x03	; 3
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>

    return STATE_OK;
    184a:	81 e0       	ldi	r24, 0x01	; 1
}
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <STEP_Motor_enu_Rotate>:
ES_t STEP_Motor_enu_Rotate(u8 Copy_u8_Direction, u16 Copy_u16_Angle)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	a5 97       	sbiw	r28, 0x25	; 37
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	8b a3       	std	Y+35, r24	; 0x23
    1868:	7d a3       	std	Y+37, r23	; 0x25
    186a:	6c a3       	std	Y+36, r22	; 0x24
    u8 Local_u8_errorState = STATE_OK;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	8a a3       	std	Y+34, r24	; 0x22
    if ((Copy_u8_Direction == CW || Copy_u8_Direction == CCW) && (Copy_u16_Angle >= 0 && Copy_u16_Angle <= 360))
    1870:	8b a1       	ldd	r24, Y+35	; 0x23
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	21 f0       	breq	.+8      	; 0x187e <STEP_Motor_enu_Rotate+0x2c>
    1876:	8b a1       	ldd	r24, Y+35	; 0x23
    1878:	88 23       	and	r24, r24
    187a:	09 f0       	breq	.+2      	; 0x187e <STEP_Motor_enu_Rotate+0x2c>
    187c:	a5 c1       	rjmp	.+842    	; 0x1bc8 <STEP_Motor_enu_Rotate+0x376>
    187e:	8c a1       	ldd	r24, Y+36	; 0x24
    1880:	9d a1       	ldd	r25, Y+37	; 0x25
    1882:	21 e0       	ldi	r18, 0x01	; 1
    1884:	89 36       	cpi	r24, 0x69	; 105
    1886:	92 07       	cpc	r25, r18
    1888:	08 f0       	brcs	.+2      	; 0x188c <STEP_Motor_enu_Rotate+0x3a>
    188a:	9e c1       	rjmp	.+828    	; 0x1bc8 <STEP_Motor_enu_Rotate+0x376>
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
    188c:	8f e0       	ldi	r24, 0x0F	; 15
    188e:	89 a3       	std	Y+33, r24	; 0x21
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
    1890:	8c a1       	ldd	r24, Y+36	; 0x24
    1892:	9d a1       	ldd	r25, Y+37	; 0x25
    1894:	2a e5       	ldi	r18, 0x5A	; 90
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	b9 01       	movw	r22, r18
    189a:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__udivmodhi4>
    189e:	cb 01       	movw	r24, r22
    18a0:	98 a3       	std	Y+32, r25	; 0x20
    18a2:	8f 8f       	std	Y+31, r24	; 0x1f
        if (Copy_u8_Direction == CW)
    18a4:	8b a1       	ldd	r24, Y+35	; 0x23
    18a6:	81 30       	cpi	r24, 0x01	; 1
    18a8:	09 f0       	breq	.+2      	; 0x18ac <STEP_Motor_enu_Rotate+0x5a>
    18aa:	c5 c0       	rjmp	.+394    	; 0x1a36 <STEP_Motor_enu_Rotate+0x1e4>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    18ac:	1e 8e       	std	Y+30, r1	; 0x1e
    18ae:	b9 c0       	rjmp	.+370    	; 0x1a22 <STEP_Motor_enu_Rotate+0x1d0>
            {
                state &=  3<<(Local_u8_Iterator%4);
    18b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9c 01       	movw	r18, r24
    18b8:	23 70       	andi	r18, 0x03	; 3
    18ba:	30 70       	andi	r19, 0x00	; 0
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <STEP_Motor_enu_Rotate+0x76>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <STEP_Motor_enu_Rotate+0x72>
    18cc:	98 2f       	mov	r25, r24
    18ce:	89 a1       	ldd	r24, Y+33	; 0x21
    18d0:	89 23       	and	r24, r25
    18d2:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    18d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	83 70       	andi	r24, 0x03	; 3
    18dc:	90 70       	andi	r25, 0x00	; 0
    18de:	83 30       	cpi	r24, 0x03	; 3
    18e0:	91 05       	cpc	r25, r1
    18e2:	11 f4       	brne	.+4      	; 0x18e8 <STEP_Motor_enu_Rotate+0x96>
    18e4:	89 e0       	ldi	r24, 0x09	; 9
    18e6:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_0BIT)&MASK_BIT);
    18e8:	89 a1       	ldd	r24, Y+33	; 0x21
    18ea:	98 2f       	mov	r25, r24
    18ec:	91 70       	andi	r25, 0x01	; 1
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	63 e0       	ldi	r22, 0x03	; 3
    18f2:	49 2f       	mov	r20, r25
    18f4:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_1BIT)&MASK_BIT);
    18f8:	89 a1       	ldd	r24, Y+33	; 0x21
    18fa:	86 95       	lsr	r24
    18fc:	98 2f       	mov	r25, r24
    18fe:	91 70       	andi	r25, 0x01	; 1
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	49 2f       	mov	r20, r25
    1906:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_2BIT)&MASK_BIT);
    190a:	89 a1       	ldd	r24, Y+33	; 0x21
    190c:	86 95       	lsr	r24
    190e:	86 95       	lsr	r24
    1910:	98 2f       	mov	r25, r24
    1912:	91 70       	andi	r25, 0x01	; 1
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	49 2f       	mov	r20, r25
    191a:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
    191e:	89 a1       	ldd	r24, Y+33	; 0x21
    1920:	86 95       	lsr	r24
    1922:	86 95       	lsr	r24
    1924:	86 95       	lsr	r24
    1926:	98 2f       	mov	r25, r24
    1928:	91 70       	andi	r25, 0x01	; 1
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	49 2f       	mov	r20, r25
    1930:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	aa ef       	ldi	r26, 0xFA	; 250
    193a:	b2 e4       	ldi	r27, 0x42	; 66
    193c:	89 8f       	std	Y+25, r24	; 0x19
    193e:	9a 8f       	std	Y+26, r25	; 0x1a
    1940:	ab 8f       	std	Y+27, r26	; 0x1b
    1942:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1944:	69 8d       	ldd	r22, Y+25	; 0x19
    1946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	4a e7       	ldi	r20, 0x7A	; 122
    1952:	55 e4       	ldi	r21, 0x45	; 69
    1954:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	8d 8b       	std	Y+21, r24	; 0x15
    195e:	9e 8b       	std	Y+22, r25	; 0x16
    1960:	af 8b       	std	Y+23, r26	; 0x17
    1962:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1964:	6d 89       	ldd	r22, Y+21	; 0x15
    1966:	7e 89       	ldd	r23, Y+22	; 0x16
    1968:	8f 89       	ldd	r24, Y+23	; 0x17
    196a:	98 8d       	ldd	r25, Y+24	; 0x18
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e8       	ldi	r20, 0x80	; 128
    1972:	5f e3       	ldi	r21, 0x3F	; 63
    1974:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1978:	88 23       	and	r24, r24
    197a:	2c f4       	brge	.+10     	; 0x1986 <STEP_Motor_enu_Rotate+0x134>
		__ticks = 1;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	9c 8b       	std	Y+20, r25	; 0x14
    1982:	8b 8b       	std	Y+19, r24	; 0x13
    1984:	3f c0       	rjmp	.+126    	; 0x1a04 <STEP_Motor_enu_Rotate+0x1b2>
	else if (__tmp > 65535)
    1986:	6d 89       	ldd	r22, Y+21	; 0x15
    1988:	7e 89       	ldd	r23, Y+22	; 0x16
    198a:	8f 89       	ldd	r24, Y+23	; 0x17
    198c:	98 8d       	ldd	r25, Y+24	; 0x18
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	3f ef       	ldi	r19, 0xFF	; 255
    1992:	4f e7       	ldi	r20, 0x7F	; 127
    1994:	57 e4       	ldi	r21, 0x47	; 71
    1996:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    199a:	18 16       	cp	r1, r24
    199c:	4c f5       	brge	.+82     	; 0x19f0 <STEP_Motor_enu_Rotate+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199e:	69 8d       	ldd	r22, Y+25	; 0x19
    19a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e2       	ldi	r20, 0x20	; 32
    19ac:	51 e4       	ldi	r21, 0x41	; 65
    19ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	9c 8b       	std	Y+20, r25	; 0x14
    19c4:	8b 8b       	std	Y+19, r24	; 0x13
    19c6:	0f c0       	rjmp	.+30     	; 0x19e6 <STEP_Motor_enu_Rotate+0x194>
    19c8:	80 e9       	ldi	r24, 0x90	; 144
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	9a 8b       	std	Y+18, r25	; 0x12
    19ce:	89 8b       	std	Y+17, r24	; 0x11
    19d0:	89 89       	ldd	r24, Y+17	; 0x11
    19d2:	9a 89       	ldd	r25, Y+18	; 0x12
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <STEP_Motor_enu_Rotate+0x182>
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19dc:	8b 89       	ldd	r24, Y+19	; 0x13
    19de:	9c 89       	ldd	r25, Y+20	; 0x14
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	9c 8b       	std	Y+20, r25	; 0x14
    19e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e6:	8b 89       	ldd	r24, Y+19	; 0x13
    19e8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	69 f7       	brne	.-38     	; 0x19c8 <STEP_Motor_enu_Rotate+0x176>
    19ee:	14 c0       	rjmp	.+40     	; 0x1a18 <STEP_Motor_enu_Rotate+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	6d 89       	ldd	r22, Y+21	; 0x15
    19f2:	7e 89       	ldd	r23, Y+22	; 0x16
    19f4:	8f 89       	ldd	r24, Y+23	; 0x17
    19f6:	98 8d       	ldd	r25, Y+24	; 0x18
    19f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9c 89       	ldd	r25, Y+20	; 0x14
    1a08:	98 8b       	std	Y+16, r25	; 0x10
    1a0a:	8f 87       	std	Y+15, r24	; 0x0f
    1a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0e:	98 89       	ldd	r25, Y+16	; 0x10
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <STEP_Motor_enu_Rotate+0x1be>
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(delay);
                state = 0x0F;
    1a18:	8f e0       	ldi	r24, 0x0F	; 15
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    {
        u8 state = MOTOR_PINS_STATE; // 0000 1111
        u16 Local_u16_numOFSteps = Copy_u16_Angle / STEP_ANGLE;
        if (Copy_u8_Direction == CW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	8e 8f       	std	Y+30, r24	; 0x1e
    1a22:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1a2c:	28 17       	cp	r18, r24
    1a2e:	39 07       	cpc	r19, r25
    1a30:	08 f4       	brcc	.+2      	; 0x1a34 <STEP_Motor_enu_Rotate+0x1e2>
    1a32:	3e cf       	rjmp	.-388    	; 0x18b0 <STEP_Motor_enu_Rotate+0x5e>
    1a34:	ca c0       	rjmp	.+404    	; 0x1bca <STEP_Motor_enu_Rotate+0x378>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_3BIT)&MASK_BIT);
                _delay_ms(delay);
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
    1a36:	8b a1       	ldd	r24, Y+35	; 0x23
    1a38:	88 23       	and	r24, r24
    1a3a:	09 f0       	breq	.+2      	; 0x1a3e <STEP_Motor_enu_Rotate+0x1ec>
    1a3c:	c6 c0       	rjmp	.+396    	; 0x1bca <STEP_Motor_enu_Rotate+0x378>
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1a3e:	1d 8e       	std	Y+29, r1	; 0x1d
    1a40:	b9 c0       	rjmp	.+370    	; 0x1bb4 <STEP_Motor_enu_Rotate+0x362>
            {
                state &=  3<<(Local_u8_Iterator%4);
    1a42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 01       	movw	r18, r24
    1a4a:	23 70       	andi	r18, 0x03	; 3
    1a4c:	30 70       	andi	r19, 0x00	; 0
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <STEP_Motor_enu_Rotate+0x208>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <STEP_Motor_enu_Rotate+0x204>
    1a5e:	98 2f       	mov	r25, r24
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	89 23       	and	r24, r25
    1a64:	89 a3       	std	Y+33, r24	; 0x21
                if((Local_u8_Iterator%4) == 3) state = EDGE_STATE;
    1a66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	83 70       	andi	r24, 0x03	; 3
    1a6e:	90 70       	andi	r25, 0x00	; 0
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	11 f4       	brne	.+4      	; 0x1a7a <STEP_Motor_enu_Rotate+0x228>
    1a76:	89 e0       	ldi	r24, 0x09	; 9
    1a78:	89 a3       	std	Y+33, r24	; 0x21
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, (state>>SHIFT_0BIT)&MASK_BIT);
    1a7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a7c:	98 2f       	mov	r25, r24
    1a7e:	91 70       	andi	r25, 0x01	; 1
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	49 2f       	mov	r20, r25
    1a86:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, (state>>SHIFT_1BIT)&MASK_BIT);
    1a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a8c:	86 95       	lsr	r24
    1a8e:	98 2f       	mov	r25, r24
    1a90:	91 70       	andi	r25, 0x01	; 1
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	49 2f       	mov	r20, r25
    1a98:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, (state>>SHIFT_2BIT)&MASK_BIT);
    1a9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9e:	86 95       	lsr	r24
    1aa0:	86 95       	lsr	r24
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	91 70       	andi	r25, 0x01	; 1
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	62 e0       	ldi	r22, 0x02	; 2
    1aaa:	49 2f       	mov	r20, r25
    1aac:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
                DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, (state>>SHIFT_3BIT)&MASK_BIT);
    1ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab2:	86 95       	lsr	r24
    1ab4:	86 95       	lsr	r24
    1ab6:	86 95       	lsr	r24
    1ab8:	98 2f       	mov	r25, r24
    1aba:	91 70       	andi	r25, 0x01	; 1
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	49 2f       	mov	r20, r25
    1ac2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	aa ef       	ldi	r26, 0xFA	; 250
    1acc:	b2 e4       	ldi	r27, 0x42	; 66
    1ace:	8b 87       	std	Y+11, r24	; 0x0b
    1ad0:	9c 87       	std	Y+12, r25	; 0x0c
    1ad2:	ad 87       	std	Y+13, r26	; 0x0d
    1ad4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ada:	8d 85       	ldd	r24, Y+13	; 0x0d
    1adc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	4a e7       	ldi	r20, 0x7A	; 122
    1ae4:	55 e4       	ldi	r21, 0x45	; 69
    1ae6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8f 83       	std	Y+7, r24	; 0x07
    1af0:	98 87       	std	Y+8, r25	; 0x08
    1af2:	a9 87       	std	Y+9, r26	; 0x09
    1af4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e8       	ldi	r20, 0x80	; 128
    1b04:	5f e3       	ldi	r21, 0x3F	; 63
    1b06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	2c f4       	brge	.+10     	; 0x1b18 <STEP_Motor_enu_Rotate+0x2c6>
		__ticks = 1;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	9e 83       	std	Y+6, r25	; 0x06
    1b14:	8d 83       	std	Y+5, r24	; 0x05
    1b16:	3f c0       	rjmp	.+126    	; 0x1b96 <STEP_Motor_enu_Rotate+0x344>
	else if (__tmp > 65535)
    1b18:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1a:	78 85       	ldd	r23, Y+8	; 0x08
    1b1c:	89 85       	ldd	r24, Y+9	; 0x09
    1b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	3f ef       	ldi	r19, 0xFF	; 255
    1b24:	4f e7       	ldi	r20, 0x7F	; 127
    1b26:	57 e4       	ldi	r21, 0x47	; 71
    1b28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b2c:	18 16       	cp	r1, r24
    1b2e:	4c f5       	brge	.+82     	; 0x1b82 <STEP_Motor_enu_Rotate+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
    1b58:	0f c0       	rjmp	.+30     	; 0x1b78 <STEP_Motor_enu_Rotate+0x326>
    1b5a:	80 e9       	ldi	r24, 0x90	; 144
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	9c 83       	std	Y+4, r25	; 0x04
    1b60:	8b 83       	std	Y+3, r24	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	f1 f7       	brne	.-4      	; 0x1b66 <STEP_Motor_enu_Rotate+0x314>
    1b6a:	9c 83       	std	Y+4, r25	; 0x04
    1b6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	9e 83       	std	Y+6, r25	; 0x06
    1b76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <STEP_Motor_enu_Rotate+0x308>
    1b80:	14 c0       	rjmp	.+40     	; 0x1baa <STEP_Motor_enu_Rotate+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b82:	6f 81       	ldd	r22, Y+7	; 0x07
    1b84:	78 85       	ldd	r23, Y+8	; 0x08
    1b86:	89 85       	ldd	r24, Y+9	; 0x09
    1b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <STEP_Motor_enu_Rotate+0x350>
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(delay);
                state = 0x0F;
    1baa:	8f e0       	ldi	r24, 0x0F	; 15
    1bac:	89 a3       	std	Y+33, r24	; 0x21
                state = 0x0F;
            }
        }
        else if (Copy_u8_Direction == CCW)
        {
            for (u8 Local_u8_Iterator = 0; Local_u8_Iterator < Local_u16_numOFSteps; Local_u8_Iterator++)
    1bae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb0:	8f 5f       	subi	r24, 0xFF	; 255
    1bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bbc:	98 a1       	ldd	r25, Y+32	; 0x20
    1bbe:	28 17       	cp	r18, r24
    1bc0:	39 07       	cpc	r19, r25
    1bc2:	08 f4       	brcc	.+2      	; 0x1bc6 <STEP_Motor_enu_Rotate+0x374>
    1bc4:	3e cf       	rjmp	.-388    	; 0x1a42 <STEP_Motor_enu_Rotate+0x1f0>
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <STEP_Motor_enu_Rotate+0x378>
                state = 0x0F;
            }
        }
    }else
    {
        Local_u8_errorState = STATE_NOT_OK;
    1bc8:	1a a2       	std	Y+34, r1	; 0x22
    }
    return Local_u8_errorState;
    1bca:	8a a1       	ldd	r24, Y+34	; 0x22
}
    1bcc:	a5 96       	adiw	r28, 0x25	; 37
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <STEP_Motor_enu_Stop>:

ES_t STEP_Motor_enu_Stop()
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	2e 97       	sbiw	r28, 0x0e	; 14
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN1, DIO_U8_LOW);
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN2, DIO_U8_LOW);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN3, DIO_U8_LOW);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(STEPPER_MOTOR_PORT, STEPPER_MOTOR_PIN4, DIO_U8_LOW);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	63 e0       	ldi	r22, 0x03	; 3
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	aa ef       	ldi	r26, 0xFA	; 250
    1c20:	b2 e4       	ldi	r27, 0x42	; 66
    1c22:	8b 87       	std	Y+11, r24	; 0x0b
    1c24:	9c 87       	std	Y+12, r25	; 0x0c
    1c26:	ad 87       	std	Y+13, r26	; 0x0d
    1c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a e7       	ldi	r20, 0x7A	; 122
    1c38:	55 e4       	ldi	r21, 0x45	; 69
    1c3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8f 83       	std	Y+7, r24	; 0x07
    1c44:	98 87       	std	Y+8, r25	; 0x08
    1c46:	a9 87       	std	Y+9, r26	; 0x09
    1c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4c:	78 85       	ldd	r23, Y+8	; 0x08
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <STEP_Motor_enu_Stop+0x8e>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <STEP_Motor_enu_Stop+0x10c>
	else if (__tmp > 65535)
    1c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6e:	78 85       	ldd	r23, Y+8	; 0x08
    1c70:	89 85       	ldd	r24, Y+9	; 0x09
    1c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <STEP_Motor_enu_Stop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <STEP_Motor_enu_Stop+0xee>
    1cae:	80 e9       	ldi	r24, 0x90	; 144
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	9c 83       	std	Y+4, r25	; 0x04
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <STEP_Motor_enu_Stop+0xdc>
    1cbe:	9c 83       	std	Y+4, r25	; 0x04
    1cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cce:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <STEP_Motor_enu_Stop+0xd0>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <STEP_Motor_enu_Stop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9e 83       	std	Y+6, r25	; 0x06
    1ce8:	8d 83       	std	Y+5, r24	; 0x05
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <STEP_Motor_enu_Stop+0x118>
    1cfa:	9a 83       	std	Y+2, r25	; 0x02
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(delay);
    return STATE_OK;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
}
    1d00:	2e 96       	adiw	r28, 0x0e	; 14
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <sevenSeg_enu_displayNum>:

u8 SevenSeg_au8_Numbers[10] = {0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,
                              0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};
u8 SevenSeg_au8_Pins[7] = {PIN_U8_A,PIN_U8_B,PIN_U8_C,PIN_U8_D,PIN_U8_E,PIN_U8_F,PIN_U8_G};   
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <sevenSeg_enu_displayNum+0x6>
    1d18:	0f 92       	push	r0
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	8a 83       	std	Y+2, r24	; 0x02
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	8a 30       	cpi	r24, 0x0A	; 10
    1d28:	70 f5       	brcc	.+92     	; 0x1d86 <sevenSeg_enu_displayNum+0x74>
        DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	61 e0       	ldi	r22, 0x01	; 1
    1d2e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <DIO_enu_SetPortDirection>
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1d32:	19 82       	std	Y+1, r1	; 0x01
    1d34:	24 c0       	rjmp	.+72     	; 0x1d7e <sevenSeg_enu_displayNum+0x6c>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	ef 5c       	subi	r30, 0xCF	; 207
    1d40:	fe 4f       	sbci	r31, 0xFE	; 254
    1d42:	40 81       	ld	r20, Z
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	88 2f       	mov	r24, r24
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e9 5d       	subi	r30, 0xD9	; 217
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <sevenSeg_enu_displayNum+0x52>
    1d60:	75 95       	asr	r23
    1d62:	67 95       	ror	r22
    1d64:	8a 95       	dec	r24
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <sevenSeg_enu_displayNum+0x4e>
    1d68:	cb 01       	movw	r24, r22
    1d6a:	98 2f       	mov	r25, r24
    1d6c:	91 70       	andi	r25, 0x01	; 1
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	64 2f       	mov	r22, r20
    1d72:	49 2f       	mov	r20, r25
    1d74:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
ES_t sevenSeg_enu_displayNum(u8 Copy_u8_Num)
{
    u8 Local_u8_errorState = STATE_OK;
    if(Copy_u8_Num>= 0 && Copy_u8_Num<=9){
        DIO_enu_SetPortDirection(SEVEN_SEGMENT_U8_PORT,DIO_U8_OUTPUT);
        for (u8 Local_u8_iterator = 0; Local_u8_iterator < 7; Local_u8_iterator++)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	87 30       	cpi	r24, 0x07	; 7
    1d82:	c8 f2       	brcs	.-78     	; 0x1d36 <sevenSeg_enu_displayNum+0x24>
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <sevenSeg_enu_displayNum+0x76>
        {
           DIO_enu_SetPinValue(SEVEN_SEGMENT_U8_PORT,SevenSeg_au8_Pins[Local_u8_iterator],(SevenSeg_au8_Numbers[Copy_u8_Num]>>Local_u8_iterator) & MASK_BIT);
        }

    }else{
        Local_u8_errorState = STATE_NOT_OK;
    1d86:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_errorState;
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <LCD_enu_SendCmnd>:
#include"../../2-HAL/LCD/LCD_Private.h"
#include"../../2-HAL/LCD/LCD_Config.h"



ES_t LCD_enu_SendCmnd(u8 Copy_u8_Cmdn){
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	e1 97       	sbiw	r28, 0x31	; 49
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	89 ab       	std	Y+49, r24	; 0x31
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
        return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /*Send Command at 4-bit mode*/
        /* RS = 0 */
        DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_LOW);
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	61 e0       	ldi	r22, 0x01	; 1
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        /* RW = 0 */
        DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        /*Write Command*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_7BIT) & MASK_BIT);
    1dc0:	89 a9       	ldd	r24, Y+49	; 0x31
    1dc2:	98 2f       	mov	r25, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	99 27       	eor	r25, r25
    1dc8:	99 1f       	adc	r25, r25
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	66 e0       	ldi	r22, 0x06	; 6
    1dce:	49 2f       	mov	r20, r25
    1dd0:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_6BIT) & MASK_BIT);
    1dd4:	89 a9       	ldd	r24, Y+49	; 0x31
    1dd6:	82 95       	swap	r24
    1dd8:	86 95       	lsr	r24
    1dda:	86 95       	lsr	r24
    1ddc:	83 70       	andi	r24, 0x03	; 3
    1dde:	98 2f       	mov	r25, r24
    1de0:	91 70       	andi	r25, 0x01	; 1
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	65 e0       	ldi	r22, 0x05	; 5
    1de6:	49 2f       	mov	r20, r25
    1de8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_5BIT) & MASK_BIT);
    1dec:	89 a9       	ldd	r24, Y+49	; 0x31
    1dee:	82 95       	swap	r24
    1df0:	86 95       	lsr	r24
    1df2:	87 70       	andi	r24, 0x07	; 7
    1df4:	98 2f       	mov	r25, r24
    1df6:	91 70       	andi	r25, 0x01	; 1
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	64 e0       	ldi	r22, 0x04	; 4
    1dfc:	49 2f       	mov	r20, r25
    1dfe:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_4BIT) & MASK_BIT);
    1e02:	89 a9       	ldd	r24, Y+49	; 0x31
    1e04:	82 95       	swap	r24
    1e06:	8f 70       	andi	r24, 0x0F	; 15
    1e08:	98 2f       	mov	r25, r24
    1e0a:	91 70       	andi	r25, 0x01	; 1
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	63 e0       	ldi	r22, 0x03	; 3
    1e10:	49 2f       	mov	r20, r25
    1e12:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a0 e8       	ldi	r26, 0x80	; 128
    1e26:	bf e3       	ldi	r27, 0x3F	; 63
    1e28:	8d a7       	std	Y+45, r24	; 0x2d
    1e2a:	9e a7       	std	Y+46, r25	; 0x2e
    1e2c:	af a7       	std	Y+47, r26	; 0x2f
    1e2e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e30:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e32:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e36:	98 a9       	ldd	r25, Y+48	; 0x30
    1e38:	2b ea       	ldi	r18, 0xAB	; 171
    1e3a:	3a ea       	ldi	r19, 0xAA	; 170
    1e3c:	4a ea       	ldi	r20, 0xAA	; 170
    1e3e:	50 e4       	ldi	r21, 0x40	; 64
    1e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	89 a7       	std	Y+41, r24	; 0x29
    1e4a:	9a a7       	std	Y+42, r25	; 0x2a
    1e4c:	ab a7       	std	Y+43, r26	; 0x2b
    1e4e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e50:	69 a5       	ldd	r22, Y+41	; 0x29
    1e52:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	1c f4       	brge	.+6      	; 0x1e6e <LCD_enu_SendCmnd+0xd8>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	88 a7       	std	Y+40, r24	; 0x28
    1e6c:	91 c0       	rjmp	.+290    	; 0x1f90 <LCD_enu_SendCmnd+0x1fa>
	else if (__tmp > 255)
    1e6e:	69 a5       	ldd	r22, Y+41	; 0x29
    1e70:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	53 e4       	ldi	r21, 0x43	; 67
    1e7e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	0c f0       	brlt	.+2      	; 0x1e88 <LCD_enu_SendCmnd+0xf2>
    1e86:	7b c0       	rjmp	.+246    	; 0x1f7e <LCD_enu_SendCmnd+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1e88:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	54 e4       	ldi	r21, 0x44	; 68
    1e98:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8c a3       	std	Y+36, r24	; 0x24
    1ea2:	9d a3       	std	Y+37, r25	; 0x25
    1ea4:	ae a3       	std	Y+38, r26	; 0x26
    1ea6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6c a1       	ldd	r22, Y+36	; 0x24
    1eaa:	7d a1       	ldd	r23, Y+37	; 0x25
    1eac:	8e a1       	ldd	r24, Y+38	; 0x26
    1eae:	9f a1       	ldd	r25, Y+39	; 0x27
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	55 e4       	ldi	r21, 0x45	; 69
    1eb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	88 a3       	std	Y+32, r24	; 0x20
    1ec2:	99 a3       	std	Y+33, r25	; 0x21
    1ec4:	aa a3       	std	Y+34, r26	; 0x22
    1ec6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ec8:	68 a1       	ldd	r22, Y+32	; 0x20
    1eca:	79 a1       	ldd	r23, Y+33	; 0x21
    1ecc:	8a a1       	ldd	r24, Y+34	; 0x22
    1ece:	9b a1       	ldd	r25, Y+35	; 0x23
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_enu_SendCmnd+0x154>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9f 8f       	std	Y+31, r25	; 0x1f
    1ee6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_enu_SendCmnd+0x1d2>
	else if (__tmp > 65535)
    1eea:	68 a1       	ldd	r22, Y+32	; 0x20
    1eec:	79 a1       	ldd	r23, Y+33	; 0x21
    1eee:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef0:	9b a1       	ldd	r25, Y+35	; 0x23
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_enu_SendCmnd+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6c a1       	ldd	r22, Y+36	; 0x24
    1f04:	7d a1       	ldd	r23, Y+37	; 0x25
    1f06:	8e a1       	ldd	r24, Y+38	; 0x26
    1f08:	9f a1       	ldd	r25, Y+39	; 0x27
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9f 8f       	std	Y+31, r25	; 0x1f
    1f28:	8e 8f       	std	Y+30, r24	; 0x1e
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_enu_SendCmnd+0x1b4>
    1f2c:	80 e9       	ldi	r24, 0x90	; 144
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	9d 8f       	std	Y+29, r25	; 0x1d
    1f32:	8c 8f       	std	Y+28, r24	; 0x1c
    1f34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_enu_SendCmnd+0x1a2>
    1f3c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f3e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9f 8f       	std	Y+31, r25	; 0x1f
    1f48:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f4c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_enu_SendCmnd+0x196>
    1f52:	24 c0       	rjmp	.+72     	; 0x1f9c <LCD_enu_SendCmnd+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	68 a1       	ldd	r22, Y+32	; 0x20
    1f56:	79 a1       	ldd	r23, Y+33	; 0x21
    1f58:	8a a1       	ldd	r24, Y+34	; 0x22
    1f5a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9f 8f       	std	Y+31, r25	; 0x1f
    1f66:	8e 8f       	std	Y+30, r24	; 0x1e
    1f68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f6c:	9b 8f       	std	Y+27, r25	; 0x1b
    1f6e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f70:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f72:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_enu_SendCmnd+0x1de>
    1f78:	9b 8f       	std	Y+27, r25	; 0x1b
    1f7a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_enu_SendCmnd+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7e:	69 a5       	ldd	r22, Y+41	; 0x29
    1f80:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f84:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	88 a7       	std	Y+40, r24	; 0x28
    1f90:	88 a5       	ldd	r24, Y+40	; 0x28
    1f92:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f94:	89 8d       	ldd	r24, Y+25	; 0x19
    1f96:	8a 95       	dec	r24
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_enu_SendCmnd+0x200>
    1f9a:	89 8f       	std	Y+25, r24	; 0x19
        _delay_us(1);
        /* E = 0 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	62 e0       	ldi	r22, 0x02	; 2
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        /*Write the rest of the cmnd*/
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Cmdn>> SHIFT_3BIT) & MASK_BIT);
    1fa6:	89 a9       	ldd	r24, Y+49	; 0x31
    1fa8:	86 95       	lsr	r24
    1faa:	86 95       	lsr	r24
    1fac:	86 95       	lsr	r24
    1fae:	98 2f       	mov	r25, r24
    1fb0:	91 70       	andi	r25, 0x01	; 1
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	66 e0       	ldi	r22, 0x06	; 6
    1fb6:	49 2f       	mov	r20, r25
    1fb8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Cmdn>> SHIFT_2BIT) & MASK_BIT);
    1fbc:	89 a9       	ldd	r24, Y+49	; 0x31
    1fbe:	86 95       	lsr	r24
    1fc0:	86 95       	lsr	r24
    1fc2:	98 2f       	mov	r25, r24
    1fc4:	91 70       	andi	r25, 0x01	; 1
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	65 e0       	ldi	r22, 0x05	; 5
    1fca:	49 2f       	mov	r20, r25
    1fcc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Cmdn>> SHIFT_1BIT) & MASK_BIT);
    1fd0:	89 a9       	ldd	r24, Y+49	; 0x31
    1fd2:	86 95       	lsr	r24
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	91 70       	andi	r25, 0x01	; 1
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	49 2f       	mov	r20, r25
    1fde:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Cmdn>> SHIFT_0BIT) & MASK_BIT);
    1fe2:	89 a9       	ldd	r24, Y+49	; 0x31
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	91 70       	andi	r25, 0x01	; 1
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	63 e0       	ldi	r22, 0x03	; 3
    1fec:	49 2f       	mov	r20, r25
    1fee:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        /* E = 1 */
        DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	62 e0       	ldi	r22, 0x02	; 2
    1ff6:	41 e0       	ldi	r20, 0x01	; 1
    1ff8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	a0 e8       	ldi	r26, 0x80	; 128
    2002:	bf e3       	ldi	r27, 0x3F	; 63
    2004:	8d 8b       	std	Y+21, r24	; 0x15
    2006:	9e 8b       	std	Y+22, r25	; 0x16
    2008:	af 8b       	std	Y+23, r26	; 0x17
    200a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    200c:	6d 89       	ldd	r22, Y+21	; 0x15
    200e:	7e 89       	ldd	r23, Y+22	; 0x16
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	2b ea       	ldi	r18, 0xAB	; 171
    2016:	3a ea       	ldi	r19, 0xAA	; 170
    2018:	4a ea       	ldi	r20, 0xAA	; 170
    201a:	50 e4       	ldi	r21, 0x40	; 64
    201c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	89 8b       	std	Y+17, r24	; 0x11
    2026:	9a 8b       	std	Y+18, r25	; 0x12
    2028:	ab 8b       	std	Y+19, r26	; 0x13
    202a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    202c:	69 89       	ldd	r22, Y+17	; 0x11
    202e:	7a 89       	ldd	r23, Y+18	; 0x12
    2030:	8b 89       	ldd	r24, Y+19	; 0x13
    2032:	9c 89       	ldd	r25, Y+20	; 0x14
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5f e3       	ldi	r21, 0x3F	; 63
    203c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2040:	88 23       	and	r24, r24
    2042:	1c f4       	brge	.+6      	; 0x204a <LCD_enu_SendCmnd+0x2b4>
		__ticks = 1;
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	88 8b       	std	Y+16, r24	; 0x10
    2048:	91 c0       	rjmp	.+290    	; 0x216c <LCD_enu_SendCmnd+0x3d6>
	else if (__tmp > 255)
    204a:	69 89       	ldd	r22, Y+17	; 0x11
    204c:	7a 89       	ldd	r23, Y+18	; 0x12
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	4f e7       	ldi	r20, 0x7F	; 127
    2058:	53 e4       	ldi	r21, 0x43	; 67
    205a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    205e:	18 16       	cp	r1, r24
    2060:	0c f0       	brlt	.+2      	; 0x2064 <LCD_enu_SendCmnd+0x2ce>
    2062:	7b c0       	rjmp	.+246    	; 0x215a <LCD_enu_SendCmnd+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a e7       	ldi	r20, 0x7A	; 122
    2072:	54 e4       	ldi	r21, 0x44	; 68
    2074:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	8c 87       	std	Y+12, r24	; 0x0c
    207e:	9d 87       	std	Y+13, r25	; 0x0d
    2080:	ae 87       	std	Y+14, r26	; 0x0e
    2082:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	6c 85       	ldd	r22, Y+12	; 0x0c
    2086:	7d 85       	ldd	r23, Y+13	; 0x0d
    2088:	8e 85       	ldd	r24, Y+14	; 0x0e
    208a:	9f 85       	ldd	r25, Y+15	; 0x0f
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e7       	ldi	r20, 0x7A	; 122
    2092:	55 e4       	ldi	r21, 0x45	; 69
    2094:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	88 87       	std	Y+8, r24	; 0x08
    209e:	99 87       	std	Y+9, r25	; 0x09
    20a0:	aa 87       	std	Y+10, r26	; 0x0a
    20a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20a4:	68 85       	ldd	r22, Y+8	; 0x08
    20a6:	79 85       	ldd	r23, Y+9	; 0x09
    20a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <LCD_enu_SendCmnd+0x330>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9f 83       	std	Y+7, r25	; 0x07
    20c2:	8e 83       	std	Y+6, r24	; 0x06
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <LCD_enu_SendCmnd+0x3ae>
	else if (__tmp > 65535)
    20c6:	68 85       	ldd	r22, Y+8	; 0x08
    20c8:	79 85       	ldd	r23, Y+9	; 0x09
    20ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    20cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <LCD_enu_SendCmnd+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9f 83       	std	Y+7, r25	; 0x07
    2104:	8e 83       	std	Y+6, r24	; 0x06
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <LCD_enu_SendCmnd+0x390>
    2108:	80 e9       	ldi	r24, 0x90	; 144
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	9d 83       	std	Y+5, r25	; 0x05
    210e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_enu_SendCmnd+0x37e>
    2118:	9d 83       	std	Y+5, r25	; 0x05
    211a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	8e 81       	ldd	r24, Y+6	; 0x06
    211e:	9f 81       	ldd	r25, Y+7	; 0x07
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9f 83       	std	Y+7, r25	; 0x07
    2124:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	8e 81       	ldd	r24, Y+6	; 0x06
    2128:	9f 81       	ldd	r25, Y+7	; 0x07
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <LCD_enu_SendCmnd+0x372>
    212e:	24 c0       	rjmp	.+72     	; 0x2178 <LCD_enu_SendCmnd+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	68 85       	ldd	r22, Y+8	; 0x08
    2132:	79 85       	ldd	r23, Y+9	; 0x09
    2134:	8a 85       	ldd	r24, Y+10	; 0x0a
    2136:	9b 85       	ldd	r25, Y+11	; 0x0b
    2138:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9f 83       	std	Y+7, r25	; 0x07
    2142:	8e 83       	std	Y+6, r24	; 0x06
    2144:	8e 81       	ldd	r24, Y+6	; 0x06
    2146:	9f 81       	ldd	r25, Y+7	; 0x07
    2148:	9b 83       	std	Y+3, r25	; 0x03
    214a:	8a 83       	std	Y+2, r24	; 0x02
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	9b 81       	ldd	r25, Y+3	; 0x03
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_enu_SendCmnd+0x3ba>
    2154:	9b 83       	std	Y+3, r25	; 0x03
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	0f c0       	rjmp	.+30     	; 0x2178 <LCD_enu_SendCmnd+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    215a:	69 89       	ldd	r22, Y+17	; 0x11
    215c:	7a 89       	ldd	r23, Y+18	; 0x12
    215e:	8b 89       	ldd	r24, Y+19	; 0x13
    2160:	9c 89       	ldd	r25, Y+20	; 0x14
    2162:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	88 8b       	std	Y+16, r24	; 0x10
    216c:	88 89       	ldd	r24, Y+16	; 0x10
    216e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8a 95       	dec	r24
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_enu_SendCmnd+0x3dc>
    2176:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(1);
        /* E = 0 */
         DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	62 e0       	ldi	r22, 0x02	; 2
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
         return STATE_OK;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    2184:	e1 96       	adiw	r28, 0x31	; 49
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LCD_enu_SendChar>:

ES_t LCD_enu_SendChar(u8 Copy_u8_Char){
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	e1 97       	sbiw	r28, 0x31	; 49
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	89 ab       	std	Y+49, r24	; 0x31
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    /* RS = 1 */
    DIO_enu_SetPinValue(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_HIGH);
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    /* RW = 0 */
    DIO_enu_SetPinValue(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_LOW);
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_7BIT) & MASK_BIT);
    21c0:	89 a9       	ldd	r24, Y+49	; 0x31
    21c2:	98 2f       	mov	r25, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	99 27       	eor	r25, r25
    21c8:	99 1f       	adc	r25, r25
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	66 e0       	ldi	r22, 0x06	; 6
    21ce:	49 2f       	mov	r20, r25
    21d0:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_6BIT) & MASK_BIT);
    21d4:	89 a9       	ldd	r24, Y+49	; 0x31
    21d6:	82 95       	swap	r24
    21d8:	86 95       	lsr	r24
    21da:	86 95       	lsr	r24
    21dc:	83 70       	andi	r24, 0x03	; 3
    21de:	98 2f       	mov	r25, r24
    21e0:	91 70       	andi	r25, 0x01	; 1
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	65 e0       	ldi	r22, 0x05	; 5
    21e6:	49 2f       	mov	r20, r25
    21e8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_5BIT) & MASK_BIT);
    21ec:	89 a9       	ldd	r24, Y+49	; 0x31
    21ee:	82 95       	swap	r24
    21f0:	86 95       	lsr	r24
    21f2:	87 70       	andi	r24, 0x07	; 7
    21f4:	98 2f       	mov	r25, r24
    21f6:	91 70       	andi	r25, 0x01	; 1
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	64 e0       	ldi	r22, 0x04	; 4
    21fc:	49 2f       	mov	r20, r25
    21fe:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_4BIT) & MASK_BIT);
    2202:	89 a9       	ldd	r24, Y+49	; 0x31
    2204:	82 95       	swap	r24
    2206:	8f 70       	andi	r24, 0x0F	; 15
    2208:	98 2f       	mov	r25, r24
    220a:	91 70       	andi	r25, 0x01	; 1
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	63 e0       	ldi	r22, 0x03	; 3
    2210:	49 2f       	mov	r20, r25
    2212:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	62 e0       	ldi	r22, 0x02	; 2
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e8       	ldi	r26, 0x80	; 128
    2226:	bf e3       	ldi	r27, 0x3F	; 63
    2228:	8d a7       	std	Y+45, r24	; 0x2d
    222a:	9e a7       	std	Y+46, r25	; 0x2e
    222c:	af a7       	std	Y+47, r26	; 0x2f
    222e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2230:	6d a5       	ldd	r22, Y+45	; 0x2d
    2232:	7e a5       	ldd	r23, Y+46	; 0x2e
    2234:	8f a5       	ldd	r24, Y+47	; 0x2f
    2236:	98 a9       	ldd	r25, Y+48	; 0x30
    2238:	2b ea       	ldi	r18, 0xAB	; 171
    223a:	3a ea       	ldi	r19, 0xAA	; 170
    223c:	4a ea       	ldi	r20, 0xAA	; 170
    223e:	50 e4       	ldi	r21, 0x40	; 64
    2240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	89 a7       	std	Y+41, r24	; 0x29
    224a:	9a a7       	std	Y+42, r25	; 0x2a
    224c:	ab a7       	std	Y+43, r26	; 0x2b
    224e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2250:	69 a5       	ldd	r22, Y+41	; 0x29
    2252:	7a a5       	ldd	r23, Y+42	; 0x2a
    2254:	8b a5       	ldd	r24, Y+43	; 0x2b
    2256:	9c a5       	ldd	r25, Y+44	; 0x2c
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	1c f4       	brge	.+6      	; 0x226e <LCD_enu_SendChar+0xd8>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	88 a7       	std	Y+40, r24	; 0x28
    226c:	91 c0       	rjmp	.+290    	; 0x2390 <LCD_enu_SendChar+0x1fa>
	else if (__tmp > 255)
    226e:	69 a5       	ldd	r22, Y+41	; 0x29
    2270:	7a a5       	ldd	r23, Y+42	; 0x2a
    2272:	8b a5       	ldd	r24, Y+43	; 0x2b
    2274:	9c a5       	ldd	r25, Y+44	; 0x2c
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	53 e4       	ldi	r21, 0x43	; 67
    227e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	0c f0       	brlt	.+2      	; 0x2288 <LCD_enu_SendChar+0xf2>
    2286:	7b c0       	rjmp	.+246    	; 0x237e <LCD_enu_SendChar+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    2288:	6d a5       	ldd	r22, Y+45	; 0x2d
    228a:	7e a5       	ldd	r23, Y+46	; 0x2e
    228c:	8f a5       	ldd	r24, Y+47	; 0x2f
    228e:	98 a9       	ldd	r25, Y+48	; 0x30
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a e7       	ldi	r20, 0x7A	; 122
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8c a3       	std	Y+36, r24	; 0x24
    22a2:	9d a3       	std	Y+37, r25	; 0x25
    22a4:	ae a3       	std	Y+38, r26	; 0x26
    22a6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	6c a1       	ldd	r22, Y+36	; 0x24
    22aa:	7d a1       	ldd	r23, Y+37	; 0x25
    22ac:	8e a1       	ldd	r24, Y+38	; 0x26
    22ae:	9f a1       	ldd	r25, Y+39	; 0x27
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a e7       	ldi	r20, 0x7A	; 122
    22b6:	55 e4       	ldi	r21, 0x45	; 69
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	88 a3       	std	Y+32, r24	; 0x20
    22c2:	99 a3       	std	Y+33, r25	; 0x21
    22c4:	aa a3       	std	Y+34, r26	; 0x22
    22c6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    22c8:	68 a1       	ldd	r22, Y+32	; 0x20
    22ca:	79 a1       	ldd	r23, Y+33	; 0x21
    22cc:	8a a1       	ldd	r24, Y+34	; 0x22
    22ce:	9b a1       	ldd	r25, Y+35	; 0x23
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <LCD_enu_SendChar+0x154>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9f 8f       	std	Y+31, r25	; 0x1f
    22e6:	8e 8f       	std	Y+30, r24	; 0x1e
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <LCD_enu_SendChar+0x1d2>
	else if (__tmp > 65535)
    22ea:	68 a1       	ldd	r22, Y+32	; 0x20
    22ec:	79 a1       	ldd	r23, Y+33	; 0x21
    22ee:	8a a1       	ldd	r24, Y+34	; 0x22
    22f0:	9b a1       	ldd	r25, Y+35	; 0x23
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <LCD_enu_SendChar+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	6c a1       	ldd	r22, Y+36	; 0x24
    2304:	7d a1       	ldd	r23, Y+37	; 0x25
    2306:	8e a1       	ldd	r24, Y+38	; 0x26
    2308:	9f a1       	ldd	r25, Y+39	; 0x27
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9f 8f       	std	Y+31, r25	; 0x1f
    2328:	8e 8f       	std	Y+30, r24	; 0x1e
    232a:	0f c0       	rjmp	.+30     	; 0x234a <LCD_enu_SendChar+0x1b4>
    232c:	80 e9       	ldi	r24, 0x90	; 144
    232e:	91 e0       	ldi	r25, 0x01	; 1
    2330:	9d 8f       	std	Y+29, r25	; 0x1d
    2332:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2334:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2336:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_enu_SendChar+0x1a2>
    233c:	9d 8f       	std	Y+29, r25	; 0x1d
    233e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2342:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9f 8f       	std	Y+31, r25	; 0x1f
    2348:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    234c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <LCD_enu_SendChar+0x196>
    2352:	24 c0       	rjmp	.+72     	; 0x239c <LCD_enu_SendChar+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	68 a1       	ldd	r22, Y+32	; 0x20
    2356:	79 a1       	ldd	r23, Y+33	; 0x21
    2358:	8a a1       	ldd	r24, Y+34	; 0x22
    235a:	9b a1       	ldd	r25, Y+35	; 0x23
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9f 8f       	std	Y+31, r25	; 0x1f
    2366:	8e 8f       	std	Y+30, r24	; 0x1e
    2368:	8e 8d       	ldd	r24, Y+30	; 0x1e
    236a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    236c:	9b 8f       	std	Y+27, r25	; 0x1b
    236e:	8a 8f       	std	Y+26, r24	; 0x1a
    2370:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2372:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_enu_SendChar+0x1de>
    2378:	9b 8f       	std	Y+27, r25	; 0x1b
    237a:	8a 8f       	std	Y+26, r24	; 0x1a
    237c:	0f c0       	rjmp	.+30     	; 0x239c <LCD_enu_SendChar+0x206>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    237e:	69 a5       	ldd	r22, Y+41	; 0x29
    2380:	7a a5       	ldd	r23, Y+42	; 0x2a
    2382:	8b a5       	ldd	r24, Y+43	; 0x2b
    2384:	9c a5       	ldd	r25, Y+44	; 0x2c
    2386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	88 a7       	std	Y+40, r24	; 0x28
    2390:	88 a5       	ldd	r24, Y+40	; 0x28
    2392:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2394:	89 8d       	ldd	r24, Y+25	; 0x19
    2396:	8a 95       	dec	r24
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_enu_SendChar+0x200>
    239a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    /*Write Char*/
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D7,(Copy_u8_Char>> SHIFT_3BIT) & MASK_BIT);
    23a6:	89 a9       	ldd	r24, Y+49	; 0x31
    23a8:	86 95       	lsr	r24
    23aa:	86 95       	lsr	r24
    23ac:	86 95       	lsr	r24
    23ae:	98 2f       	mov	r25, r24
    23b0:	91 70       	andi	r25, 0x01	; 1
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	66 e0       	ldi	r22, 0x06	; 6
    23b6:	49 2f       	mov	r20, r25
    23b8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D6,(Copy_u8_Char>> SHIFT_2BIT) & MASK_BIT);
    23bc:	89 a9       	ldd	r24, Y+49	; 0x31
    23be:	86 95       	lsr	r24
    23c0:	86 95       	lsr	r24
    23c2:	98 2f       	mov	r25, r24
    23c4:	91 70       	andi	r25, 0x01	; 1
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	65 e0       	ldi	r22, 0x05	; 5
    23ca:	49 2f       	mov	r20, r25
    23cc:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D5,(Copy_u8_Char>> SHIFT_1BIT) & MASK_BIT);
    23d0:	89 a9       	ldd	r24, Y+49	; 0x31
    23d2:	86 95       	lsr	r24
    23d4:	98 2f       	mov	r25, r24
    23d6:	91 70       	andi	r25, 0x01	; 1
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	64 e0       	ldi	r22, 0x04	; 4
    23dc:	49 2f       	mov	r20, r25
    23de:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    DIO_enu_SetPinValue(LCD_U8_DATA_PORT,D4,(Copy_u8_Char>> SHIFT_0BIT) & MASK_BIT);
    23e2:	89 a9       	ldd	r24, Y+49	; 0x31
    23e4:	98 2f       	mov	r25, r24
    23e6:	91 70       	andi	r25, 0x01	; 1
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	63 e0       	ldi	r22, 0x03	; 3
    23ec:	49 2f       	mov	r20, r25
    23ee:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    /* E = 1 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_HIGH );
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	62 e0       	ldi	r22, 0x02	; 2
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	8d 8b       	std	Y+21, r24	; 0x15
    2406:	9e 8b       	std	Y+22, r25	; 0x16
    2408:	af 8b       	std	Y+23, r26	; 0x17
    240a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	2b ea       	ldi	r18, 0xAB	; 171
    2416:	3a ea       	ldi	r19, 0xAA	; 170
    2418:	4a ea       	ldi	r20, 0xAA	; 170
    241a:	50 e4       	ldi	r21, 0x40	; 64
    241c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	89 8b       	std	Y+17, r24	; 0x11
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	ab 8b       	std	Y+19, r26	; 0x13
    242a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    242c:	69 89       	ldd	r22, Y+17	; 0x11
    242e:	7a 89       	ldd	r23, Y+18	; 0x12
    2430:	8b 89       	ldd	r24, Y+19	; 0x13
    2432:	9c 89       	ldd	r25, Y+20	; 0x14
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	1c f4       	brge	.+6      	; 0x244a <LCD_enu_SendChar+0x2b4>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	88 8b       	std	Y+16, r24	; 0x10
    2448:	91 c0       	rjmp	.+290    	; 0x256c <LCD_enu_SendChar+0x3d6>
	else if (__tmp > 255)
    244a:	69 89       	ldd	r22, Y+17	; 0x11
    244c:	7a 89       	ldd	r23, Y+18	; 0x12
    244e:	8b 89       	ldd	r24, Y+19	; 0x13
    2450:	9c 89       	ldd	r25, Y+20	; 0x14
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4f e7       	ldi	r20, 0x7F	; 127
    2458:	53 e4       	ldi	r21, 0x43	; 67
    245a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    245e:	18 16       	cp	r1, r24
    2460:	0c f0       	brlt	.+2      	; 0x2464 <LCD_enu_SendChar+0x2ce>
    2462:	7b c0       	rjmp	.+246    	; 0x255a <LCD_enu_SendChar+0x3c4>
	{
		_delay_ms(__us / 1000.0);
    2464:	6d 89       	ldd	r22, Y+21	; 0x15
    2466:	7e 89       	ldd	r23, Y+22	; 0x16
    2468:	8f 89       	ldd	r24, Y+23	; 0x17
    246a:	98 8d       	ldd	r25, Y+24	; 0x18
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a e7       	ldi	r20, 0x7A	; 122
    2472:	54 e4       	ldi	r21, 0x44	; 68
    2474:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8c 87       	std	Y+12, r24	; 0x0c
    247e:	9d 87       	std	Y+13, r25	; 0x0d
    2480:	ae 87       	std	Y+14, r26	; 0x0e
    2482:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2484:	6c 85       	ldd	r22, Y+12	; 0x0c
    2486:	7d 85       	ldd	r23, Y+13	; 0x0d
    2488:	8e 85       	ldd	r24, Y+14	; 0x0e
    248a:	9f 85       	ldd	r25, Y+15	; 0x0f
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	4a e7       	ldi	r20, 0x7A	; 122
    2492:	55 e4       	ldi	r21, 0x45	; 69
    2494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	88 87       	std	Y+8, r24	; 0x08
    249e:	99 87       	std	Y+9, r25	; 0x09
    24a0:	aa 87       	std	Y+10, r26	; 0x0a
    24a2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24a4:	68 85       	ldd	r22, Y+8	; 0x08
    24a6:	79 85       	ldd	r23, Y+9	; 0x09
    24a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	40 e8       	ldi	r20, 0x80	; 128
    24b2:	5f e3       	ldi	r21, 0x3F	; 63
    24b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24b8:	88 23       	and	r24, r24
    24ba:	2c f4       	brge	.+10     	; 0x24c6 <LCD_enu_SendChar+0x330>
		__ticks = 1;
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9f 83       	std	Y+7, r25	; 0x07
    24c2:	8e 83       	std	Y+6, r24	; 0x06
    24c4:	3f c0       	rjmp	.+126    	; 0x2544 <LCD_enu_SendChar+0x3ae>
	else if (__tmp > 65535)
    24c6:	68 85       	ldd	r22, Y+8	; 0x08
    24c8:	79 85       	ldd	r23, Y+9	; 0x09
    24ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    24cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	4c f5       	brge	.+82     	; 0x2530 <LCD_enu_SendChar+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24de:	6c 85       	ldd	r22, Y+12	; 0x0c
    24e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    24e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    24e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	bc 01       	movw	r22, r24
    24f8:	cd 01       	movw	r24, r26
    24fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9f 83       	std	Y+7, r25	; 0x07
    2504:	8e 83       	std	Y+6, r24	; 0x06
    2506:	0f c0       	rjmp	.+30     	; 0x2526 <LCD_enu_SendChar+0x390>
    2508:	80 e9       	ldi	r24, 0x90	; 144
    250a:	91 e0       	ldi	r25, 0x01	; 1
    250c:	9d 83       	std	Y+5, r25	; 0x05
    250e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_enu_SendChar+0x37e>
    2518:	9d 83       	std	Y+5, r25	; 0x05
    251a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    251c:	8e 81       	ldd	r24, Y+6	; 0x06
    251e:	9f 81       	ldd	r25, Y+7	; 0x07
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	9f 83       	std	Y+7, r25	; 0x07
    2524:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	9f 81       	ldd	r25, Y+7	; 0x07
    252a:	00 97       	sbiw	r24, 0x00	; 0
    252c:	69 f7       	brne	.-38     	; 0x2508 <LCD_enu_SendChar+0x372>
    252e:	24 c0       	rjmp	.+72     	; 0x2578 <LCD_enu_SendChar+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2530:	68 85       	ldd	r22, Y+8	; 0x08
    2532:	79 85       	ldd	r23, Y+9	; 0x09
    2534:	8a 85       	ldd	r24, Y+10	; 0x0a
    2536:	9b 85       	ldd	r25, Y+11	; 0x0b
    2538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	9f 83       	std	Y+7, r25	; 0x07
    2542:	8e 83       	std	Y+6, r24	; 0x06
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	9b 83       	std	Y+3, r25	; 0x03
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	9b 81       	ldd	r25, Y+3	; 0x03
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_enu_SendChar+0x3ba>
    2554:	9b 83       	std	Y+3, r25	; 0x03
    2556:	8a 83       	std	Y+2, r24	; 0x02
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_enu_SendChar+0x3e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    255a:	69 89       	ldd	r22, Y+17	; 0x11
    255c:	7a 89       	ldd	r23, Y+18	; 0x12
    255e:	8b 89       	ldd	r24, Y+19	; 0x13
    2560:	9c 89       	ldd	r25, Y+20	; 0x14
    2562:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	88 8b       	std	Y+16, r24	; 0x10
    256c:	88 89       	ldd	r24, Y+16	; 0x10
    256e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	8a 95       	dec	r24
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_enu_SendChar+0x3dc>
    2576:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(1);
    /* E = 0 */
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	62 e0       	ldi	r22, 0x02	; 2
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    return STATE_OK;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    2584:	e1 96       	adiw	r28, 0x31	; 49
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <LCD_enu_SendString>:
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	00 d0       	rcall	.+0      	; 0x259c <LCD_enu_SendString+0x6>
    259c:	0f 92       	push	r0
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	9b 83       	std	Y+3, r25	; 0x03
    25a4:	8a 83       	std	Y+2, r24	; 0x02
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <LCD_enu_SendString+0x2e>
    for(u8 i ; Copy_pu8_String[i] != '\0' ; i++ ){
        LCD_enu_SendChar(Copy_pu8_String[i]);
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	fc 01       	movw	r30, r24
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	80 81       	ld	r24, Z
    25ba:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_enu_SendChar>
    DIO_enu_SetPinValue(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_LOW );
    return STATE_OK;
    #endif
}
ES_t LCD_enu_SendString(u8 * Copy_pu8_String){
    for(u8 i ; Copy_pu8_String[i] != '\0' ; i++ ){
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	89 83       	std	Y+1, r24	; 0x01
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	39 f7       	brne	.-50     	; 0x25a8 <LCD_enu_SendString+0x12>
        LCD_enu_SendChar(Copy_pu8_String[i]);
    }
    return STATE_OK;
    25da:	81 e0       	ldi	r24, 0x01	; 1
}
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <LCD_enu_SendNum>:

ES_t LCD_enu_SendNum(u32 Copy_u32_Num){
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	60 97       	sbiw	r28, 0x10	; 16
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	6d 87       	std	Y+13, r22	; 0x0d
    2602:	7e 87       	std	Y+14, r23	; 0x0e
    2604:	8f 87       	std	Y+15, r24	; 0x0f
    2606:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    2608:	1a 82       	std	Y+2, r1	; 0x02
    s8 Local_u8_iterator2 = 0;
    260a:	19 82       	std	Y+1, r1	; 0x01
    if(Copy_u32_Num == 0)
    260c:	8d 85       	ldd	r24, Y+13	; 0x0d
    260e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2610:	af 85       	ldd	r26, Y+15	; 0x0f
    2612:	b8 89       	ldd	r27, Y+16	; 0x10
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	a1 05       	cpc	r26, r1
    2618:	b1 05       	cpc	r27, r1
    261a:	89 f5       	brne	.+98     	; 0x267e <LCD_enu_SendNum+0x96>
    	LCD_enu_SendChar('0');
    261c:	80 e3       	ldi	r24, 0x30	; 48
    261e:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_enu_SendChar>
    2622:	4d c0       	rjmp	.+154    	; 0x26be <LCD_enu_SendNum+0xd6>
    else{
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	08 2f       	mov	r16, r24
    2628:	10 e0       	ldi	r17, 0x00	; 0
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	af 85       	ldd	r26, Y+15	; 0x0f
    2630:	b8 89       	ldd	r27, Y+16	; 0x10
    2632:	2a e0       	ldi	r18, 0x0A	; 10
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__udivmodsi4>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	28 2f       	mov	r18, r24
    2648:	ce 01       	movw	r24, r28
    264a:	03 96       	adiw	r24, 0x03	; 3
    264c:	fc 01       	movw	r30, r24
    264e:	e0 0f       	add	r30, r16
    2650:	f1 1f       	adc	r31, r17
    2652:	20 83       	st	Z, r18
			Copy_u32_Num /= 10;
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	af 85       	ldd	r26, Y+15	; 0x0f
    265a:	b8 89       	ldd	r27, Y+16	; 0x10
    265c:	2a e0       	ldi	r18, 0x0A	; 10
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	50 e0       	ldi	r21, 0x00	; 0
    2664:	bc 01       	movw	r22, r24
    2666:	cd 01       	movw	r24, r26
    2668:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <__udivmodsi4>
    266c:	da 01       	movw	r26, r20
    266e:	c9 01       	movw	r24, r18
    2670:	8d 87       	std	Y+13, r24	; 0x0d
    2672:	9e 87       	std	Y+14, r25	; 0x0e
    2674:	af 87       	std	Y+15, r26	; 0x0f
    2676:	b8 8b       	std	Y+16, r27	; 0x10
			Local_u8_iterator1++;
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_numArr[10] ,Local_u8_iterator1 = 0 ;
    s8 Local_u8_iterator2 = 0;
    if(Copy_u32_Num == 0)
    	LCD_enu_SendChar('0');
    else{
		while(Copy_u32_Num != 0){
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	af 85       	ldd	r26, Y+15	; 0x0f
    2684:	b8 89       	ldd	r27, Y+16	; 0x10
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	a1 05       	cpc	r26, r1
    268a:	b1 05       	cpc	r27, r1
    268c:	59 f6       	brne	.-106    	; 0x2624 <LCD_enu_SendNum+0x3c>
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	11 c0       	rjmp	.+34     	; 0x26b8 <LCD_enu_SendNum+0xd0>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	28 2f       	mov	r18, r24
    269a:	33 27       	eor	r19, r19
    269c:	27 fd       	sbrc	r18, 7
    269e:	30 95       	com	r19
    26a0:	ce 01       	movw	r24, r28
    26a2:	03 96       	adiw	r24, 0x03	; 3
    26a4:	fc 01       	movw	r30, r24
    26a6:	e2 0f       	add	r30, r18
    26a8:	f3 1f       	adc	r31, r19
    26aa:	80 81       	ld	r24, Z
    26ac:	80 5d       	subi	r24, 0xD0	; 208
    26ae:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_enu_SendChar>
		while(Copy_u32_Num != 0){
			Local_u8_numArr[Local_u8_iterator1] = Copy_u32_Num % 10  ;
			Copy_u32_Num /= 10;
			Local_u8_iterator1++;
		}
		for(Local_u8_iterator2 = Local_u8_iterator1-1 ;Local_u8_iterator2>=0;Local_u8_iterator2--){
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	81 50       	subi	r24, 0x01	; 1
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	88 23       	and	r24, r24
    26bc:	64 f7       	brge	.-40     	; 0x2696 <LCD_enu_SendNum+0xae>
			LCD_enu_SendChar(Local_u8_numArr[Local_u8_iterator2]+'0');
		}
    }
    return STATE_OK;
    26be:	81 e0       	ldi	r24, 0x01	; 1
}
    26c0:	60 96       	adiw	r28, 0x10	; 16
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	08 95       	ret

000026d6 <LCD_enu_SetCursor>:
ES_t LCD_enu_SetCursor(u8 Copy_u8_LineNum,u8 Copy_u8_Location){
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <LCD_enu_SetCursor+0x6>
    26dc:	00 d0       	rcall	.+0      	; 0x26de <LCD_enu_SetCursor+0x8>
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	6a 83       	std	Y+2, r22	; 0x02
    if(Copy_u8_Location<=39){
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	88 32       	cpi	r24, 0x28	; 40
    26ec:	f0 f4       	brcc	.+60     	; 0x272a <LCD_enu_SetCursor+0x54>
    switch (Copy_u8_LineNum)
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	28 2f       	mov	r18, r24
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	3d 83       	std	Y+5, r19	; 0x05
    26f6:	2c 83       	std	Y+4, r18	; 0x04
    26f8:	8c 81       	ldd	r24, Y+4	; 0x04
    26fa:	9d 81       	ldd	r25, Y+5	; 0x05
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	31 f0       	breq	.+12     	; 0x270c <LCD_enu_SetCursor+0x36>
    2700:	2c 81       	ldd	r18, Y+4	; 0x04
    2702:	3d 81       	ldd	r19, Y+5	; 0x05
    2704:	21 30       	cpi	r18, 0x01	; 1
    2706:	31 05       	cpc	r19, r1
    2708:	31 f0       	breq	.+12     	; 0x2716 <LCD_enu_SetCursor+0x40>
    270a:	0a c0       	rjmp	.+20     	; 0x2720 <LCD_enu_SetCursor+0x4a>
    {
    case LINE1:LCD_enu_SendCmnd(ADDRESS_OF_LINE1 + Copy_u8_Location);break;
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	80 58       	subi	r24, 0x80	; 128
    2710:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    2714:	07 c0       	rjmp	.+14     	; 0x2724 <LCD_enu_SetCursor+0x4e>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	80 54       	subi	r24, 0x40	; 64
    271a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <LCD_enu_SetCursor+0x4e>
    default:return STATE_NOT_OK;break;
    2720:	1b 82       	std	Y+3, r1	; 0x03
    2722:	04 c0       	rjmp	.+8      	; 0x272c <LCD_enu_SetCursor+0x56>
    }
    }
    else{
        return STATE_NOT_OK;
    }
    return STATE_OK;
    2724:	31 e0       	ldi	r19, 0x01	; 1
    2726:	3b 83       	std	Y+3, r19	; 0x03
    2728:	01 c0       	rjmp	.+2      	; 0x272c <LCD_enu_SetCursor+0x56>
    case LINE2:LCD_enu_SendCmnd(ADDRESS_OF_LINE2 + Copy_u8_Location);break;
    default:return STATE_NOT_OK;break;
    }
    }
    else{
        return STATE_NOT_OK;
    272a:	1b 82       	std	Y+3, r1	; 0x03
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    }
    return STATE_OK;
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	cf 91       	pop	r28
    273a:	df 91       	pop	r29
    273c:	08 95       	ret

0000273e <LCD_enu_Init>:
ES_t LCD_enu_Init(void){
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
    274a:	cc 54       	subi	r28, 0x4C	; 76
    274c:	d0 40       	sbci	r29, 0x00	; 0
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	de bf       	out	0x3e, r29	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	cd bf       	out	0x3d, r28	; 61
    DIO_enu_SetPinDirection(LCD_U8_RS_PORT,LCD_U8_RS_PIN,DIO_U8_OUTPUT);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_RW_PORT,LCD_U8_RW_PIN,DIO_U8_OUTPUT);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	41 e0       	ldi	r20, 0x01	; 1
    2768:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_E_PORT,LCD_U8_E_PIN,DIO_U8_OUTPUT);
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	62 e0       	ldi	r22, 0x02	; 2
    2770:	41 e0       	ldi	r20, 0x01	; 1
    2772:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D7,DIO_U8_OUTPUT);
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	66 e0       	ldi	r22, 0x06	; 6
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D6,DIO_U8_OUTPUT);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	65 e0       	ldi	r22, 0x05	; 5
    2784:	41 e0       	ldi	r20, 0x01	; 1
    2786:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D5,DIO_U8_OUTPUT);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	64 e0       	ldi	r22, 0x04	; 4
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    DIO_enu_SetPinDirection(LCD_U8_DATA_PORT,D4,DIO_U8_OUTPUT);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	63 e0       	ldi	r22, 0x03	; 3
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    279e:	fe 01       	movw	r30, r28
    27a0:	e7 5b       	subi	r30, 0xB7	; 183
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	ac e0       	ldi	r26, 0x0C	; 12
    27aa:	b2 e4       	ldi	r27, 0x42	; 66
    27ac:	80 83       	st	Z, r24
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	a2 83       	std	Z+2, r26	; 0x02
    27b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	8e 01       	movw	r16, r28
    27b6:	0b 5b       	subi	r16, 0xBB	; 187
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 5b       	subi	r30, 0xB7	; 183
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a e7       	ldi	r20, 0x7A	; 122
    27ce:	55 e4       	ldi	r21, 0x45	; 69
    27d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	80 83       	st	Z, r24
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	a2 83       	std	Z+2, r26	; 0x02
    27e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e2:	fe 01       	movw	r30, r28
    27e4:	eb 5b       	subi	r30, 0xBB	; 187
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	44 f4       	brge	.+16     	; 0x2810 <LCD_enu_Init+0xd2>
		__ticks = 1;
    2800:	fe 01       	movw	r30, r28
    2802:	ed 5b       	subi	r30, 0xBD	; 189
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	64 c0       	rjmp	.+200    	; 0x28d8 <LCD_enu_Init+0x19a>
	else if (__tmp > 65535)
    2810:	fe 01       	movw	r30, r28
    2812:	eb 5b       	subi	r30, 0xBB	; 187
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	0c f0       	brlt	.+2      	; 0x2830 <LCD_enu_Init+0xf2>
    282e:	43 c0       	rjmp	.+134    	; 0x28b6 <LCD_enu_Init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	fe 01       	movw	r30, r28
    2832:	e7 5b       	subi	r30, 0xB7	; 183
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	8e 01       	movw	r16, r28
    2850:	0d 5b       	subi	r16, 0xBD	; 189
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	1f c0       	rjmp	.+62     	; 0x28a6 <LCD_enu_Init+0x168>
    2868:	fe 01       	movw	r30, r28
    286a:	ef 5b       	subi	r30, 0xBF	; 191
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 e9       	ldi	r24, 0x90	; 144
    2870:	91 e0       	ldi	r25, 0x01	; 1
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2876:	fe 01       	movw	r30, r28
    2878:	ef 5b       	subi	r30, 0xBF	; 191
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_enu_Init+0x142>
    2884:	fe 01       	movw	r30, r28
    2886:	ef 5b       	subi	r30, 0xBF	; 191
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	de 01       	movw	r26, r28
    2890:	ad 5b       	subi	r26, 0xBD	; 189
    2892:	bf 4f       	sbci	r27, 0xFF	; 255
    2894:	fe 01       	movw	r30, r28
    2896:	ed 5b       	subi	r30, 0xBD	; 189
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	11 96       	adiw	r26, 0x01	; 1
    28a2:	9c 93       	st	X, r25
    28a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	fe 01       	movw	r30, r28
    28a8:	ed 5b       	subi	r30, 0xBD	; 189
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	d1 f6       	brne	.-76     	; 0x2868 <LCD_enu_Init+0x12a>
    28b4:	24 c0       	rjmp	.+72     	; 0x28fe <LCD_enu_Init+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	8e 01       	movw	r16, r28
    28b8:	0d 5b       	subi	r16, 0xBD	; 189
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	eb 5b       	subi	r30, 0xBB	; 187
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	fe 01       	movw	r30, r28
    28da:	ed 5b       	subi	r30, 0xBD	; 189
    28dc:	ff 4f       	sbci	r31, 0xFF	; 255
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	fe 01       	movw	r30, r28
    28e4:	ff 96       	adiw	r30, 0x3f	; 63
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
    28ea:	fe 01       	movw	r30, r28
    28ec:	ff 96       	adiw	r30, 0x3f	; 63
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_enu_Init+0x1b4>
    28f6:	fe 01       	movw	r30, r28
    28f8:	ff 96       	adiw	r30, 0x3f	; 63
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	80 83       	st	Z, r24
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
     return STATE_OK;
    #elif LCD_U8_MODE == LCD_U8_MODE_4BIT
    _delay_ms(35);
    LCD_enu_SendCmnd(FOURBIT_INIT1);
    28fe:	83 e3       	ldi	r24, 0x33	; 51
    2900:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FOURBIT_INIT2);
    2904:	82 e3       	ldi	r24, 0x32	; 50
    2906:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    LCD_enu_SendCmnd(FUN_SET_4BIT_2LINES_5X7);
    290a:	88 e2       	ldi	r24, 0x28	; 40
    290c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e2       	ldi	r26, 0x20	; 32
    2916:	b2 e4       	ldi	r27, 0x42	; 66
    2918:	8b af       	std	Y+59, r24	; 0x3b
    291a:	9c af       	std	Y+60, r25	; 0x3c
    291c:	ad af       	std	Y+61, r26	; 0x3d
    291e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2920:	6b ad       	ldd	r22, Y+59	; 0x3b
    2922:	7c ad       	ldd	r23, Y+60	; 0x3c
    2924:	8d ad       	ldd	r24, Y+61	; 0x3d
    2926:	9e ad       	ldd	r25, Y+62	; 0x3e
    2928:	2b ea       	ldi	r18, 0xAB	; 171
    292a:	3a ea       	ldi	r19, 0xAA	; 170
    292c:	4a ea       	ldi	r20, 0xAA	; 170
    292e:	50 e4       	ldi	r21, 0x40	; 64
    2930:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8f ab       	std	Y+55, r24	; 0x37
    293a:	98 af       	std	Y+56, r25	; 0x38
    293c:	a9 af       	std	Y+57, r26	; 0x39
    293e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2940:	6f a9       	ldd	r22, Y+55	; 0x37
    2942:	78 ad       	ldd	r23, Y+56	; 0x38
    2944:	89 ad       	ldd	r24, Y+57	; 0x39
    2946:	9a ad       	ldd	r25, Y+58	; 0x3a
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	1c f4       	brge	.+6      	; 0x295e <LCD_enu_Init+0x220>
		__ticks = 1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	8e ab       	std	Y+54, r24	; 0x36
    295c:	91 c0       	rjmp	.+290    	; 0x2a80 <LCD_enu_Init+0x342>
	else if (__tmp > 255)
    295e:	6f a9       	ldd	r22, Y+55	; 0x37
    2960:	78 ad       	ldd	r23, Y+56	; 0x38
    2962:	89 ad       	ldd	r24, Y+57	; 0x39
    2964:	9a ad       	ldd	r25, Y+58	; 0x3a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	53 e4       	ldi	r21, 0x43	; 67
    296e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	0c f0       	brlt	.+2      	; 0x2978 <LCD_enu_Init+0x23a>
    2976:	7b c0       	rjmp	.+246    	; 0x2a6e <LCD_enu_Init+0x330>
	{
		_delay_ms(__us / 1000.0);
    2978:	6b ad       	ldd	r22, Y+59	; 0x3b
    297a:	7c ad       	ldd	r23, Y+60	; 0x3c
    297c:	8d ad       	ldd	r24, Y+61	; 0x3d
    297e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a e7       	ldi	r20, 0x7A	; 122
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	8a ab       	std	Y+50, r24	; 0x32
    2992:	9b ab       	std	Y+51, r25	; 0x33
    2994:	ac ab       	std	Y+52, r26	; 0x34
    2996:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	6a a9       	ldd	r22, Y+50	; 0x32
    299a:	7b a9       	ldd	r23, Y+51	; 0x33
    299c:	8c a9       	ldd	r24, Y+52	; 0x34
    299e:	9d a9       	ldd	r25, Y+53	; 0x35
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a e7       	ldi	r20, 0x7A	; 122
    29a6:	55 e4       	ldi	r21, 0x45	; 69
    29a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8e a7       	std	Y+46, r24	; 0x2e
    29b2:	9f a7       	std	Y+47, r25	; 0x2f
    29b4:	a8 ab       	std	Y+48, r26	; 0x30
    29b6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    29b8:	6e a5       	ldd	r22, Y+46	; 0x2e
    29ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    29bc:	88 a9       	ldd	r24, Y+48	; 0x30
    29be:	99 a9       	ldd	r25, Y+49	; 0x31
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	2c f4       	brge	.+10     	; 0x29da <LCD_enu_Init+0x29c>
		__ticks = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9d a7       	std	Y+45, r25	; 0x2d
    29d6:	8c a7       	std	Y+44, r24	; 0x2c
    29d8:	3f c0       	rjmp	.+126    	; 0x2a58 <LCD_enu_Init+0x31a>
	else if (__tmp > 65535)
    29da:	6e a5       	ldd	r22, Y+46	; 0x2e
    29dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    29de:	88 a9       	ldd	r24, Y+48	; 0x30
    29e0:	99 a9       	ldd	r25, Y+49	; 0x31
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	4c f5       	brge	.+82     	; 0x2a44 <LCD_enu_Init+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f2:	6a a9       	ldd	r22, Y+50	; 0x32
    29f4:	7b a9       	ldd	r23, Y+51	; 0x33
    29f6:	8c a9       	ldd	r24, Y+52	; 0x34
    29f8:	9d a9       	ldd	r25, Y+53	; 0x35
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e2       	ldi	r20, 0x20	; 32
    2a00:	51 e4       	ldi	r21, 0x41	; 65
    2a02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9d a7       	std	Y+45, r25	; 0x2d
    2a18:	8c a7       	std	Y+44, r24	; 0x2c
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <LCD_enu_Init+0x2fc>
    2a1c:	80 e9       	ldi	r24, 0x90	; 144
    2a1e:	91 e0       	ldi	r25, 0x01	; 1
    2a20:	9b a7       	std	Y+43, r25	; 0x2b
    2a22:	8a a7       	std	Y+42, r24	; 0x2a
    2a24:	8a a5       	ldd	r24, Y+42	; 0x2a
    2a26:	9b a5       	ldd	r25, Y+43	; 0x2b
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_enu_Init+0x2ea>
    2a2c:	9b a7       	std	Y+43, r25	; 0x2b
    2a2e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a32:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	9d a7       	std	Y+45, r25	; 0x2d
    2a38:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	69 f7       	brne	.-38     	; 0x2a1c <LCD_enu_Init+0x2de>
    2a42:	24 c0       	rjmp	.+72     	; 0x2a8c <LCD_enu_Init+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a44:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a46:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a48:	88 a9       	ldd	r24, Y+48	; 0x30
    2a4a:	99 a9       	ldd	r25, Y+49	; 0x31
    2a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9d a7       	std	Y+45, r25	; 0x2d
    2a56:	8c a7       	std	Y+44, r24	; 0x2c
    2a58:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a5a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a5c:	99 a7       	std	Y+41, r25	; 0x29
    2a5e:	88 a7       	std	Y+40, r24	; 0x28
    2a60:	88 a5       	ldd	r24, Y+40	; 0x28
    2a62:	99 a5       	ldd	r25, Y+41	; 0x29
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_enu_Init+0x326>
    2a68:	99 a7       	std	Y+41, r25	; 0x29
    2a6a:	88 a7       	std	Y+40, r24	; 0x28
    2a6c:	0f c0       	rjmp	.+30     	; 0x2a8c <LCD_enu_Init+0x34e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a6e:	6f a9       	ldd	r22, Y+55	; 0x37
    2a70:	78 ad       	ldd	r23, Y+56	; 0x38
    2a72:	89 ad       	ldd	r24, Y+57	; 0x39
    2a74:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	8e ab       	std	Y+54, r24	; 0x36
    2a80:	8e a9       	ldd	r24, Y+54	; 0x36
    2a82:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a84:	8f a1       	ldd	r24, Y+39	; 0x27
    2a86:	8a 95       	dec	r24
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_enu_Init+0x348>
    2a8a:	8f a3       	std	Y+39, r24	; 0x27
    _delay_us(40);
    LCD_enu_SendCmnd(DIS_ON_CURSOR_ON_BLINKING);
    2a8c:	8f e0       	ldi	r24, 0x0F	; 15
    2a8e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	a0 e2       	ldi	r26, 0x20	; 32
    2a98:	b2 e4       	ldi	r27, 0x42	; 66
    2a9a:	8b a3       	std	Y+35, r24	; 0x23
    2a9c:	9c a3       	std	Y+36, r25	; 0x24
    2a9e:	ad a3       	std	Y+37, r26	; 0x25
    2aa0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aaa:	2b ea       	ldi	r18, 0xAB	; 171
    2aac:	3a ea       	ldi	r19, 0xAA	; 170
    2aae:	4a ea       	ldi	r20, 0xAA	; 170
    2ab0:	50 e4       	ldi	r21, 0x40	; 64
    2ab2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	8f 8f       	std	Y+31, r24	; 0x1f
    2abc:	98 a3       	std	Y+32, r25	; 0x20
    2abe:	a9 a3       	std	Y+33, r26	; 0x21
    2ac0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2ac2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ac4:	78 a1       	ldd	r23, Y+32	; 0x20
    2ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e8       	ldi	r20, 0x80	; 128
    2ad0:	5f e3       	ldi	r21, 0x3F	; 63
    2ad2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ad6:	88 23       	and	r24, r24
    2ad8:	1c f4       	brge	.+6      	; 0x2ae0 <LCD_enu_Init+0x3a2>
		__ticks = 1;
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	8e 8f       	std	Y+30, r24	; 0x1e
    2ade:	91 c0       	rjmp	.+290    	; 0x2c02 <LCD_enu_Init+0x4c4>
	else if (__tmp > 255)
    2ae0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ae2:	78 a1       	ldd	r23, Y+32	; 0x20
    2ae4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4f e7       	ldi	r20, 0x7F	; 127
    2aee:	53 e4       	ldi	r21, 0x43	; 67
    2af0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2af4:	18 16       	cp	r1, r24
    2af6:	0c f0       	brlt	.+2      	; 0x2afa <LCD_enu_Init+0x3bc>
    2af8:	7b c0       	rjmp	.+246    	; 0x2bf0 <LCD_enu_Init+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    2afa:	6b a1       	ldd	r22, Y+35	; 0x23
    2afc:	7c a1       	ldd	r23, Y+36	; 0x24
    2afe:	8d a1       	ldd	r24, Y+37	; 0x25
    2b00:	9e a1       	ldd	r25, Y+38	; 0x26
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a e7       	ldi	r20, 0x7A	; 122
    2b08:	54 e4       	ldi	r21, 0x44	; 68
    2b0a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8a 8f       	std	Y+26, r24	; 0x1a
    2b14:	9b 8f       	std	Y+27, r25	; 0x1b
    2b16:	ac 8f       	std	Y+28, r26	; 0x1c
    2b18:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b1c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	4a e7       	ldi	r20, 0x7A	; 122
    2b28:	55 e4       	ldi	r21, 0x45	; 69
    2b2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	8e 8b       	std	Y+22, r24	; 0x16
    2b34:	9f 8b       	std	Y+23, r25	; 0x17
    2b36:	a8 8f       	std	Y+24, r26	; 0x18
    2b38:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2b3a:	6e 89       	ldd	r22, Y+22	; 0x16
    2b3c:	7f 89       	ldd	r23, Y+23	; 0x17
    2b3e:	88 8d       	ldd	r24, Y+24	; 0x18
    2b40:	99 8d       	ldd	r25, Y+25	; 0x19
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e8       	ldi	r20, 0x80	; 128
    2b48:	5f e3       	ldi	r21, 0x3F	; 63
    2b4a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b4e:	88 23       	and	r24, r24
    2b50:	2c f4       	brge	.+10     	; 0x2b5c <LCD_enu_Init+0x41e>
		__ticks = 1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	9d 8b       	std	Y+21, r25	; 0x15
    2b58:	8c 8b       	std	Y+20, r24	; 0x14
    2b5a:	3f c0       	rjmp	.+126    	; 0x2bda <LCD_enu_Init+0x49c>
	else if (__tmp > 65535)
    2b5c:	6e 89       	ldd	r22, Y+22	; 0x16
    2b5e:	7f 89       	ldd	r23, Y+23	; 0x17
    2b60:	88 8d       	ldd	r24, Y+24	; 0x18
    2b62:	99 8d       	ldd	r25, Y+25	; 0x19
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	3f ef       	ldi	r19, 0xFF	; 255
    2b68:	4f e7       	ldi	r20, 0x7F	; 127
    2b6a:	57 e4       	ldi	r21, 0x47	; 71
    2b6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b70:	18 16       	cp	r1, r24
    2b72:	4c f5       	brge	.+82     	; 0x2bc6 <LCD_enu_Init+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b74:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b76:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e2       	ldi	r20, 0x20	; 32
    2b82:	51 e4       	ldi	r21, 0x41	; 65
    2b84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	9d 8b       	std	Y+21, r25	; 0x15
    2b9a:	8c 8b       	std	Y+20, r24	; 0x14
    2b9c:	0f c0       	rjmp	.+30     	; 0x2bbc <LCD_enu_Init+0x47e>
    2b9e:	80 e9       	ldi	r24, 0x90	; 144
    2ba0:	91 e0       	ldi	r25, 0x01	; 1
    2ba2:	9b 8b       	std	Y+19, r25	; 0x13
    2ba4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ba6:	8a 89       	ldd	r24, Y+18	; 0x12
    2ba8:	9b 89       	ldd	r25, Y+19	; 0x13
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <LCD_enu_Init+0x46c>
    2bae:	9b 8b       	std	Y+19, r25	; 0x13
    2bb0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb2:	8c 89       	ldd	r24, Y+20	; 0x14
    2bb4:	9d 89       	ldd	r25, Y+21	; 0x15
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	9d 8b       	std	Y+21, r25	; 0x15
    2bba:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbc:	8c 89       	ldd	r24, Y+20	; 0x14
    2bbe:	9d 89       	ldd	r25, Y+21	; 0x15
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	69 f7       	brne	.-38     	; 0x2b9e <LCD_enu_Init+0x460>
    2bc4:	24 c0       	rjmp	.+72     	; 0x2c0e <LCD_enu_Init+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc6:	6e 89       	ldd	r22, Y+22	; 0x16
    2bc8:	7f 89       	ldd	r23, Y+23	; 0x17
    2bca:	88 8d       	ldd	r24, Y+24	; 0x18
    2bcc:	99 8d       	ldd	r25, Y+25	; 0x19
    2bce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	9d 8b       	std	Y+21, r25	; 0x15
    2bd8:	8c 8b       	std	Y+20, r24	; 0x14
    2bda:	8c 89       	ldd	r24, Y+20	; 0x14
    2bdc:	9d 89       	ldd	r25, Y+21	; 0x15
    2bde:	99 8b       	std	Y+17, r25	; 0x11
    2be0:	88 8b       	std	Y+16, r24	; 0x10
    2be2:	88 89       	ldd	r24, Y+16	; 0x10
    2be4:	99 89       	ldd	r25, Y+17	; 0x11
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	f1 f7       	brne	.-4      	; 0x2be6 <LCD_enu_Init+0x4a8>
    2bea:	99 8b       	std	Y+17, r25	; 0x11
    2bec:	88 8b       	std	Y+16, r24	; 0x10
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <LCD_enu_Init+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bf0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bf2:	78 a1       	ldd	r23, Y+32	; 0x20
    2bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8e 8f       	std	Y+30, r24	; 0x1e
    2c02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c04:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c08:	8a 95       	dec	r24
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_enu_Init+0x4ca>
    2c0c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(40);
    LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	a0 e0       	ldi	r26, 0x00	; 0
    2c1a:	b0 e4       	ldi	r27, 0x40	; 64
    2c1c:	8b 87       	std	Y+11, r24	; 0x0b
    2c1e:	9c 87       	std	Y+12, r25	; 0x0c
    2c20:	ad 87       	std	Y+13, r26	; 0x0d
    2c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	4a e7       	ldi	r20, 0x7A	; 122
    2c32:	55 e4       	ldi	r21, 0x45	; 69
    2c34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8f 83       	std	Y+7, r24	; 0x07
    2c3e:	98 87       	std	Y+8, r25	; 0x08
    2c40:	a9 87       	std	Y+9, r26	; 0x09
    2c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	40 e8       	ldi	r20, 0x80	; 128
    2c52:	5f e3       	ldi	r21, 0x3F	; 63
    2c54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c58:	88 23       	and	r24, r24
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <LCD_enu_Init+0x528>
		__ticks = 1;
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05
    2c64:	3f c0       	rjmp	.+126    	; 0x2ce4 <LCD_enu_Init+0x5a6>
	else if (__tmp > 65535)
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	3f ef       	ldi	r19, 0xFF	; 255
    2c72:	4f e7       	ldi	r20, 0x7F	; 127
    2c74:	57 e4       	ldi	r21, 0x47	; 71
    2c76:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c7a:	18 16       	cp	r1, r24
    2c7c:	4c f5       	brge	.+82     	; 0x2cd0 <LCD_enu_Init+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	40 e2       	ldi	r20, 0x20	; 32
    2c8c:	51 e4       	ldi	r21, 0x41	; 65
    2c8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	bc 01       	movw	r22, r24
    2c98:	cd 01       	movw	r24, r26
    2c9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <LCD_enu_Init+0x588>
    2ca8:	80 e9       	ldi	r24, 0x90	; 144
    2caa:	91 e0       	ldi	r25, 0x01	; 1
    2cac:	9c 83       	std	Y+4, r25	; 0x04
    2cae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	f1 f7       	brne	.-4      	; 0x2cb4 <LCD_enu_Init+0x576>
    2cb8:	9c 83       	std	Y+4, r25	; 0x04
    2cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	69 f7       	brne	.-38     	; 0x2ca8 <LCD_enu_Init+0x56a>
    2cce:	14 c0       	rjmp	.+40     	; 0x2cf8 <LCD_enu_Init+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd2:	78 85       	ldd	r23, Y+8	; 0x08
    2cd4:	89 85       	ldd	r24, Y+9	; 0x09
    2cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce8:	9a 83       	std	Y+2, r25	; 0x02
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <LCD_enu_Init+0x5b2>
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    LCD_enu_SendCmnd(ENTRY_MOOD);
    2cf8:	86 e0       	ldi	r24, 0x06	; 6
    2cfa:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    return STATE_OK;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    #endif
}
    2d00:	c4 5b       	subi	r28, 0xB4	; 180
    2d02:	df 4f       	sbci	r29, 0xFF	; 255
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	1f 91       	pop	r17
    2d14:	0f 91       	pop	r16
    2d16:	08 95       	ret

00002d18 <LCD_enu_Clear>:
ES_t LCD_enu_Clear(void){
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	2e 97       	sbiw	r28, 0x0e	; 14
    2d22:	0f b6       	in	r0, 0x3f	; 63
    2d24:	f8 94       	cli
    2d26:	de bf       	out	0x3e, r29	; 62
    2d28:	0f be       	out	0x3f, r0	; 63
    2d2a:	cd bf       	out	0x3d, r28	; 61
	LCD_enu_SendCmnd(DISPLAY_CLEAR);
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	a0 e0       	ldi	r26, 0x00	; 0
    2d38:	b0 e4       	ldi	r27, 0x40	; 64
    2d3a:	8b 87       	std	Y+11, r24	; 0x0b
    2d3c:	9c 87       	std	Y+12, r25	; 0x0c
    2d3e:	ad 87       	std	Y+13, r26	; 0x0d
    2d40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a e7       	ldi	r20, 0x7A	; 122
    2d50:	55 e4       	ldi	r21, 0x45	; 69
    2d52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	8f 83       	std	Y+7, r24	; 0x07
    2d5c:	98 87       	std	Y+8, r25	; 0x08
    2d5e:	a9 87       	std	Y+9, r26	; 0x09
    2d60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d62:	6f 81       	ldd	r22, Y+7	; 0x07
    2d64:	78 85       	ldd	r23, Y+8	; 0x08
    2d66:	89 85       	ldd	r24, Y+9	; 0x09
    2d68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	2c f4       	brge	.+10     	; 0x2d84 <LCD_enu_Clear+0x6c>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9e 83       	std	Y+6, r25	; 0x06
    2d80:	8d 83       	std	Y+5, r24	; 0x05
    2d82:	3f c0       	rjmp	.+126    	; 0x2e02 <LCD_enu_Clear+0xea>
	else if (__tmp > 65535)
    2d84:	6f 81       	ldd	r22, Y+7	; 0x07
    2d86:	78 85       	ldd	r23, Y+8	; 0x08
    2d88:	89 85       	ldd	r24, Y+9	; 0x09
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	4c f5       	brge	.+82     	; 0x2dee <LCD_enu_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <LCD_enu_Clear+0xcc>
    2dc6:	80 e9       	ldi	r24, 0x90	; 144
    2dc8:	91 e0       	ldi	r25, 0x01	; 1
    2dca:	9c 83       	std	Y+4, r25	; 0x04
    2dcc:	8b 83       	std	Y+3, r24	; 0x03
    2dce:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_enu_Clear+0xba>
    2dd6:	9c 83       	std	Y+4, r25	; 0x04
    2dd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <LCD_enu_Clear+0xae>
    2dec:	14 c0       	rjmp	.+40     	; 0x2e16 <LCD_enu_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	6f 81       	ldd	r22, Y+7	; 0x07
    2df0:	78 85       	ldd	r23, Y+8	; 0x08
    2df2:	89 85       	ldd	r24, Y+9	; 0x09
    2df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	9e 83       	std	Y+6, r25	; 0x06
    2e00:	8d 83       	std	Y+5, r24	; 0x05
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	9a 83       	std	Y+2, r25	; 0x02
    2e08:	89 83       	std	Y+1, r24	; 0x01
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <LCD_enu_Clear+0xf6>
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	return STATE_OK;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
}
    2e18:	2e 96       	adiw	r28, 0x0e	; 14
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	08 95       	ret

00002e2a <LCD_enu_CreateCustomChar>:
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	00 d0       	rcall	.+0      	; 0x2e30 <LCD_enu_CreateCustomChar+0x6>
    2e30:	00 d0       	rcall	.+0      	; 0x2e32 <LCD_enu_CreateCustomChar+0x8>
    2e32:	0f 92       	push	r0
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	8a 83       	std	Y+2, r24	; 0x02
    2e3a:	7c 83       	std	Y+4, r23	; 0x04
    2e3c:	6b 83       	std	Y+3, r22	; 0x03
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	00 97       	sbiw	r24, 0x00	; 0
    2e44:	49 f1       	breq	.+82     	; 0x2e98 <LCD_enu_CreateCustomChar+0x6e>
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	88 30       	cpi	r24, 0x08	; 8
    2e4a:	30 f5       	brcc	.+76     	; 0x2e98 <LCD_enu_CreateCustomChar+0x6e>
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	08 96       	adiw	r24, 0x08	; 8
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_enu_SendCmnd>
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2e64:	19 82       	std	Y+1, r1	; 0x01
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <LCD_enu_CreateCustomChar+0x5a>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	fc 01       	movw	r30, r24
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	80 81       	ld	r24, Z
    2e7a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LCD_enu_SendChar>
ES_t LCD_enu_CreateCustomChar(u8 Copy_u8_Location, u8 *Copy_pu8_CharArray)
{
    if (Copy_pu8_CharArray != NULL && Copy_u8_Location < MAX_CHARACTERS)
    {
        LCD_enu_SendCmnd(ADDRESS_OF_CGRAM + (Copy_u8_Location * MAX_CHARACTERS));
        for (u8 Local_u8_Counter = 0; Local_u8_Counter < MAX_CHARACTERS; Local_u8_Counter++)
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	8f 5f       	subi	r24, 0xFF	; 255
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	88 30       	cpi	r24, 0x08	; 8
    2e88:	78 f3       	brcs	.-34     	; 0x2e68 <LCD_enu_CreateCustomChar+0x3e>
        {
            LCD_enu_SendChar(Copy_pu8_CharArray[Local_u8_Counter]);
        }
        LCD_enu_SetCursor(0,0);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <LCD_enu_SetCursor>
        return STATE_OK;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	8d 83       	std	Y+5, r24	; 0x05
    2e96:	02 c0       	rjmp	.+4      	; 0x2e9c <LCD_enu_CreateCustomChar+0x72>
    }
    else
        {
        return STATE_OK;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	8d 83       	std	Y+5, r24	; 0x05
    2e9c:	8d 81       	ldd	r24, Y+5	; 0x05
        }
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <Keypad_enu_Init>:
const u8 Keypad_Au8_Keys[4][4] = KEYPAD_KEYS;
const u8 Keypad_Au8_RowsPins[4] = {KEYPAD_U8_ROW1_PIN, KEYPAD_U8_ROW2_PIN, KEYPAD_U8_ROW3_PIN, KEYPAD_U8_ROW4_PIN};
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	0f 92       	push	r0
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2eb8:	19 82       	std	Y+1, r1	; 0x01
    2eba:	33 c0       	rjmp	.+102    	; 0x2f22 <Keypad_enu_Init+0x74>
    {
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	e8 5b       	subi	r30, 0xB8	; 184
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	90 81       	ld	r25, Z
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	69 2f       	mov	r22, r25
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
    2ed4:	89 81       	ldd	r24, Y+1	; 0x01
    2ed6:	88 2f       	mov	r24, r24
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	fc 01       	movw	r30, r24
    2edc:	e8 5b       	subi	r30, 0xB8	; 184
    2ede:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee0:	90 81       	ld	r25, Z
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	69 2f       	mov	r22, r25
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	88 2f       	mov	r24, r24
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e4 5b       	subi	r30, 0xB4	; 180
    2ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef8:	90 81       	ld	r25, Z
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	69 2f       	mov	r22, r25
    2efe:	40 e0       	ldi	r20, 0x00	; 0
    2f00:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	88 2f       	mov	r24, r24
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	e4 5b       	subi	r30, 0xB4	; 180
    2f0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f10:	90 81       	ld	r25, Z
    2f12:	83 e0       	ldi	r24, 0x03	; 3
    2f14:	69 2f       	mov	r22, r25
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
const u8 Keypad_Au8_ColsPins[4] = {KEYPAD_U8_COLUMN1_PIN, KEYPAD_U8_COLUMN2_PIN, KEYPAD_U8_COLUMN3_PIN, KEYPAD_U8_COLUMN4_PIN};

ES_t Keypad_enu_Init()
{
    /*Configure Rows And Columns Pins*/
    for (u8 Local_u8_iterator = 0; Local_u8_iterator < 4; Local_u8_iterator++)
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	8f 5f       	subi	r24, 0xFF	; 255
    2f20:	89 83       	std	Y+1, r24	; 0x01
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	84 30       	cpi	r24, 0x04	; 4
    2f26:	50 f2       	brcs	.-108    	; 0x2ebc <Keypad_enu_Init+0xe>
        DIO_enu_SetPinDirection(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_OUTPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_iterator], DIO_U8_HIGH);
        DIO_enu_SetPinDirection(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_INPUT);
        DIO_enu_SetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_iterator], DIO_U8_HIGH);
    }
    return STATE_OK;
    2f28:	81 e0       	ldi	r24, 0x01	; 1
}
    2f2a:	0f 90       	pop	r0
    2f2c:	cf 91       	pop	r28
    2f2e:	df 91       	pop	r29
    2f30:	08 95       	ret

00002f32 <Keypad_enu_getKey>:

ES_t Keypad_enu_getKey(u8 *Copy_pu8_ReturnedKey)
{
    2f32:	df 93       	push	r29
    2f34:	cf 93       	push	r28
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	65 97       	sbiw	r28, 0x15	; 21
    2f3c:	0f b6       	in	r0, 0x3f	; 63
    2f3e:	f8 94       	cli
    2f40:	de bf       	out	0x3e, r29	; 62
    2f42:	0f be       	out	0x3f, r0	; 63
    2f44:	cd bf       	out	0x3d, r28	; 61
    2f46:	9d 8b       	std	Y+21, r25	; 0x15
    2f48:	8c 8b       	std	Y+20, r24	; 0x14
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	8a 8b       	std	Y+18, r24	; 0x12
    2f4e:	1b 8a       	std	Y+19, r1	; 0x13
    2f50:	1f 86       	std	Y+15, r1	; 0x0f
    if (Copy_pu8_ReturnedKey != NULL)
    2f52:	8c 89       	ldd	r24, Y+20	; 0x14
    2f54:	9d 89       	ldd	r25, Y+21	; 0x15
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <Keypad_enu_getKey+0x2a>
    2f5a:	f0 c0       	rjmp	.+480    	; 0x313c <Keypad_enu_getKey+0x20a>
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
    2f5c:	ec 89       	ldd	r30, Y+20	; 0x14
    2f5e:	fd 89       	ldd	r31, Y+21	; 0x15
    2f60:	8f ef       	ldi	r24, 0xFF	; 255
    2f62:	80 83       	st	Z, r24
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    2f64:	19 8a       	std	Y+17, r1	; 0x11
    2f66:	e5 c0       	rjmp	.+458    	; 0x3132 <Keypad_enu_getKey+0x200>
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
    2f68:	89 89       	ldd	r24, Y+17	; 0x11
    2f6a:	88 2f       	mov	r24, r24
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	fc 01       	movw	r30, r24
    2f70:	e8 5b       	subi	r30, 0xB8	; 184
    2f72:	fe 4f       	sbci	r31, 0xFE	; 254
    2f74:	90 81       	ld	r25, Z
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	69 2f       	mov	r22, r25
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    2f80:	18 8a       	std	Y+16, r1	; 0x10
    2f82:	c1 c0       	rjmp	.+386    	; 0x3106 <Keypad_enu_getKey+0x1d4>
            {
                DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    2f84:	88 89       	ldd	r24, Y+16	; 0x10
    2f86:	88 2f       	mov	r24, r24
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	e4 5b       	subi	r30, 0xB4	; 180
    2f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f90:	90 81       	ld	r25, Z
    2f92:	9e 01       	movw	r18, r28
    2f94:	2d 5e       	subi	r18, 0xED	; 237
    2f96:	3f 4f       	sbci	r19, 0xFF	; 255
    2f98:	83 e0       	ldi	r24, 0x03	; 3
    2f9a:	69 2f       	mov	r22, r25
    2f9c:	a9 01       	movw	r20, r18
    2f9e:	0e 94 0e 1c 	call	0x381c	; 0x381c <DIO_enu_GetPinValue>
                if (!Local_u8_ReturnedState) // Switch is Pressed
    2fa2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <Keypad_enu_getKey+0x78>
    2fa8:	ab c0       	rjmp	.+342    	; 0x3100 <Keypad_enu_getKey+0x1ce>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a0 ea       	ldi	r26, 0xA0	; 160
    2fb0:	b1 e4       	ldi	r27, 0x41	; 65
    2fb2:	8b 87       	std	Y+11, r24	; 0x0b
    2fb4:	9c 87       	std	Y+12, r25	; 0x0c
    2fb6:	ad 87       	std	Y+13, r26	; 0x0d
    2fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a e7       	ldi	r20, 0x7A	; 122
    2fc8:	55 e4       	ldi	r21, 0x45	; 69
    2fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	8f 83       	std	Y+7, r24	; 0x07
    2fd4:	98 87       	std	Y+8, r25	; 0x08
    2fd6:	a9 87       	std	Y+9, r26	; 0x09
    2fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fda:	6f 81       	ldd	r22, Y+7	; 0x07
    2fdc:	78 85       	ldd	r23, Y+8	; 0x08
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <Keypad_enu_getKey+0xca>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	9e 83       	std	Y+6, r25	; 0x06
    2ff8:	8d 83       	std	Y+5, r24	; 0x05
    2ffa:	3f c0       	rjmp	.+126    	; 0x307a <Keypad_enu_getKey+0x148>
	else if (__tmp > 65535)
    2ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffe:	78 85       	ldd	r23, Y+8	; 0x08
    3000:	89 85       	ldd	r24, Y+9	; 0x09
    3002:	9a 85       	ldd	r25, Y+10	; 0x0a
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	3f ef       	ldi	r19, 0xFF	; 255
    3008:	4f e7       	ldi	r20, 0x7F	; 127
    300a:	57 e4       	ldi	r21, 0x47	; 71
    300c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3010:	18 16       	cp	r1, r24
    3012:	4c f5       	brge	.+82     	; 0x3066 <Keypad_enu_getKey+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3014:	6b 85       	ldd	r22, Y+11	; 0x0b
    3016:	7c 85       	ldd	r23, Y+12	; 0x0c
    3018:	8d 85       	ldd	r24, Y+13	; 0x0d
    301a:	9e 85       	ldd	r25, Y+14	; 0x0e
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e2       	ldi	r20, 0x20	; 32
    3022:	51 e4       	ldi	r21, 0x41	; 65
    3024:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
    303c:	0f c0       	rjmp	.+30     	; 0x305c <Keypad_enu_getKey+0x12a>
    303e:	80 e9       	ldi	r24, 0x90	; 144
    3040:	91 e0       	ldi	r25, 0x01	; 1
    3042:	9c 83       	std	Y+4, r25	; 0x04
    3044:	8b 83       	std	Y+3, r24	; 0x03
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	9c 81       	ldd	r25, Y+4	; 0x04
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <Keypad_enu_getKey+0x118>
    304e:	9c 83       	std	Y+4, r25	; 0x04
    3050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
    3054:	9e 81       	ldd	r25, Y+6	; 0x06
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	9e 81       	ldd	r25, Y+6	; 0x06
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	69 f7       	brne	.-38     	; 0x303e <Keypad_enu_getKey+0x10c>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <Keypad_enu_getKey+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	6f 81       	ldd	r22, Y+7	; 0x07
    3068:	78 85       	ldd	r23, Y+8	; 0x08
    306a:	89 85       	ldd	r24, Y+9	; 0x09
    306c:	9a 85       	ldd	r25, Y+10	; 0x0a
    306e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	8d 81       	ldd	r24, Y+5	; 0x05
    307c:	9e 81       	ldd	r25, Y+6	; 0x06
    307e:	9a 83       	std	Y+2, r25	; 0x02
    3080:	89 83       	std	Y+1, r24	; 0x01
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <Keypad_enu_getKey+0x154>
    308a:	9a 83       	std	Y+2, r25	; 0x02
    308c:	89 83       	std	Y+1, r24	; 0x01
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    308e:	88 89       	ldd	r24, Y+16	; 0x10
    3090:	88 2f       	mov	r24, r24
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	fc 01       	movw	r30, r24
    3096:	e4 5b       	subi	r30, 0xB4	; 180
    3098:	fe 4f       	sbci	r31, 0xFE	; 254
    309a:	90 81       	ld	r25, Z
    309c:	9e 01       	movw	r18, r28
    309e:	2d 5e       	subi	r18, 0xED	; 237
    30a0:	3f 4f       	sbci	r19, 0xFF	; 255
    30a2:	83 e0       	ldi	r24, 0x03	; 3
    30a4:	69 2f       	mov	r22, r25
    30a6:	a9 01       	movw	r20, r18
    30a8:	0e 94 0e 1c 	call	0x381c	; 0x381c <DIO_enu_GetPinValue>
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <Keypad_enu_getKey+0x19a>
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
    30ae:	88 89       	ldd	r24, Y+16	; 0x10
    30b0:	88 2f       	mov	r24, r24
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	fc 01       	movw	r30, r24
    30b6:	e4 5b       	subi	r30, 0xB4	; 180
    30b8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ba:	90 81       	ld	r25, Z
    30bc:	9e 01       	movw	r18, r28
    30be:	2d 5e       	subi	r18, 0xED	; 237
    30c0:	3f 4f       	sbci	r19, 0xFF	; 255
    30c2:	83 e0       	ldi	r24, 0x03	; 3
    30c4:	69 2f       	mov	r22, r25
    30c6:	a9 01       	movw	r20, r18
    30c8:	0e 94 0e 1c 	call	0x381c	; 0x381c <DIO_enu_GetPinValue>
                {
                    // Bouncing Handling
                    _delay_ms(20);
                    DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    // Check if pin still low
                    while (!Local_u8_ReturnedState)
    30cc:	8b 89       	ldd	r24, Y+19	; 0x13
    30ce:	88 23       	and	r24, r24
    30d0:	71 f3       	breq	.-36     	; 0x30ae <Keypad_enu_getKey+0x17c>
                    {
                        DIO_enu_GetPinValue(KEYPAD_U8_COLUMNS_PORT, Keypad_Au8_ColsPins[Local_u8_colsCounter], &Local_u8_ReturnedState);
                    }
                    *Copy_pu8_ReturnedKey = Keypad_Au8_Keys[Local_u8_rowsCounter][Local_u8_colsCounter];
    30d2:	89 89       	ldd	r24, Y+17	; 0x11
    30d4:	48 2f       	mov	r20, r24
    30d6:	50 e0       	ldi	r21, 0x00	; 0
    30d8:	88 89       	ldd	r24, Y+16	; 0x10
    30da:	28 2f       	mov	r18, r24
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	ca 01       	movw	r24, r20
    30e0:	88 0f       	add	r24, r24
    30e2:	99 1f       	adc	r25, r25
    30e4:	88 0f       	add	r24, r24
    30e6:	99 1f       	adc	r25, r25
    30e8:	82 0f       	add	r24, r18
    30ea:	93 1f       	adc	r25, r19
    30ec:	fc 01       	movw	r30, r24
    30ee:	e8 5c       	subi	r30, 0xC8	; 200
    30f0:	fe 4f       	sbci	r31, 0xFE	; 254
    30f2:	80 81       	ld	r24, Z
    30f4:	ec 89       	ldd	r30, Y+20	; 0x14
    30f6:	fd 89       	ldd	r31, Y+21	; 0x15
    30f8:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	8f 87       	std	Y+15, r24	; 0x0f
    30fe:	07 c0       	rjmp	.+14     	; 0x310e <Keypad_enu_getKey+0x1dc>
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
        {
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_LOW);
            /*Check Which Input Pin Has Zero*/
            for (Local_u8_colsCounter = 0; Local_u8_colsCounter < 4; Local_u8_colsCounter++)
    3100:	88 89       	ldd	r24, Y+16	; 0x10
    3102:	8f 5f       	subi	r24, 0xFF	; 255
    3104:	88 8b       	std	Y+16, r24	; 0x10
    3106:	88 89       	ldd	r24, Y+16	; 0x10
    3108:	84 30       	cpi	r24, 0x04	; 4
    310a:	08 f4       	brcc	.+2      	; 0x310e <Keypad_enu_getKey+0x1dc>
    310c:	3b cf       	rjmp	.-394    	; 0x2f84 <Keypad_enu_getKey+0x52>
                    Local_u8_Flag = 1;
                    break;
                }
            }
            // Deactivate the current Row
            DIO_enu_SetPinValue(KEYPAD_U8_ROWS_PORT, Keypad_Au8_RowsPins[Local_u8_rowsCounter], DIO_U8_HIGH);
    310e:	89 89       	ldd	r24, Y+17	; 0x11
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	fc 01       	movw	r30, r24
    3116:	e8 5b       	subi	r30, 0xB8	; 184
    3118:	fe 4f       	sbci	r31, 0xFE	; 254
    311a:	90 81       	ld	r25, Z
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	69 2f       	mov	r22, r25
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            if (Local_u8_Flag)
    3126:	8f 85       	ldd	r24, Y+15	; 0x0f
    3128:	88 23       	and	r24, r24
    312a:	49 f4       	brne	.+18     	; 0x313e <Keypad_enu_getKey+0x20c>
    u8 Local_u8_errorState = STATE_OK, Local_u8_rowsCounter, Local_u8_colsCounter, Local_u8_ReturnedState = 0, Local_u8_Flag = 0;
    if (Copy_pu8_ReturnedKey != NULL)
    {
        *Copy_pu8_ReturnedKey = NO_KEY_PRESSED;
        /*Activate Each Row*/
        for (Local_u8_rowsCounter = 0; Local_u8_rowsCounter < 4; Local_u8_rowsCounter++)
    312c:	89 89       	ldd	r24, Y+17	; 0x11
    312e:	8f 5f       	subi	r24, 0xFF	; 255
    3130:	89 8b       	std	Y+17, r24	; 0x11
    3132:	89 89       	ldd	r24, Y+17	; 0x11
    3134:	84 30       	cpi	r24, 0x04	; 4
    3136:	08 f4       	brcc	.+2      	; 0x313a <Keypad_enu_getKey+0x208>
    3138:	17 cf       	rjmp	.-466    	; 0x2f68 <Keypad_enu_getKey+0x36>
    313a:	01 c0       	rjmp	.+2      	; 0x313e <Keypad_enu_getKey+0x20c>
            }
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    313c:	1a 8a       	std	Y+18, r1	; 0x12
    }
    return Local_u8_errorState;
    313e:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3140:	65 96       	adiw	r28, 0x15	; 21
    3142:	0f b6       	in	r0, 0x3f	; 63
    3144:	f8 94       	cli
    3146:	de bf       	out	0x3e, r29	; 62
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	cd bf       	out	0x3d, r28	; 61
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <DC_Motor_enu_Init>:

#include "../../2-HAL/DC_Motor/DC_Motor_Config.h"
#include "../../2-HAL/DC_Motor/DC_Motor_Private.h"

ES_t DC_Motor_enu_Init(u8 Copy_u8_M1_State, u8 Copy_u8_M2_State)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <DC_Motor_enu_Init+0x6>
    3158:	0f 92       	push	r0
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	8a 83       	std	Y+2, r24	; 0x02
    3160:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	89 83       	std	Y+1, r24	; 0x01
    if ((Copy_u8_M1_State == 1 || Copy_u8_M1_State == 0) && (Copy_u8_M2_State == 1 || Copy_u8_M2_State == 0))
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	81 30       	cpi	r24, 0x01	; 1
    316a:	19 f0       	breq	.+6      	; 0x3172 <DC_Motor_enu_Init+0x20>
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	88 23       	and	r24, r24
    3170:	59 f5       	brne	.+86     	; 0x31c8 <DC_Motor_enu_Init+0x76>
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	81 30       	cpi	r24, 0x01	; 1
    3176:	19 f0       	breq	.+6      	; 0x317e <DC_Motor_enu_Init+0x2c>
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	88 23       	and	r24, r24
    317c:	29 f5       	brne	.+74     	; 0x31c8 <DC_Motor_enu_Init+0x76>
    {
        if (Copy_u8_M1_State == CONNECTED)
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	81 30       	cpi	r24, 0x01	; 1
    3182:	79 f4       	brne	.+30     	; 0x31a2 <DC_Motor_enu_Init+0x50>
        {
            DIO_enu_SetPinDirection(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_OUTPUT);
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	64 e0       	ldi	r22, 0x04	; 4
    3188:	41 e0       	ldi	r20, 0x01	; 1
    318a:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_OUTPUT);
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_OUTPUT);
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	61 e0       	ldi	r22, 0x01	; 1
    319c:	41 e0       	ldi	r20, 0x01	; 1
    319e:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
        }
        if (Copy_u8_M2_State == CONNECTED)
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	81 30       	cpi	r24, 0x01	; 1
    31a6:	89 f4       	brne	.+34     	; 0x31ca <DC_Motor_enu_Init+0x78>
        {
            DIO_enu_SetPinDirection(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_OUTPUT);
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	65 e0       	ldi	r22, 0x05	; 5
    31ac:	41 e0       	ldi	r20, 0x01	; 1
    31ae:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_OUTPUT);
    31b2:	82 e0       	ldi	r24, 0x02	; 2
    31b4:	62 e0       	ldi	r22, 0x02	; 2
    31b6:	41 e0       	ldi	r20, 0x01	; 1
    31b8:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
            DIO_enu_SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_OUTPUT);
    31bc:	82 e0       	ldi	r24, 0x02	; 2
    31be:	63 e0       	ldi	r22, 0x03	; 3
    31c0:	41 e0       	ldi	r20, 0x01	; 1
    31c2:	0e 94 ba 19 	call	0x3374	; 0x3374 <DIO_enu_SetPinDirection>
    31c6:	01 c0       	rjmp	.+2      	; 0x31ca <DC_Motor_enu_Init+0x78>
        }
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    31c8:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	cf 91       	pop	r28
    31d4:	df 91       	pop	r29
    31d6:	08 95       	ret

000031d8 <DC_Motor_enu_Rotate>:
ES_t DC_Motor_enu_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Direction)
{
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	29 97       	sbiw	r28, 0x09	; 9
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	8a 83       	std	Y+2, r24	; 0x02
    31ee:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_errorState = STATE_OK;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8_Motor)
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	28 2f       	mov	r18, r24
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	39 87       	std	Y+9, r19	; 0x09
    31fc:	28 87       	std	Y+8, r18	; 0x08
    31fe:	88 85       	ldd	r24, Y+8	; 0x08
    3200:	99 85       	ldd	r25, Y+9	; 0x09
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	31 f0       	breq	.+12     	; 0x3212 <DC_Motor_enu_Rotate+0x3a>
    3206:	28 85       	ldd	r18, Y+8	; 0x08
    3208:	39 85       	ldd	r19, Y+9	; 0x09
    320a:	21 30       	cpi	r18, 0x01	; 1
    320c:	31 05       	cpc	r19, r1
    320e:	89 f1       	breq	.+98     	; 0x3272 <DC_Motor_enu_Rotate+0x9a>
    3210:	60 c0       	rjmp	.+192    	; 0x32d2 <DC_Motor_enu_Rotate+0xfa>
    {
    case MOTOR1:
        switch (Copy_u8_Direction)
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	28 2f       	mov	r18, r24
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	3f 83       	std	Y+7, r19	; 0x07
    321a:	2e 83       	std	Y+6, r18	; 0x06
    321c:	8e 81       	ldd	r24, Y+6	; 0x06
    321e:	9f 81       	ldd	r25, Y+7	; 0x07
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	a9 f0       	breq	.+42     	; 0x324e <DC_Motor_enu_Rotate+0x76>
    3224:	2e 81       	ldd	r18, Y+6	; 0x06
    3226:	3f 81       	ldd	r19, Y+7	; 0x07
    3228:	21 30       	cpi	r18, 0x01	; 1
    322a:	31 05       	cpc	r19, r1
    322c:	01 f5       	brne	.+64     	; 0x326e <DC_Motor_enu_Rotate+0x96>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    322e:	82 e0       	ldi	r24, 0x02	; 2
    3230:	64 e0       	ldi	r22, 0x04	; 4
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_HIGH);
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_LOW);
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	61 e0       	ldi	r22, 0x01	; 1
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    324c:	43 c0       	rjmp	.+134    	; 0x32d4 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENA_PIN, DIO_U8_HIGH);
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	64 e0       	ldi	r22, 0x04	; 4
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN1_PORT, MOTOR_IN1_PIN, DIO_U8_LOW);
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN2_PORT, MOTOR_IN2_PIN, DIO_U8_HIGH);
    3262:	82 e0       	ldi	r24, 0x02	; 2
    3264:	61 e0       	ldi	r22, 0x01	; 1
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    326c:	33 c0       	rjmp	.+102    	; 0x32d4 <DC_Motor_enu_Rotate+0xfc>
            
            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    326e:	19 82       	std	Y+1, r1	; 0x01
    3270:	31 c0       	rjmp	.+98     	; 0x32d4 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
    case MOTOR2:
        switch (Copy_u8_Direction)
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	3d 83       	std	Y+5, r19	; 0x05
    327a:	2c 83       	std	Y+4, r18	; 0x04
    327c:	8c 81       	ldd	r24, Y+4	; 0x04
    327e:	9d 81       	ldd	r25, Y+5	; 0x05
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	a9 f0       	breq	.+42     	; 0x32ae <DC_Motor_enu_Rotate+0xd6>
    3284:	2c 81       	ldd	r18, Y+4	; 0x04
    3286:	3d 81       	ldd	r19, Y+5	; 0x05
    3288:	21 30       	cpi	r18, 0x01	; 1
    328a:	31 05       	cpc	r19, r1
    328c:	01 f5       	brne	.+64     	; 0x32ce <DC_Motor_enu_Rotate+0xf6>
        {
        case CW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    328e:	82 e0       	ldi	r24, 0x02	; 2
    3290:	65 e0       	ldi	r22, 0x05	; 5
    3292:	41 e0       	ldi	r20, 0x01	; 1
    3294:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_HIGH);
    3298:	82 e0       	ldi	r24, 0x02	; 2
    329a:	62 e0       	ldi	r22, 0x02	; 2
    329c:	41 e0       	ldi	r20, 0x01	; 1
    329e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_LOW);
    32a2:	82 e0       	ldi	r24, 0x02	; 2
    32a4:	63 e0       	ldi	r22, 0x03	; 3
    32a6:	40 e0       	ldi	r20, 0x00	; 0
    32a8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    32ac:	13 c0       	rjmp	.+38     	; 0x32d4 <DC_Motor_enu_Rotate+0xfc>
            break;
        case CCW:
            DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_HIGH);
    32ae:	82 e0       	ldi	r24, 0x02	; 2
    32b0:	65 e0       	ldi	r22, 0x05	; 5
    32b2:	41 e0       	ldi	r20, 0x01	; 1
    32b4:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN3_PORT, MOTOR_IN3_PIN, DIO_U8_LOW);
    32b8:	82 e0       	ldi	r24, 0x02	; 2
    32ba:	62 e0       	ldi	r22, 0x02	; 2
    32bc:	40 e0       	ldi	r20, 0x00	; 0
    32be:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
            DIO_enu_SetPinValue(MOTOR_IN4_PORT, MOTOR_IN4_PIN, DIO_U8_HIGH);
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	63 e0       	ldi	r22, 0x03	; 3
    32c6:	41 e0       	ldi	r20, 0x01	; 1
    32c8:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    32cc:	03 c0       	rjmp	.+6      	; 0x32d4 <DC_Motor_enu_Rotate+0xfc>

            break;
        default:
            Local_u8_errorState = STATE_NOT_OK;
    32ce:	19 82       	std	Y+1, r1	; 0x01
    32d0:	01 c0       	rjmp	.+2      	; 0x32d4 <DC_Motor_enu_Rotate+0xfc>
            break;
        }
        break;
        break;
    default:
        Local_u8_errorState = STATE_NOT_OK;
    32d2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return Local_u8_errorState;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32d6:	29 96       	adiw	r28, 0x09	; 9
    32d8:	0f b6       	in	r0, 0x3f	; 63
    32da:	f8 94       	cli
    32dc:	de bf       	out	0x3e, r29	; 62
    32de:	0f be       	out	0x3f, r0	; 63
    32e0:	cd bf       	out	0x3d, r28	; 61
    32e2:	cf 91       	pop	r28
    32e4:	df 91       	pop	r29
    32e6:	08 95       	ret

000032e8 <DC_Motor_enu_Stop>:
ES_t DC_Motor_enu_Stop(u8 Copy_u8_Motor)
{
    32e8:	df 93       	push	r29
    32ea:	cf 93       	push	r28
    32ec:	00 d0       	rcall	.+0      	; 0x32ee <DC_Motor_enu_Stop+0x6>
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_errorState = STATE_OK;
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_u8_Motor == MOTOR1)
    32f8:	8a 81       	ldd	r24, Y+2	; 0x02
    32fa:	88 23       	and	r24, r24
    32fc:	31 f4       	brne	.+12     	; 0x330a <DC_Motor_enu_Stop+0x22>
    {
        DIO_enu_SetPinValue(MOTOR_ENA_PORT, MOTOR_ENA_PIN, DIO_U8_LOW);
    32fe:	82 e0       	ldi	r24, 0x02	; 2
    3300:	64 e0       	ldi	r22, 0x04	; 4
    3302:	40 e0       	ldi	r20, 0x00	; 0
    3304:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    3308:	0a c0       	rjmp	.+20     	; 0x331e <DC_Motor_enu_Stop+0x36>
    }
    else if (Copy_u8_Motor == MOTOR2)
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	81 30       	cpi	r24, 0x01	; 1
    330e:	31 f4       	brne	.+12     	; 0x331c <DC_Motor_enu_Stop+0x34>
    {
        DIO_enu_SetPinValue(MOTOR_ENB_PORT, MOTOR_ENB_PIN, DIO_U8_LOW);
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	65 e0       	ldi	r22, 0x05	; 5
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <DIO_enu_SetPinValue>
    331a:	01 c0       	rjmp	.+2      	; 0x331e <DC_Motor_enu_Stop+0x36>
    }
    else
    {
        Local_u8_errorState = STATE_NOT_OK;
    331c:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_errorState;
    331e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <DIO_enu_Init>:
/*MCAL*/
#include"DIO_private.h"
#include"DIO_config.h"


ES_t DIO_enu_Init(void){
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    DIO_U8_DDRA_REG = Conc(DIO_U8_PA7_INITIAL_DIRECTION,DIO_U8_PA6_INITIAL_DIRECTION,DIO_U8_PA5_INITIAL_DIRECTION,DIO_U8_PA4_INITIAL_DIRECTION,
    3332:	ea e3       	ldi	r30, 0x3A	; 58
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	8f e7       	ldi	r24, 0x7F	; 127
    3338:	80 83       	st	Z, r24
                           DIO_U8_PA3_INITIAL_DIRECTION,DIO_U8_PA2_INITIAL_DIRECTION,DIO_U8_PA1_INITIAL_DIRECTION,DIO_U8_PA0_INITIAL_DIRECTION);
    DIO_U8_DDRB_REG = Conc(DIO_U8_PB7_INITIAL_DIRECTION,DIO_U8_PB6_INITIAL_DIRECTION,DIO_U8_PB5_INITIAL_DIRECTION,DIO_U8_PB4_INITIAL_DIRECTION,
    333a:	e7 e3       	ldi	r30, 0x37	; 55
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	8d ef       	ldi	r24, 0xFD	; 253
    3340:	80 83       	st	Z, r24
                           DIO_U8_PB3_INITIAL_DIRECTION,DIO_U8_PB2_INITIAL_DIRECTION,DIO_U8_PB1_INITIAL_DIRECTION,DIO_U8_PB0_INITIAL_DIRECTION);

    DIO_U8_DDRC_REG = Conc(DIO_U8_PC7_INITIAL_DIRECTION,DIO_U8_PC6_INITIAL_DIRECTION,DIO_U8_PC5_INITIAL_DIRECTION,DIO_U8_PC4_INITIAL_DIRECTION,
    3342:	e4 e3       	ldi	r30, 0x34	; 52
    3344:	f0 e0       	ldi	r31, 0x00	; 0
    3346:	83 e1       	ldi	r24, 0x13	; 19
    3348:	80 83       	st	Z, r24
                           DIO_U8_PC3_INITIAL_DIRECTION,DIO_U8_PC2_INITIAL_DIRECTION,DIO_U8_PC1_INITIAL_DIRECTION,DIO_U8_PC0_INITIAL_DIRECTION);

    DIO_U8_DDRD_REG = Conc(DIO_U8_PD7_INITIAL_DIRECTION,DIO_U8_PD6_INITIAL_DIRECTION,DIO_U8_PD5_INITIAL_DIRECTION,DIO_U8_PD4_INITIAL_DIRECTION,
    334a:	e1 e3       	ldi	r30, 0x31	; 49
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	10 82       	st	Z, r1
                           DIO_U8_PD3_INITIAL_DIRECTION,DIO_U8_PD2_INITIAL_DIRECTION,DIO_U8_PD1_INITIAL_DIRECTION,DIO_U8_PD0_INITIAL_DIRECTION);

    DIO_U8_PORTA_REG = Conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
    3350:	eb e3       	ldi	r30, 0x3B	; 59
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	10 82       	st	Z, r1
                            DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);

    DIO_U8_PORTB_REG = Conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
    3356:	e8 e3       	ldi	r30, 0x38	; 56
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	84 ef       	ldi	r24, 0xF4	; 244
    335c:	80 83       	st	Z, r24
                            DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);

    DIO_U8_PORTC_REG = Conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
    335e:	e5 e3       	ldi	r30, 0x35	; 53
    3360:	f0 e0       	ldi	r31, 0x00	; 0
    3362:	10 82       	st	Z, r1
                            DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);

    DIO_U8_PORTD_REG = Conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
    3364:	e2 e3       	ldi	r30, 0x32	; 50
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	8c e3       	ldi	r24, 0x3C	; 60
    336a:	80 83       	st	Z, r24
                            DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);
    return STATE_OK;
    336c:	81 e0       	ldi	r24, 0x01	; 1
}
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <DIO_enu_SetPinDirection>:
ES_t DIO_enu_SetPinDirection (u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinDirection)
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	2e 97       	sbiw	r28, 0x0e	; 14
    337e:	0f b6       	in	r0, 0x3f	; 63
    3380:	f8 94       	cli
    3382:	de bf       	out	0x3e, r29	; 62
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	cd bf       	out	0x3d, r28	; 61
    3388:	8a 83       	std	Y+2, r24	; 0x02
    338a:	6b 83       	std	Y+3, r22	; 0x03
    338c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinDirection == DIO_U8_OUTPUT)||(Copy_u8_PinDirection == DIO_U8_INPUT))){
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	84 30       	cpi	r24, 0x04	; 4
    3396:	08 f0       	brcs	.+2      	; 0x339a <DIO_enu_SetPinDirection+0x26>
    3398:	0c c1       	rjmp	.+536    	; 0x35b2 <DIO_enu_SetPinDirection+0x23e>
    339a:	8b 81       	ldd	r24, Y+3	; 0x03
    339c:	88 30       	cpi	r24, 0x08	; 8
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <DIO_enu_SetPinDirection+0x2e>
    33a0:	08 c1       	rjmp	.+528    	; 0x35b2 <DIO_enu_SetPinDirection+0x23e>
    33a2:	8c 81       	ldd	r24, Y+4	; 0x04
    33a4:	81 30       	cpi	r24, 0x01	; 1
    33a6:	21 f0       	breq	.+8      	; 0x33b0 <DIO_enu_SetPinDirection+0x3c>
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
    33aa:	88 23       	and	r24, r24
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <DIO_enu_SetPinDirection+0x3c>
    33ae:	01 c1       	rjmp	.+514    	; 0x35b2 <DIO_enu_SetPinDirection+0x23e>
        switch (Copy_u8_PortId)
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	3e 87       	std	Y+14, r19	; 0x0e
    33b8:	2d 87       	std	Y+13, r18	; 0x0d
    33ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    33bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	91 05       	cpc	r25, r1
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <DIO_enu_SetPinDirection+0x52>
    33c4:	4f c0       	rjmp	.+158    	; 0x3464 <DIO_enu_SetPinDirection+0xf0>
    33c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    33c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    33ca:	22 30       	cpi	r18, 0x02	; 2
    33cc:	31 05       	cpc	r19, r1
    33ce:	2c f4       	brge	.+10     	; 0x33da <DIO_enu_SetPinDirection+0x66>
    33d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	71 f0       	breq	.+28     	; 0x33f4 <DIO_enu_SetPinDirection+0x80>
    33d8:	ed c0       	rjmp	.+474    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
    33da:	2d 85       	ldd	r18, Y+13	; 0x0d
    33dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    33de:	22 30       	cpi	r18, 0x02	; 2
    33e0:	31 05       	cpc	r19, r1
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <DIO_enu_SetPinDirection+0x72>
    33e4:	77 c0       	rjmp	.+238    	; 0x34d4 <DIO_enu_SetPinDirection+0x160>
    33e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ea:	83 30       	cpi	r24, 0x03	; 3
    33ec:	91 05       	cpc	r25, r1
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <DIO_enu_SetPinDirection+0x7e>
    33f0:	a9 c0       	rjmp	.+338    	; 0x3544 <DIO_enu_SetPinDirection+0x1d0>
    33f2:	e0 c0       	rjmp	.+448    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinDirection)
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	3c 87       	std	Y+12, r19	; 0x0c
    33fc:	2b 87       	std	Y+11, r18	; 0x0b
    33fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    3400:	9c 85       	ldd	r25, Y+12	; 0x0c
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	d1 f0       	breq	.+52     	; 0x343a <DIO_enu_SetPinDirection+0xc6>
    3406:	2b 85       	ldd	r18, Y+11	; 0x0b
    3408:	3c 85       	ldd	r19, Y+12	; 0x0c
    340a:	21 30       	cpi	r18, 0x01	; 1
    340c:	31 05       	cpc	r19, r1
    340e:	09 f0       	breq	.+2      	; 0x3412 <DIO_enu_SetPinDirection+0x9e>
    3410:	d1 c0       	rjmp	.+418    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break;
    3412:	aa e3       	ldi	r26, 0x3A	; 58
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	ea e3       	ldi	r30, 0x3A	; 58
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	48 2f       	mov	r20, r24
    341e:	8b 81       	ldd	r24, Y+3	; 0x03
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	02 2e       	mov	r0, r18
    342a:	02 c0       	rjmp	.+4      	; 0x3430 <DIO_enu_SetPinDirection+0xbc>
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	0a 94       	dec	r0
    3432:	e2 f7       	brpl	.-8      	; 0x342c <DIO_enu_SetPinDirection+0xb8>
    3434:	84 2b       	or	r24, r20
    3436:	8c 93       	st	X, r24
    3438:	bd c0       	rjmp	.+378    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRA_REG,Copy_u8_PinId); break; 
    343a:	aa e3       	ldi	r26, 0x3A	; 58
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	ea e3       	ldi	r30, 0x3A	; 58
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	80 81       	ld	r24, Z
    3444:	48 2f       	mov	r20, r24
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	02 2e       	mov	r0, r18
    3452:	02 c0       	rjmp	.+4      	; 0x3458 <DIO_enu_SetPinDirection+0xe4>
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	0a 94       	dec	r0
    345a:	e2 f7       	brpl	.-8      	; 0x3454 <DIO_enu_SetPinDirection+0xe0>
    345c:	80 95       	com	r24
    345e:	84 23       	and	r24, r20
    3460:	8c 93       	st	X, r24
    3462:	a8 c0       	rjmp	.+336    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinDirection)
    3464:	8c 81       	ldd	r24, Y+4	; 0x04
    3466:	28 2f       	mov	r18, r24
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	3a 87       	std	Y+10, r19	; 0x0a
    346c:	29 87       	std	Y+9, r18	; 0x09
    346e:	89 85       	ldd	r24, Y+9	; 0x09
    3470:	9a 85       	ldd	r25, Y+10	; 0x0a
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	d1 f0       	breq	.+52     	; 0x34aa <DIO_enu_SetPinDirection+0x136>
    3476:	29 85       	ldd	r18, Y+9	; 0x09
    3478:	3a 85       	ldd	r19, Y+10	; 0x0a
    347a:	21 30       	cpi	r18, 0x01	; 1
    347c:	31 05       	cpc	r19, r1
    347e:	09 f0       	breq	.+2      	; 0x3482 <DIO_enu_SetPinDirection+0x10e>
    3480:	99 c0       	rjmp	.+306    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break;
    3482:	a7 e3       	ldi	r26, 0x37	; 55
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e7 e3       	ldi	r30, 0x37	; 55
    3488:	f0 e0       	ldi	r31, 0x00	; 0
    348a:	80 81       	ld	r24, Z
    348c:	48 2f       	mov	r20, r24
    348e:	8b 81       	ldd	r24, Y+3	; 0x03
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	02 2e       	mov	r0, r18
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <DIO_enu_SetPinDirection+0x12c>
    349c:	88 0f       	add	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	0a 94       	dec	r0
    34a2:	e2 f7       	brpl	.-8      	; 0x349c <DIO_enu_SetPinDirection+0x128>
    34a4:	84 2b       	or	r24, r20
    34a6:	8c 93       	st	X, r24
    34a8:	85 c0       	rjmp	.+266    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRB_REG,Copy_u8_PinId); break; 
    34aa:	a7 e3       	ldi	r26, 0x37	; 55
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	e7 e3       	ldi	r30, 0x37	; 55
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	80 81       	ld	r24, Z
    34b4:	48 2f       	mov	r20, r24
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	28 2f       	mov	r18, r24
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	02 2e       	mov	r0, r18
    34c2:	02 c0       	rjmp	.+4      	; 0x34c8 <DIO_enu_SetPinDirection+0x154>
    34c4:	88 0f       	add	r24, r24
    34c6:	99 1f       	adc	r25, r25
    34c8:	0a 94       	dec	r0
    34ca:	e2 f7       	brpl	.-8      	; 0x34c4 <DIO_enu_SetPinDirection+0x150>
    34cc:	80 95       	com	r24
    34ce:	84 23       	and	r24, r20
    34d0:	8c 93       	st	X, r24
    34d2:	70 c0       	rjmp	.+224    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinDirection)
    34d4:	8c 81       	ldd	r24, Y+4	; 0x04
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	38 87       	std	Y+8, r19	; 0x08
    34dc:	2f 83       	std	Y+7, r18	; 0x07
    34de:	8f 81       	ldd	r24, Y+7	; 0x07
    34e0:	98 85       	ldd	r25, Y+8	; 0x08
    34e2:	00 97       	sbiw	r24, 0x00	; 0
    34e4:	d1 f0       	breq	.+52     	; 0x351a <DIO_enu_SetPinDirection+0x1a6>
    34e6:	2f 81       	ldd	r18, Y+7	; 0x07
    34e8:	38 85       	ldd	r19, Y+8	; 0x08
    34ea:	21 30       	cpi	r18, 0x01	; 1
    34ec:	31 05       	cpc	r19, r1
    34ee:	09 f0       	breq	.+2      	; 0x34f2 <DIO_enu_SetPinDirection+0x17e>
    34f0:	61 c0       	rjmp	.+194    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break;
    34f2:	a4 e3       	ldi	r26, 0x34	; 52
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e4 e3       	ldi	r30, 0x34	; 52
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	48 2f       	mov	r20, r24
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	02 2e       	mov	r0, r18
    350a:	02 c0       	rjmp	.+4      	; 0x3510 <DIO_enu_SetPinDirection+0x19c>
    350c:	88 0f       	add	r24, r24
    350e:	99 1f       	adc	r25, r25
    3510:	0a 94       	dec	r0
    3512:	e2 f7       	brpl	.-8      	; 0x350c <DIO_enu_SetPinDirection+0x198>
    3514:	84 2b       	or	r24, r20
    3516:	8c 93       	st	X, r24
    3518:	4d c0       	rjmp	.+154    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRC_REG,Copy_u8_PinId); break; 
    351a:	a4 e3       	ldi	r26, 0x34	; 52
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e4 e3       	ldi	r30, 0x34	; 52
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	48 2f       	mov	r20, r24
    3526:	8b 81       	ldd	r24, Y+3	; 0x03
    3528:	28 2f       	mov	r18, r24
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	02 2e       	mov	r0, r18
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <DIO_enu_SetPinDirection+0x1c4>
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	0a 94       	dec	r0
    353a:	e2 f7       	brpl	.-8      	; 0x3534 <DIO_enu_SetPinDirection+0x1c0>
    353c:	80 95       	com	r24
    353e:	84 23       	and	r24, r20
    3540:	8c 93       	st	X, r24
    3542:	38 c0       	rjmp	.+112    	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinDirection)
    3544:	8c 81       	ldd	r24, Y+4	; 0x04
    3546:	28 2f       	mov	r18, r24
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	3e 83       	std	Y+6, r19	; 0x06
    354c:	2d 83       	std	Y+5, r18	; 0x05
    354e:	8d 81       	ldd	r24, Y+5	; 0x05
    3550:	9e 81       	ldd	r25, Y+6	; 0x06
    3552:	00 97       	sbiw	r24, 0x00	; 0
    3554:	c9 f0       	breq	.+50     	; 0x3588 <DIO_enu_SetPinDirection+0x214>
    3556:	2d 81       	ldd	r18, Y+5	; 0x05
    3558:	3e 81       	ldd	r19, Y+6	; 0x06
    355a:	21 30       	cpi	r18, 0x01	; 1
    355c:	31 05       	cpc	r19, r1
    355e:	51 f5       	brne	.+84     	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
            {
                case DIO_U8_OUTPUT:SET_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break;
    3560:	a1 e3       	ldi	r26, 0x31	; 49
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	e1 e3       	ldi	r30, 0x31	; 49
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	48 2f       	mov	r20, r24
    356c:	8b 81       	ldd	r24, Y+3	; 0x03
    356e:	28 2f       	mov	r18, r24
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	02 2e       	mov	r0, r18
    3578:	02 c0       	rjmp	.+4      	; 0x357e <DIO_enu_SetPinDirection+0x20a>
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	0a 94       	dec	r0
    3580:	e2 f7       	brpl	.-8      	; 0x357a <DIO_enu_SetPinDirection+0x206>
    3582:	84 2b       	or	r24, r20
    3584:	8c 93       	st	X, r24
    3586:	16 c0       	rjmp	.+44     	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
                case DIO_U8_INPUT: CLR_BIT(DIO_U8_DDRD_REG,Copy_u8_PinId); break; 
    3588:	a1 e3       	ldi	r26, 0x31	; 49
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	e1 e3       	ldi	r30, 0x31	; 49
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	80 81       	ld	r24, Z
    3592:	48 2f       	mov	r20, r24
    3594:	8b 81       	ldd	r24, Y+3	; 0x03
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	02 2e       	mov	r0, r18
    35a0:	02 c0       	rjmp	.+4      	; 0x35a6 <DIO_enu_SetPinDirection+0x232>
    35a2:	88 0f       	add	r24, r24
    35a4:	99 1f       	adc	r25, r25
    35a6:	0a 94       	dec	r0
    35a8:	e2 f7       	brpl	.-8      	; 0x35a2 <DIO_enu_SetPinDirection+0x22e>
    35aa:	80 95       	com	r24
    35ac:	84 23       	and	r24, r20
    35ae:	8c 93       	st	X, r24
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <DIO_enu_SetPinDirection+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    35b2:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    35b6:	2e 96       	adiw	r28, 0x0e	; 14
    35b8:	0f b6       	in	r0, 0x3f	; 63
    35ba:	f8 94       	cli
    35bc:	de bf       	out	0x3e, r29	; 62
    35be:	0f be       	out	0x3f, r0	; 63
    35c0:	cd bf       	out	0x3d, r28	; 61
    35c2:	cf 91       	pop	r28
    35c4:	df 91       	pop	r29
    35c6:	08 95       	ret

000035c8 <DIO_enu_SetPinValue>:

ES_t DIO_enu_SetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 Copy_u8_PinValue){
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	2e 97       	sbiw	r28, 0x0e	; 14
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	8a 83       	std	Y+2, r24	; 0x02
    35de:	6b 83       	std	Y+3, r22	; 0x03
    35e0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8_ErrorState = STATE_OK;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && ((Copy_u8_PinValue == DIO_U8_HIGH)||(Copy_u8_PinValue == DIO_U8_LOW))){
    35e6:	8a 81       	ldd	r24, Y+2	; 0x02
    35e8:	84 30       	cpi	r24, 0x04	; 4
    35ea:	08 f0       	brcs	.+2      	; 0x35ee <DIO_enu_SetPinValue+0x26>
    35ec:	0c c1       	rjmp	.+536    	; 0x3806 <DIO_enu_SetPinValue+0x23e>
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	88 30       	cpi	r24, 0x08	; 8
    35f2:	08 f0       	brcs	.+2      	; 0x35f6 <DIO_enu_SetPinValue+0x2e>
    35f4:	08 c1       	rjmp	.+528    	; 0x3806 <DIO_enu_SetPinValue+0x23e>
    35f6:	8c 81       	ldd	r24, Y+4	; 0x04
    35f8:	81 30       	cpi	r24, 0x01	; 1
    35fa:	21 f0       	breq	.+8      	; 0x3604 <DIO_enu_SetPinValue+0x3c>
    35fc:	8c 81       	ldd	r24, Y+4	; 0x04
    35fe:	88 23       	and	r24, r24
    3600:	09 f0       	breq	.+2      	; 0x3604 <DIO_enu_SetPinValue+0x3c>
    3602:	01 c1       	rjmp	.+514    	; 0x3806 <DIO_enu_SetPinValue+0x23e>
        switch (Copy_u8_PortId)
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	28 2f       	mov	r18, r24
    3608:	30 e0       	ldi	r19, 0x00	; 0
    360a:	3e 87       	std	Y+14, r19	; 0x0e
    360c:	2d 87       	std	Y+13, r18	; 0x0d
    360e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3610:	9e 85       	ldd	r25, Y+14	; 0x0e
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	91 05       	cpc	r25, r1
    3616:	09 f4       	brne	.+2      	; 0x361a <DIO_enu_SetPinValue+0x52>
    3618:	4f c0       	rjmp	.+158    	; 0x36b8 <DIO_enu_SetPinValue+0xf0>
    361a:	2d 85       	ldd	r18, Y+13	; 0x0d
    361c:	3e 85       	ldd	r19, Y+14	; 0x0e
    361e:	22 30       	cpi	r18, 0x02	; 2
    3620:	31 05       	cpc	r19, r1
    3622:	2c f4       	brge	.+10     	; 0x362e <DIO_enu_SetPinValue+0x66>
    3624:	8d 85       	ldd	r24, Y+13	; 0x0d
    3626:	9e 85       	ldd	r25, Y+14	; 0x0e
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	71 f0       	breq	.+28     	; 0x3648 <DIO_enu_SetPinValue+0x80>
    362c:	ed c0       	rjmp	.+474    	; 0x3808 <DIO_enu_SetPinValue+0x240>
    362e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3630:	3e 85       	ldd	r19, Y+14	; 0x0e
    3632:	22 30       	cpi	r18, 0x02	; 2
    3634:	31 05       	cpc	r19, r1
    3636:	09 f4       	brne	.+2      	; 0x363a <DIO_enu_SetPinValue+0x72>
    3638:	77 c0       	rjmp	.+238    	; 0x3728 <DIO_enu_SetPinValue+0x160>
    363a:	8d 85       	ldd	r24, Y+13	; 0x0d
    363c:	9e 85       	ldd	r25, Y+14	; 0x0e
    363e:	83 30       	cpi	r24, 0x03	; 3
    3640:	91 05       	cpc	r25, r1
    3642:	09 f4       	brne	.+2      	; 0x3646 <DIO_enu_SetPinValue+0x7e>
    3644:	a9 c0       	rjmp	.+338    	; 0x3798 <DIO_enu_SetPinValue+0x1d0>
    3646:	e0 c0       	rjmp	.+448    	; 0x3808 <DIO_enu_SetPinValue+0x240>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PinValue)
    3648:	8c 81       	ldd	r24, Y+4	; 0x04
    364a:	28 2f       	mov	r18, r24
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	3c 87       	std	Y+12, r19	; 0x0c
    3650:	2b 87       	std	Y+11, r18	; 0x0b
    3652:	8b 85       	ldd	r24, Y+11	; 0x0b
    3654:	9c 85       	ldd	r25, Y+12	; 0x0c
    3656:	00 97       	sbiw	r24, 0x00	; 0
    3658:	d1 f0       	breq	.+52     	; 0x368e <DIO_enu_SetPinValue+0xc6>
    365a:	2b 85       	ldd	r18, Y+11	; 0x0b
    365c:	3c 85       	ldd	r19, Y+12	; 0x0c
    365e:	21 30       	cpi	r18, 0x01	; 1
    3660:	31 05       	cpc	r19, r1
    3662:	09 f0       	breq	.+2      	; 0x3666 <DIO_enu_SetPinValue+0x9e>
    3664:	d1 c0       	rjmp	.+418    	; 0x3808 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break;
    3666:	ab e3       	ldi	r26, 0x3B	; 59
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	eb e3       	ldi	r30, 0x3B	; 59
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	80 81       	ld	r24, Z
    3670:	48 2f       	mov	r20, r24
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	28 2f       	mov	r18, r24
    3676:	30 e0       	ldi	r19, 0x00	; 0
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	02 2e       	mov	r0, r18
    367e:	02 c0       	rjmp	.+4      	; 0x3684 <DIO_enu_SetPinValue+0xbc>
    3680:	88 0f       	add	r24, r24
    3682:	99 1f       	adc	r25, r25
    3684:	0a 94       	dec	r0
    3686:	e2 f7       	brpl	.-8      	; 0x3680 <DIO_enu_SetPinValue+0xb8>
    3688:	84 2b       	or	r24, r20
    368a:	8c 93       	st	X, r24
    368c:	bd c0       	rjmp	.+378    	; 0x3808 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTA_REG,Copy_u8_PinId); break; 
    368e:	ab e3       	ldi	r26, 0x3B	; 59
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	eb e3       	ldi	r30, 0x3B	; 59
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	48 2f       	mov	r20, r24
    369a:	8b 81       	ldd	r24, Y+3	; 0x03
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	02 2e       	mov	r0, r18
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <DIO_enu_SetPinValue+0xe4>
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	0a 94       	dec	r0
    36ae:	e2 f7       	brpl	.-8      	; 0x36a8 <DIO_enu_SetPinValue+0xe0>
    36b0:	80 95       	com	r24
    36b2:	84 23       	and	r24, r20
    36b4:	8c 93       	st	X, r24
    36b6:	a8 c0       	rjmp	.+336    	; 0x3808 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PinValue)
    36b8:	8c 81       	ldd	r24, Y+4	; 0x04
    36ba:	28 2f       	mov	r18, r24
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	3a 87       	std	Y+10, r19	; 0x0a
    36c0:	29 87       	std	Y+9, r18	; 0x09
    36c2:	89 85       	ldd	r24, Y+9	; 0x09
    36c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	d1 f0       	breq	.+52     	; 0x36fe <DIO_enu_SetPinValue+0x136>
    36ca:	29 85       	ldd	r18, Y+9	; 0x09
    36cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    36ce:	21 30       	cpi	r18, 0x01	; 1
    36d0:	31 05       	cpc	r19, r1
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <DIO_enu_SetPinValue+0x10e>
    36d4:	99 c0       	rjmp	.+306    	; 0x3808 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break;
    36d6:	a8 e3       	ldi	r26, 0x38	; 56
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	e8 e3       	ldi	r30, 0x38	; 56
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	48 2f       	mov	r20, r24
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	28 2f       	mov	r18, r24
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	02 2e       	mov	r0, r18
    36ee:	02 c0       	rjmp	.+4      	; 0x36f4 <DIO_enu_SetPinValue+0x12c>
    36f0:	88 0f       	add	r24, r24
    36f2:	99 1f       	adc	r25, r25
    36f4:	0a 94       	dec	r0
    36f6:	e2 f7       	brpl	.-8      	; 0x36f0 <DIO_enu_SetPinValue+0x128>
    36f8:	84 2b       	or	r24, r20
    36fa:	8c 93       	st	X, r24
    36fc:	85 c0       	rjmp	.+266    	; 0x3808 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTB_REG,Copy_u8_PinId); break; 
    36fe:	a8 e3       	ldi	r26, 0x38	; 56
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	e8 e3       	ldi	r30, 0x38	; 56
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	48 2f       	mov	r20, r24
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	28 2f       	mov	r18, r24
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	02 2e       	mov	r0, r18
    3716:	02 c0       	rjmp	.+4      	; 0x371c <DIO_enu_SetPinValue+0x154>
    3718:	88 0f       	add	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	0a 94       	dec	r0
    371e:	e2 f7       	brpl	.-8      	; 0x3718 <DIO_enu_SetPinValue+0x150>
    3720:	80 95       	com	r24
    3722:	84 23       	and	r24, r20
    3724:	8c 93       	st	X, r24
    3726:	70 c0       	rjmp	.+224    	; 0x3808 <DIO_enu_SetPinValue+0x240>
            }
        break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PinValue)
    3728:	8c 81       	ldd	r24, Y+4	; 0x04
    372a:	28 2f       	mov	r18, r24
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	38 87       	std	Y+8, r19	; 0x08
    3730:	2f 83       	std	Y+7, r18	; 0x07
    3732:	8f 81       	ldd	r24, Y+7	; 0x07
    3734:	98 85       	ldd	r25, Y+8	; 0x08
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	d1 f0       	breq	.+52     	; 0x376e <DIO_enu_SetPinValue+0x1a6>
    373a:	2f 81       	ldd	r18, Y+7	; 0x07
    373c:	38 85       	ldd	r19, Y+8	; 0x08
    373e:	21 30       	cpi	r18, 0x01	; 1
    3740:	31 05       	cpc	r19, r1
    3742:	09 f0       	breq	.+2      	; 0x3746 <DIO_enu_SetPinValue+0x17e>
    3744:	61 c0       	rjmp	.+194    	; 0x3808 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break;
    3746:	a5 e3       	ldi	r26, 0x35	; 53
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	e5 e3       	ldi	r30, 0x35	; 53
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	48 2f       	mov	r20, r24
    3752:	8b 81       	ldd	r24, Y+3	; 0x03
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	02 2e       	mov	r0, r18
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <DIO_enu_SetPinValue+0x19c>
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	0a 94       	dec	r0
    3766:	e2 f7       	brpl	.-8      	; 0x3760 <DIO_enu_SetPinValue+0x198>
    3768:	84 2b       	or	r24, r20
    376a:	8c 93       	st	X, r24
    376c:	4d c0       	rjmp	.+154    	; 0x3808 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTC_REG,Copy_u8_PinId); break; 
    376e:	a5 e3       	ldi	r26, 0x35	; 53
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	e5 e3       	ldi	r30, 0x35	; 53
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	48 2f       	mov	r20, r24
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	02 2e       	mov	r0, r18
    3786:	02 c0       	rjmp	.+4      	; 0x378c <DIO_enu_SetPinValue+0x1c4>
    3788:	88 0f       	add	r24, r24
    378a:	99 1f       	adc	r25, r25
    378c:	0a 94       	dec	r0
    378e:	e2 f7       	brpl	.-8      	; 0x3788 <DIO_enu_SetPinValue+0x1c0>
    3790:	80 95       	com	r24
    3792:	84 23       	and	r24, r20
    3794:	8c 93       	st	X, r24
    3796:	38 c0       	rjmp	.+112    	; 0x3808 <DIO_enu_SetPinValue+0x240>
            } 
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PinValue)
    3798:	8c 81       	ldd	r24, Y+4	; 0x04
    379a:	28 2f       	mov	r18, r24
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	3e 83       	std	Y+6, r19	; 0x06
    37a0:	2d 83       	std	Y+5, r18	; 0x05
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	c9 f0       	breq	.+50     	; 0x37dc <DIO_enu_SetPinValue+0x214>
    37aa:	2d 81       	ldd	r18, Y+5	; 0x05
    37ac:	3e 81       	ldd	r19, Y+6	; 0x06
    37ae:	21 30       	cpi	r18, 0x01	; 1
    37b0:	31 05       	cpc	r19, r1
    37b2:	51 f5       	brne	.+84     	; 0x3808 <DIO_enu_SetPinValue+0x240>
            {
                case DIO_U8_HIGH:SET_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break;
    37b4:	a2 e3       	ldi	r26, 0x32	; 50
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	e2 e3       	ldi	r30, 0x32	; 50
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	80 81       	ld	r24, Z
    37be:	48 2f       	mov	r20, r24
    37c0:	8b 81       	ldd	r24, Y+3	; 0x03
    37c2:	28 2f       	mov	r18, r24
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	02 2e       	mov	r0, r18
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <DIO_enu_SetPinValue+0x20a>
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	0a 94       	dec	r0
    37d4:	e2 f7       	brpl	.-8      	; 0x37ce <DIO_enu_SetPinValue+0x206>
    37d6:	84 2b       	or	r24, r20
    37d8:	8c 93       	st	X, r24
    37da:	16 c0       	rjmp	.+44     	; 0x3808 <DIO_enu_SetPinValue+0x240>
                case DIO_U8_LOW: CLR_BIT(DIO_U8_PORTD_REG,Copy_u8_PinId); break; 
    37dc:	a2 e3       	ldi	r26, 0x32	; 50
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e2 e3       	ldi	r30, 0x32	; 50
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	48 2f       	mov	r20, r24
    37e8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ea:	28 2f       	mov	r18, r24
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	02 2e       	mov	r0, r18
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <DIO_enu_SetPinValue+0x232>
    37f6:	88 0f       	add	r24, r24
    37f8:	99 1f       	adc	r25, r25
    37fa:	0a 94       	dec	r0
    37fc:	e2 f7       	brpl	.-8      	; 0x37f6 <DIO_enu_SetPinValue+0x22e>
    37fe:	80 95       	com	r24
    3800:	84 23       	and	r24, r20
    3802:	8c 93       	st	X, r24
    3804:	01 c0       	rjmp	.+2      	; 0x3808 <DIO_enu_SetPinValue+0x240>
        break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3806:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3808:	89 81       	ldd	r24, Y+1	; 0x01
}
    380a:	2e 96       	adiw	r28, 0x0e	; 14
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	cf 91       	pop	r28
    3818:	df 91       	pop	r29
    381a:	08 95       	ret

0000381c <DIO_enu_GetPinValue>:

ES_t DIO_enu_GetPinValue(u8 Copy_u8_PortId, u8 Copy_u8_PinId,u8 * Copy_pu8_ReturnPinValue){
    381c:	df 93       	push	r29
    381e:	cf 93       	push	r28
    3820:	cd b7       	in	r28, 0x3d	; 61
    3822:	de b7       	in	r29, 0x3e	; 62
    3824:	28 97       	sbiw	r28, 0x08	; 8
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	f8 94       	cli
    382a:	de bf       	out	0x3e, r29	; 62
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	cd bf       	out	0x3d, r28	; 61
    3830:	8b 83       	std	Y+3, r24	; 0x03
    3832:	6c 83       	std	Y+4, r22	; 0x04
    3834:	5e 83       	std	Y+6, r21	; 0x06
    3836:	4d 83       	std	Y+5, r20	; 0x05
    u8 Local_u8_ErrorState = STATE_OK;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8_PinValue ;
    if((Copy_u8_PortId <= DIO_U8_PORTD) && (Copy_u8_PinId <= DIO_U8_PIN7) && (Copy_pu8_ReturnPinValue != NULL))
    383c:	8b 81       	ldd	r24, Y+3	; 0x03
    383e:	84 30       	cpi	r24, 0x04	; 4
    3840:	08 f0       	brcs	.+2      	; 0x3844 <DIO_enu_GetPinValue+0x28>
    3842:	9f c0       	rjmp	.+318    	; 0x3982 <DIO_enu_GetPinValue+0x166>
    3844:	8c 81       	ldd	r24, Y+4	; 0x04
    3846:	88 30       	cpi	r24, 0x08	; 8
    3848:	08 f0       	brcs	.+2      	; 0x384c <DIO_enu_GetPinValue+0x30>
    384a:	9b c0       	rjmp	.+310    	; 0x3982 <DIO_enu_GetPinValue+0x166>
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	00 97       	sbiw	r24, 0x00	; 0
    3852:	09 f4       	brne	.+2      	; 0x3856 <DIO_enu_GetPinValue+0x3a>
    3854:	96 c0       	rjmp	.+300    	; 0x3982 <DIO_enu_GetPinValue+0x166>
    {
        switch (Copy_u8_PortId)
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	28 2f       	mov	r18, r24
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	38 87       	std	Y+8, r19	; 0x08
    385e:	2f 83       	std	Y+7, r18	; 0x07
    3860:	4f 81       	ldd	r20, Y+7	; 0x07
    3862:	58 85       	ldd	r21, Y+8	; 0x08
    3864:	41 30       	cpi	r20, 0x01	; 1
    3866:	51 05       	cpc	r21, r1
    3868:	a9 f1       	breq	.+106    	; 0x38d4 <DIO_enu_GetPinValue+0xb8>
    386a:	8f 81       	ldd	r24, Y+7	; 0x07
    386c:	98 85       	ldd	r25, Y+8	; 0x08
    386e:	82 30       	cpi	r24, 0x02	; 2
    3870:	91 05       	cpc	r25, r1
    3872:	34 f4       	brge	.+12     	; 0x3880 <DIO_enu_GetPinValue+0x64>
    3874:	2f 81       	ldd	r18, Y+7	; 0x07
    3876:	38 85       	ldd	r19, Y+8	; 0x08
    3878:	21 15       	cp	r18, r1
    387a:	31 05       	cpc	r19, r1
    387c:	71 f0       	breq	.+28     	; 0x389a <DIO_enu_GetPinValue+0x7e>
    387e:	82 c0       	rjmp	.+260    	; 0x3984 <DIO_enu_GetPinValue+0x168>
    3880:	4f 81       	ldd	r20, Y+7	; 0x07
    3882:	58 85       	ldd	r21, Y+8	; 0x08
    3884:	42 30       	cpi	r20, 0x02	; 2
    3886:	51 05       	cpc	r21, r1
    3888:	09 f4       	brne	.+2      	; 0x388c <DIO_enu_GetPinValue+0x70>
    388a:	41 c0       	rjmp	.+130    	; 0x390e <DIO_enu_GetPinValue+0xf2>
    388c:	8f 81       	ldd	r24, Y+7	; 0x07
    388e:	98 85       	ldd	r25, Y+8	; 0x08
    3890:	83 30       	cpi	r24, 0x03	; 3
    3892:	91 05       	cpc	r25, r1
    3894:	09 f4       	brne	.+2      	; 0x3898 <DIO_enu_GetPinValue+0x7c>
    3896:	58 c0       	rjmp	.+176    	; 0x3948 <DIO_enu_GetPinValue+0x12c>
    3898:	75 c0       	rjmp	.+234    	; 0x3984 <DIO_enu_GetPinValue+0x168>
        {
            case DIO_U8_PORTA:Local_u8_PinValue = GET_BIT(DIO_U8_PINA_REG,Copy_u8_PinId);
    389a:	e9 e3       	ldi	r30, 0x39	; 57
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	80 81       	ld	r24, Z
    38a0:	28 2f       	mov	r18, r24
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	8c 81       	ldd	r24, Y+4	; 0x04
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	a9 01       	movw	r20, r18
    38ac:	02 c0       	rjmp	.+4      	; 0x38b2 <DIO_enu_GetPinValue+0x96>
    38ae:	55 95       	asr	r21
    38b0:	47 95       	ror	r20
    38b2:	8a 95       	dec	r24
    38b4:	e2 f7       	brpl	.-8      	; 0x38ae <DIO_enu_GetPinValue+0x92>
    38b6:	ca 01       	movw	r24, r20
    38b8:	81 70       	andi	r24, 0x01	; 1
    38ba:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	88 23       	and	r24, r24
    38c0:	21 f4       	brne	.+8      	; 0x38ca <DIO_enu_GetPinValue+0xae>
    38c2:	ed 81       	ldd	r30, Y+5	; 0x05
    38c4:	fe 81       	ldd	r31, Y+6	; 0x06
    38c6:	10 82       	st	Z, r1
    38c8:	5d c0       	rjmp	.+186    	; 0x3984 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    38ca:	ed 81       	ldd	r30, Y+5	; 0x05
    38cc:	fe 81       	ldd	r31, Y+6	; 0x06
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	80 83       	st	Z, r24
    38d2:	58 c0       	rjmp	.+176    	; 0x3984 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTB:Local_u8_PinValue = GET_BIT(DIO_U8_PINB_REG,Copy_u8_PinId);
    38d4:	e6 e3       	ldi	r30, 0x36	; 54
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	80 81       	ld	r24, Z
    38da:	28 2f       	mov	r18, r24
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	8c 81       	ldd	r24, Y+4	; 0x04
    38e0:	88 2f       	mov	r24, r24
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	a9 01       	movw	r20, r18
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <DIO_enu_GetPinValue+0xd0>
    38e8:	55 95       	asr	r21
    38ea:	47 95       	ror	r20
    38ec:	8a 95       	dec	r24
    38ee:	e2 f7       	brpl	.-8      	; 0x38e8 <DIO_enu_GetPinValue+0xcc>
    38f0:	ca 01       	movw	r24, r20
    38f2:	81 70       	andi	r24, 0x01	; 1
    38f4:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	88 23       	and	r24, r24
    38fa:	21 f4       	brne	.+8      	; 0x3904 <DIO_enu_GetPinValue+0xe8>
    38fc:	ed 81       	ldd	r30, Y+5	; 0x05
    38fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3900:	10 82       	st	Z, r1
    3902:	40 c0       	rjmp	.+128    	; 0x3984 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3904:	ed 81       	ldd	r30, Y+5	; 0x05
    3906:	fe 81       	ldd	r31, Y+6	; 0x06
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	80 83       	st	Z, r24
    390c:	3b c0       	rjmp	.+118    	; 0x3984 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTC:Local_u8_PinValue = GET_BIT(DIO_U8_PINC_REG,Copy_u8_PinId);
    390e:	e3 e3       	ldi	r30, 0x33	; 51
    3910:	f0 e0       	ldi	r31, 0x00	; 0
    3912:	80 81       	ld	r24, Z
    3914:	28 2f       	mov	r18, r24
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	8c 81       	ldd	r24, Y+4	; 0x04
    391a:	88 2f       	mov	r24, r24
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	a9 01       	movw	r20, r18
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <DIO_enu_GetPinValue+0x10a>
    3922:	55 95       	asr	r21
    3924:	47 95       	ror	r20
    3926:	8a 95       	dec	r24
    3928:	e2 f7       	brpl	.-8      	; 0x3922 <DIO_enu_GetPinValue+0x106>
    392a:	ca 01       	movw	r24, r20
    392c:	81 70       	andi	r24, 0x01	; 1
    392e:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	88 23       	and	r24, r24
    3934:	21 f4       	brne	.+8      	; 0x393e <DIO_enu_GetPinValue+0x122>
    3936:	ed 81       	ldd	r30, Y+5	; 0x05
    3938:	fe 81       	ldd	r31, Y+6	; 0x06
    393a:	10 82       	st	Z, r1
    393c:	23 c0       	rjmp	.+70     	; 0x3984 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    393e:	ed 81       	ldd	r30, Y+5	; 0x05
    3940:	fe 81       	ldd	r31, Y+6	; 0x06
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	80 83       	st	Z, r24
    3946:	1e c0       	rjmp	.+60     	; 0x3984 <DIO_enu_GetPinValue+0x168>
            break;
            case DIO_U8_PORTD:Local_u8_PinValue = GET_BIT(DIO_U8_PIND_REG,Copy_u8_PinId);
    3948:	e0 e3       	ldi	r30, 0x30	; 48
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	80 81       	ld	r24, Z
    394e:	28 2f       	mov	r18, r24
    3950:	30 e0       	ldi	r19, 0x00	; 0
    3952:	8c 81       	ldd	r24, Y+4	; 0x04
    3954:	88 2f       	mov	r24, r24
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	a9 01       	movw	r20, r18
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <DIO_enu_GetPinValue+0x144>
    395c:	55 95       	asr	r21
    395e:	47 95       	ror	r20
    3960:	8a 95       	dec	r24
    3962:	e2 f7       	brpl	.-8      	; 0x395c <DIO_enu_GetPinValue+0x140>
    3964:	ca 01       	movw	r24, r20
    3966:	81 70       	andi	r24, 0x01	; 1
    3968:	89 83       	std	Y+1, r24	; 0x01
            if(Local_u8_PinValue == DIO_U8_LOW) {*Copy_pu8_ReturnPinValue = DIO_U8_LOW;}
    396a:	89 81       	ldd	r24, Y+1	; 0x01
    396c:	88 23       	and	r24, r24
    396e:	21 f4       	brne	.+8      	; 0x3978 <DIO_enu_GetPinValue+0x15c>
    3970:	ed 81       	ldd	r30, Y+5	; 0x05
    3972:	fe 81       	ldd	r31, Y+6	; 0x06
    3974:	10 82       	st	Z, r1
    3976:	06 c0       	rjmp	.+12     	; 0x3984 <DIO_enu_GetPinValue+0x168>
            else {*Copy_pu8_ReturnPinValue = DIO_U8_HIGH;}
    3978:	ed 81       	ldd	r30, Y+5	; 0x05
    397a:	fe 81       	ldd	r31, Y+6	; 0x06
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	80 83       	st	Z, r24
    3980:	01 c0       	rjmp	.+2      	; 0x3984 <DIO_enu_GetPinValue+0x168>
            break;
        }
    }
    else
    {
        Local_u8_ErrorState = STATE_NOT_OK;
    3982:	1a 82       	std	Y+2, r1	; 0x02
    }
    return Local_u8_ErrorState;
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3986:	28 96       	adiw	r28, 0x08	; 8
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <DIO_enu_SetPortDirection>:

ES_t DIO_enu_SetPortDirection(u8 Copy_u8_PortId, u8 Copy_u8_PortDirection){
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	cd b7       	in	r28, 0x3d	; 61
    399e:	de b7       	in	r29, 0x3e	; 62
    39a0:	2d 97       	sbiw	r28, 0x0d	; 13
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
    39ac:	8a 83       	std	Y+2, r24	; 0x02
    39ae:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId <= DIO_U8_PORTD) &&((Copy_u8_PortDirection == DIO_U8_OUTPUT)||(Copy_u8_PortDirection == DIO_U8_INPUT))){
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	84 30       	cpi	r24, 0x04	; 4
    39b8:	08 f0       	brcs	.+2      	; 0x39bc <DIO_enu_SetPortDirection+0x24>
    39ba:	84 c0       	rjmp	.+264    	; 0x3ac4 <DIO_enu_SetPortDirection+0x12c>
    39bc:	8b 81       	ldd	r24, Y+3	; 0x03
    39be:	81 30       	cpi	r24, 0x01	; 1
    39c0:	21 f0       	breq	.+8      	; 0x39ca <DIO_enu_SetPortDirection+0x32>
    39c2:	8b 81       	ldd	r24, Y+3	; 0x03
    39c4:	88 23       	and	r24, r24
    39c6:	09 f0       	breq	.+2      	; 0x39ca <DIO_enu_SetPortDirection+0x32>
    39c8:	7d c0       	rjmp	.+250    	; 0x3ac4 <DIO_enu_SetPortDirection+0x12c>
        switch (Copy_u8_PortId)
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	28 2f       	mov	r18, r24
    39ce:	30 e0       	ldi	r19, 0x00	; 0
    39d0:	3d 87       	std	Y+13, r19	; 0x0d
    39d2:	2c 87       	std	Y+12, r18	; 0x0c
    39d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    39d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    39d8:	81 30       	cpi	r24, 0x01	; 1
    39da:	91 05       	cpc	r25, r1
    39dc:	71 f1       	breq	.+92     	; 0x3a3a <DIO_enu_SetPortDirection+0xa2>
    39de:	2c 85       	ldd	r18, Y+12	; 0x0c
    39e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    39e2:	22 30       	cpi	r18, 0x02	; 2
    39e4:	31 05       	cpc	r19, r1
    39e6:	2c f4       	brge	.+10     	; 0x39f2 <DIO_enu_SetPortDirection+0x5a>
    39e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    39ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	69 f0       	breq	.+26     	; 0x3a0a <DIO_enu_SetPortDirection+0x72>
    39f0:	6a c0       	rjmp	.+212    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
    39f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    39f4:	3d 85       	ldd	r19, Y+13	; 0x0d
    39f6:	22 30       	cpi	r18, 0x02	; 2
    39f8:	31 05       	cpc	r19, r1
    39fa:	b1 f1       	breq	.+108    	; 0x3a68 <DIO_enu_SetPortDirection+0xd0>
    39fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    39fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a00:	83 30       	cpi	r24, 0x03	; 3
    3a02:	91 05       	cpc	r25, r1
    3a04:	09 f4       	brne	.+2      	; 0x3a08 <DIO_enu_SetPortDirection+0x70>
    3a06:	47 c0       	rjmp	.+142    	; 0x3a96 <DIO_enu_SetPortDirection+0xfe>
    3a08:	5e c0       	rjmp	.+188    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
        {
        case DIO_U8_PORTA:
            switch (Copy_u8_PortDirection)
    3a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0c:	28 2f       	mov	r18, r24
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	3b 87       	std	Y+11, r19	; 0x0b
    3a12:	2a 87       	std	Y+10, r18	; 0x0a
    3a14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a16:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	59 f0       	breq	.+22     	; 0x3a32 <DIO_enu_SetPortDirection+0x9a>
    3a1c:	2a 85       	ldd	r18, Y+10	; 0x0a
    3a1e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3a20:	21 30       	cpi	r18, 0x01	; 1
    3a22:	31 05       	cpc	r19, r1
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <DIO_enu_SetPortDirection+0x90>
    3a26:	4f c0       	rjmp	.+158    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
            {
            case DIO_U8_OUTPUT: DIO_U8_DDRA_REG = DIO_U8_SETPORT_OUTPUT; break;
    3a28:	ea e3       	ldi	r30, 0x3A	; 58
    3a2a:	f0 e0       	ldi	r31, 0x00	; 0
    3a2c:	8f ef       	ldi	r24, 0xFF	; 255
    3a2e:	80 83       	st	Z, r24
    3a30:	4a c0       	rjmp	.+148    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
            case DIO_U8_INPUT: DIO_U8_DDRA_REG =  DIO_U8_SETPORT_INPUT; break;
    3a32:	ea e3       	ldi	r30, 0x3A	; 58
    3a34:	f0 e0       	ldi	r31, 0x00	; 0
    3a36:	10 82       	st	Z, r1
    3a38:	46 c0       	rjmp	.+140    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
            }
        break;
        case DIO_U8_PORTB:
            switch (Copy_u8_PortDirection)
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	28 2f       	mov	r18, r24
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	39 87       	std	Y+9, r19	; 0x09
    3a42:	28 87       	std	Y+8, r18	; 0x08
    3a44:	88 85       	ldd	r24, Y+8	; 0x08
    3a46:	99 85       	ldd	r25, Y+9	; 0x09
    3a48:	00 97       	sbiw	r24, 0x00	; 0
    3a4a:	51 f0       	breq	.+20     	; 0x3a60 <DIO_enu_SetPortDirection+0xc8>
    3a4c:	28 85       	ldd	r18, Y+8	; 0x08
    3a4e:	39 85       	ldd	r19, Y+9	; 0x09
    3a50:	21 30       	cpi	r18, 0x01	; 1
    3a52:	31 05       	cpc	r19, r1
    3a54:	c1 f5       	brne	.+112    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRB_REG = DIO_U8_SETPORT_OUTPUT; break;
    3a56:	e7 e3       	ldi	r30, 0x37	; 55
    3a58:	f0 e0       	ldi	r31, 0x00	; 0
    3a5a:	8f ef       	ldi	r24, 0xFF	; 255
    3a5c:	80 83       	st	Z, r24
    3a5e:	33 c0       	rjmp	.+102    	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRB_REG =  DIO_U8_SETPORT_INPUT; break;
    3a60:	e7 e3       	ldi	r30, 0x37	; 55
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	10 82       	st	Z, r1
    3a66:	2f c0       	rjmp	.+94     	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                }
         break;
        case DIO_U8_PORTC:
            switch (Copy_u8_PortDirection)
    3a68:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6a:	28 2f       	mov	r18, r24
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	3f 83       	std	Y+7, r19	; 0x07
    3a70:	2e 83       	std	Y+6, r18	; 0x06
    3a72:	8e 81       	ldd	r24, Y+6	; 0x06
    3a74:	9f 81       	ldd	r25, Y+7	; 0x07
    3a76:	00 97       	sbiw	r24, 0x00	; 0
    3a78:	51 f0       	breq	.+20     	; 0x3a8e <DIO_enu_SetPortDirection+0xf6>
    3a7a:	2e 81       	ldd	r18, Y+6	; 0x06
    3a7c:	3f 81       	ldd	r19, Y+7	; 0x07
    3a7e:	21 30       	cpi	r18, 0x01	; 1
    3a80:	31 05       	cpc	r19, r1
    3a82:	09 f5       	brne	.+66     	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_OUTPUT; break;
    3a84:	e4 e3       	ldi	r30, 0x34	; 52
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	80 83       	st	Z, r24
    3a8c:	1c c0       	rjmp	.+56     	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRC_REG = DIO_U8_SETPORT_INPUT; break;
    3a8e:	e4 e3       	ldi	r30, 0x34	; 52
    3a90:	f0 e0       	ldi	r31, 0x00	; 0
    3a92:	10 82       	st	Z, r1
    3a94:	18 c0       	rjmp	.+48     	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        case DIO_U8_PORTD:
            switch (Copy_u8_PortDirection)
    3a96:	8b 81       	ldd	r24, Y+3	; 0x03
    3a98:	28 2f       	mov	r18, r24
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	3d 83       	std	Y+5, r19	; 0x05
    3a9e:	2c 83       	std	Y+4, r18	; 0x04
    3aa0:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa2:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	51 f0       	breq	.+20     	; 0x3abc <DIO_enu_SetPortDirection+0x124>
    3aa8:	2c 81       	ldd	r18, Y+4	; 0x04
    3aaa:	3d 81       	ldd	r19, Y+5	; 0x05
    3aac:	21 30       	cpi	r18, 0x01	; 1
    3aae:	31 05       	cpc	r19, r1
    3ab0:	51 f4       	brne	.+20     	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                {
                case DIO_U8_OUTPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_OUTPUT; break;
    3ab2:	e1 e3       	ldi	r30, 0x31	; 49
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	8f ef       	ldi	r24, 0xFF	; 255
    3ab8:	80 83       	st	Z, r24
    3aba:	05 c0       	rjmp	.+10     	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                case DIO_U8_INPUT: DIO_U8_DDRD_REG = DIO_U8_SETPORT_INPUT; break;
    3abc:	e1 e3       	ldi	r30, 0x31	; 49
    3abe:	f0 e0       	ldi	r31, 0x00	; 0
    3ac0:	10 82       	st	Z, r1
    3ac2:	01 c0       	rjmp	.+2      	; 0x3ac6 <DIO_enu_SetPortDirection+0x12e>
                }
        break;
        }
    }else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3ac4:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ac8:	2d 96       	adiw	r28, 0x0d	; 13
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <DIO_enu_SetPortValue>:

ES_t DIO_enu_SetPortValue(u8 Copy_u8_PortId, u8 Copy_u8_PortValue){
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <DIO_enu_SetPortValue+0x6>
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <DIO_enu_SetPortValue+0x8>
    3ae2:	0f 92       	push	r0
    3ae4:	cd b7       	in	r28, 0x3d	; 61
    3ae6:	de b7       	in	r29, 0x3e	; 62
    3ae8:	8a 83       	std	Y+2, r24	; 0x02
    3aea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = STATE_OK;
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	89 83       	std	Y+1, r24	; 0x01
	    if((Copy_u8_PortId <= DIO_U8_PORTD)){
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	84 30       	cpi	r24, 0x04	; 4
    3af4:	98 f5       	brcc	.+102    	; 0x3b5c <DIO_enu_SetPortValue+0x82>
	        switch (Copy_u8_PortId)
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	28 2f       	mov	r18, r24
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	3d 83       	std	Y+5, r19	; 0x05
    3afe:	2c 83       	std	Y+4, r18	; 0x04
    3b00:	8c 81       	ldd	r24, Y+4	; 0x04
    3b02:	9d 81       	ldd	r25, Y+5	; 0x05
    3b04:	81 30       	cpi	r24, 0x01	; 1
    3b06:	91 05       	cpc	r25, r1
    3b08:	d1 f0       	breq	.+52     	; 0x3b3e <DIO_enu_SetPortValue+0x64>
    3b0a:	2c 81       	ldd	r18, Y+4	; 0x04
    3b0c:	3d 81       	ldd	r19, Y+5	; 0x05
    3b0e:	22 30       	cpi	r18, 0x02	; 2
    3b10:	31 05       	cpc	r19, r1
    3b12:	2c f4       	brge	.+10     	; 0x3b1e <DIO_enu_SetPortValue+0x44>
    3b14:	8c 81       	ldd	r24, Y+4	; 0x04
    3b16:	9d 81       	ldd	r25, Y+5	; 0x05
    3b18:	00 97       	sbiw	r24, 0x00	; 0
    3b1a:	61 f0       	breq	.+24     	; 0x3b34 <DIO_enu_SetPortValue+0x5a>
    3b1c:	20 c0       	rjmp	.+64     	; 0x3b5e <DIO_enu_SetPortValue+0x84>
    3b1e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b20:	3d 81       	ldd	r19, Y+5	; 0x05
    3b22:	22 30       	cpi	r18, 0x02	; 2
    3b24:	31 05       	cpc	r19, r1
    3b26:	81 f0       	breq	.+32     	; 0x3b48 <DIO_enu_SetPortValue+0x6e>
    3b28:	8c 81       	ldd	r24, Y+4	; 0x04
    3b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b2c:	83 30       	cpi	r24, 0x03	; 3
    3b2e:	91 05       	cpc	r25, r1
    3b30:	81 f0       	breq	.+32     	; 0x3b52 <DIO_enu_SetPortValue+0x78>
    3b32:	15 c0       	rjmp	.+42     	; 0x3b5e <DIO_enu_SetPortValue+0x84>
	        {
	        case DIO_U8_PORTA:DIO_U8_PORTA_REG = Copy_u8_PortValue; break;
    3b34:	eb e3       	ldi	r30, 0x3B	; 59
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	8b 81       	ldd	r24, Y+3	; 0x03
    3b3a:	80 83       	st	Z, r24
    3b3c:	10 c0       	rjmp	.+32     	; 0x3b5e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTB:DIO_U8_PORTB_REG = Copy_u8_PortValue; break;
    3b3e:	e8 e3       	ldi	r30, 0x38	; 56
    3b40:	f0 e0       	ldi	r31, 0x00	; 0
    3b42:	8b 81       	ldd	r24, Y+3	; 0x03
    3b44:	80 83       	st	Z, r24
    3b46:	0b c0       	rjmp	.+22     	; 0x3b5e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTC:DIO_U8_PORTC_REG = Copy_u8_PortValue; break;
    3b48:	e5 e3       	ldi	r30, 0x35	; 53
    3b4a:	f0 e0       	ldi	r31, 0x00	; 0
    3b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b4e:	80 83       	st	Z, r24
    3b50:	06 c0       	rjmp	.+12     	; 0x3b5e <DIO_enu_SetPortValue+0x84>
	        case DIO_U8_PORTD:DIO_U8_PORTD_REG = Copy_u8_PortValue; break;
    3b52:	e2 e3       	ldi	r30, 0x32	; 50
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	8b 81       	ldd	r24, Y+3	; 0x03
    3b58:	80 83       	st	Z, r24
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <DIO_enu_SetPortValue+0x84>
	        }
	    }else{
	        Local_u8_ErrorState = STATE_NOT_OK;
    3b5c:	19 82       	std	Y+1, r1	; 0x01
	    }
	    return Local_u8_ErrorState;
    3b5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	0f 90       	pop	r0
    3b68:	0f 90       	pop	r0
    3b6a:	cf 91       	pop	r28
    3b6c:	df 91       	pop	r29
    3b6e:	08 95       	ret

00003b70 <DIO_enu_GetPortValue>:

ES_t DIO_enu_GetPortValue(u8 Copy_u8_PortId, u8 * Copy_u8_ReturnPortValue){
    3b70:	df 93       	push	r29
    3b72:	cf 93       	push	r28
    3b74:	00 d0       	rcall	.+0      	; 0x3b76 <DIO_enu_GetPortValue+0x6>
    3b76:	00 d0       	rcall	.+0      	; 0x3b78 <DIO_enu_GetPortValue+0x8>
    3b78:	00 d0       	rcall	.+0      	; 0x3b7a <DIO_enu_GetPortValue+0xa>
    3b7a:	cd b7       	in	r28, 0x3d	; 61
    3b7c:	de b7       	in	r29, 0x3e	; 62
    3b7e:	8a 83       	std	Y+2, r24	; 0x02
    3b80:	7c 83       	std	Y+4, r23	; 0x04
    3b82:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8_ErrorState = STATE_OK;
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	89 83       	std	Y+1, r24	; 0x01
    if((Copy_u8_PortId<= DIO_U8_PORTD) && (Copy_u8_ReturnPortValue != NULL)){
    3b88:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8a:	84 30       	cpi	r24, 0x04	; 4
    3b8c:	08 f0       	brcs	.+2      	; 0x3b90 <DIO_enu_GetPortValue+0x20>
    3b8e:	3f c0       	rjmp	.+126    	; 0x3c0e <DIO_enu_GetPortValue+0x9e>
    3b90:	8b 81       	ldd	r24, Y+3	; 0x03
    3b92:	9c 81       	ldd	r25, Y+4	; 0x04
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	d9 f1       	breq	.+118    	; 0x3c0e <DIO_enu_GetPortValue+0x9e>
        switch (Copy_u8_PortId)
    3b98:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9a:	28 2f       	mov	r18, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	3e 83       	std	Y+6, r19	; 0x06
    3ba0:	2d 83       	std	Y+5, r18	; 0x05
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	91 05       	cpc	r25, r1
    3baa:	e1 f0       	breq	.+56     	; 0x3be4 <DIO_enu_GetPortValue+0x74>
    3bac:	2d 81       	ldd	r18, Y+5	; 0x05
    3bae:	3e 81       	ldd	r19, Y+6	; 0x06
    3bb0:	22 30       	cpi	r18, 0x02	; 2
    3bb2:	31 05       	cpc	r19, r1
    3bb4:	2c f4       	brge	.+10     	; 0x3bc0 <DIO_enu_GetPortValue+0x50>
    3bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bba:	00 97       	sbiw	r24, 0x00	; 0
    3bbc:	61 f0       	breq	.+24     	; 0x3bd6 <DIO_enu_GetPortValue+0x66>
    3bbe:	28 c0       	rjmp	.+80     	; 0x3c10 <DIO_enu_GetPortValue+0xa0>
    3bc0:	2d 81       	ldd	r18, Y+5	; 0x05
    3bc2:	3e 81       	ldd	r19, Y+6	; 0x06
    3bc4:	22 30       	cpi	r18, 0x02	; 2
    3bc6:	31 05       	cpc	r19, r1
    3bc8:	a1 f0       	breq	.+40     	; 0x3bf2 <DIO_enu_GetPortValue+0x82>
    3bca:	8d 81       	ldd	r24, Y+5	; 0x05
    3bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bce:	83 30       	cpi	r24, 0x03	; 3
    3bd0:	91 05       	cpc	r25, r1
    3bd2:	b1 f0       	breq	.+44     	; 0x3c00 <DIO_enu_GetPortValue+0x90>
    3bd4:	1d c0       	rjmp	.+58     	; 0x3c10 <DIO_enu_GetPortValue+0xa0>
        {
        case DIO_U8_PORTA: *Copy_u8_ReturnPortValue = DIO_U8_PINA_REG;break;
    3bd6:	e9 e3       	ldi	r30, 0x39	; 57
    3bd8:	f0 e0       	ldi	r31, 0x00	; 0
    3bda:	80 81       	ld	r24, Z
    3bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    3bde:	fc 81       	ldd	r31, Y+4	; 0x04
    3be0:	80 83       	st	Z, r24
    3be2:	16 c0       	rjmp	.+44     	; 0x3c10 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTB: *Copy_u8_ReturnPortValue = DIO_U8_PINB_REG;break;
    3be4:	e6 e3       	ldi	r30, 0x36	; 54
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	80 81       	ld	r24, Z
    3bea:	eb 81       	ldd	r30, Y+3	; 0x03
    3bec:	fc 81       	ldd	r31, Y+4	; 0x04
    3bee:	80 83       	st	Z, r24
    3bf0:	0f c0       	rjmp	.+30     	; 0x3c10 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTC: *Copy_u8_ReturnPortValue = DIO_U8_PINC_REG;break;
    3bf2:	e3 e3       	ldi	r30, 0x33	; 51
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	80 81       	ld	r24, Z
    3bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    3bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    3bfc:	80 83       	st	Z, r24
    3bfe:	08 c0       	rjmp	.+16     	; 0x3c10 <DIO_enu_GetPortValue+0xa0>
        case DIO_U8_PORTD: *Copy_u8_ReturnPortValue = DIO_U8_PIND_REG;break;
    3c00:	e0 e3       	ldi	r30, 0x30	; 48
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	80 81       	ld	r24, Z
    3c06:	eb 81       	ldd	r30, Y+3	; 0x03
    3c08:	fc 81       	ldd	r31, Y+4	; 0x04
    3c0a:	80 83       	st	Z, r24
    3c0c:	01 c0       	rjmp	.+2      	; 0x3c10 <DIO_enu_GetPortValue+0xa0>
        }
    }
    else{
        Local_u8_ErrorState = STATE_NOT_OK;
    3c0e:	19 82       	std	Y+1, r1	; 0x01
    }
    return Local_u8_ErrorState;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c12:	26 96       	adiw	r28, 0x06	; 6
    3c14:	0f b6       	in	r0, 0x3f	; 63
    3c16:	f8 94       	cli
    3c18:	de bf       	out	0x3e, r29	; 62
    3c1a:	0f be       	out	0x3f, r0	; 63
    3c1c:	cd bf       	out	0x3d, r28	; 61
    3c1e:	cf 91       	pop	r28
    3c20:	df 91       	pop	r29
    3c22:	08 95       	ret

00003c24 <__udivmodhi4>:
    3c24:	aa 1b       	sub	r26, r26
    3c26:	bb 1b       	sub	r27, r27
    3c28:	51 e1       	ldi	r21, 0x11	; 17
    3c2a:	07 c0       	rjmp	.+14     	; 0x3c3a <__udivmodhi4_ep>

00003c2c <__udivmodhi4_loop>:
    3c2c:	aa 1f       	adc	r26, r26
    3c2e:	bb 1f       	adc	r27, r27
    3c30:	a6 17       	cp	r26, r22
    3c32:	b7 07       	cpc	r27, r23
    3c34:	10 f0       	brcs	.+4      	; 0x3c3a <__udivmodhi4_ep>
    3c36:	a6 1b       	sub	r26, r22
    3c38:	b7 0b       	sbc	r27, r23

00003c3a <__udivmodhi4_ep>:
    3c3a:	88 1f       	adc	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	5a 95       	dec	r21
    3c40:	a9 f7       	brne	.-22     	; 0x3c2c <__udivmodhi4_loop>
    3c42:	80 95       	com	r24
    3c44:	90 95       	com	r25
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	08 95       	ret

00003c4c <__udivmodsi4>:
    3c4c:	a1 e2       	ldi	r26, 0x21	; 33
    3c4e:	1a 2e       	mov	r1, r26
    3c50:	aa 1b       	sub	r26, r26
    3c52:	bb 1b       	sub	r27, r27
    3c54:	fd 01       	movw	r30, r26
    3c56:	0d c0       	rjmp	.+26     	; 0x3c72 <__udivmodsi4_ep>

00003c58 <__udivmodsi4_loop>:
    3c58:	aa 1f       	adc	r26, r26
    3c5a:	bb 1f       	adc	r27, r27
    3c5c:	ee 1f       	adc	r30, r30
    3c5e:	ff 1f       	adc	r31, r31
    3c60:	a2 17       	cp	r26, r18
    3c62:	b3 07       	cpc	r27, r19
    3c64:	e4 07       	cpc	r30, r20
    3c66:	f5 07       	cpc	r31, r21
    3c68:	20 f0       	brcs	.+8      	; 0x3c72 <__udivmodsi4_ep>
    3c6a:	a2 1b       	sub	r26, r18
    3c6c:	b3 0b       	sbc	r27, r19
    3c6e:	e4 0b       	sbc	r30, r20
    3c70:	f5 0b       	sbc	r31, r21

00003c72 <__udivmodsi4_ep>:
    3c72:	66 1f       	adc	r22, r22
    3c74:	77 1f       	adc	r23, r23
    3c76:	88 1f       	adc	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	1a 94       	dec	r1
    3c7c:	69 f7       	brne	.-38     	; 0x3c58 <__udivmodsi4_loop>
    3c7e:	60 95       	com	r22
    3c80:	70 95       	com	r23
    3c82:	80 95       	com	r24
    3c84:	90 95       	com	r25
    3c86:	9b 01       	movw	r18, r22
    3c88:	ac 01       	movw	r20, r24
    3c8a:	bd 01       	movw	r22, r26
    3c8c:	cf 01       	movw	r24, r30
    3c8e:	08 95       	ret

00003c90 <__prologue_saves__>:
    3c90:	2f 92       	push	r2
    3c92:	3f 92       	push	r3
    3c94:	4f 92       	push	r4
    3c96:	5f 92       	push	r5
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	ca 1b       	sub	r28, r26
    3cba:	db 0b       	sbc	r29, r27
    3cbc:	0f b6       	in	r0, 0x3f	; 63
    3cbe:	f8 94       	cli
    3cc0:	de bf       	out	0x3e, r29	; 62
    3cc2:	0f be       	out	0x3f, r0	; 63
    3cc4:	cd bf       	out	0x3d, r28	; 61
    3cc6:	09 94       	ijmp

00003cc8 <__epilogue_restores__>:
    3cc8:	2a 88       	ldd	r2, Y+18	; 0x12
    3cca:	39 88       	ldd	r3, Y+17	; 0x11
    3ccc:	48 88       	ldd	r4, Y+16	; 0x10
    3cce:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3cd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cda:	b9 84       	ldd	r11, Y+9	; 0x09
    3cdc:	c8 84       	ldd	r12, Y+8	; 0x08
    3cde:	df 80       	ldd	r13, Y+7	; 0x07
    3ce0:	ee 80       	ldd	r14, Y+6	; 0x06
    3ce2:	fd 80       	ldd	r15, Y+5	; 0x05
    3ce4:	0c 81       	ldd	r16, Y+4	; 0x04
    3ce6:	1b 81       	ldd	r17, Y+3	; 0x03
    3ce8:	aa 81       	ldd	r26, Y+2	; 0x02
    3cea:	b9 81       	ldd	r27, Y+1	; 0x01
    3cec:	ce 0f       	add	r28, r30
    3cee:	d1 1d       	adc	r29, r1
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	cd bf       	out	0x3d, r28	; 61
    3cfa:	ed 01       	movw	r28, r26
    3cfc:	08 95       	ret

00003cfe <_exit>:
    3cfe:	f8 94       	cli

00003d00 <__stop_program>:
    3d00:	ff cf       	rjmp	.-2      	; 0x3d00 <__stop_program>
